"use strict";
(self["webpackChunkpersonal_website"] = self["webpackChunkpersonal_website"] || []).push([[644],{

/***/ 7771:
/***/ ((__unused_webpack_module, exports) => {

/**
 * @license React
 * scheduler.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



function push(heap, node) {
  var index = heap.length;
  heap.push(node);
  a: for (; 0 < index;) {
    var parentIndex = index - 1 >>> 1,
      parent = heap[parentIndex];
    if (0 < compare(parent, node)) heap[parentIndex] = node, heap[index] = parent, index = parentIndex;else break a;
  }
}
function peek(heap) {
  return 0 === heap.length ? null : heap[0];
}
function pop(heap) {
  if (0 === heap.length) return null;
  var first = heap[0],
    last = heap.pop();
  if (last !== first) {
    heap[0] = last;
    a: for (var index = 0, length = heap.length, halfLength = length >>> 1; index < halfLength;) {
      var leftIndex = 2 * (index + 1) - 1,
        left = heap[leftIndex],
        rightIndex = leftIndex + 1,
        right = heap[rightIndex];
      if (0 > compare(left, last)) rightIndex < length && 0 > compare(right, left) ? (heap[index] = right, heap[rightIndex] = last, index = rightIndex) : (heap[index] = left, heap[leftIndex] = last, index = leftIndex);else if (rightIndex < length && 0 > compare(right, last)) heap[index] = right, heap[rightIndex] = last, index = rightIndex;else break a;
    }
  }
  return first;
}
function compare(a, b) {
  var diff = a.sortIndex - b.sortIndex;
  return 0 !== diff ? diff : a.id - b.id;
}
exports.unstable_now = void 0;
if ("object" === typeof performance && "function" === typeof performance.now) {
  var localPerformance = performance;
  exports.unstable_now = function () {
    return localPerformance.now();
  };
} else {
  var localDate = Date,
    initialTime = localDate.now();
  exports.unstable_now = function () {
    return localDate.now() - initialTime;
  };
}
var taskQueue = [],
  timerQueue = [],
  taskIdCounter = 1,
  currentTask = null,
  currentPriorityLevel = 3,
  isPerformingWork = !1,
  isHostCallbackScheduled = !1,
  isHostTimeoutScheduled = !1,
  localSetTimeout = "function" === typeof setTimeout ? setTimeout : null,
  localClearTimeout = "function" === typeof clearTimeout ? clearTimeout : null,
  localSetImmediate = "undefined" !== typeof setImmediate ? setImmediate : null;
function advanceTimers(currentTime) {
  for (var timer = peek(timerQueue); null !== timer;) {
    if (null === timer.callback) pop(timerQueue);else if (timer.startTime <= currentTime) pop(timerQueue), timer.sortIndex = timer.expirationTime, push(taskQueue, timer);else break;
    timer = peek(timerQueue);
  }
}
function handleTimeout(currentTime) {
  isHostTimeoutScheduled = !1;
  advanceTimers(currentTime);
  if (!isHostCallbackScheduled) if (null !== peek(taskQueue)) isHostCallbackScheduled = !0, requestHostCallback();else {
    var firstTimer = peek(timerQueue);
    null !== firstTimer && requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
  }
}
var isMessageLoopRunning = !1,
  taskTimeoutID = -1,
  frameInterval = 5,
  startTime = -1;
function shouldYieldToHost() {
  return exports.unstable_now() - startTime < frameInterval ? !1 : !0;
}
function performWorkUntilDeadline() {
  if (isMessageLoopRunning) {
    var currentTime = exports.unstable_now();
    startTime = currentTime;
    var hasMoreWork = !0;
    try {
      a: {
        isHostCallbackScheduled = !1;
        isHostTimeoutScheduled && (isHostTimeoutScheduled = !1, localClearTimeout(taskTimeoutID), taskTimeoutID = -1);
        isPerformingWork = !0;
        var previousPriorityLevel = currentPriorityLevel;
        try {
          b: {
            advanceTimers(currentTime);
            for (currentTask = peek(taskQueue); null !== currentTask && !(currentTask.expirationTime > currentTime && shouldYieldToHost());) {
              var callback = currentTask.callback;
              if ("function" === typeof callback) {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var continuationCallback = callback(currentTask.expirationTime <= currentTime);
                currentTime = exports.unstable_now();
                if ("function" === typeof continuationCallback) {
                  currentTask.callback = continuationCallback;
                  advanceTimers(currentTime);
                  hasMoreWork = !0;
                  break b;
                }
                currentTask === peek(taskQueue) && pop(taskQueue);
                advanceTimers(currentTime);
              } else pop(taskQueue);
              currentTask = peek(taskQueue);
            }
            if (null !== currentTask) hasMoreWork = !0;else {
              var firstTimer = peek(timerQueue);
              null !== firstTimer && requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              hasMoreWork = !1;
            }
          }
          break a;
        } finally {
          currentTask = null, currentPriorityLevel = previousPriorityLevel, isPerformingWork = !1;
        }
        hasMoreWork = void 0;
      }
    } finally {
      hasMoreWork ? schedulePerformWorkUntilDeadline() : isMessageLoopRunning = !1;
    }
  }
}
var schedulePerformWorkUntilDeadline;
if ("function" === typeof localSetImmediate) schedulePerformWorkUntilDeadline = function () {
  localSetImmediate(performWorkUntilDeadline);
};else if ("undefined" !== typeof MessageChannel) {
  var channel = new MessageChannel(),
    port = channel.port2;
  channel.port1.onmessage = performWorkUntilDeadline;
  schedulePerformWorkUntilDeadline = function () {
    port.postMessage(null);
  };
} else schedulePerformWorkUntilDeadline = function () {
  localSetTimeout(performWorkUntilDeadline, 0);
};
function requestHostCallback() {
  isMessageLoopRunning || (isMessageLoopRunning = !0, schedulePerformWorkUntilDeadline());
}
function requestHostTimeout(callback, ms) {
  taskTimeoutID = localSetTimeout(function () {
    callback(exports.unstable_now());
  }, ms);
}
exports.unstable_IdlePriority = 5;
exports.unstable_ImmediatePriority = 1;
exports.unstable_LowPriority = 4;
exports.unstable_NormalPriority = 3;
exports.unstable_Profiling = null;
exports.unstable_UserBlockingPriority = 2;
exports.unstable_cancelCallback = function (task) {
  task.callback = null;
};
exports.unstable_continueExecution = function () {
  isHostCallbackScheduled || isPerformingWork || (isHostCallbackScheduled = !0, requestHostCallback());
};
exports.unstable_forceFrameRate = function (fps) {
  0 > fps || 125 < fps ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : frameInterval = 0 < fps ? Math.floor(1e3 / fps) : 5;
};
exports.unstable_getCurrentPriorityLevel = function () {
  return currentPriorityLevel;
};
exports.unstable_getFirstCallbackNode = function () {
  return peek(taskQueue);
};
exports.unstable_next = function (eventHandler) {
  switch (currentPriorityLevel) {
    case 1:
    case 2:
    case 3:
      var priorityLevel = 3;
      break;
    default:
      priorityLevel = currentPriorityLevel;
  }
  var previousPriorityLevel = currentPriorityLevel;
  currentPriorityLevel = priorityLevel;
  try {
    return eventHandler();
  } finally {
    currentPriorityLevel = previousPriorityLevel;
  }
};
exports.unstable_pauseExecution = function () {};
exports.unstable_requestPaint = function () {};
exports.unstable_runWithPriority = function (priorityLevel, eventHandler) {
  switch (priorityLevel) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      break;
    default:
      priorityLevel = 3;
  }
  var previousPriorityLevel = currentPriorityLevel;
  currentPriorityLevel = priorityLevel;
  try {
    return eventHandler();
  } finally {
    currentPriorityLevel = previousPriorityLevel;
  }
};
exports.unstable_scheduleCallback = function (priorityLevel, callback, options) {
  var currentTime = exports.unstable_now();
  "object" === typeof options && null !== options ? (options = options.delay, options = "number" === typeof options && 0 < options ? currentTime + options : currentTime) : options = currentTime;
  switch (priorityLevel) {
    case 1:
      var timeout = -1;
      break;
    case 2:
      timeout = 250;
      break;
    case 5:
      timeout = 1073741823;
      break;
    case 4:
      timeout = 1e4;
      break;
    default:
      timeout = 5e3;
  }
  timeout = options + timeout;
  priorityLevel = {
    id: taskIdCounter++,
    callback: callback,
    priorityLevel: priorityLevel,
    startTime: options,
    expirationTime: timeout,
    sortIndex: -1
  };
  options > currentTime ? (priorityLevel.sortIndex = options, push(timerQueue, priorityLevel), null === peek(taskQueue) && priorityLevel === peek(timerQueue) && (isHostTimeoutScheduled ? (localClearTimeout(taskTimeoutID), taskTimeoutID = -1) : isHostTimeoutScheduled = !0, requestHostTimeout(handleTimeout, options - currentTime))) : (priorityLevel.sortIndex = timeout, push(taskQueue, priorityLevel), isHostCallbackScheduled || isPerformingWork || (isHostCallbackScheduled = !0, requestHostCallback()));
  return priorityLevel;
};
exports.unstable_shouldYield = shouldYieldToHost;
exports.unstable_wrapCallback = function (callback) {
  var parentPriorityLevel = currentPriorityLevel;
  return function () {
    var previousPriorityLevel = currentPriorityLevel;
    currentPriorityLevel = parentPriorityLevel;
    try {
      return callback.apply(this, arguments);
    } finally {
      currentPriorityLevel = previousPriorityLevel;
    }
  };
};

/***/ }),

/***/ 3664:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



if (true) {
  module.exports = __webpack_require__(7771);
} else {}

/***/ }),

/***/ 2347:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7073);
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9471);
/* harmony import */ var _ThemeProvider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(16);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(7671);
"use client";





const Badge = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({
  bsPrefix,
  bg = 'primary',
  pill = false,
  text,
  className,
  as: Component = 'span',
  ...props
}, ref) => {
  const prefix = (0,_ThemeProvider__WEBPACK_IMPORTED_MODULE_3__/* .useBootstrapPrefix */ .oU)(bsPrefix, 'badge');
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Component, {
    ref: ref,
    ...props,
    className: classnames__WEBPACK_IMPORTED_MODULE_0___default()(className, prefix, pill && `rounded-pill`, text && `text-${text}`, bg && `bg-${bg}`)
  });
});
Badge.displayName = 'Badge';
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Badge);

/***/ }),

/***/ 494:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* unused harmony export useCol */
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7073);
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9471);
/* harmony import */ var _ThemeProvider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(16);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(7671);
"use client";





function useCol({
  as,
  bsPrefix,
  className,
  ...props
}) {
  bsPrefix = (0,_ThemeProvider__WEBPACK_IMPORTED_MODULE_3__/* .useBootstrapPrefix */ .oU)(bsPrefix, 'col');
  const breakpoints = (0,_ThemeProvider__WEBPACK_IMPORTED_MODULE_3__/* .useBootstrapBreakpoints */ .gy)();
  const minBreakpoint = (0,_ThemeProvider__WEBPACK_IMPORTED_MODULE_3__/* .useBootstrapMinBreakpoint */ .Jm)();
  const spans = [];
  const classes = [];
  breakpoints.forEach(brkPoint => {
    const propValue = props[brkPoint];
    delete props[brkPoint];
    let span;
    let offset;
    let order;
    if (typeof propValue === 'object' && propValue != null) {
      ({
        span,
        offset,
        order
      } = propValue);
    } else {
      span = propValue;
    }
    const infix = brkPoint !== minBreakpoint ? `-${brkPoint}` : '';
    if (span) spans.push(span === true ? `${bsPrefix}${infix}` : `${bsPrefix}${infix}-${span}`);
    if (order != null) classes.push(`order${infix}-${order}`);
    if (offset != null) classes.push(`offset${infix}-${offset}`);
  });
  return [{
    ...props,
    className: classnames__WEBPACK_IMPORTED_MODULE_0___default()(className, ...spans, ...classes)
  }, {
    as,
    bsPrefix,
    spans
  }];
}
const Col = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
(props, ref) => {
  const [{
    className,
    ...colProps
  }, {
    as: Component = 'div',
    bsPrefix,
    spans
  }] = useCol(props);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Component, {
    ...colProps,
    ref: ref,
    className: classnames__WEBPACK_IMPORTED_MODULE_0___default()(className, !spans.length && bsPrefix)
  });
});
Col.displayName = 'Col';
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Col);

/***/ }),

/***/ 4999:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  A: () => (/* binding */ esm_Fade)
});

// EXTERNAL MODULE: ./node_modules/classnames/index.js
var classnames = __webpack_require__(7073);
var classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);
// EXTERNAL MODULE: ./node_modules/react/index.js
var react = __webpack_require__(9471);
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
var objectWithoutPropertiesLoose = __webpack_require__(1098);
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js + 1 modules
var inheritsLoose = __webpack_require__(8237);
// EXTERNAL MODULE: ./node_modules/react-dom/index.js
var react_dom = __webpack_require__(9834);
;// ./node_modules/react-transition-group/esm/config.js
/* harmony default export */ const config = ({
  disabled: false
});
;// ./node_modules/react-transition-group/esm/TransitionGroupContext.js

/* harmony default export */ const TransitionGroupContext = (react.createContext(null));
;// ./node_modules/react-transition-group/esm/utils/reflow.js
var forceReflow = function forceReflow(node) {
  return node.scrollTop;
};
;// ./node_modules/react-transition-group/esm/Transition.js









var UNMOUNTED = 'unmounted';
var EXITED = 'exited';
var ENTERING = 'entering';
var ENTERED = 'entered';
var EXITING = 'exiting';
/**
 * The Transition component lets you describe a transition from one component
 * state to another _over time_ with a simple declarative API. Most commonly
 * it's used to animate the mounting and unmounting of a component, but can also
 * be used to describe in-place transition states as well.
 *
 * ---
 *
 * **Note**: `Transition` is a platform-agnostic base component. If you're using
 * transitions in CSS, you'll probably want to use
 * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)
 * instead. It inherits all the features of `Transition`, but contains
 * additional features necessary to play nice with CSS transitions (hence the
 * name of the component).
 *
 * ---
 *
 * By default the `Transition` component does not alter the behavior of the
 * component it renders, it only tracks "enter" and "exit" states for the
 * components. It's up to you to give meaning and effect to those states. For
 * example we can add styles to a component when it enters or exits:
 *
 * ```jsx
 * import { Transition } from 'react-transition-group';
 *
 * const duration = 300;
 *
 * const defaultStyle = {
 *   transition: `opacity ${duration}ms ease-in-out`,
 *   opacity: 0,
 * }
 *
 * const transitionStyles = {
 *   entering: { opacity: 1 },
 *   entered:  { opacity: 1 },
 *   exiting:  { opacity: 0 },
 *   exited:  { opacity: 0 },
 * };
 *
 * const Fade = ({ in: inProp }) => (
 *   <Transition in={inProp} timeout={duration}>
 *     {state => (
 *       <div style={{
 *         ...defaultStyle,
 *         ...transitionStyles[state]
 *       }}>
 *         I'm a fade Transition!
 *       </div>
 *     )}
 *   </Transition>
 * );
 * ```
 *
 * There are 4 main states a Transition can be in:
 *  - `'entering'`
 *  - `'entered'`
 *  - `'exiting'`
 *  - `'exited'`
 *
 * Transition state is toggled via the `in` prop. When `true` the component
 * begins the "Enter" stage. During this stage, the component will shift from
 * its current transition state, to `'entering'` for the duration of the
 * transition and then to the `'entered'` stage once it's complete. Let's take
 * the following example (we'll use the
 * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):
 *
 * ```jsx
 * function App() {
 *   const [inProp, setInProp] = useState(false);
 *   return (
 *     <div>
 *       <Transition in={inProp} timeout={500}>
 *         {state => (
 *           // ...
 *         )}
 *       </Transition>
 *       <button onClick={() => setInProp(true)}>
 *         Click to Enter
 *       </button>
 *     </div>
 *   );
 * }
 * ```
 *
 * When the button is clicked the component will shift to the `'entering'` state
 * and stay there for 500ms (the value of `timeout`) before it finally switches
 * to `'entered'`.
 *
 * When `in` is `false` the same thing happens except the state moves from
 * `'exiting'` to `'exited'`.
 */

var Transition = /*#__PURE__*/function (_React$Component) {
  (0,inheritsLoose/* default */.A)(Transition, _React$Component);
  function Transition(props, context) {
    var _this;
    _this = _React$Component.call(this, props, context) || this;
    var parentGroup = context; // In the context of a TransitionGroup all enters are really appears

    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
    var initialStatus;
    _this.appearStatus = null;
    if (props.in) {
      if (appear) {
        initialStatus = EXITED;
        _this.appearStatus = ENTERING;
      } else {
        initialStatus = ENTERED;
      }
    } else {
      if (props.unmountOnExit || props.mountOnEnter) {
        initialStatus = UNMOUNTED;
      } else {
        initialStatus = EXITED;
      }
    }
    _this.state = {
      status: initialStatus
    };
    _this.nextCallback = null;
    return _this;
  }
  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
    var nextIn = _ref.in;
    if (nextIn && prevState.status === UNMOUNTED) {
      return {
        status: EXITED
      };
    }
    return null;
  } // getSnapshotBeforeUpdate(prevProps) {
  //   let nextStatus = null
  //   if (prevProps !== this.props) {
  //     const { status } = this.state
  //     if (this.props.in) {
  //       if (status !== ENTERING && status !== ENTERED) {
  //         nextStatus = ENTERING
  //       }
  //     } else {
  //       if (status === ENTERING || status === ENTERED) {
  //         nextStatus = EXITING
  //       }
  //     }
  //   }
  //   return { nextStatus }
  // }
  ;
  var _proto = Transition.prototype;
  _proto.componentDidMount = function componentDidMount() {
    this.updateStatus(true, this.appearStatus);
  };
  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var nextStatus = null;
    if (prevProps !== this.props) {
      var status = this.state.status;
      if (this.props.in) {
        if (status !== ENTERING && status !== ENTERED) {
          nextStatus = ENTERING;
        }
      } else {
        if (status === ENTERING || status === ENTERED) {
          nextStatus = EXITING;
        }
      }
    }
    this.updateStatus(false, nextStatus);
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    this.cancelNextCallback();
  };
  _proto.getTimeouts = function getTimeouts() {
    var timeout = this.props.timeout;
    var exit, enter, appear;
    exit = enter = appear = timeout;
    if (timeout != null && typeof timeout !== 'number') {
      exit = timeout.exit;
      enter = timeout.enter; // TODO: remove fallback for next major

      appear = timeout.appear !== undefined ? timeout.appear : enter;
    }
    return {
      exit: exit,
      enter: enter,
      appear: appear
    };
  };
  _proto.updateStatus = function updateStatus(mounting, nextStatus) {
    if (mounting === void 0) {
      mounting = false;
    }
    if (nextStatus !== null) {
      // nextStatus will always be ENTERING or EXITING.
      this.cancelNextCallback();
      if (nextStatus === ENTERING) {
        if (this.props.unmountOnExit || this.props.mountOnEnter) {
          var node = this.props.nodeRef ? this.props.nodeRef.current : react_dom.findDOMNode(this); // https://github.com/reactjs/react-transition-group/pull/749
          // With unmountOnExit or mountOnEnter, the enter animation should happen at the transition between `exited` and `entering`.
          // To make the animation happen,  we have to separate each rendering and avoid being processed as batched.

          if (node) forceReflow(node);
        }
        this.performEnter(mounting);
      } else {
        this.performExit();
      }
    } else if (this.props.unmountOnExit && this.state.status === EXITED) {
      this.setState({
        status: UNMOUNTED
      });
    }
  };
  _proto.performEnter = function performEnter(mounting) {
    var _this2 = this;
    var enter = this.props.enter;
    var appearing = this.context ? this.context.isMounting : mounting;
    var _ref2 = this.props.nodeRef ? [appearing] : [react_dom.findDOMNode(this), appearing],
      maybeNode = _ref2[0],
      maybeAppearing = _ref2[1];
    var timeouts = this.getTimeouts();
    var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED
    // if we are mounting and running this it means appear _must_ be set

    if (!mounting && !enter || config.disabled) {
      this.safeSetState({
        status: ENTERED
      }, function () {
        _this2.props.onEntered(maybeNode);
      });
      return;
    }
    this.props.onEnter(maybeNode, maybeAppearing);
    this.safeSetState({
      status: ENTERING
    }, function () {
      _this2.props.onEntering(maybeNode, maybeAppearing);
      _this2.onTransitionEnd(enterTimeout, function () {
        _this2.safeSetState({
          status: ENTERED
        }, function () {
          _this2.props.onEntered(maybeNode, maybeAppearing);
        });
      });
    });
  };
  _proto.performExit = function performExit() {
    var _this3 = this;
    var exit = this.props.exit;
    var timeouts = this.getTimeouts();
    var maybeNode = this.props.nodeRef ? undefined : react_dom.findDOMNode(this); // no exit animation skip right to EXITED

    if (!exit || config.disabled) {
      this.safeSetState({
        status: EXITED
      }, function () {
        _this3.props.onExited(maybeNode);
      });
      return;
    }
    this.props.onExit(maybeNode);
    this.safeSetState({
      status: EXITING
    }, function () {
      _this3.props.onExiting(maybeNode);
      _this3.onTransitionEnd(timeouts.exit, function () {
        _this3.safeSetState({
          status: EXITED
        }, function () {
          _this3.props.onExited(maybeNode);
        });
      });
    });
  };
  _proto.cancelNextCallback = function cancelNextCallback() {
    if (this.nextCallback !== null) {
      this.nextCallback.cancel();
      this.nextCallback = null;
    }
  };
  _proto.safeSetState = function safeSetState(nextState, callback) {
    // This shouldn't be necessary, but there are weird race conditions with
    // setState callbacks and unmounting in testing, so always make sure that
    // we can cancel any pending setState callbacks after we unmount.
    callback = this.setNextCallback(callback);
    this.setState(nextState, callback);
  };
  _proto.setNextCallback = function setNextCallback(callback) {
    var _this4 = this;
    var active = true;
    this.nextCallback = function (event) {
      if (active) {
        active = false;
        _this4.nextCallback = null;
        callback(event);
      }
    };
    this.nextCallback.cancel = function () {
      active = false;
    };
    return this.nextCallback;
  };
  _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {
    this.setNextCallback(handler);
    var node = this.props.nodeRef ? this.props.nodeRef.current : react_dom.findDOMNode(this);
    var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;
    if (!node || doesNotHaveTimeoutOrListener) {
      setTimeout(this.nextCallback, 0);
      return;
    }
    if (this.props.addEndListener) {
      var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback],
        maybeNode = _ref3[0],
        maybeNextCallback = _ref3[1];
      this.props.addEndListener(maybeNode, maybeNextCallback);
    }
    if (timeout != null) {
      setTimeout(this.nextCallback, timeout);
    }
  };
  _proto.render = function render() {
    var status = this.state.status;
    if (status === UNMOUNTED) {
      return null;
    }
    var _this$props = this.props,
      children = _this$props.children,
      _in = _this$props.in,
      _mountOnEnter = _this$props.mountOnEnter,
      _unmountOnExit = _this$props.unmountOnExit,
      _appear = _this$props.appear,
      _enter = _this$props.enter,
      _exit = _this$props.exit,
      _timeout = _this$props.timeout,
      _addEndListener = _this$props.addEndListener,
      _onEnter = _this$props.onEnter,
      _onEntering = _this$props.onEntering,
      _onEntered = _this$props.onEntered,
      _onExit = _this$props.onExit,
      _onExiting = _this$props.onExiting,
      _onExited = _this$props.onExited,
      _nodeRef = _this$props.nodeRef,
      childProps = (0,objectWithoutPropertiesLoose/* default */.A)(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);
    return (/*#__PURE__*/
      // allows for nested Transitions
      react.createElement(TransitionGroupContext.Provider, {
        value: null
      }, typeof children === 'function' ? children(status, childProps) : react.cloneElement(react.Children.only(children), childProps))
    );
  };
  return Transition;
}(react.Component);
Transition.contextType = TransitionGroupContext;
Transition.propTypes =  false ? 0 : {}; // Name the function so it is clearer in the documentation

function noop() {}
Transition.defaultProps = {
  in: false,
  mountOnEnter: false,
  unmountOnExit: false,
  appear: false,
  enter: true,
  exit: true,
  onEnter: noop,
  onEntering: noop,
  onEntered: noop,
  onExit: noop,
  onExiting: noop,
  onExited: noop
};
Transition.UNMOUNTED = UNMOUNTED;
Transition.EXITED = EXITED;
Transition.ENTERING = ENTERING;
Transition.ENTERED = ENTERED;
Transition.EXITING = EXITING;
/* harmony default export */ const esm_Transition = (Transition);
// EXTERNAL MODULE: ./node_modules/@restart/ui/esm/utils.js
var utils = __webpack_require__(9083);
// EXTERNAL MODULE: ./node_modules/dom-helpers/esm/css.js + 5 modules
var css = __webpack_require__(4785);
// EXTERNAL MODULE: ./node_modules/dom-helpers/esm/transitionEnd.js + 1 modules
var transitionEnd = __webpack_require__(2682);
;// ./node_modules/react-bootstrap/esm/transitionEndListener.js


function parseDuration(node, property) {
  const str = (0,css/* default */.A)(node, property) || '';
  const mult = str.indexOf('ms') === -1 ? 1000 : 1;
  return parseFloat(str) * mult;
}
function transitionEndListener(element, handler) {
  const duration = parseDuration(element, 'transitionDuration');
  const delay = parseDuration(element, 'transitionDelay');
  const remove = (0,transitionEnd/* default */.A)(element, e => {
    if (e.target === element) {
      remove();
      handler(e);
    }
  }, duration + delay);
}
;// ./node_modules/react-bootstrap/esm/triggerBrowserReflow.js
// reading a dimension prop will cause the browser to recalculate,
// which will let our animations work
function triggerBrowserReflow(node) {
  // eslint-disable-next-line @typescript-eslint/no-unused-expressions
  node.offsetHeight;
}
// EXTERNAL MODULE: ./node_modules/@restart/hooks/esm/useMergedRefs.js
var useMergedRefs = __webpack_require__(1057);
;// ./node_modules/react-bootstrap/esm/safeFindDOMNode.js

function safeFindDOMNode(componentOrElement) {
  if (componentOrElement && 'setState' in componentOrElement) {
    return react_dom.findDOMNode(componentOrElement);
  }
  return componentOrElement != null ? componentOrElement : null;
}
// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js
var jsx_runtime = __webpack_require__(7671);
;// ./node_modules/react-bootstrap/esm/TransitionWrapper.js
"use client";






// Normalizes Transition callbacks when nodeRef is used.
const TransitionWrapper = /*#__PURE__*/react.forwardRef(({
  onEnter,
  onEntering,
  onEntered,
  onExit,
  onExiting,
  onExited,
  addEndListener,
  children,
  childRef,
  ...props
}, ref) => {
  const nodeRef = (0,react.useRef)(null);
  const mergedRef = (0,useMergedRefs/* default */.A)(nodeRef, childRef);
  const attachRef = r => {
    mergedRef(safeFindDOMNode(r));
  };
  const normalize = callback => param => {
    if (callback && nodeRef.current) {
      callback(nodeRef.current, param);
    }
  };

  /* eslint-disable react-hooks/exhaustive-deps */
  const handleEnter = (0,react.useCallback)(normalize(onEnter), [onEnter]);
  const handleEntering = (0,react.useCallback)(normalize(onEntering), [onEntering]);
  const handleEntered = (0,react.useCallback)(normalize(onEntered), [onEntered]);
  const handleExit = (0,react.useCallback)(normalize(onExit), [onExit]);
  const handleExiting = (0,react.useCallback)(normalize(onExiting), [onExiting]);
  const handleExited = (0,react.useCallback)(normalize(onExited), [onExited]);
  const handleAddEndListener = (0,react.useCallback)(normalize(addEndListener), [addEndListener]);
  /* eslint-enable react-hooks/exhaustive-deps */

  return /*#__PURE__*/(0,jsx_runtime.jsx)(esm_Transition, {
    ref: ref,
    ...props,
    onEnter: handleEnter,
    onEntered: handleEntered,
    onEntering: handleEntering,
    onExit: handleExit,
    onExited: handleExited,
    onExiting: handleExiting,
    addEndListener: handleAddEndListener,
    nodeRef: nodeRef,
    children: typeof children === 'function' ? (status, innerProps) =>
    // TODO: Types for RTG missing innerProps, so need to cast.
    children(status, {
      ...innerProps,
      ref: attachRef
    }) : /*#__PURE__*/react.cloneElement(children, {
      ref: attachRef
    })
  });
});
/* harmony default export */ const esm_TransitionWrapper = (TransitionWrapper);
;// ./node_modules/react-bootstrap/esm/Fade.js









const fadeStyles = {
  [ENTERING]: 'show',
  [ENTERED]: 'show'
};
const Fade = /*#__PURE__*/react.forwardRef(({
  className,
  children,
  transitionClasses = {},
  onEnter,
  ...rest
}, ref) => {
  const props = {
    in: false,
    timeout: 300,
    mountOnEnter: false,
    unmountOnExit: false,
    appear: false,
    ...rest
  };
  const handleEnter = (0,react.useCallback)((node, isAppearing) => {
    triggerBrowserReflow(node);
    onEnter == null || onEnter(node, isAppearing);
  }, [onEnter]);
  return /*#__PURE__*/(0,jsx_runtime.jsx)(esm_TransitionWrapper, {
    ref: ref,
    addEndListener: transitionEndListener,
    ...props,
    onEnter: handleEnter,
    childRef: (0,utils/* getChildRef */.am)(children),
    children: (status, innerProps) => /*#__PURE__*/react.cloneElement(children, {
      ...innerProps,
      className: classnames_default()('fade', className, children.props.className, fadeStyles[status], transitionClasses[status])
    })
  });
});
Fade.displayName = 'Fade';
/* harmony default export */ const esm_Fade = (Fade);

/***/ }),

/***/ 7458:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  A: () => (/* binding */ esm_Modal)
});

// EXTERNAL MODULE: ./node_modules/classnames/index.js
var classnames = __webpack_require__(7073);
var classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);
// EXTERNAL MODULE: ./node_modules/dom-helpers/esm/addEventListener.js
var addEventListener = __webpack_require__(5887);
// EXTERNAL MODULE: ./node_modules/dom-helpers/esm/canUseDOM.js
var canUseDOM = __webpack_require__(4379);
// EXTERNAL MODULE: ./node_modules/dom-helpers/esm/ownerDocument.js
var ownerDocument = __webpack_require__(7746);
// EXTERNAL MODULE: ./node_modules/dom-helpers/esm/removeEventListener.js
var removeEventListener = __webpack_require__(5888);
// EXTERNAL MODULE: ./node_modules/dom-helpers/esm/scrollbarSize.js
var scrollbarSize = __webpack_require__(6003);
// EXTERNAL MODULE: ./node_modules/@restart/hooks/esm/useCallbackRef.js
var useCallbackRef = __webpack_require__(7079);
// EXTERNAL MODULE: ./node_modules/@restart/hooks/esm/useEventCallback.js + 1 modules
var useEventCallback = __webpack_require__(7074);
// EXTERNAL MODULE: ./node_modules/@restart/hooks/esm/useMergedRefs.js
var useMergedRefs = __webpack_require__(1057);
// EXTERNAL MODULE: ./node_modules/@restart/hooks/esm/useWillUnmount.js + 1 modules
var useWillUnmount = __webpack_require__(9155);
// EXTERNAL MODULE: ./node_modules/dom-helpers/esm/transitionEnd.js + 1 modules
var transitionEnd = __webpack_require__(2682);
// EXTERNAL MODULE: ./node_modules/react/index.js
var react = __webpack_require__(9471);
// EXTERNAL MODULE: ./node_modules/@restart/ui/esm/Modal.js + 12 modules
var Modal = __webpack_require__(5498);
// EXTERNAL MODULE: ./node_modules/dom-helpers/esm/addClass.js + 1 modules
var addClass = __webpack_require__(5018);
// EXTERNAL MODULE: ./node_modules/dom-helpers/esm/css.js + 5 modules
var css = __webpack_require__(4785);
// EXTERNAL MODULE: ./node_modules/dom-helpers/esm/querySelectorAll.js
var querySelectorAll = __webpack_require__(6766);
// EXTERNAL MODULE: ./node_modules/dom-helpers/esm/removeClass.js
var removeClass = __webpack_require__(4720);
// EXTERNAL MODULE: ./node_modules/@restart/ui/esm/ModalManager.js + 2 modules
var ModalManager = __webpack_require__(1397);
;// ./node_modules/react-bootstrap/esm/BootstrapModalManager.js





const Selector = {
  FIXED_CONTENT: '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top',
  STICKY_CONTENT: '.sticky-top',
  NAVBAR_TOGGLER: '.navbar-toggler'
};
class BootstrapModalManager extends ModalManager/* default */.A {
  adjustAndStore(prop, element, adjust) {
    const actual = element.style[prop];
    // TODO: DOMStringMap and CSSStyleDeclaration aren't strictly compatible
    // @ts-ignore
    element.dataset[prop] = actual;
    (0,css/* default */.A)(element, {
      [prop]: `${parseFloat((0,css/* default */.A)(element, prop)) + adjust}px`
    });
  }
  restore(prop, element) {
    const value = element.dataset[prop];
    if (value !== undefined) {
      delete element.dataset[prop];
      (0,css/* default */.A)(element, {
        [prop]: value
      });
    }
  }
  setContainerStyle(containerState) {
    super.setContainerStyle(containerState);
    const container = this.getElement();
    (0,addClass/* default */.A)(container, 'modal-open');
    if (!containerState.scrollBarWidth) return;
    const paddingProp = this.isRTL ? 'paddingLeft' : 'paddingRight';
    const marginProp = this.isRTL ? 'marginLeft' : 'marginRight';
    (0,querySelectorAll/* default */.A)(container, Selector.FIXED_CONTENT).forEach(el => this.adjustAndStore(paddingProp, el, containerState.scrollBarWidth));
    (0,querySelectorAll/* default */.A)(container, Selector.STICKY_CONTENT).forEach(el => this.adjustAndStore(marginProp, el, -containerState.scrollBarWidth));
    (0,querySelectorAll/* default */.A)(container, Selector.NAVBAR_TOGGLER).forEach(el => this.adjustAndStore(marginProp, el, containerState.scrollBarWidth));
  }
  removeContainerStyle(containerState) {
    super.removeContainerStyle(containerState);
    const container = this.getElement();
    (0,removeClass/* default */.A)(container, 'modal-open');
    const paddingProp = this.isRTL ? 'paddingLeft' : 'paddingRight';
    const marginProp = this.isRTL ? 'marginLeft' : 'marginRight';
    (0,querySelectorAll/* default */.A)(container, Selector.FIXED_CONTENT).forEach(el => this.restore(paddingProp, el));
    (0,querySelectorAll/* default */.A)(container, Selector.STICKY_CONTENT).forEach(el => this.restore(marginProp, el));
    (0,querySelectorAll/* default */.A)(container, Selector.NAVBAR_TOGGLER).forEach(el => this.restore(marginProp, el));
  }
}
let sharedManager;
function getSharedManager(options) {
  if (!sharedManager) sharedManager = new BootstrapModalManager(options);
  return sharedManager;
}
/* harmony default export */ const esm_BootstrapModalManager = ((/* unused pure expression or super */ null && (BootstrapModalManager)));
// EXTERNAL MODULE: ./node_modules/react-bootstrap/esm/Fade.js + 8 modules
var Fade = __webpack_require__(4999);
// EXTERNAL MODULE: ./node_modules/react-bootstrap/esm/ThemeProvider.js
var ThemeProvider = __webpack_require__(16);
// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js
var jsx_runtime = __webpack_require__(7671);
;// ./node_modules/react-bootstrap/esm/ModalBody.js
"use client";





const ModalBody = /*#__PURE__*/react.forwardRef(({
  className,
  bsPrefix,
  as: Component = 'div',
  ...props
}, ref) => {
  bsPrefix = (0,ThemeProvider/* useBootstrapPrefix */.oU)(bsPrefix, 'modal-body');
  return /*#__PURE__*/(0,jsx_runtime.jsx)(Component, {
    ref: ref,
    className: classnames_default()(className, bsPrefix),
    ...props
  });
});
ModalBody.displayName = 'ModalBody';
/* harmony default export */ const esm_ModalBody = (ModalBody);
;// ./node_modules/react-bootstrap/esm/ModalContext.js
"use client";


const ModalContext = /*#__PURE__*/react.createContext({
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  onHide() {}
});
/* harmony default export */ const esm_ModalContext = (ModalContext);
;// ./node_modules/react-bootstrap/esm/ModalDialog.js
"use client";





const ModalDialog = /*#__PURE__*/react.forwardRef(({
  bsPrefix,
  className,
  contentClassName,
  centered,
  size,
  fullscreen,
  children,
  scrollable,
  ...props
}, ref) => {
  bsPrefix = (0,ThemeProvider/* useBootstrapPrefix */.oU)(bsPrefix, 'modal');
  const dialogClass = `${bsPrefix}-dialog`;
  const fullScreenClass = typeof fullscreen === 'string' ? `${bsPrefix}-fullscreen-${fullscreen}` : `${bsPrefix}-fullscreen`;
  return /*#__PURE__*/(0,jsx_runtime.jsx)("div", {
    ...props,
    ref: ref,
    className: classnames_default()(dialogClass, className, size && `${bsPrefix}-${size}`, centered && `${dialogClass}-centered`, scrollable && `${dialogClass}-scrollable`, fullscreen && fullScreenClass),
    children: /*#__PURE__*/(0,jsx_runtime.jsx)("div", {
      className: classnames_default()(`${bsPrefix}-content`, contentClassName),
      children: children
    })
  });
});
ModalDialog.displayName = 'ModalDialog';
/* harmony default export */ const esm_ModalDialog = (ModalDialog);
;// ./node_modules/react-bootstrap/esm/ModalFooter.js
"use client";





const ModalFooter = /*#__PURE__*/react.forwardRef(({
  className,
  bsPrefix,
  as: Component = 'div',
  ...props
}, ref) => {
  bsPrefix = (0,ThemeProvider/* useBootstrapPrefix */.oU)(bsPrefix, 'modal-footer');
  return /*#__PURE__*/(0,jsx_runtime.jsx)(Component, {
    ref: ref,
    className: classnames_default()(className, bsPrefix),
    ...props
  });
});
ModalFooter.displayName = 'ModalFooter';
/* harmony default export */ const esm_ModalFooter = (ModalFooter);
// EXTERNAL MODULE: ./node_modules/prop-types/index.js
var prop_types = __webpack_require__(8713);
var prop_types_default = /*#__PURE__*/__webpack_require__.n(prop_types);
;// ./node_modules/react-bootstrap/esm/CloseButton.js




const propTypes = {
  /** An accessible label indicating the relevant information about the Close Button. */
  'aria-label': (prop_types_default()).string,
  /** A callback fired after the Close Button is clicked. */
  onClick: (prop_types_default()).func,
  /**
   * Render different color variant for the button.
   *
   * Omitting this will render the default dark color.
   */
  variant: prop_types_default().oneOf(['white'])
};
const CloseButton = /*#__PURE__*/react.forwardRef(({
  className,
  variant,
  'aria-label': ariaLabel = 'Close',
  ...props
}, ref) => /*#__PURE__*/(0,jsx_runtime.jsx)("button", {
  ref: ref,
  type: "button",
  className: classnames_default()('btn-close', variant && `btn-close-${variant}`, className),
  "aria-label": ariaLabel,
  ...props
}));
CloseButton.displayName = 'CloseButton';
CloseButton.propTypes = propTypes;
/* harmony default export */ const esm_CloseButton = (CloseButton);
;// ./node_modules/react-bootstrap/esm/AbstractModalHeader.js
"use client";








const AbstractModalHeader = /*#__PURE__*/react.forwardRef(({
  closeLabel = 'Close',
  closeVariant,
  closeButton = false,
  onHide,
  children,
  ...props
}, ref) => {
  const context = (0,react.useContext)(esm_ModalContext);
  const handleClick = (0,useEventCallback/* default */.A)(() => {
    context == null || context.onHide();
    onHide == null || onHide();
  });
  return /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {
    ref: ref,
    ...props,
    children: [children, closeButton && /*#__PURE__*/(0,jsx_runtime.jsx)(esm_CloseButton, {
      "aria-label": closeLabel,
      variant: closeVariant,
      onClick: handleClick
    })]
  });
});
/* harmony default export */ const esm_AbstractModalHeader = (AbstractModalHeader);
;// ./node_modules/react-bootstrap/esm/ModalHeader.js
"use client";






const ModalHeader = /*#__PURE__*/react.forwardRef(({
  bsPrefix,
  className,
  closeLabel = 'Close',
  closeButton = false,
  ...props
}, ref) => {
  bsPrefix = (0,ThemeProvider/* useBootstrapPrefix */.oU)(bsPrefix, 'modal-header');
  return /*#__PURE__*/(0,jsx_runtime.jsx)(esm_AbstractModalHeader, {
    ref: ref,
    ...props,
    className: classnames_default()(className, bsPrefix),
    closeLabel: closeLabel,
    closeButton: closeButton
  });
});
ModalHeader.displayName = 'ModalHeader';
/* harmony default export */ const esm_ModalHeader = (ModalHeader);
;// ./node_modules/react-bootstrap/esm/divWithClassName.js



/* harmony default export */ const divWithClassName = (className => /*#__PURE__*/react.forwardRef((p, ref) => /*#__PURE__*/(0,jsx_runtime.jsx)("div", {
  ...p,
  ref: ref,
  className: classnames_default()(p.className, className)
})));
;// ./node_modules/react-bootstrap/esm/ModalTitle.js
"use client";






const DivStyledAsH4 = divWithClassName('h4');
const ModalTitle = /*#__PURE__*/react.forwardRef(({
  className,
  bsPrefix,
  as: Component = DivStyledAsH4,
  ...props
}, ref) => {
  bsPrefix = (0,ThemeProvider/* useBootstrapPrefix */.oU)(bsPrefix, 'modal-title');
  return /*#__PURE__*/(0,jsx_runtime.jsx)(Component, {
    ref: ref,
    className: classnames_default()(className, bsPrefix),
    ...props
  });
});
ModalTitle.displayName = 'ModalTitle';
/* harmony default export */ const esm_ModalTitle = (ModalTitle);
;// ./node_modules/react-bootstrap/esm/Modal.js
"use client";

























/* eslint-disable no-use-before-define, react/no-multi-comp */
function DialogTransition(props) {
  return /*#__PURE__*/(0,jsx_runtime.jsx)(Fade/* default */.A, {
    ...props,
    timeout: null
  });
}
function BackdropTransition(props) {
  return /*#__PURE__*/(0,jsx_runtime.jsx)(Fade/* default */.A, {
    ...props,
    timeout: null
  });
}

/* eslint-enable no-use-before-define */
const Modal_Modal = /*#__PURE__*/react.forwardRef(({
  bsPrefix,
  className,
  style,
  dialogClassName,
  contentClassName,
  children,
  dialogAs: Dialog = esm_ModalDialog,
  'data-bs-theme': dataBsTheme,
  'aria-labelledby': ariaLabelledby,
  'aria-describedby': ariaDescribedby,
  'aria-label': ariaLabel,
  /* BaseModal props */

  show = false,
  animation = true,
  backdrop = true,
  keyboard = true,
  onEscapeKeyDown,
  onShow,
  onHide,
  container,
  autoFocus = true,
  enforceFocus = true,
  restoreFocus = true,
  restoreFocusOptions,
  onEntered,
  onExit,
  onExiting,
  onEnter,
  onEntering,
  onExited,
  backdropClassName,
  manager: propsManager,
  ...props
}, ref) => {
  const [modalStyle, setStyle] = (0,react.useState)({});
  const [animateStaticModal, setAnimateStaticModal] = (0,react.useState)(false);
  const waitingForMouseUpRef = (0,react.useRef)(false);
  const ignoreBackdropClickRef = (0,react.useRef)(false);
  const removeStaticModalAnimationRef = (0,react.useRef)(null);
  const [modal, setModalRef] = (0,useCallbackRef/* default */.A)();
  const mergedRef = (0,useMergedRefs/* default */.A)(ref, setModalRef);
  const handleHide = (0,useEventCallback/* default */.A)(onHide);
  const isRTL = (0,ThemeProvider/* useIsRTL */.Wz)();
  bsPrefix = (0,ThemeProvider/* useBootstrapPrefix */.oU)(bsPrefix, 'modal');
  const modalContext = (0,react.useMemo)(() => ({
    onHide: handleHide
  }), [handleHide]);
  function getModalManager() {
    if (propsManager) return propsManager;
    return getSharedManager({
      isRTL
    });
  }
  function updateDialogStyle(node) {
    if (!canUseDOM/* default */.A) return;
    const containerIsOverflowing = getModalManager().getScrollbarWidth() > 0;
    const modalIsOverflowing = node.scrollHeight > (0,ownerDocument/* default */.A)(node).documentElement.clientHeight;
    setStyle({
      paddingRight: containerIsOverflowing && !modalIsOverflowing ? (0,scrollbarSize/* default */.A)() : undefined,
      paddingLeft: !containerIsOverflowing && modalIsOverflowing ? (0,scrollbarSize/* default */.A)() : undefined
    });
  }
  const handleWindowResize = (0,useEventCallback/* default */.A)(() => {
    if (modal) {
      updateDialogStyle(modal.dialog);
    }
  });
  (0,useWillUnmount/* default */.A)(() => {
    (0,removeEventListener/* default */.A)(window, 'resize', handleWindowResize);
    removeStaticModalAnimationRef.current == null || removeStaticModalAnimationRef.current();
  });

  // We prevent the modal from closing during a drag by detecting where the
  // click originates from. If it starts in the modal and then ends outside
  // don't close.
  const handleDialogMouseDown = () => {
    waitingForMouseUpRef.current = true;
  };
  const handleMouseUp = e => {
    if (waitingForMouseUpRef.current && modal && e.target === modal.dialog) {
      ignoreBackdropClickRef.current = true;
    }
    waitingForMouseUpRef.current = false;
  };
  const handleStaticModalAnimation = () => {
    setAnimateStaticModal(true);
    removeStaticModalAnimationRef.current = (0,transitionEnd/* default */.A)(modal.dialog, () => {
      setAnimateStaticModal(false);
    });
  };
  const handleStaticBackdropClick = e => {
    if (e.target !== e.currentTarget) {
      return;
    }
    handleStaticModalAnimation();
  };
  const handleClick = e => {
    if (backdrop === 'static') {
      handleStaticBackdropClick(e);
      return;
    }
    if (ignoreBackdropClickRef.current || e.target !== e.currentTarget) {
      ignoreBackdropClickRef.current = false;
      return;
    }
    onHide == null || onHide();
  };
  const handleEscapeKeyDown = e => {
    if (keyboard) {
      onEscapeKeyDown == null || onEscapeKeyDown(e);
    } else {
      // Call preventDefault to stop modal from closing in @restart/ui.
      e.preventDefault();
      if (backdrop === 'static') {
        // Play static modal animation.
        handleStaticModalAnimation();
      }
    }
  };
  const handleEnter = (node, isAppearing) => {
    if (node) {
      updateDialogStyle(node);
    }
    onEnter == null || onEnter(node, isAppearing);
  };
  const handleExit = node => {
    removeStaticModalAnimationRef.current == null || removeStaticModalAnimationRef.current();
    onExit == null || onExit(node);
  };
  const handleEntering = (node, isAppearing) => {
    onEntering == null || onEntering(node, isAppearing);

    // FIXME: This should work even when animation is disabled.
    (0,addEventListener/* default */.Ay)(window, 'resize', handleWindowResize);
  };
  const handleExited = node => {
    if (node) node.style.display = ''; // RHL removes it sometimes
    onExited == null || onExited(node);

    // FIXME: This should work even when animation is disabled.
    (0,removeEventListener/* default */.A)(window, 'resize', handleWindowResize);
  };
  const renderBackdrop = (0,react.useCallback)(backdropProps => /*#__PURE__*/(0,jsx_runtime.jsx)("div", {
    ...backdropProps,
    className: classnames_default()(`${bsPrefix}-backdrop`, backdropClassName, !animation && 'show')
  }), [animation, backdropClassName, bsPrefix]);
  const baseModalStyle = {
    ...style,
    ...modalStyle
  };

  // If `display` is not set to block, autoFocus inside the modal fails
  // https://github.com/react-bootstrap/react-bootstrap/issues/5102
  baseModalStyle.display = 'block';
  const renderDialog = dialogProps => /*#__PURE__*/(0,jsx_runtime.jsx)("div", {
    role: "dialog",
    ...dialogProps,
    style: baseModalStyle,
    className: classnames_default()(className, bsPrefix, animateStaticModal && `${bsPrefix}-static`, !animation && 'show'),
    onClick: backdrop ? handleClick : undefined,
    onMouseUp: handleMouseUp,
    "data-bs-theme": dataBsTheme,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledby,
    "aria-describedby": ariaDescribedby,
    children: /*#__PURE__*/(0,jsx_runtime.jsx)(Dialog, {
      ...props,
      onMouseDown: handleDialogMouseDown,
      className: dialogClassName,
      contentClassName: contentClassName,
      children: children
    })
  });
  return /*#__PURE__*/(0,jsx_runtime.jsx)(esm_ModalContext.Provider, {
    value: modalContext,
    children: /*#__PURE__*/(0,jsx_runtime.jsx)(Modal/* default */.A, {
      show: show,
      ref: mergedRef,
      backdrop: backdrop,
      container: container,
      keyboard: true // Always set true - see handleEscapeKeyDown
      ,

      autoFocus: autoFocus,
      enforceFocus: enforceFocus,
      restoreFocus: restoreFocus,
      restoreFocusOptions: restoreFocusOptions,
      onEscapeKeyDown: handleEscapeKeyDown,
      onShow: onShow,
      onHide: onHide,
      onEnter: handleEnter,
      onEntering: handleEntering,
      onEntered: onEntered,
      onExit: handleExit,
      onExiting: onExiting,
      onExited: handleExited,
      manager: getModalManager(),
      transition: animation ? DialogTransition : undefined,
      backdropTransition: animation ? BackdropTransition : undefined,
      renderBackdrop: renderBackdrop,
      renderDialog: renderDialog
    })
  });
});
Modal_Modal.displayName = 'Modal';
/* harmony default export */ const esm_Modal = (Object.assign(Modal_Modal, {
  Body: esm_ModalBody,
  Header: esm_ModalHeader,
  Title: esm_ModalTitle,
  Footer: esm_ModalFooter,
  Dialog: esm_ModalDialog,
  TRANSITION_DURATION: 300,
  BACKDROP_TRANSITION_DURATION: 150
}));

/***/ }),

/***/ 708:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7073);
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9471);
/* harmony import */ var _ThemeProvider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(16);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(7671);
"use client";





const Row = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({
  bsPrefix,
  className,
  // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
  as: Component = 'div',
  ...props
}, ref) => {
  const decoratedBsPrefix = (0,_ThemeProvider__WEBPACK_IMPORTED_MODULE_3__/* .useBootstrapPrefix */ .oU)(bsPrefix, 'row');
  const breakpoints = (0,_ThemeProvider__WEBPACK_IMPORTED_MODULE_3__/* .useBootstrapBreakpoints */ .gy)();
  const minBreakpoint = (0,_ThemeProvider__WEBPACK_IMPORTED_MODULE_3__/* .useBootstrapMinBreakpoint */ .Jm)();
  const sizePrefix = `${decoratedBsPrefix}-cols`;
  const classes = [];
  breakpoints.forEach(brkPoint => {
    const propValue = props[brkPoint];
    delete props[brkPoint];
    let cols;
    if (propValue != null && typeof propValue === 'object') {
      ({
        cols
      } = propValue);
    } else {
      cols = propValue;
    }
    const infix = brkPoint !== minBreakpoint ? `-${brkPoint}` : '';
    if (cols != null) classes.push(`${sizePrefix}${infix}-${cols}`);
  });
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Component, {
    ref: ref,
    ...props,
    className: classnames__WEBPACK_IMPORTED_MODULE_0___default()(className, decoratedBsPrefix, ...classes)
  });
});
Row.displayName = 'Row';
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Row);

/***/ }),

/***/ 3461:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  A: () => (/* binding */ esm_TabContainer)
});

// EXTERNAL MODULE: ./node_modules/react/index.js
var react = __webpack_require__(9471);
// EXTERNAL MODULE: ./node_modules/@restart/ui/esm/Tabs.js + 4 modules
var Tabs = __webpack_require__(9531);
// EXTERNAL MODULE: ./node_modules/@restart/ui/esm/NoopTransition.js
var NoopTransition = __webpack_require__(2151);
// EXTERNAL MODULE: ./node_modules/react-bootstrap/esm/Fade.js + 8 modules
var Fade = __webpack_require__(4999);
;// ./node_modules/react-bootstrap/esm/getTabTransitionComponent.js


function getTabTransitionComponent(transition) {
  if (typeof transition === 'boolean') {
    return transition ? Fade/* default */.A : NoopTransition/* default */.A;
  }
  return transition;
}
// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js
var jsx_runtime = __webpack_require__(7671);
;// ./node_modules/react-bootstrap/esm/TabContainer.js




const TabContainer = ({
  transition,
  ...props
}) => /*#__PURE__*/(0,jsx_runtime.jsx)(Tabs/* default */.A, {
  ...props,
  transition: getTabTransitionComponent(transition)
});
TabContainer.displayName = 'TabContainer';
/* harmony default export */ const esm_TabContainer = (TabContainer);

/***/ }),

/***/ 16:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Jm: () => (/* binding */ useBootstrapMinBreakpoint),
/* harmony export */   Wz: () => (/* binding */ useIsRTL),
/* harmony export */   gy: () => (/* binding */ useBootstrapBreakpoints),
/* harmony export */   oU: () => (/* binding */ useBootstrapPrefix)
/* harmony export */ });
/* unused harmony exports DEFAULT_BREAKPOINTS, DEFAULT_MIN_BREAKPOINT, createBootstrapComponent, ThemeConsumer */
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9471);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7671);
"use client";




const DEFAULT_BREAKPOINTS = ['xxl', 'xl', 'lg', 'md', 'sm', 'xs'];
const DEFAULT_MIN_BREAKPOINT = 'xs';
const ThemeContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createContext({
  prefixes: {},
  breakpoints: DEFAULT_BREAKPOINTS,
  minBreakpoint: DEFAULT_MIN_BREAKPOINT
});
const {
  Consumer,
  Provider
} = ThemeContext;
function ThemeProvider({
  prefixes = {},
  breakpoints = DEFAULT_BREAKPOINTS,
  minBreakpoint = DEFAULT_MIN_BREAKPOINT,
  dir,
  children
}) {
  const contextValue = useMemo(() => ({
    prefixes: {
      ...prefixes
    },
    breakpoints,
    minBreakpoint,
    dir
  }), [prefixes, breakpoints, minBreakpoint, dir]);
  return /*#__PURE__*/_jsx(Provider, {
    value: contextValue,
    children: children
  });
}
function useBootstrapPrefix(prefix, defaultPrefix) {
  const {
    prefixes
  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ThemeContext);
  return prefix || prefixes[defaultPrefix] || defaultPrefix;
}
function useBootstrapBreakpoints() {
  const {
    breakpoints
  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ThemeContext);
  return breakpoints;
}
function useBootstrapMinBreakpoint() {
  const {
    minBreakpoint
  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ThemeContext);
  return minBreakpoint;
}
function useIsRTL() {
  const {
    dir
  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ThemeContext);
  return dir === 'rtl';
}
function createBootstrapComponent(Component, opts) {
  if (typeof opts === 'string') opts = {
    prefix: opts
  };
  const isClassy = Component.prototype && Component.prototype.isReactComponent;
  // If it's a functional component make sure we don't break it with a ref
  const {
    prefix,
    forwardRefAs = isClassy ? 'ref' : 'innerRef'
  } = opts;
  const Wrapped = /*#__PURE__*/React.forwardRef(({
    ...props
  }, ref) => {
    props[forwardRefAs] = ref;
    const bsPrefix = useBootstrapPrefix(props.bsPrefix, prefix);
    return /*#__PURE__*/_jsx(Component, {
      ...props,
      bsPrefix: bsPrefix
    });
  });
  Wrapped.displayName = `Bootstrap(${Component.displayName || Component.name})`;
  return Wrapped;
}

/* unused harmony default export */ var __WEBPACK_DEFAULT_EXPORT__ = ((/* unused pure expression or super */ null && (ThemeProvider)));

/***/ }),

/***/ 7230:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/*
 Modernizr 3.0.0pre (Custom Build) | MIT
*/


var aa = __webpack_require__(9471),
  ca = __webpack_require__(9817);
function p(a) {
  for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++) b += "&args[]=" + encodeURIComponent(arguments[c]);
  return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
}
var da = new Set(),
  ea = {};
function fa(a, b) {
  ha(a, b);
  ha(a + "Capture", b);
}
function ha(a, b) {
  ea[a] = b;
  for (a = 0; a < b.length; a++) da.add(b[a]);
}
var ia = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement),
  ja = Object.prototype.hasOwnProperty,
  ka = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,
  la = {},
  ma = {};
function oa(a) {
  if (ja.call(ma, a)) return !0;
  if (ja.call(la, a)) return !1;
  if (ka.test(a)) return ma[a] = !0;
  la[a] = !0;
  return !1;
}
function pa(a, b, c, d) {
  if (null !== c && 0 === c.type) return !1;
  switch (typeof b) {
    case "function":
    case "symbol":
      return !0;
    case "boolean":
      if (d) return !1;
      if (null !== c) return !c.acceptsBooleans;
      a = a.toLowerCase().slice(0, 5);
      return "data-" !== a && "aria-" !== a;
    default:
      return !1;
  }
}
function qa(a, b, c, d) {
  if (null === b || "undefined" === typeof b || pa(a, b, c, d)) return !0;
  if (d) return !1;
  if (null !== c) switch (c.type) {
    case 3:
      return !b;
    case 4:
      return !1 === b;
    case 5:
      return isNaN(b);
    case 6:
      return isNaN(b) || 1 > b;
  }
  return !1;
}
function v(a, b, c, d, e, f, g) {
  this.acceptsBooleans = 2 === b || 3 === b || 4 === b;
  this.attributeName = d;
  this.attributeNamespace = e;
  this.mustUseProperty = c;
  this.propertyName = a;
  this.type = b;
  this.sanitizeURL = f;
  this.removeEmptyString = g;
}
var z = {};
"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function (a) {
  z[a] = new v(a, 0, !1, a, null, !1, !1);
});
[["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function (a) {
  var b = a[0];
  z[b] = new v(b, 1, !1, a[1], null, !1, !1);
});
["contentEditable", "draggable", "spellCheck", "value"].forEach(function (a) {
  z[a] = new v(a, 2, !1, a.toLowerCase(), null, !1, !1);
});
["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function (a) {
  z[a] = new v(a, 2, !1, a, null, !1, !1);
});
"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function (a) {
  z[a] = new v(a, 3, !1, a.toLowerCase(), null, !1, !1);
});
["checked", "multiple", "muted", "selected"].forEach(function (a) {
  z[a] = new v(a, 3, !0, a, null, !1, !1);
});
["capture", "download"].forEach(function (a) {
  z[a] = new v(a, 4, !1, a, null, !1, !1);
});
["cols", "rows", "size", "span"].forEach(function (a) {
  z[a] = new v(a, 6, !1, a, null, !1, !1);
});
["rowSpan", "start"].forEach(function (a) {
  z[a] = new v(a, 5, !1, a.toLowerCase(), null, !1, !1);
});
var ra = /[\-:]([a-z])/g;
function sa(a) {
  return a[1].toUpperCase();
}
"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function (a) {
  var b = a.replace(ra, sa);
  z[b] = new v(b, 1, !1, a, null, !1, !1);
});
"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function (a) {
  var b = a.replace(ra, sa);
  z[b] = new v(b, 1, !1, a, "http://www.w3.org/1999/xlink", !1, !1);
});
["xml:base", "xml:lang", "xml:space"].forEach(function (a) {
  var b = a.replace(ra, sa);
  z[b] = new v(b, 1, !1, a, "http://www.w3.org/XML/1998/namespace", !1, !1);
});
["tabIndex", "crossOrigin"].forEach(function (a) {
  z[a] = new v(a, 1, !1, a.toLowerCase(), null, !1, !1);
});
z.xlinkHref = new v("xlinkHref", 1, !1, "xlink:href", "http://www.w3.org/1999/xlink", !0, !1);
["src", "href", "action", "formAction"].forEach(function (a) {
  z[a] = new v(a, 1, !1, a.toLowerCase(), null, !0, !0);
});
function ta(a, b, c, d) {
  var e = z.hasOwnProperty(b) ? z[b] : null;
  if (null !== e ? 0 !== e.type : d || !(2 < b.length) || "o" !== b[0] && "O" !== b[0] || "n" !== b[1] && "N" !== b[1]) qa(b, c, e, d) && (c = null), d || null === e ? oa(b) && (null === c ? a.removeAttribute(b) : a.setAttribute(b, "" + c)) : e.mustUseProperty ? a[e.propertyName] = null === c ? 3 === e.type ? !1 : "" : c : (b = e.attributeName, d = e.attributeNamespace, null === c ? a.removeAttribute(b) : (e = e.type, c = 3 === e || 4 === e && !0 === c ? "" : "" + c, d ? a.setAttributeNS(d, b, c) : a.setAttribute(b, c)));
}
var ua = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,
  va = Symbol.for("react.element"),
  wa = Symbol.for("react.portal"),
  ya = Symbol.for("react.fragment"),
  za = Symbol.for("react.strict_mode"),
  Aa = Symbol.for("react.profiler"),
  Ba = Symbol.for("react.provider"),
  Ca = Symbol.for("react.context"),
  Da = Symbol.for("react.forward_ref"),
  Ea = Symbol.for("react.suspense"),
  Fa = Symbol.for("react.suspense_list"),
  Ga = Symbol.for("react.memo"),
  Ha = Symbol.for("react.lazy");
Symbol.for("react.scope");
Symbol.for("react.debug_trace_mode");
var Ia = Symbol.for("react.offscreen");
Symbol.for("react.legacy_hidden");
Symbol.for("react.cache");
Symbol.for("react.tracing_marker");
var Ja = Symbol.iterator;
function Ka(a) {
  if (null === a || "object" !== typeof a) return null;
  a = Ja && a[Ja] || a["@@iterator"];
  return "function" === typeof a ? a : null;
}
var A = Object.assign,
  La;
function Ma(a) {
  if (void 0 === La) try {
    throw Error();
  } catch (c) {
    var b = c.stack.trim().match(/\n( *(at )?)/);
    La = b && b[1] || "";
  }
  return "\n" + La + a;
}
var Na = !1;
function Oa(a, b) {
  if (!a || Na) return "";
  Na = !0;
  var c = Error.prepareStackTrace;
  Error.prepareStackTrace = void 0;
  try {
    if (b) {
      if (b = function () {
        throw Error();
      }, Object.defineProperty(b.prototype, "props", {
        set: function () {
          throw Error();
        }
      }), "object" === typeof Reflect && Reflect.construct) {
        try {
          Reflect.construct(b, []);
        } catch (l) {
          var d = l;
        }
        Reflect.construct(a, [], b);
      } else {
        try {
          b.call();
        } catch (l) {
          d = l;
        }
        a.call(b.prototype);
      }
    } else {
      try {
        throw Error();
      } catch (l) {
        d = l;
      }
      a();
    }
  } catch (l) {
    if (l && d && "string" === typeof l.stack) {
      for (var e = l.stack.split("\n"), f = d.stack.split("\n"), g = e.length - 1, h = f.length - 1; 1 <= g && 0 <= h && e[g] !== f[h];) h--;
      for (; 1 <= g && 0 <= h; g--, h--) if (e[g] !== f[h]) {
        if (1 !== g || 1 !== h) {
          do if (g--, h--, 0 > h || e[g] !== f[h]) {
            var k = "\n" + e[g].replace(" at new ", " at ");
            a.displayName && k.includes("<anonymous>") && (k = k.replace("<anonymous>", a.displayName));
            return k;
          } while (1 <= g && 0 <= h);
        }
        break;
      }
    }
  } finally {
    Na = !1, Error.prepareStackTrace = c;
  }
  return (a = a ? a.displayName || a.name : "") ? Ma(a) : "";
}
function Pa(a) {
  switch (a.tag) {
    case 5:
      return Ma(a.type);
    case 16:
      return Ma("Lazy");
    case 13:
      return Ma("Suspense");
    case 19:
      return Ma("SuspenseList");
    case 0:
    case 2:
    case 15:
      return a = Oa(a.type, !1), a;
    case 11:
      return a = Oa(a.type.render, !1), a;
    case 1:
      return a = Oa(a.type, !0), a;
    default:
      return "";
  }
}
function Qa(a) {
  if (null == a) return null;
  if ("function" === typeof a) return a.displayName || a.name || null;
  if ("string" === typeof a) return a;
  switch (a) {
    case ya:
      return "Fragment";
    case wa:
      return "Portal";
    case Aa:
      return "Profiler";
    case za:
      return "StrictMode";
    case Ea:
      return "Suspense";
    case Fa:
      return "SuspenseList";
  }
  if ("object" === typeof a) switch (a.$$typeof) {
    case Ca:
      return (a.displayName || "Context") + ".Consumer";
    case Ba:
      return (a._context.displayName || "Context") + ".Provider";
    case Da:
      var b = a.render;
      a = a.displayName;
      a || (a = b.displayName || b.name || "", a = "" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");
      return a;
    case Ga:
      return b = a.displayName || null, null !== b ? b : Qa(a.type) || "Memo";
    case Ha:
      b = a._payload;
      a = a._init;
      try {
        return Qa(a(b));
      } catch (c) {}
  }
  return null;
}
function Ra(a) {
  var b = a.type;
  switch (a.tag) {
    case 24:
      return "Cache";
    case 9:
      return (b.displayName || "Context") + ".Consumer";
    case 10:
      return (b._context.displayName || "Context") + ".Provider";
    case 18:
      return "DehydratedFragment";
    case 11:
      return a = b.render, a = a.displayName || a.name || "", b.displayName || ("" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");
    case 7:
      return "Fragment";
    case 5:
      return b;
    case 4:
      return "Portal";
    case 3:
      return "Root";
    case 6:
      return "Text";
    case 16:
      return Qa(b);
    case 8:
      return b === za ? "StrictMode" : "Mode";
    case 22:
      return "Offscreen";
    case 12:
      return "Profiler";
    case 21:
      return "Scope";
    case 13:
      return "Suspense";
    case 19:
      return "SuspenseList";
    case 25:
      return "TracingMarker";
    case 1:
    case 0:
    case 17:
    case 2:
    case 14:
    case 15:
      if ("function" === typeof b) return b.displayName || b.name || null;
      if ("string" === typeof b) return b;
  }
  return null;
}
function Sa(a) {
  switch (typeof a) {
    case "boolean":
    case "number":
    case "string":
    case "undefined":
      return a;
    case "object":
      return a;
    default:
      return "";
  }
}
function Ta(a) {
  var b = a.type;
  return (a = a.nodeName) && "input" === a.toLowerCase() && ("checkbox" === b || "radio" === b);
}
function Ua(a) {
  var b = Ta(a) ? "checked" : "value",
    c = Object.getOwnPropertyDescriptor(a.constructor.prototype, b),
    d = "" + a[b];
  if (!a.hasOwnProperty(b) && "undefined" !== typeof c && "function" === typeof c.get && "function" === typeof c.set) {
    var e = c.get,
      f = c.set;
    Object.defineProperty(a, b, {
      configurable: !0,
      get: function () {
        return e.call(this);
      },
      set: function (a) {
        d = "" + a;
        f.call(this, a);
      }
    });
    Object.defineProperty(a, b, {
      enumerable: c.enumerable
    });
    return {
      getValue: function () {
        return d;
      },
      setValue: function (a) {
        d = "" + a;
      },
      stopTracking: function () {
        a._valueTracker = null;
        delete a[b];
      }
    };
  }
}
function Va(a) {
  a._valueTracker || (a._valueTracker = Ua(a));
}
function Wa(a) {
  if (!a) return !1;
  var b = a._valueTracker;
  if (!b) return !0;
  var c = b.getValue();
  var d = "";
  a && (d = Ta(a) ? a.checked ? "true" : "false" : a.value);
  a = d;
  return a !== c ? (b.setValue(a), !0) : !1;
}
function Xa(a) {
  a = a || ("undefined" !== typeof document ? document : void 0);
  if ("undefined" === typeof a) return null;
  try {
    return a.activeElement || a.body;
  } catch (b) {
    return a.body;
  }
}
function Ya(a, b) {
  var c = b.checked;
  return A({}, b, {
    defaultChecked: void 0,
    defaultValue: void 0,
    value: void 0,
    checked: null != c ? c : a._wrapperState.initialChecked
  });
}
function Za(a, b) {
  var c = null == b.defaultValue ? "" : b.defaultValue,
    d = null != b.checked ? b.checked : b.defaultChecked;
  c = Sa(null != b.value ? b.value : c);
  a._wrapperState = {
    initialChecked: d,
    initialValue: c,
    controlled: "checkbox" === b.type || "radio" === b.type ? null != b.checked : null != b.value
  };
}
function ab(a, b) {
  b = b.checked;
  null != b && ta(a, "checked", b, !1);
}
function bb(a, b) {
  ab(a, b);
  var c = Sa(b.value),
    d = b.type;
  if (null != c) {
    if ("number" === d) {
      if (0 === c && "" === a.value || a.value != c) a.value = "" + c;
    } else a.value !== "" + c && (a.value = "" + c);
  } else if ("submit" === d || "reset" === d) {
    a.removeAttribute("value");
    return;
  }
  b.hasOwnProperty("value") ? cb(a, b.type, c) : b.hasOwnProperty("defaultValue") && cb(a, b.type, Sa(b.defaultValue));
  null == b.checked && null != b.defaultChecked && (a.defaultChecked = !!b.defaultChecked);
}
function db(a, b, c) {
  if (b.hasOwnProperty("value") || b.hasOwnProperty("defaultValue")) {
    var d = b.type;
    if (!("submit" !== d && "reset" !== d || void 0 !== b.value && null !== b.value)) return;
    b = "" + a._wrapperState.initialValue;
    c || b === a.value || (a.value = b);
    a.defaultValue = b;
  }
  c = a.name;
  "" !== c && (a.name = "");
  a.defaultChecked = !!a._wrapperState.initialChecked;
  "" !== c && (a.name = c);
}
function cb(a, b, c) {
  if ("number" !== b || Xa(a.ownerDocument) !== a) null == c ? a.defaultValue = "" + a._wrapperState.initialValue : a.defaultValue !== "" + c && (a.defaultValue = "" + c);
}
var eb = Array.isArray;
function fb(a, b, c, d) {
  a = a.options;
  if (b) {
    b = {};
    for (var e = 0; e < c.length; e++) b["$" + c[e]] = !0;
    for (c = 0; c < a.length; c++) e = b.hasOwnProperty("$" + a[c].value), a[c].selected !== e && (a[c].selected = e), e && d && (a[c].defaultSelected = !0);
  } else {
    c = "" + Sa(c);
    b = null;
    for (e = 0; e < a.length; e++) {
      if (a[e].value === c) {
        a[e].selected = !0;
        d && (a[e].defaultSelected = !0);
        return;
      }
      null !== b || a[e].disabled || (b = a[e]);
    }
    null !== b && (b.selected = !0);
  }
}
function gb(a, b) {
  if (null != b.dangerouslySetInnerHTML) throw Error(p(91));
  return A({}, b, {
    value: void 0,
    defaultValue: void 0,
    children: "" + a._wrapperState.initialValue
  });
}
function hb(a, b) {
  var c = b.value;
  if (null == c) {
    c = b.children;
    b = b.defaultValue;
    if (null != c) {
      if (null != b) throw Error(p(92));
      if (eb(c)) {
        if (1 < c.length) throw Error(p(93));
        c = c[0];
      }
      b = c;
    }
    null == b && (b = "");
    c = b;
  }
  a._wrapperState = {
    initialValue: Sa(c)
  };
}
function ib(a, b) {
  var c = Sa(b.value),
    d = Sa(b.defaultValue);
  null != c && (c = "" + c, c !== a.value && (a.value = c), null == b.defaultValue && a.defaultValue !== c && (a.defaultValue = c));
  null != d && (a.defaultValue = "" + d);
}
function jb(a) {
  var b = a.textContent;
  b === a._wrapperState.initialValue && "" !== b && null !== b && (a.value = b);
}
function kb(a) {
  switch (a) {
    case "svg":
      return "http://www.w3.org/2000/svg";
    case "math":
      return "http://www.w3.org/1998/Math/MathML";
    default:
      return "http://www.w3.org/1999/xhtml";
  }
}
function lb(a, b) {
  return null == a || "http://www.w3.org/1999/xhtml" === a ? kb(b) : "http://www.w3.org/2000/svg" === a && "foreignObject" === b ? "http://www.w3.org/1999/xhtml" : a;
}
var mb,
  nb = function (a) {
    return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function (b, c, d, e) {
      MSApp.execUnsafeLocalFunction(function () {
        return a(b, c, d, e);
      });
    } : a;
  }(function (a, b) {
    if ("http://www.w3.org/2000/svg" !== a.namespaceURI || "innerHTML" in a) a.innerHTML = b;else {
      mb = mb || document.createElement("div");
      mb.innerHTML = "<svg>" + b.valueOf().toString() + "</svg>";
      for (b = mb.firstChild; a.firstChild;) a.removeChild(a.firstChild);
      for (; b.firstChild;) a.appendChild(b.firstChild);
    }
  });
function ob(a, b) {
  if (b) {
    var c = a.firstChild;
    if (c && c === a.lastChild && 3 === c.nodeType) {
      c.nodeValue = b;
      return;
    }
  }
  a.textContent = b;
}
var pb = {
    animationIterationCount: !0,
    aspectRatio: !0,
    borderImageOutset: !0,
    borderImageSlice: !0,
    borderImageWidth: !0,
    boxFlex: !0,
    boxFlexGroup: !0,
    boxOrdinalGroup: !0,
    columnCount: !0,
    columns: !0,
    flex: !0,
    flexGrow: !0,
    flexPositive: !0,
    flexShrink: !0,
    flexNegative: !0,
    flexOrder: !0,
    gridArea: !0,
    gridRow: !0,
    gridRowEnd: !0,
    gridRowSpan: !0,
    gridRowStart: !0,
    gridColumn: !0,
    gridColumnEnd: !0,
    gridColumnSpan: !0,
    gridColumnStart: !0,
    fontWeight: !0,
    lineClamp: !0,
    lineHeight: !0,
    opacity: !0,
    order: !0,
    orphans: !0,
    tabSize: !0,
    widows: !0,
    zIndex: !0,
    zoom: !0,
    fillOpacity: !0,
    floodOpacity: !0,
    stopOpacity: !0,
    strokeDasharray: !0,
    strokeDashoffset: !0,
    strokeMiterlimit: !0,
    strokeOpacity: !0,
    strokeWidth: !0
  },
  qb = ["Webkit", "ms", "Moz", "O"];
Object.keys(pb).forEach(function (a) {
  qb.forEach(function (b) {
    b = b + a.charAt(0).toUpperCase() + a.substring(1);
    pb[b] = pb[a];
  });
});
function rb(a, b, c) {
  return null == b || "boolean" === typeof b || "" === b ? "" : c || "number" !== typeof b || 0 === b || pb.hasOwnProperty(a) && pb[a] ? ("" + b).trim() : b + "px";
}
function sb(a, b) {
  a = a.style;
  for (var c in b) if (b.hasOwnProperty(c)) {
    var d = 0 === c.indexOf("--"),
      e = rb(c, b[c], d);
    "float" === c && (c = "cssFloat");
    d ? a.setProperty(c, e) : a[c] = e;
  }
}
var tb = A({
  menuitem: !0
}, {
  area: !0,
  base: !0,
  br: !0,
  col: !0,
  embed: !0,
  hr: !0,
  img: !0,
  input: !0,
  keygen: !0,
  link: !0,
  meta: !0,
  param: !0,
  source: !0,
  track: !0,
  wbr: !0
});
function ub(a, b) {
  if (b) {
    if (tb[a] && (null != b.children || null != b.dangerouslySetInnerHTML)) throw Error(p(137, a));
    if (null != b.dangerouslySetInnerHTML) {
      if (null != b.children) throw Error(p(60));
      if ("object" !== typeof b.dangerouslySetInnerHTML || !("__html" in b.dangerouslySetInnerHTML)) throw Error(p(61));
    }
    if (null != b.style && "object" !== typeof b.style) throw Error(p(62));
  }
}
function vb(a, b) {
  if (-1 === a.indexOf("-")) return "string" === typeof b.is;
  switch (a) {
    case "annotation-xml":
    case "color-profile":
    case "font-face":
    case "font-face-src":
    case "font-face-uri":
    case "font-face-format":
    case "font-face-name":
    case "missing-glyph":
      return !1;
    default:
      return !0;
  }
}
var wb = null;
function xb(a) {
  a = a.target || a.srcElement || window;
  a.correspondingUseElement && (a = a.correspondingUseElement);
  return 3 === a.nodeType ? a.parentNode : a;
}
var yb = null,
  zb = null,
  Ab = null;
function Bb(a) {
  if (a = Cb(a)) {
    if ("function" !== typeof yb) throw Error(p(280));
    var b = a.stateNode;
    b && (b = Db(b), yb(a.stateNode, a.type, b));
  }
}
function Eb(a) {
  zb ? Ab ? Ab.push(a) : Ab = [a] : zb = a;
}
function Fb() {
  if (zb) {
    var a = zb,
      b = Ab;
    Ab = zb = null;
    Bb(a);
    if (b) for (a = 0; a < b.length; a++) Bb(b[a]);
  }
}
function Gb(a, b) {
  return a(b);
}
function Hb() {}
var Ib = !1;
function Jb(a, b, c) {
  if (Ib) return a(b, c);
  Ib = !0;
  try {
    return Gb(a, b, c);
  } finally {
    if (Ib = !1, null !== zb || null !== Ab) Hb(), Fb();
  }
}
function Kb(a, b) {
  var c = a.stateNode;
  if (null === c) return null;
  var d = Db(c);
  if (null === d) return null;
  c = d[b];
  a: switch (b) {
    case "onClick":
    case "onClickCapture":
    case "onDoubleClick":
    case "onDoubleClickCapture":
    case "onMouseDown":
    case "onMouseDownCapture":
    case "onMouseMove":
    case "onMouseMoveCapture":
    case "onMouseUp":
    case "onMouseUpCapture":
    case "onMouseEnter":
      (d = !d.disabled) || (a = a.type, d = !("button" === a || "input" === a || "select" === a || "textarea" === a));
      a = !d;
      break a;
    default:
      a = !1;
  }
  if (a) return null;
  if (c && "function" !== typeof c) throw Error(p(231, b, typeof c));
  return c;
}
var Lb = !1;
if (ia) try {
  var Mb = {};
  Object.defineProperty(Mb, "passive", {
    get: function () {
      Lb = !0;
    }
  });
  window.addEventListener("test", Mb, Mb);
  window.removeEventListener("test", Mb, Mb);
} catch (a) {
  Lb = !1;
}
function Nb(a, b, c, d, e, f, g, h, k) {
  var l = Array.prototype.slice.call(arguments, 3);
  try {
    b.apply(c, l);
  } catch (m) {
    this.onError(m);
  }
}
var Ob = !1,
  Pb = null,
  Qb = !1,
  Rb = null,
  Sb = {
    onError: function (a) {
      Ob = !0;
      Pb = a;
    }
  };
function Tb(a, b, c, d, e, f, g, h, k) {
  Ob = !1;
  Pb = null;
  Nb.apply(Sb, arguments);
}
function Ub(a, b, c, d, e, f, g, h, k) {
  Tb.apply(this, arguments);
  if (Ob) {
    if (Ob) {
      var l = Pb;
      Ob = !1;
      Pb = null;
    } else throw Error(p(198));
    Qb || (Qb = !0, Rb = l);
  }
}
function Vb(a) {
  var b = a,
    c = a;
  if (a.alternate) for (; b.return;) b = b.return;else {
    a = b;
    do b = a, 0 !== (b.flags & 4098) && (c = b.return), a = b.return; while (a);
  }
  return 3 === b.tag ? c : null;
}
function Wb(a) {
  if (13 === a.tag) {
    var b = a.memoizedState;
    null === b && (a = a.alternate, null !== a && (b = a.memoizedState));
    if (null !== b) return b.dehydrated;
  }
  return null;
}
function Xb(a) {
  if (Vb(a) !== a) throw Error(p(188));
}
function Yb(a) {
  var b = a.alternate;
  if (!b) {
    b = Vb(a);
    if (null === b) throw Error(p(188));
    return b !== a ? null : a;
  }
  for (var c = a, d = b;;) {
    var e = c.return;
    if (null === e) break;
    var f = e.alternate;
    if (null === f) {
      d = e.return;
      if (null !== d) {
        c = d;
        continue;
      }
      break;
    }
    if (e.child === f.child) {
      for (f = e.child; f;) {
        if (f === c) return Xb(e), a;
        if (f === d) return Xb(e), b;
        f = f.sibling;
      }
      throw Error(p(188));
    }
    if (c.return !== d.return) c = e, d = f;else {
      for (var g = !1, h = e.child; h;) {
        if (h === c) {
          g = !0;
          c = e;
          d = f;
          break;
        }
        if (h === d) {
          g = !0;
          d = e;
          c = f;
          break;
        }
        h = h.sibling;
      }
      if (!g) {
        for (h = f.child; h;) {
          if (h === c) {
            g = !0;
            c = f;
            d = e;
            break;
          }
          if (h === d) {
            g = !0;
            d = f;
            c = e;
            break;
          }
          h = h.sibling;
        }
        if (!g) throw Error(p(189));
      }
    }
    if (c.alternate !== d) throw Error(p(190));
  }
  if (3 !== c.tag) throw Error(p(188));
  return c.stateNode.current === c ? a : b;
}
function Zb(a) {
  a = Yb(a);
  return null !== a ? $b(a) : null;
}
function $b(a) {
  if (5 === a.tag || 6 === a.tag) return a;
  for (a = a.child; null !== a;) {
    var b = $b(a);
    if (null !== b) return b;
    a = a.sibling;
  }
  return null;
}
var ac = ca.unstable_scheduleCallback,
  bc = ca.unstable_cancelCallback,
  cc = ca.unstable_shouldYield,
  dc = ca.unstable_requestPaint,
  B = ca.unstable_now,
  ec = ca.unstable_getCurrentPriorityLevel,
  fc = ca.unstable_ImmediatePriority,
  gc = ca.unstable_UserBlockingPriority,
  hc = ca.unstable_NormalPriority,
  ic = ca.unstable_LowPriority,
  jc = ca.unstable_IdlePriority,
  kc = null,
  lc = null;
function mc(a) {
  if (lc && "function" === typeof lc.onCommitFiberRoot) try {
    lc.onCommitFiberRoot(kc, a, void 0, 128 === (a.current.flags & 128));
  } catch (b) {}
}
var oc = Math.clz32 ? Math.clz32 : nc,
  pc = Math.log,
  qc = Math.LN2;
function nc(a) {
  a >>>= 0;
  return 0 === a ? 32 : 31 - (pc(a) / qc | 0) | 0;
}
var rc = 64,
  sc = 4194304;
function tc(a) {
  switch (a & -a) {
    case 1:
      return 1;
    case 2:
      return 2;
    case 4:
      return 4;
    case 8:
      return 8;
    case 16:
      return 16;
    case 32:
      return 32;
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 131072:
    case 262144:
    case 524288:
    case 1048576:
    case 2097152:
      return a & 4194240;
    case 4194304:
    case 8388608:
    case 16777216:
    case 33554432:
    case 67108864:
      return a & 130023424;
    case 134217728:
      return 134217728;
    case 268435456:
      return 268435456;
    case 536870912:
      return 536870912;
    case 1073741824:
      return 1073741824;
    default:
      return a;
  }
}
function uc(a, b) {
  var c = a.pendingLanes;
  if (0 === c) return 0;
  var d = 0,
    e = a.suspendedLanes,
    f = a.pingedLanes,
    g = c & 268435455;
  if (0 !== g) {
    var h = g & ~e;
    0 !== h ? d = tc(h) : (f &= g, 0 !== f && (d = tc(f)));
  } else g = c & ~e, 0 !== g ? d = tc(g) : 0 !== f && (d = tc(f));
  if (0 === d) return 0;
  if (0 !== b && b !== d && 0 === (b & e) && (e = d & -d, f = b & -b, e >= f || 16 === e && 0 !== (f & 4194240))) return b;
  0 !== (d & 4) && (d |= c & 16);
  b = a.entangledLanes;
  if (0 !== b) for (a = a.entanglements, b &= d; 0 < b;) c = 31 - oc(b), e = 1 << c, d |= a[c], b &= ~e;
  return d;
}
function vc(a, b) {
  switch (a) {
    case 1:
    case 2:
    case 4:
      return b + 250;
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 131072:
    case 262144:
    case 524288:
    case 1048576:
    case 2097152:
      return b + 5E3;
    case 4194304:
    case 8388608:
    case 16777216:
    case 33554432:
    case 67108864:
      return -1;
    case 134217728:
    case 268435456:
    case 536870912:
    case 1073741824:
      return -1;
    default:
      return -1;
  }
}
function wc(a, b) {
  for (var c = a.suspendedLanes, d = a.pingedLanes, e = a.expirationTimes, f = a.pendingLanes; 0 < f;) {
    var g = 31 - oc(f),
      h = 1 << g,
      k = e[g];
    if (-1 === k) {
      if (0 === (h & c) || 0 !== (h & d)) e[g] = vc(h, b);
    } else k <= b && (a.expiredLanes |= h);
    f &= ~h;
  }
}
function xc(a) {
  a = a.pendingLanes & -1073741825;
  return 0 !== a ? a : a & 1073741824 ? 1073741824 : 0;
}
function yc() {
  var a = rc;
  rc <<= 1;
  0 === (rc & 4194240) && (rc = 64);
  return a;
}
function zc(a) {
  for (var b = [], c = 0; 31 > c; c++) b.push(a);
  return b;
}
function Ac(a, b, c) {
  a.pendingLanes |= b;
  536870912 !== b && (a.suspendedLanes = 0, a.pingedLanes = 0);
  a = a.eventTimes;
  b = 31 - oc(b);
  a[b] = c;
}
function Bc(a, b) {
  var c = a.pendingLanes & ~b;
  a.pendingLanes = b;
  a.suspendedLanes = 0;
  a.pingedLanes = 0;
  a.expiredLanes &= b;
  a.mutableReadLanes &= b;
  a.entangledLanes &= b;
  b = a.entanglements;
  var d = a.eventTimes;
  for (a = a.expirationTimes; 0 < c;) {
    var e = 31 - oc(c),
      f = 1 << e;
    b[e] = 0;
    d[e] = -1;
    a[e] = -1;
    c &= ~f;
  }
}
function Cc(a, b) {
  var c = a.entangledLanes |= b;
  for (a = a.entanglements; c;) {
    var d = 31 - oc(c),
      e = 1 << d;
    e & b | a[d] & b && (a[d] |= b);
    c &= ~e;
  }
}
var C = 0;
function Dc(a) {
  a &= -a;
  return 1 < a ? 4 < a ? 0 !== (a & 268435455) ? 16 : 536870912 : 4 : 1;
}
var Ec,
  Fc,
  Gc,
  Hc,
  Ic,
  Jc = !1,
  Kc = [],
  Lc = null,
  Mc = null,
  Nc = null,
  Oc = new Map(),
  Pc = new Map(),
  Qc = [],
  Rc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
function Sc(a, b) {
  switch (a) {
    case "focusin":
    case "focusout":
      Lc = null;
      break;
    case "dragenter":
    case "dragleave":
      Mc = null;
      break;
    case "mouseover":
    case "mouseout":
      Nc = null;
      break;
    case "pointerover":
    case "pointerout":
      Oc.delete(b.pointerId);
      break;
    case "gotpointercapture":
    case "lostpointercapture":
      Pc.delete(b.pointerId);
  }
}
function Tc(a, b, c, d, e, f) {
  if (null === a || a.nativeEvent !== f) return a = {
    blockedOn: b,
    domEventName: c,
    eventSystemFlags: d,
    nativeEvent: f,
    targetContainers: [e]
  }, null !== b && (b = Cb(b), null !== b && Fc(b)), a;
  a.eventSystemFlags |= d;
  b = a.targetContainers;
  null !== e && -1 === b.indexOf(e) && b.push(e);
  return a;
}
function Uc(a, b, c, d, e) {
  switch (b) {
    case "focusin":
      return Lc = Tc(Lc, a, b, c, d, e), !0;
    case "dragenter":
      return Mc = Tc(Mc, a, b, c, d, e), !0;
    case "mouseover":
      return Nc = Tc(Nc, a, b, c, d, e), !0;
    case "pointerover":
      var f = e.pointerId;
      Oc.set(f, Tc(Oc.get(f) || null, a, b, c, d, e));
      return !0;
    case "gotpointercapture":
      return f = e.pointerId, Pc.set(f, Tc(Pc.get(f) || null, a, b, c, d, e)), !0;
  }
  return !1;
}
function Vc(a) {
  var b = Wc(a.target);
  if (null !== b) {
    var c = Vb(b);
    if (null !== c) if (b = c.tag, 13 === b) {
      if (b = Wb(c), null !== b) {
        a.blockedOn = b;
        Ic(a.priority, function () {
          Gc(c);
        });
        return;
      }
    } else if (3 === b && c.stateNode.current.memoizedState.isDehydrated) {
      a.blockedOn = 3 === c.tag ? c.stateNode.containerInfo : null;
      return;
    }
  }
  a.blockedOn = null;
}
function Xc(a) {
  if (null !== a.blockedOn) return !1;
  for (var b = a.targetContainers; 0 < b.length;) {
    var c = Yc(a.domEventName, a.eventSystemFlags, b[0], a.nativeEvent);
    if (null === c) {
      c = a.nativeEvent;
      var d = new c.constructor(c.type, c);
      wb = d;
      c.target.dispatchEvent(d);
      wb = null;
    } else return b = Cb(c), null !== b && Fc(b), a.blockedOn = c, !1;
    b.shift();
  }
  return !0;
}
function Zc(a, b, c) {
  Xc(a) && c.delete(b);
}
function $c() {
  Jc = !1;
  null !== Lc && Xc(Lc) && (Lc = null);
  null !== Mc && Xc(Mc) && (Mc = null);
  null !== Nc && Xc(Nc) && (Nc = null);
  Oc.forEach(Zc);
  Pc.forEach(Zc);
}
function ad(a, b) {
  a.blockedOn === b && (a.blockedOn = null, Jc || (Jc = !0, ca.unstable_scheduleCallback(ca.unstable_NormalPriority, $c)));
}
function bd(a) {
  function b(b) {
    return ad(b, a);
  }
  if (0 < Kc.length) {
    ad(Kc[0], a);
    for (var c = 1; c < Kc.length; c++) {
      var d = Kc[c];
      d.blockedOn === a && (d.blockedOn = null);
    }
  }
  null !== Lc && ad(Lc, a);
  null !== Mc && ad(Mc, a);
  null !== Nc && ad(Nc, a);
  Oc.forEach(b);
  Pc.forEach(b);
  for (c = 0; c < Qc.length; c++) d = Qc[c], d.blockedOn === a && (d.blockedOn = null);
  for (; 0 < Qc.length && (c = Qc[0], null === c.blockedOn);) Vc(c), null === c.blockedOn && Qc.shift();
}
var cd = ua.ReactCurrentBatchConfig,
  dd = !0;
function ed(a, b, c, d) {
  var e = C,
    f = cd.transition;
  cd.transition = null;
  try {
    C = 1, fd(a, b, c, d);
  } finally {
    C = e, cd.transition = f;
  }
}
function gd(a, b, c, d) {
  var e = C,
    f = cd.transition;
  cd.transition = null;
  try {
    C = 4, fd(a, b, c, d);
  } finally {
    C = e, cd.transition = f;
  }
}
function fd(a, b, c, d) {
  if (dd) {
    var e = Yc(a, b, c, d);
    if (null === e) hd(a, b, d, id, c), Sc(a, d);else if (Uc(e, a, b, c, d)) d.stopPropagation();else if (Sc(a, d), b & 4 && -1 < Rc.indexOf(a)) {
      for (; null !== e;) {
        var f = Cb(e);
        null !== f && Ec(f);
        f = Yc(a, b, c, d);
        null === f && hd(a, b, d, id, c);
        if (f === e) break;
        e = f;
      }
      null !== e && d.stopPropagation();
    } else hd(a, b, d, null, c);
  }
}
var id = null;
function Yc(a, b, c, d) {
  id = null;
  a = xb(d);
  a = Wc(a);
  if (null !== a) if (b = Vb(a), null === b) a = null;else if (c = b.tag, 13 === c) {
    a = Wb(b);
    if (null !== a) return a;
    a = null;
  } else if (3 === c) {
    if (b.stateNode.current.memoizedState.isDehydrated) return 3 === b.tag ? b.stateNode.containerInfo : null;
    a = null;
  } else b !== a && (a = null);
  id = a;
  return null;
}
function jd(a) {
  switch (a) {
    case "cancel":
    case "click":
    case "close":
    case "contextmenu":
    case "copy":
    case "cut":
    case "auxclick":
    case "dblclick":
    case "dragend":
    case "dragstart":
    case "drop":
    case "focusin":
    case "focusout":
    case "input":
    case "invalid":
    case "keydown":
    case "keypress":
    case "keyup":
    case "mousedown":
    case "mouseup":
    case "paste":
    case "pause":
    case "play":
    case "pointercancel":
    case "pointerdown":
    case "pointerup":
    case "ratechange":
    case "reset":
    case "resize":
    case "seeked":
    case "submit":
    case "touchcancel":
    case "touchend":
    case "touchstart":
    case "volumechange":
    case "change":
    case "selectionchange":
    case "textInput":
    case "compositionstart":
    case "compositionend":
    case "compositionupdate":
    case "beforeblur":
    case "afterblur":
    case "beforeinput":
    case "blur":
    case "fullscreenchange":
    case "focus":
    case "hashchange":
    case "popstate":
    case "select":
    case "selectstart":
      return 1;
    case "drag":
    case "dragenter":
    case "dragexit":
    case "dragleave":
    case "dragover":
    case "mousemove":
    case "mouseout":
    case "mouseover":
    case "pointermove":
    case "pointerout":
    case "pointerover":
    case "scroll":
    case "toggle":
    case "touchmove":
    case "wheel":
    case "mouseenter":
    case "mouseleave":
    case "pointerenter":
    case "pointerleave":
      return 4;
    case "message":
      switch (ec()) {
        case fc:
          return 1;
        case gc:
          return 4;
        case hc:
        case ic:
          return 16;
        case jc:
          return 536870912;
        default:
          return 16;
      }
    default:
      return 16;
  }
}
var kd = null,
  ld = null,
  md = null;
function nd() {
  if (md) return md;
  var a,
    b = ld,
    c = b.length,
    d,
    e = "value" in kd ? kd.value : kd.textContent,
    f = e.length;
  for (a = 0; a < c && b[a] === e[a]; a++);
  var g = c - a;
  for (d = 1; d <= g && b[c - d] === e[f - d]; d++);
  return md = e.slice(a, 1 < d ? 1 - d : void 0);
}
function od(a) {
  var b = a.keyCode;
  "charCode" in a ? (a = a.charCode, 0 === a && 13 === b && (a = 13)) : a = b;
  10 === a && (a = 13);
  return 32 <= a || 13 === a ? a : 0;
}
function pd() {
  return !0;
}
function qd() {
  return !1;
}
function rd(a) {
  function b(b, d, e, f, g) {
    this._reactName = b;
    this._targetInst = e;
    this.type = d;
    this.nativeEvent = f;
    this.target = g;
    this.currentTarget = null;
    for (var c in a) a.hasOwnProperty(c) && (b = a[c], this[c] = b ? b(f) : f[c]);
    this.isDefaultPrevented = (null != f.defaultPrevented ? f.defaultPrevented : !1 === f.returnValue) ? pd : qd;
    this.isPropagationStopped = qd;
    return this;
  }
  A(b.prototype, {
    preventDefault: function () {
      this.defaultPrevented = !0;
      var a = this.nativeEvent;
      a && (a.preventDefault ? a.preventDefault() : "unknown" !== typeof a.returnValue && (a.returnValue = !1), this.isDefaultPrevented = pd);
    },
    stopPropagation: function () {
      var a = this.nativeEvent;
      a && (a.stopPropagation ? a.stopPropagation() : "unknown" !== typeof a.cancelBubble && (a.cancelBubble = !0), this.isPropagationStopped = pd);
    },
    persist: function () {},
    isPersistent: pd
  });
  return b;
}
var sd = {
    eventPhase: 0,
    bubbles: 0,
    cancelable: 0,
    timeStamp: function (a) {
      return a.timeStamp || Date.now();
    },
    defaultPrevented: 0,
    isTrusted: 0
  },
  td = rd(sd),
  ud = A({}, sd, {
    view: 0,
    detail: 0
  }),
  vd = rd(ud),
  wd,
  xd,
  yd,
  Ad = A({}, ud, {
    screenX: 0,
    screenY: 0,
    clientX: 0,
    clientY: 0,
    pageX: 0,
    pageY: 0,
    ctrlKey: 0,
    shiftKey: 0,
    altKey: 0,
    metaKey: 0,
    getModifierState: zd,
    button: 0,
    buttons: 0,
    relatedTarget: function (a) {
      return void 0 === a.relatedTarget ? a.fromElement === a.srcElement ? a.toElement : a.fromElement : a.relatedTarget;
    },
    movementX: function (a) {
      if ("movementX" in a) return a.movementX;
      a !== yd && (yd && "mousemove" === a.type ? (wd = a.screenX - yd.screenX, xd = a.screenY - yd.screenY) : xd = wd = 0, yd = a);
      return wd;
    },
    movementY: function (a) {
      return "movementY" in a ? a.movementY : xd;
    }
  }),
  Bd = rd(Ad),
  Cd = A({}, Ad, {
    dataTransfer: 0
  }),
  Dd = rd(Cd),
  Ed = A({}, ud, {
    relatedTarget: 0
  }),
  Fd = rd(Ed),
  Gd = A({}, sd, {
    animationName: 0,
    elapsedTime: 0,
    pseudoElement: 0
  }),
  Hd = rd(Gd),
  Id = A({}, sd, {
    clipboardData: function (a) {
      return "clipboardData" in a ? a.clipboardData : window.clipboardData;
    }
  }),
  Jd = rd(Id),
  Kd = A({}, sd, {
    data: 0
  }),
  Ld = rd(Kd),
  Md = {
    Esc: "Escape",
    Spacebar: " ",
    Left: "ArrowLeft",
    Up: "ArrowUp",
    Right: "ArrowRight",
    Down: "ArrowDown",
    Del: "Delete",
    Win: "OS",
    Menu: "ContextMenu",
    Apps: "ContextMenu",
    Scroll: "ScrollLock",
    MozPrintableKey: "Unidentified"
  },
  Nd = {
    8: "Backspace",
    9: "Tab",
    12: "Clear",
    13: "Enter",
    16: "Shift",
    17: "Control",
    18: "Alt",
    19: "Pause",
    20: "CapsLock",
    27: "Escape",
    32: " ",
    33: "PageUp",
    34: "PageDown",
    35: "End",
    36: "Home",
    37: "ArrowLeft",
    38: "ArrowUp",
    39: "ArrowRight",
    40: "ArrowDown",
    45: "Insert",
    46: "Delete",
    112: "F1",
    113: "F2",
    114: "F3",
    115: "F4",
    116: "F5",
    117: "F6",
    118: "F7",
    119: "F8",
    120: "F9",
    121: "F10",
    122: "F11",
    123: "F12",
    144: "NumLock",
    145: "ScrollLock",
    224: "Meta"
  },
  Od = {
    Alt: "altKey",
    Control: "ctrlKey",
    Meta: "metaKey",
    Shift: "shiftKey"
  };
function Pd(a) {
  var b = this.nativeEvent;
  return b.getModifierState ? b.getModifierState(a) : (a = Od[a]) ? !!b[a] : !1;
}
function zd() {
  return Pd;
}
var Qd = A({}, ud, {
    key: function (a) {
      if (a.key) {
        var b = Md[a.key] || a.key;
        if ("Unidentified" !== b) return b;
      }
      return "keypress" === a.type ? (a = od(a), 13 === a ? "Enter" : String.fromCharCode(a)) : "keydown" === a.type || "keyup" === a.type ? Nd[a.keyCode] || "Unidentified" : "";
    },
    code: 0,
    location: 0,
    ctrlKey: 0,
    shiftKey: 0,
    altKey: 0,
    metaKey: 0,
    repeat: 0,
    locale: 0,
    getModifierState: zd,
    charCode: function (a) {
      return "keypress" === a.type ? od(a) : 0;
    },
    keyCode: function (a) {
      return "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
    },
    which: function (a) {
      return "keypress" === a.type ? od(a) : "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
    }
  }),
  Rd = rd(Qd),
  Sd = A({}, Ad, {
    pointerId: 0,
    width: 0,
    height: 0,
    pressure: 0,
    tangentialPressure: 0,
    tiltX: 0,
    tiltY: 0,
    twist: 0,
    pointerType: 0,
    isPrimary: 0
  }),
  Td = rd(Sd),
  Ud = A({}, ud, {
    touches: 0,
    targetTouches: 0,
    changedTouches: 0,
    altKey: 0,
    metaKey: 0,
    ctrlKey: 0,
    shiftKey: 0,
    getModifierState: zd
  }),
  Vd = rd(Ud),
  Wd = A({}, sd, {
    propertyName: 0,
    elapsedTime: 0,
    pseudoElement: 0
  }),
  Xd = rd(Wd),
  Yd = A({}, Ad, {
    deltaX: function (a) {
      return "deltaX" in a ? a.deltaX : "wheelDeltaX" in a ? -a.wheelDeltaX : 0;
    },
    deltaY: function (a) {
      return "deltaY" in a ? a.deltaY : "wheelDeltaY" in a ? -a.wheelDeltaY : "wheelDelta" in a ? -a.wheelDelta : 0;
    },
    deltaZ: 0,
    deltaMode: 0
  }),
  Zd = rd(Yd),
  $d = [9, 13, 27, 32],
  ae = ia && "CompositionEvent" in window,
  be = null;
ia && "documentMode" in document && (be = document.documentMode);
var ce = ia && "TextEvent" in window && !be,
  de = ia && (!ae || be && 8 < be && 11 >= be),
  ee = String.fromCharCode(32),
  fe = !1;
function ge(a, b) {
  switch (a) {
    case "keyup":
      return -1 !== $d.indexOf(b.keyCode);
    case "keydown":
      return 229 !== b.keyCode;
    case "keypress":
    case "mousedown":
    case "focusout":
      return !0;
    default:
      return !1;
  }
}
function he(a) {
  a = a.detail;
  return "object" === typeof a && "data" in a ? a.data : null;
}
var ie = !1;
function je(a, b) {
  switch (a) {
    case "compositionend":
      return he(b);
    case "keypress":
      if (32 !== b.which) return null;
      fe = !0;
      return ee;
    case "textInput":
      return a = b.data, a === ee && fe ? null : a;
    default:
      return null;
  }
}
function ke(a, b) {
  if (ie) return "compositionend" === a || !ae && ge(a, b) ? (a = nd(), md = ld = kd = null, ie = !1, a) : null;
  switch (a) {
    case "paste":
      return null;
    case "keypress":
      if (!(b.ctrlKey || b.altKey || b.metaKey) || b.ctrlKey && b.altKey) {
        if (b.char && 1 < b.char.length) return b.char;
        if (b.which) return String.fromCharCode(b.which);
      }
      return null;
    case "compositionend":
      return de && "ko" !== b.locale ? null : b.data;
    default:
      return null;
  }
}
var le = {
  color: !0,
  date: !0,
  datetime: !0,
  "datetime-local": !0,
  email: !0,
  month: !0,
  number: !0,
  password: !0,
  range: !0,
  search: !0,
  tel: !0,
  text: !0,
  time: !0,
  url: !0,
  week: !0
};
function me(a) {
  var b = a && a.nodeName && a.nodeName.toLowerCase();
  return "input" === b ? !!le[a.type] : "textarea" === b ? !0 : !1;
}
function ne(a, b, c, d) {
  Eb(d);
  b = oe(b, "onChange");
  0 < b.length && (c = new td("onChange", "change", null, c, d), a.push({
    event: c,
    listeners: b
  }));
}
var pe = null,
  qe = null;
function re(a) {
  se(a, 0);
}
function te(a) {
  var b = ue(a);
  if (Wa(b)) return a;
}
function ve(a, b) {
  if ("change" === a) return b;
}
var we = !1;
if (ia) {
  var xe;
  if (ia) {
    var ye = "oninput" in document;
    if (!ye) {
      var ze = document.createElement("div");
      ze.setAttribute("oninput", "return;");
      ye = "function" === typeof ze.oninput;
    }
    xe = ye;
  } else xe = !1;
  we = xe && (!document.documentMode || 9 < document.documentMode);
}
function Ae() {
  pe && (pe.detachEvent("onpropertychange", Be), qe = pe = null);
}
function Be(a) {
  if ("value" === a.propertyName && te(qe)) {
    var b = [];
    ne(b, qe, a, xb(a));
    Jb(re, b);
  }
}
function Ce(a, b, c) {
  "focusin" === a ? (Ae(), pe = b, qe = c, pe.attachEvent("onpropertychange", Be)) : "focusout" === a && Ae();
}
function De(a) {
  if ("selectionchange" === a || "keyup" === a || "keydown" === a) return te(qe);
}
function Ee(a, b) {
  if ("click" === a) return te(b);
}
function Fe(a, b) {
  if ("input" === a || "change" === a) return te(b);
}
function Ge(a, b) {
  return a === b && (0 !== a || 1 / a === 1 / b) || a !== a && b !== b;
}
var He = "function" === typeof Object.is ? Object.is : Ge;
function Ie(a, b) {
  if (He(a, b)) return !0;
  if ("object" !== typeof a || null === a || "object" !== typeof b || null === b) return !1;
  var c = Object.keys(a),
    d = Object.keys(b);
  if (c.length !== d.length) return !1;
  for (d = 0; d < c.length; d++) {
    var e = c[d];
    if (!ja.call(b, e) || !He(a[e], b[e])) return !1;
  }
  return !0;
}
function Je(a) {
  for (; a && a.firstChild;) a = a.firstChild;
  return a;
}
function Ke(a, b) {
  var c = Je(a);
  a = 0;
  for (var d; c;) {
    if (3 === c.nodeType) {
      d = a + c.textContent.length;
      if (a <= b && d >= b) return {
        node: c,
        offset: b - a
      };
      a = d;
    }
    a: {
      for (; c;) {
        if (c.nextSibling) {
          c = c.nextSibling;
          break a;
        }
        c = c.parentNode;
      }
      c = void 0;
    }
    c = Je(c);
  }
}
function Le(a, b) {
  return a && b ? a === b ? !0 : a && 3 === a.nodeType ? !1 : b && 3 === b.nodeType ? Le(a, b.parentNode) : "contains" in a ? a.contains(b) : a.compareDocumentPosition ? !!(a.compareDocumentPosition(b) & 16) : !1 : !1;
}
function Me() {
  for (var a = window, b = Xa(); b instanceof a.HTMLIFrameElement;) {
    try {
      var c = "string" === typeof b.contentWindow.location.href;
    } catch (d) {
      c = !1;
    }
    if (c) a = b.contentWindow;else break;
    b = Xa(a.document);
  }
  return b;
}
function Ne(a) {
  var b = a && a.nodeName && a.nodeName.toLowerCase();
  return b && ("input" === b && ("text" === a.type || "search" === a.type || "tel" === a.type || "url" === a.type || "password" === a.type) || "textarea" === b || "true" === a.contentEditable);
}
function Oe(a) {
  var b = Me(),
    c = a.focusedElem,
    d = a.selectionRange;
  if (b !== c && c && c.ownerDocument && Le(c.ownerDocument.documentElement, c)) {
    if (null !== d && Ne(c)) if (b = d.start, a = d.end, void 0 === a && (a = b), "selectionStart" in c) c.selectionStart = b, c.selectionEnd = Math.min(a, c.value.length);else if (a = (b = c.ownerDocument || document) && b.defaultView || window, a.getSelection) {
      a = a.getSelection();
      var e = c.textContent.length,
        f = Math.min(d.start, e);
      d = void 0 === d.end ? f : Math.min(d.end, e);
      !a.extend && f > d && (e = d, d = f, f = e);
      e = Ke(c, f);
      var g = Ke(c, d);
      e && g && (1 !== a.rangeCount || a.anchorNode !== e.node || a.anchorOffset !== e.offset || a.focusNode !== g.node || a.focusOffset !== g.offset) && (b = b.createRange(), b.setStart(e.node, e.offset), a.removeAllRanges(), f > d ? (a.addRange(b), a.extend(g.node, g.offset)) : (b.setEnd(g.node, g.offset), a.addRange(b)));
    }
    b = [];
    for (a = c; a = a.parentNode;) 1 === a.nodeType && b.push({
      element: a,
      left: a.scrollLeft,
      top: a.scrollTop
    });
    "function" === typeof c.focus && c.focus();
    for (c = 0; c < b.length; c++) a = b[c], a.element.scrollLeft = a.left, a.element.scrollTop = a.top;
  }
}
var Pe = ia && "documentMode" in document && 11 >= document.documentMode,
  Qe = null,
  Re = null,
  Se = null,
  Te = !1;
function Ue(a, b, c) {
  var d = c.window === c ? c.document : 9 === c.nodeType ? c : c.ownerDocument;
  Te || null == Qe || Qe !== Xa(d) || (d = Qe, "selectionStart" in d && Ne(d) ? d = {
    start: d.selectionStart,
    end: d.selectionEnd
  } : (d = (d.ownerDocument && d.ownerDocument.defaultView || window).getSelection(), d = {
    anchorNode: d.anchorNode,
    anchorOffset: d.anchorOffset,
    focusNode: d.focusNode,
    focusOffset: d.focusOffset
  }), Se && Ie(Se, d) || (Se = d, d = oe(Re, "onSelect"), 0 < d.length && (b = new td("onSelect", "select", null, b, c), a.push({
    event: b,
    listeners: d
  }), b.target = Qe)));
}
function Ve(a, b) {
  var c = {};
  c[a.toLowerCase()] = b.toLowerCase();
  c["Webkit" + a] = "webkit" + b;
  c["Moz" + a] = "moz" + b;
  return c;
}
var We = {
    animationend: Ve("Animation", "AnimationEnd"),
    animationiteration: Ve("Animation", "AnimationIteration"),
    animationstart: Ve("Animation", "AnimationStart"),
    transitionend: Ve("Transition", "TransitionEnd")
  },
  Xe = {},
  Ye = {};
ia && (Ye = document.createElement("div").style, "AnimationEvent" in window || (delete We.animationend.animation, delete We.animationiteration.animation, delete We.animationstart.animation), "TransitionEvent" in window || delete We.transitionend.transition);
function Ze(a) {
  if (Xe[a]) return Xe[a];
  if (!We[a]) return a;
  var b = We[a],
    c;
  for (c in b) if (b.hasOwnProperty(c) && c in Ye) return Xe[a] = b[c];
  return a;
}
var $e = Ze("animationend"),
  af = Ze("animationiteration"),
  bf = Ze("animationstart"),
  cf = Ze("transitionend"),
  df = new Map(),
  ef = "abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
function ff(a, b) {
  df.set(a, b);
  fa(b, [a]);
}
for (var gf = 0; gf < ef.length; gf++) {
  var hf = ef[gf],
    jf = hf.toLowerCase(),
    kf = hf[0].toUpperCase() + hf.slice(1);
  ff(jf, "on" + kf);
}
ff($e, "onAnimationEnd");
ff(af, "onAnimationIteration");
ff(bf, "onAnimationStart");
ff("dblclick", "onDoubleClick");
ff("focusin", "onFocus");
ff("focusout", "onBlur");
ff(cf, "onTransitionEnd");
ha("onMouseEnter", ["mouseout", "mouseover"]);
ha("onMouseLeave", ["mouseout", "mouseover"]);
ha("onPointerEnter", ["pointerout", "pointerover"]);
ha("onPointerLeave", ["pointerout", "pointerover"]);
fa("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
fa("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
fa("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
fa("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
fa("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
fa("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
var lf = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),
  mf = new Set("cancel close invalid load scroll toggle".split(" ").concat(lf));
function nf(a, b, c) {
  var d = a.type || "unknown-event";
  a.currentTarget = c;
  Ub(d, b, void 0, a);
  a.currentTarget = null;
}
function se(a, b) {
  b = 0 !== (b & 4);
  for (var c = 0; c < a.length; c++) {
    var d = a[c],
      e = d.event;
    d = d.listeners;
    a: {
      var f = void 0;
      if (b) for (var g = d.length - 1; 0 <= g; g--) {
        var h = d[g],
          k = h.instance,
          l = h.currentTarget;
        h = h.listener;
        if (k !== f && e.isPropagationStopped()) break a;
        nf(e, h, l);
        f = k;
      } else for (g = 0; g < d.length; g++) {
        h = d[g];
        k = h.instance;
        l = h.currentTarget;
        h = h.listener;
        if (k !== f && e.isPropagationStopped()) break a;
        nf(e, h, l);
        f = k;
      }
    }
  }
  if (Qb) throw a = Rb, Qb = !1, Rb = null, a;
}
function D(a, b) {
  var c = b[of];
  void 0 === c && (c = b[of] = new Set());
  var d = a + "__bubble";
  c.has(d) || (pf(b, a, 2, !1), c.add(d));
}
function qf(a, b, c) {
  var d = 0;
  b && (d |= 4);
  pf(c, a, d, b);
}
var rf = "_reactListening" + Math.random().toString(36).slice(2);
function sf(a) {
  if (!a[rf]) {
    a[rf] = !0;
    da.forEach(function (b) {
      "selectionchange" !== b && (mf.has(b) || qf(b, !1, a), qf(b, !0, a));
    });
    var b = 9 === a.nodeType ? a : a.ownerDocument;
    null === b || b[rf] || (b[rf] = !0, qf("selectionchange", !1, b));
  }
}
function pf(a, b, c, d) {
  switch (jd(b)) {
    case 1:
      var e = ed;
      break;
    case 4:
      e = gd;
      break;
    default:
      e = fd;
  }
  c = e.bind(null, b, c, a);
  e = void 0;
  !Lb || "touchstart" !== b && "touchmove" !== b && "wheel" !== b || (e = !0);
  d ? void 0 !== e ? a.addEventListener(b, c, {
    capture: !0,
    passive: e
  }) : a.addEventListener(b, c, !0) : void 0 !== e ? a.addEventListener(b, c, {
    passive: e
  }) : a.addEventListener(b, c, !1);
}
function hd(a, b, c, d, e) {
  var f = d;
  if (0 === (b & 1) && 0 === (b & 2) && null !== d) a: for (;;) {
    if (null === d) return;
    var g = d.tag;
    if (3 === g || 4 === g) {
      var h = d.stateNode.containerInfo;
      if (h === e || 8 === h.nodeType && h.parentNode === e) break;
      if (4 === g) for (g = d.return; null !== g;) {
        var k = g.tag;
        if (3 === k || 4 === k) if (k = g.stateNode.containerInfo, k === e || 8 === k.nodeType && k.parentNode === e) return;
        g = g.return;
      }
      for (; null !== h;) {
        g = Wc(h);
        if (null === g) return;
        k = g.tag;
        if (5 === k || 6 === k) {
          d = f = g;
          continue a;
        }
        h = h.parentNode;
      }
    }
    d = d.return;
  }
  Jb(function () {
    var d = f,
      e = xb(c),
      g = [];
    a: {
      var h = df.get(a);
      if (void 0 !== h) {
        var k = td,
          n = a;
        switch (a) {
          case "keypress":
            if (0 === od(c)) break a;
          case "keydown":
          case "keyup":
            k = Rd;
            break;
          case "focusin":
            n = "focus";
            k = Fd;
            break;
          case "focusout":
            n = "blur";
            k = Fd;
            break;
          case "beforeblur":
          case "afterblur":
            k = Fd;
            break;
          case "click":
            if (2 === c.button) break a;
          case "auxclick":
          case "dblclick":
          case "mousedown":
          case "mousemove":
          case "mouseup":
          case "mouseout":
          case "mouseover":
          case "contextmenu":
            k = Bd;
            break;
          case "drag":
          case "dragend":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "dragstart":
          case "drop":
            k = Dd;
            break;
          case "touchcancel":
          case "touchend":
          case "touchmove":
          case "touchstart":
            k = Vd;
            break;
          case $e:
          case af:
          case bf:
            k = Hd;
            break;
          case cf:
            k = Xd;
            break;
          case "scroll":
            k = vd;
            break;
          case "wheel":
            k = Zd;
            break;
          case "copy":
          case "cut":
          case "paste":
            k = Jd;
            break;
          case "gotpointercapture":
          case "lostpointercapture":
          case "pointercancel":
          case "pointerdown":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "pointerup":
            k = Td;
        }
        var t = 0 !== (b & 4),
          J = !t && "scroll" === a,
          x = t ? null !== h ? h + "Capture" : null : h;
        t = [];
        for (var w = d, u; null !== w;) {
          u = w;
          var F = u.stateNode;
          5 === u.tag && null !== F && (u = F, null !== x && (F = Kb(w, x), null != F && t.push(tf(w, F, u))));
          if (J) break;
          w = w.return;
        }
        0 < t.length && (h = new k(h, n, null, c, e), g.push({
          event: h,
          listeners: t
        }));
      }
    }
    if (0 === (b & 7)) {
      a: {
        h = "mouseover" === a || "pointerover" === a;
        k = "mouseout" === a || "pointerout" === a;
        if (h && c !== wb && (n = c.relatedTarget || c.fromElement) && (Wc(n) || n[uf])) break a;
        if (k || h) {
          h = e.window === e ? e : (h = e.ownerDocument) ? h.defaultView || h.parentWindow : window;
          if (k) {
            if (n = c.relatedTarget || c.toElement, k = d, n = n ? Wc(n) : null, null !== n && (J = Vb(n), n !== J || 5 !== n.tag && 6 !== n.tag)) n = null;
          } else k = null, n = d;
          if (k !== n) {
            t = Bd;
            F = "onMouseLeave";
            x = "onMouseEnter";
            w = "mouse";
            if ("pointerout" === a || "pointerover" === a) t = Td, F = "onPointerLeave", x = "onPointerEnter", w = "pointer";
            J = null == k ? h : ue(k);
            u = null == n ? h : ue(n);
            h = new t(F, w + "leave", k, c, e);
            h.target = J;
            h.relatedTarget = u;
            F = null;
            Wc(e) === d && (t = new t(x, w + "enter", n, c, e), t.target = u, t.relatedTarget = J, F = t);
            J = F;
            if (k && n) b: {
              t = k;
              x = n;
              w = 0;
              for (u = t; u; u = vf(u)) w++;
              u = 0;
              for (F = x; F; F = vf(F)) u++;
              for (; 0 < w - u;) t = vf(t), w--;
              for (; 0 < u - w;) x = vf(x), u--;
              for (; w--;) {
                if (t === x || null !== x && t === x.alternate) break b;
                t = vf(t);
                x = vf(x);
              }
              t = null;
            } else t = null;
            null !== k && wf(g, h, k, t, !1);
            null !== n && null !== J && wf(g, J, n, t, !0);
          }
        }
      }
      a: {
        h = d ? ue(d) : window;
        k = h.nodeName && h.nodeName.toLowerCase();
        if ("select" === k || "input" === k && "file" === h.type) var na = ve;else if (me(h)) {
          if (we) na = Fe;else {
            na = De;
            var xa = Ce;
          }
        } else (k = h.nodeName) && "input" === k.toLowerCase() && ("checkbox" === h.type || "radio" === h.type) && (na = Ee);
        if (na && (na = na(a, d))) {
          ne(g, na, c, e);
          break a;
        }
        xa && xa(a, h, d);
        "focusout" === a && (xa = h._wrapperState) && xa.controlled && "number" === h.type && cb(h, "number", h.value);
      }
      xa = d ? ue(d) : window;
      switch (a) {
        case "focusin":
          if (me(xa) || "true" === xa.contentEditable) Qe = xa, Re = d, Se = null;
          break;
        case "focusout":
          Se = Re = Qe = null;
          break;
        case "mousedown":
          Te = !0;
          break;
        case "contextmenu":
        case "mouseup":
        case "dragend":
          Te = !1;
          Ue(g, c, e);
          break;
        case "selectionchange":
          if (Pe) break;
        case "keydown":
        case "keyup":
          Ue(g, c, e);
      }
      var $a;
      if (ae) b: {
        switch (a) {
          case "compositionstart":
            var ba = "onCompositionStart";
            break b;
          case "compositionend":
            ba = "onCompositionEnd";
            break b;
          case "compositionupdate":
            ba = "onCompositionUpdate";
            break b;
        }
        ba = void 0;
      } else ie ? ge(a, c) && (ba = "onCompositionEnd") : "keydown" === a && 229 === c.keyCode && (ba = "onCompositionStart");
      ba && (de && "ko" !== c.locale && (ie || "onCompositionStart" !== ba ? "onCompositionEnd" === ba && ie && ($a = nd()) : (kd = e, ld = "value" in kd ? kd.value : kd.textContent, ie = !0)), xa = oe(d, ba), 0 < xa.length && (ba = new Ld(ba, a, null, c, e), g.push({
        event: ba,
        listeners: xa
      }), $a ? ba.data = $a : ($a = he(c), null !== $a && (ba.data = $a))));
      if ($a = ce ? je(a, c) : ke(a, c)) d = oe(d, "onBeforeInput"), 0 < d.length && (e = new Ld("onBeforeInput", "beforeinput", null, c, e), g.push({
        event: e,
        listeners: d
      }), e.data = $a);
    }
    se(g, b);
  });
}
function tf(a, b, c) {
  return {
    instance: a,
    listener: b,
    currentTarget: c
  };
}
function oe(a, b) {
  for (var c = b + "Capture", d = []; null !== a;) {
    var e = a,
      f = e.stateNode;
    5 === e.tag && null !== f && (e = f, f = Kb(a, c), null != f && d.unshift(tf(a, f, e)), f = Kb(a, b), null != f && d.push(tf(a, f, e)));
    a = a.return;
  }
  return d;
}
function vf(a) {
  if (null === a) return null;
  do a = a.return; while (a && 5 !== a.tag);
  return a ? a : null;
}
function wf(a, b, c, d, e) {
  for (var f = b._reactName, g = []; null !== c && c !== d;) {
    var h = c,
      k = h.alternate,
      l = h.stateNode;
    if (null !== k && k === d) break;
    5 === h.tag && null !== l && (h = l, e ? (k = Kb(c, f), null != k && g.unshift(tf(c, k, h))) : e || (k = Kb(c, f), null != k && g.push(tf(c, k, h))));
    c = c.return;
  }
  0 !== g.length && a.push({
    event: b,
    listeners: g
  });
}
var xf = /\r\n?/g,
  yf = /\u0000|\uFFFD/g;
function zf(a) {
  return ("string" === typeof a ? a : "" + a).replace(xf, "\n").replace(yf, "");
}
function Af(a, b, c) {
  b = zf(b);
  if (zf(a) !== b && c) throw Error(p(425));
}
function Bf() {}
var Cf = null,
  Df = null;
function Ef(a, b) {
  return "textarea" === a || "noscript" === a || "string" === typeof b.children || "number" === typeof b.children || "object" === typeof b.dangerouslySetInnerHTML && null !== b.dangerouslySetInnerHTML && null != b.dangerouslySetInnerHTML.__html;
}
var Ff = "function" === typeof setTimeout ? setTimeout : void 0,
  Gf = "function" === typeof clearTimeout ? clearTimeout : void 0,
  Hf = "function" === typeof Promise ? Promise : void 0,
  Jf = "function" === typeof queueMicrotask ? queueMicrotask : "undefined" !== typeof Hf ? function (a) {
    return Hf.resolve(null).then(a).catch(If);
  } : Ff;
function If(a) {
  setTimeout(function () {
    throw a;
  });
}
function Kf(a, b) {
  var c = b,
    d = 0;
  do {
    var e = c.nextSibling;
    a.removeChild(c);
    if (e && 8 === e.nodeType) if (c = e.data, "/$" === c) {
      if (0 === d) {
        a.removeChild(e);
        bd(b);
        return;
      }
      d--;
    } else "$" !== c && "$?" !== c && "$!" !== c || d++;
    c = e;
  } while (c);
  bd(b);
}
function Lf(a) {
  for (; null != a; a = a.nextSibling) {
    var b = a.nodeType;
    if (1 === b || 3 === b) break;
    if (8 === b) {
      b = a.data;
      if ("$" === b || "$!" === b || "$?" === b) break;
      if ("/$" === b) return null;
    }
  }
  return a;
}
function Mf(a) {
  a = a.previousSibling;
  for (var b = 0; a;) {
    if (8 === a.nodeType) {
      var c = a.data;
      if ("$" === c || "$!" === c || "$?" === c) {
        if (0 === b) return a;
        b--;
      } else "/$" === c && b++;
    }
    a = a.previousSibling;
  }
  return null;
}
var Nf = Math.random().toString(36).slice(2),
  Of = "__reactFiber$" + Nf,
  Pf = "__reactProps$" + Nf,
  uf = "__reactContainer$" + Nf,
  of = "__reactEvents$" + Nf,
  Qf = "__reactListeners$" + Nf,
  Rf = "__reactHandles$" + Nf;
function Wc(a) {
  var b = a[Of];
  if (b) return b;
  for (var c = a.parentNode; c;) {
    if (b = c[uf] || c[Of]) {
      c = b.alternate;
      if (null !== b.child || null !== c && null !== c.child) for (a = Mf(a); null !== a;) {
        if (c = a[Of]) return c;
        a = Mf(a);
      }
      return b;
    }
    a = c;
    c = a.parentNode;
  }
  return null;
}
function Cb(a) {
  a = a[Of] || a[uf];
  return !a || 5 !== a.tag && 6 !== a.tag && 13 !== a.tag && 3 !== a.tag ? null : a;
}
function ue(a) {
  if (5 === a.tag || 6 === a.tag) return a.stateNode;
  throw Error(p(33));
}
function Db(a) {
  return a[Pf] || null;
}
var Sf = [],
  Tf = -1;
function Uf(a) {
  return {
    current: a
  };
}
function E(a) {
  0 > Tf || (a.current = Sf[Tf], Sf[Tf] = null, Tf--);
}
function G(a, b) {
  Tf++;
  Sf[Tf] = a.current;
  a.current = b;
}
var Vf = {},
  H = Uf(Vf),
  Wf = Uf(!1),
  Xf = Vf;
function Yf(a, b) {
  var c = a.type.contextTypes;
  if (!c) return Vf;
  var d = a.stateNode;
  if (d && d.__reactInternalMemoizedUnmaskedChildContext === b) return d.__reactInternalMemoizedMaskedChildContext;
  var e = {},
    f;
  for (f in c) e[f] = b[f];
  d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b, a.__reactInternalMemoizedMaskedChildContext = e);
  return e;
}
function Zf(a) {
  a = a.childContextTypes;
  return null !== a && void 0 !== a;
}
function $f() {
  E(Wf);
  E(H);
}
function ag(a, b, c) {
  if (H.current !== Vf) throw Error(p(168));
  G(H, b);
  G(Wf, c);
}
function bg(a, b, c) {
  var d = a.stateNode;
  b = b.childContextTypes;
  if ("function" !== typeof d.getChildContext) return c;
  d = d.getChildContext();
  for (var e in d) if (!(e in b)) throw Error(p(108, Ra(a) || "Unknown", e));
  return A({}, c, d);
}
function cg(a) {
  a = (a = a.stateNode) && a.__reactInternalMemoizedMergedChildContext || Vf;
  Xf = H.current;
  G(H, a);
  G(Wf, Wf.current);
  return !0;
}
function dg(a, b, c) {
  var d = a.stateNode;
  if (!d) throw Error(p(169));
  c ? (a = bg(a, b, Xf), d.__reactInternalMemoizedMergedChildContext = a, E(Wf), E(H), G(H, a)) : E(Wf);
  G(Wf, c);
}
var eg = null,
  fg = !1,
  gg = !1;
function hg(a) {
  null === eg ? eg = [a] : eg.push(a);
}
function ig(a) {
  fg = !0;
  hg(a);
}
function jg() {
  if (!gg && null !== eg) {
    gg = !0;
    var a = 0,
      b = C;
    try {
      var c = eg;
      for (C = 1; a < c.length; a++) {
        var d = c[a];
        do d = d(!0); while (null !== d);
      }
      eg = null;
      fg = !1;
    } catch (e) {
      throw null !== eg && (eg = eg.slice(a + 1)), ac(fc, jg), e;
    } finally {
      C = b, gg = !1;
    }
  }
  return null;
}
var kg = [],
  lg = 0,
  mg = null,
  ng = 0,
  og = [],
  pg = 0,
  qg = null,
  rg = 1,
  sg = "";
function tg(a, b) {
  kg[lg++] = ng;
  kg[lg++] = mg;
  mg = a;
  ng = b;
}
function ug(a, b, c) {
  og[pg++] = rg;
  og[pg++] = sg;
  og[pg++] = qg;
  qg = a;
  var d = rg;
  a = sg;
  var e = 32 - oc(d) - 1;
  d &= ~(1 << e);
  c += 1;
  var f = 32 - oc(b) + e;
  if (30 < f) {
    var g = e - e % 5;
    f = (d & (1 << g) - 1).toString(32);
    d >>= g;
    e -= g;
    rg = 1 << 32 - oc(b) + e | c << e | d;
    sg = f + a;
  } else rg = 1 << f | c << e | d, sg = a;
}
function vg(a) {
  null !== a.return && (tg(a, 1), ug(a, 1, 0));
}
function wg(a) {
  for (; a === mg;) mg = kg[--lg], kg[lg] = null, ng = kg[--lg], kg[lg] = null;
  for (; a === qg;) qg = og[--pg], og[pg] = null, sg = og[--pg], og[pg] = null, rg = og[--pg], og[pg] = null;
}
var xg = null,
  yg = null,
  I = !1,
  zg = null;
function Ag(a, b) {
  var c = Bg(5, null, null, 0);
  c.elementType = "DELETED";
  c.stateNode = b;
  c.return = a;
  b = a.deletions;
  null === b ? (a.deletions = [c], a.flags |= 16) : b.push(c);
}
function Cg(a, b) {
  switch (a.tag) {
    case 5:
      var c = a.type;
      b = 1 !== b.nodeType || c.toLowerCase() !== b.nodeName.toLowerCase() ? null : b;
      return null !== b ? (a.stateNode = b, xg = a, yg = Lf(b.firstChild), !0) : !1;
    case 6:
      return b = "" === a.pendingProps || 3 !== b.nodeType ? null : b, null !== b ? (a.stateNode = b, xg = a, yg = null, !0) : !1;
    case 13:
      return b = 8 !== b.nodeType ? null : b, null !== b ? (c = null !== qg ? {
        id: rg,
        overflow: sg
      } : null, a.memoizedState = {
        dehydrated: b,
        treeContext: c,
        retryLane: 1073741824
      }, c = Bg(18, null, null, 0), c.stateNode = b, c.return = a, a.child = c, xg = a, yg = null, !0) : !1;
    default:
      return !1;
  }
}
function Dg(a) {
  return 0 !== (a.mode & 1) && 0 === (a.flags & 128);
}
function Eg(a) {
  if (I) {
    var b = yg;
    if (b) {
      var c = b;
      if (!Cg(a, b)) {
        if (Dg(a)) throw Error(p(418));
        b = Lf(c.nextSibling);
        var d = xg;
        b && Cg(a, b) ? Ag(d, c) : (a.flags = a.flags & -4097 | 2, I = !1, xg = a);
      }
    } else {
      if (Dg(a)) throw Error(p(418));
      a.flags = a.flags & -4097 | 2;
      I = !1;
      xg = a;
    }
  }
}
function Fg(a) {
  for (a = a.return; null !== a && 5 !== a.tag && 3 !== a.tag && 13 !== a.tag;) a = a.return;
  xg = a;
}
function Gg(a) {
  if (a !== xg) return !1;
  if (!I) return Fg(a), I = !0, !1;
  var b;
  (b = 3 !== a.tag) && !(b = 5 !== a.tag) && (b = a.type, b = "head" !== b && "body" !== b && !Ef(a.type, a.memoizedProps));
  if (b && (b = yg)) {
    if (Dg(a)) throw Hg(), Error(p(418));
    for (; b;) Ag(a, b), b = Lf(b.nextSibling);
  }
  Fg(a);
  if (13 === a.tag) {
    a = a.memoizedState;
    a = null !== a ? a.dehydrated : null;
    if (!a) throw Error(p(317));
    a: {
      a = a.nextSibling;
      for (b = 0; a;) {
        if (8 === a.nodeType) {
          var c = a.data;
          if ("/$" === c) {
            if (0 === b) {
              yg = Lf(a.nextSibling);
              break a;
            }
            b--;
          } else "$" !== c && "$!" !== c && "$?" !== c || b++;
        }
        a = a.nextSibling;
      }
      yg = null;
    }
  } else yg = xg ? Lf(a.stateNode.nextSibling) : null;
  return !0;
}
function Hg() {
  for (var a = yg; a;) a = Lf(a.nextSibling);
}
function Ig() {
  yg = xg = null;
  I = !1;
}
function Jg(a) {
  null === zg ? zg = [a] : zg.push(a);
}
var Kg = ua.ReactCurrentBatchConfig;
function Lg(a, b, c) {
  a = c.ref;
  if (null !== a && "function" !== typeof a && "object" !== typeof a) {
    if (c._owner) {
      c = c._owner;
      if (c) {
        if (1 !== c.tag) throw Error(p(309));
        var d = c.stateNode;
      }
      if (!d) throw Error(p(147, a));
      var e = d,
        f = "" + a;
      if (null !== b && null !== b.ref && "function" === typeof b.ref && b.ref._stringRef === f) return b.ref;
      b = function (a) {
        var b = e.refs;
        null === a ? delete b[f] : b[f] = a;
      };
      b._stringRef = f;
      return b;
    }
    if ("string" !== typeof a) throw Error(p(284));
    if (!c._owner) throw Error(p(290, a));
  }
  return a;
}
function Mg(a, b) {
  a = Object.prototype.toString.call(b);
  throw Error(p(31, "[object Object]" === a ? "object with keys {" + Object.keys(b).join(", ") + "}" : a));
}
function Ng(a) {
  var b = a._init;
  return b(a._payload);
}
function Og(a) {
  function b(b, c) {
    if (a) {
      var d = b.deletions;
      null === d ? (b.deletions = [c], b.flags |= 16) : d.push(c);
    }
  }
  function c(c, d) {
    if (!a) return null;
    for (; null !== d;) b(c, d), d = d.sibling;
    return null;
  }
  function d(a, b) {
    for (a = new Map(); null !== b;) null !== b.key ? a.set(b.key, b) : a.set(b.index, b), b = b.sibling;
    return a;
  }
  function e(a, b) {
    a = Pg(a, b);
    a.index = 0;
    a.sibling = null;
    return a;
  }
  function f(b, c, d) {
    b.index = d;
    if (!a) return b.flags |= 1048576, c;
    d = b.alternate;
    if (null !== d) return d = d.index, d < c ? (b.flags |= 2, c) : d;
    b.flags |= 2;
    return c;
  }
  function g(b) {
    a && null === b.alternate && (b.flags |= 2);
    return b;
  }
  function h(a, b, c, d) {
    if (null === b || 6 !== b.tag) return b = Qg(c, a.mode, d), b.return = a, b;
    b = e(b, c);
    b.return = a;
    return b;
  }
  function k(a, b, c, d) {
    var f = c.type;
    if (f === ya) return m(a, b, c.props.children, d, c.key);
    if (null !== b && (b.elementType === f || "object" === typeof f && null !== f && f.$$typeof === Ha && Ng(f) === b.type)) return d = e(b, c.props), d.ref = Lg(a, b, c), d.return = a, d;
    d = Rg(c.type, c.key, c.props, null, a.mode, d);
    d.ref = Lg(a, b, c);
    d.return = a;
    return d;
  }
  function l(a, b, c, d) {
    if (null === b || 4 !== b.tag || b.stateNode.containerInfo !== c.containerInfo || b.stateNode.implementation !== c.implementation) return b = Sg(c, a.mode, d), b.return = a, b;
    b = e(b, c.children || []);
    b.return = a;
    return b;
  }
  function m(a, b, c, d, f) {
    if (null === b || 7 !== b.tag) return b = Tg(c, a.mode, d, f), b.return = a, b;
    b = e(b, c);
    b.return = a;
    return b;
  }
  function q(a, b, c) {
    if ("string" === typeof b && "" !== b || "number" === typeof b) return b = Qg("" + b, a.mode, c), b.return = a, b;
    if ("object" === typeof b && null !== b) {
      switch (b.$$typeof) {
        case va:
          return c = Rg(b.type, b.key, b.props, null, a.mode, c), c.ref = Lg(a, null, b), c.return = a, c;
        case wa:
          return b = Sg(b, a.mode, c), b.return = a, b;
        case Ha:
          var d = b._init;
          return q(a, d(b._payload), c);
      }
      if (eb(b) || Ka(b)) return b = Tg(b, a.mode, c, null), b.return = a, b;
      Mg(a, b);
    }
    return null;
  }
  function r(a, b, c, d) {
    var e = null !== b ? b.key : null;
    if ("string" === typeof c && "" !== c || "number" === typeof c) return null !== e ? null : h(a, b, "" + c, d);
    if ("object" === typeof c && null !== c) {
      switch (c.$$typeof) {
        case va:
          return c.key === e ? k(a, b, c, d) : null;
        case wa:
          return c.key === e ? l(a, b, c, d) : null;
        case Ha:
          return e = c._init, r(a, b, e(c._payload), d);
      }
      if (eb(c) || Ka(c)) return null !== e ? null : m(a, b, c, d, null);
      Mg(a, c);
    }
    return null;
  }
  function y(a, b, c, d, e) {
    if ("string" === typeof d && "" !== d || "number" === typeof d) return a = a.get(c) || null, h(b, a, "" + d, e);
    if ("object" === typeof d && null !== d) {
      switch (d.$$typeof) {
        case va:
          return a = a.get(null === d.key ? c : d.key) || null, k(b, a, d, e);
        case wa:
          return a = a.get(null === d.key ? c : d.key) || null, l(b, a, d, e);
        case Ha:
          var f = d._init;
          return y(a, b, c, f(d._payload), e);
      }
      if (eb(d) || Ka(d)) return a = a.get(c) || null, m(b, a, d, e, null);
      Mg(b, d);
    }
    return null;
  }
  function n(e, g, h, k) {
    for (var l = null, m = null, u = g, w = g = 0, x = null; null !== u && w < h.length; w++) {
      u.index > w ? (x = u, u = null) : x = u.sibling;
      var n = r(e, u, h[w], k);
      if (null === n) {
        null === u && (u = x);
        break;
      }
      a && u && null === n.alternate && b(e, u);
      g = f(n, g, w);
      null === m ? l = n : m.sibling = n;
      m = n;
      u = x;
    }
    if (w === h.length) return c(e, u), I && tg(e, w), l;
    if (null === u) {
      for (; w < h.length; w++) u = q(e, h[w], k), null !== u && (g = f(u, g, w), null === m ? l = u : m.sibling = u, m = u);
      I && tg(e, w);
      return l;
    }
    for (u = d(e, u); w < h.length; w++) x = y(u, e, w, h[w], k), null !== x && (a && null !== x.alternate && u.delete(null === x.key ? w : x.key), g = f(x, g, w), null === m ? l = x : m.sibling = x, m = x);
    a && u.forEach(function (a) {
      return b(e, a);
    });
    I && tg(e, w);
    return l;
  }
  function t(e, g, h, k) {
    var l = Ka(h);
    if ("function" !== typeof l) throw Error(p(150));
    h = l.call(h);
    if (null == h) throw Error(p(151));
    for (var u = l = null, m = g, w = g = 0, x = null, n = h.next(); null !== m && !n.done; w++, n = h.next()) {
      m.index > w ? (x = m, m = null) : x = m.sibling;
      var t = r(e, m, n.value, k);
      if (null === t) {
        null === m && (m = x);
        break;
      }
      a && m && null === t.alternate && b(e, m);
      g = f(t, g, w);
      null === u ? l = t : u.sibling = t;
      u = t;
      m = x;
    }
    if (n.done) return c(e, m), I && tg(e, w), l;
    if (null === m) {
      for (; !n.done; w++, n = h.next()) n = q(e, n.value, k), null !== n && (g = f(n, g, w), null === u ? l = n : u.sibling = n, u = n);
      I && tg(e, w);
      return l;
    }
    for (m = d(e, m); !n.done; w++, n = h.next()) n = y(m, e, w, n.value, k), null !== n && (a && null !== n.alternate && m.delete(null === n.key ? w : n.key), g = f(n, g, w), null === u ? l = n : u.sibling = n, u = n);
    a && m.forEach(function (a) {
      return b(e, a);
    });
    I && tg(e, w);
    return l;
  }
  function J(a, d, f, h) {
    "object" === typeof f && null !== f && f.type === ya && null === f.key && (f = f.props.children);
    if ("object" === typeof f && null !== f) {
      switch (f.$$typeof) {
        case va:
          a: {
            for (var k = f.key, l = d; null !== l;) {
              if (l.key === k) {
                k = f.type;
                if (k === ya) {
                  if (7 === l.tag) {
                    c(a, l.sibling);
                    d = e(l, f.props.children);
                    d.return = a;
                    a = d;
                    break a;
                  }
                } else if (l.elementType === k || "object" === typeof k && null !== k && k.$$typeof === Ha && Ng(k) === l.type) {
                  c(a, l.sibling);
                  d = e(l, f.props);
                  d.ref = Lg(a, l, f);
                  d.return = a;
                  a = d;
                  break a;
                }
                c(a, l);
                break;
              } else b(a, l);
              l = l.sibling;
            }
            f.type === ya ? (d = Tg(f.props.children, a.mode, h, f.key), d.return = a, a = d) : (h = Rg(f.type, f.key, f.props, null, a.mode, h), h.ref = Lg(a, d, f), h.return = a, a = h);
          }
          return g(a);
        case wa:
          a: {
            for (l = f.key; null !== d;) {
              if (d.key === l) {
                if (4 === d.tag && d.stateNode.containerInfo === f.containerInfo && d.stateNode.implementation === f.implementation) {
                  c(a, d.sibling);
                  d = e(d, f.children || []);
                  d.return = a;
                  a = d;
                  break a;
                } else {
                  c(a, d);
                  break;
                }
              } else b(a, d);
              d = d.sibling;
            }
            d = Sg(f, a.mode, h);
            d.return = a;
            a = d;
          }
          return g(a);
        case Ha:
          return l = f._init, J(a, d, l(f._payload), h);
      }
      if (eb(f)) return n(a, d, f, h);
      if (Ka(f)) return t(a, d, f, h);
      Mg(a, f);
    }
    return "string" === typeof f && "" !== f || "number" === typeof f ? (f = "" + f, null !== d && 6 === d.tag ? (c(a, d.sibling), d = e(d, f), d.return = a, a = d) : (c(a, d), d = Qg(f, a.mode, h), d.return = a, a = d), g(a)) : c(a, d);
  }
  return J;
}
var Ug = Og(!0),
  Vg = Og(!1),
  Wg = Uf(null),
  Xg = null,
  Yg = null,
  Zg = null;
function $g() {
  Zg = Yg = Xg = null;
}
function ah(a) {
  var b = Wg.current;
  E(Wg);
  a._currentValue = b;
}
function bh(a, b, c) {
  for (; null !== a;) {
    var d = a.alternate;
    (a.childLanes & b) !== b ? (a.childLanes |= b, null !== d && (d.childLanes |= b)) : null !== d && (d.childLanes & b) !== b && (d.childLanes |= b);
    if (a === c) break;
    a = a.return;
  }
}
function ch(a, b) {
  Xg = a;
  Zg = Yg = null;
  a = a.dependencies;
  null !== a && null !== a.firstContext && (0 !== (a.lanes & b) && (dh = !0), a.firstContext = null);
}
function eh(a) {
  var b = a._currentValue;
  if (Zg !== a) if (a = {
    context: a,
    memoizedValue: b,
    next: null
  }, null === Yg) {
    if (null === Xg) throw Error(p(308));
    Yg = a;
    Xg.dependencies = {
      lanes: 0,
      firstContext: a
    };
  } else Yg = Yg.next = a;
  return b;
}
var fh = null;
function gh(a) {
  null === fh ? fh = [a] : fh.push(a);
}
function hh(a, b, c, d) {
  var e = b.interleaved;
  null === e ? (c.next = c, gh(b)) : (c.next = e.next, e.next = c);
  b.interleaved = c;
  return ih(a, d);
}
function ih(a, b) {
  a.lanes |= b;
  var c = a.alternate;
  null !== c && (c.lanes |= b);
  c = a;
  for (a = a.return; null !== a;) a.childLanes |= b, c = a.alternate, null !== c && (c.childLanes |= b), c = a, a = a.return;
  return 3 === c.tag ? c.stateNode : null;
}
var jh = !1;
function kh(a) {
  a.updateQueue = {
    baseState: a.memoizedState,
    firstBaseUpdate: null,
    lastBaseUpdate: null,
    shared: {
      pending: null,
      interleaved: null,
      lanes: 0
    },
    effects: null
  };
}
function lh(a, b) {
  a = a.updateQueue;
  b.updateQueue === a && (b.updateQueue = {
    baseState: a.baseState,
    firstBaseUpdate: a.firstBaseUpdate,
    lastBaseUpdate: a.lastBaseUpdate,
    shared: a.shared,
    effects: a.effects
  });
}
function mh(a, b) {
  return {
    eventTime: a,
    lane: b,
    tag: 0,
    payload: null,
    callback: null,
    next: null
  };
}
function nh(a, b, c) {
  var d = a.updateQueue;
  if (null === d) return null;
  d = d.shared;
  if (0 !== (K & 2)) {
    var e = d.pending;
    null === e ? b.next = b : (b.next = e.next, e.next = b);
    d.pending = b;
    return ih(a, c);
  }
  e = d.interleaved;
  null === e ? (b.next = b, gh(d)) : (b.next = e.next, e.next = b);
  d.interleaved = b;
  return ih(a, c);
}
function oh(a, b, c) {
  b = b.updateQueue;
  if (null !== b && (b = b.shared, 0 !== (c & 4194240))) {
    var d = b.lanes;
    d &= a.pendingLanes;
    c |= d;
    b.lanes = c;
    Cc(a, c);
  }
}
function ph(a, b) {
  var c = a.updateQueue,
    d = a.alternate;
  if (null !== d && (d = d.updateQueue, c === d)) {
    var e = null,
      f = null;
    c = c.firstBaseUpdate;
    if (null !== c) {
      do {
        var g = {
          eventTime: c.eventTime,
          lane: c.lane,
          tag: c.tag,
          payload: c.payload,
          callback: c.callback,
          next: null
        };
        null === f ? e = f = g : f = f.next = g;
        c = c.next;
      } while (null !== c);
      null === f ? e = f = b : f = f.next = b;
    } else e = f = b;
    c = {
      baseState: d.baseState,
      firstBaseUpdate: e,
      lastBaseUpdate: f,
      shared: d.shared,
      effects: d.effects
    };
    a.updateQueue = c;
    return;
  }
  a = c.lastBaseUpdate;
  null === a ? c.firstBaseUpdate = b : a.next = b;
  c.lastBaseUpdate = b;
}
function qh(a, b, c, d) {
  var e = a.updateQueue;
  jh = !1;
  var f = e.firstBaseUpdate,
    g = e.lastBaseUpdate,
    h = e.shared.pending;
  if (null !== h) {
    e.shared.pending = null;
    var k = h,
      l = k.next;
    k.next = null;
    null === g ? f = l : g.next = l;
    g = k;
    var m = a.alternate;
    null !== m && (m = m.updateQueue, h = m.lastBaseUpdate, h !== g && (null === h ? m.firstBaseUpdate = l : h.next = l, m.lastBaseUpdate = k));
  }
  if (null !== f) {
    var q = e.baseState;
    g = 0;
    m = l = k = null;
    h = f;
    do {
      var r = h.lane,
        y = h.eventTime;
      if ((d & r) === r) {
        null !== m && (m = m.next = {
          eventTime: y,
          lane: 0,
          tag: h.tag,
          payload: h.payload,
          callback: h.callback,
          next: null
        });
        a: {
          var n = a,
            t = h;
          r = b;
          y = c;
          switch (t.tag) {
            case 1:
              n = t.payload;
              if ("function" === typeof n) {
                q = n.call(y, q, r);
                break a;
              }
              q = n;
              break a;
            case 3:
              n.flags = n.flags & -65537 | 128;
            case 0:
              n = t.payload;
              r = "function" === typeof n ? n.call(y, q, r) : n;
              if (null === r || void 0 === r) break a;
              q = A({}, q, r);
              break a;
            case 2:
              jh = !0;
          }
        }
        null !== h.callback && 0 !== h.lane && (a.flags |= 64, r = e.effects, null === r ? e.effects = [h] : r.push(h));
      } else y = {
        eventTime: y,
        lane: r,
        tag: h.tag,
        payload: h.payload,
        callback: h.callback,
        next: null
      }, null === m ? (l = m = y, k = q) : m = m.next = y, g |= r;
      h = h.next;
      if (null === h) if (h = e.shared.pending, null === h) break;else r = h, h = r.next, r.next = null, e.lastBaseUpdate = r, e.shared.pending = null;
    } while (1);
    null === m && (k = q);
    e.baseState = k;
    e.firstBaseUpdate = l;
    e.lastBaseUpdate = m;
    b = e.shared.interleaved;
    if (null !== b) {
      e = b;
      do g |= e.lane, e = e.next; while (e !== b);
    } else null === f && (e.shared.lanes = 0);
    rh |= g;
    a.lanes = g;
    a.memoizedState = q;
  }
}
function sh(a, b, c) {
  a = b.effects;
  b.effects = null;
  if (null !== a) for (b = 0; b < a.length; b++) {
    var d = a[b],
      e = d.callback;
    if (null !== e) {
      d.callback = null;
      d = c;
      if ("function" !== typeof e) throw Error(p(191, e));
      e.call(d);
    }
  }
}
var th = {},
  uh = Uf(th),
  vh = Uf(th),
  wh = Uf(th);
function xh(a) {
  if (a === th) throw Error(p(174));
  return a;
}
function yh(a, b) {
  G(wh, b);
  G(vh, a);
  G(uh, th);
  a = b.nodeType;
  switch (a) {
    case 9:
    case 11:
      b = (b = b.documentElement) ? b.namespaceURI : lb(null, "");
      break;
    default:
      a = 8 === a ? b.parentNode : b, b = a.namespaceURI || null, a = a.tagName, b = lb(b, a);
  }
  E(uh);
  G(uh, b);
}
function zh() {
  E(uh);
  E(vh);
  E(wh);
}
function Ah(a) {
  xh(wh.current);
  var b = xh(uh.current);
  var c = lb(b, a.type);
  b !== c && (G(vh, a), G(uh, c));
}
function Bh(a) {
  vh.current === a && (E(uh), E(vh));
}
var L = Uf(0);
function Ch(a) {
  for (var b = a; null !== b;) {
    if (13 === b.tag) {
      var c = b.memoizedState;
      if (null !== c && (c = c.dehydrated, null === c || "$?" === c.data || "$!" === c.data)) return b;
    } else if (19 === b.tag && void 0 !== b.memoizedProps.revealOrder) {
      if (0 !== (b.flags & 128)) return b;
    } else if (null !== b.child) {
      b.child.return = b;
      b = b.child;
      continue;
    }
    if (b === a) break;
    for (; null === b.sibling;) {
      if (null === b.return || b.return === a) return null;
      b = b.return;
    }
    b.sibling.return = b.return;
    b = b.sibling;
  }
  return null;
}
var Dh = [];
function Eh() {
  for (var a = 0; a < Dh.length; a++) Dh[a]._workInProgressVersionPrimary = null;
  Dh.length = 0;
}
var Fh = ua.ReactCurrentDispatcher,
  Gh = ua.ReactCurrentBatchConfig,
  Hh = 0,
  M = null,
  N = null,
  O = null,
  Ih = !1,
  Jh = !1,
  Kh = 0,
  Lh = 0;
function P() {
  throw Error(p(321));
}
function Mh(a, b) {
  if (null === b) return !1;
  for (var c = 0; c < b.length && c < a.length; c++) if (!He(a[c], b[c])) return !1;
  return !0;
}
function Nh(a, b, c, d, e, f) {
  Hh = f;
  M = b;
  b.memoizedState = null;
  b.updateQueue = null;
  b.lanes = 0;
  Fh.current = null === a || null === a.memoizedState ? Oh : Ph;
  a = c(d, e);
  if (Jh) {
    f = 0;
    do {
      Jh = !1;
      Kh = 0;
      if (25 <= f) throw Error(p(301));
      f += 1;
      O = N = null;
      b.updateQueue = null;
      Fh.current = Qh;
      a = c(d, e);
    } while (Jh);
  }
  Fh.current = Rh;
  b = null !== N && null !== N.next;
  Hh = 0;
  O = N = M = null;
  Ih = !1;
  if (b) throw Error(p(300));
  return a;
}
function Sh() {
  var a = 0 !== Kh;
  Kh = 0;
  return a;
}
function Th() {
  var a = {
    memoizedState: null,
    baseState: null,
    baseQueue: null,
    queue: null,
    next: null
  };
  null === O ? M.memoizedState = O = a : O = O.next = a;
  return O;
}
function Uh() {
  if (null === N) {
    var a = M.alternate;
    a = null !== a ? a.memoizedState : null;
  } else a = N.next;
  var b = null === O ? M.memoizedState : O.next;
  if (null !== b) O = b, N = a;else {
    if (null === a) throw Error(p(310));
    N = a;
    a = {
      memoizedState: N.memoizedState,
      baseState: N.baseState,
      baseQueue: N.baseQueue,
      queue: N.queue,
      next: null
    };
    null === O ? M.memoizedState = O = a : O = O.next = a;
  }
  return O;
}
function Vh(a, b) {
  return "function" === typeof b ? b(a) : b;
}
function Wh(a) {
  var b = Uh(),
    c = b.queue;
  if (null === c) throw Error(p(311));
  c.lastRenderedReducer = a;
  var d = N,
    e = d.baseQueue,
    f = c.pending;
  if (null !== f) {
    if (null !== e) {
      var g = e.next;
      e.next = f.next;
      f.next = g;
    }
    d.baseQueue = e = f;
    c.pending = null;
  }
  if (null !== e) {
    f = e.next;
    d = d.baseState;
    var h = g = null,
      k = null,
      l = f;
    do {
      var m = l.lane;
      if ((Hh & m) === m) null !== k && (k = k.next = {
        lane: 0,
        action: l.action,
        hasEagerState: l.hasEagerState,
        eagerState: l.eagerState,
        next: null
      }), d = l.hasEagerState ? l.eagerState : a(d, l.action);else {
        var q = {
          lane: m,
          action: l.action,
          hasEagerState: l.hasEagerState,
          eagerState: l.eagerState,
          next: null
        };
        null === k ? (h = k = q, g = d) : k = k.next = q;
        M.lanes |= m;
        rh |= m;
      }
      l = l.next;
    } while (null !== l && l !== f);
    null === k ? g = d : k.next = h;
    He(d, b.memoizedState) || (dh = !0);
    b.memoizedState = d;
    b.baseState = g;
    b.baseQueue = k;
    c.lastRenderedState = d;
  }
  a = c.interleaved;
  if (null !== a) {
    e = a;
    do f = e.lane, M.lanes |= f, rh |= f, e = e.next; while (e !== a);
  } else null === e && (c.lanes = 0);
  return [b.memoizedState, c.dispatch];
}
function Xh(a) {
  var b = Uh(),
    c = b.queue;
  if (null === c) throw Error(p(311));
  c.lastRenderedReducer = a;
  var d = c.dispatch,
    e = c.pending,
    f = b.memoizedState;
  if (null !== e) {
    c.pending = null;
    var g = e = e.next;
    do f = a(f, g.action), g = g.next; while (g !== e);
    He(f, b.memoizedState) || (dh = !0);
    b.memoizedState = f;
    null === b.baseQueue && (b.baseState = f);
    c.lastRenderedState = f;
  }
  return [f, d];
}
function Yh() {}
function Zh(a, b) {
  var c = M,
    d = Uh(),
    e = b(),
    f = !He(d.memoizedState, e);
  f && (d.memoizedState = e, dh = !0);
  d = d.queue;
  $h(ai.bind(null, c, d, a), [a]);
  if (d.getSnapshot !== b || f || null !== O && O.memoizedState.tag & 1) {
    c.flags |= 2048;
    bi(9, ci.bind(null, c, d, e, b), void 0, null);
    if (null === Q) throw Error(p(349));
    0 !== (Hh & 30) || di(c, b, e);
  }
  return e;
}
function di(a, b, c) {
  a.flags |= 16384;
  a = {
    getSnapshot: b,
    value: c
  };
  b = M.updateQueue;
  null === b ? (b = {
    lastEffect: null,
    stores: null
  }, M.updateQueue = b, b.stores = [a]) : (c = b.stores, null === c ? b.stores = [a] : c.push(a));
}
function ci(a, b, c, d) {
  b.value = c;
  b.getSnapshot = d;
  ei(b) && fi(a);
}
function ai(a, b, c) {
  return c(function () {
    ei(b) && fi(a);
  });
}
function ei(a) {
  var b = a.getSnapshot;
  a = a.value;
  try {
    var c = b();
    return !He(a, c);
  } catch (d) {
    return !0;
  }
}
function fi(a) {
  var b = ih(a, 1);
  null !== b && gi(b, a, 1, -1);
}
function hi(a) {
  var b = Th();
  "function" === typeof a && (a = a());
  b.memoizedState = b.baseState = a;
  a = {
    pending: null,
    interleaved: null,
    lanes: 0,
    dispatch: null,
    lastRenderedReducer: Vh,
    lastRenderedState: a
  };
  b.queue = a;
  a = a.dispatch = ii.bind(null, M, a);
  return [b.memoizedState, a];
}
function bi(a, b, c, d) {
  a = {
    tag: a,
    create: b,
    destroy: c,
    deps: d,
    next: null
  };
  b = M.updateQueue;
  null === b ? (b = {
    lastEffect: null,
    stores: null
  }, M.updateQueue = b, b.lastEffect = a.next = a) : (c = b.lastEffect, null === c ? b.lastEffect = a.next = a : (d = c.next, c.next = a, a.next = d, b.lastEffect = a));
  return a;
}
function ji() {
  return Uh().memoizedState;
}
function ki(a, b, c, d) {
  var e = Th();
  M.flags |= a;
  e.memoizedState = bi(1 | b, c, void 0, void 0 === d ? null : d);
}
function li(a, b, c, d) {
  var e = Uh();
  d = void 0 === d ? null : d;
  var f = void 0;
  if (null !== N) {
    var g = N.memoizedState;
    f = g.destroy;
    if (null !== d && Mh(d, g.deps)) {
      e.memoizedState = bi(b, c, f, d);
      return;
    }
  }
  M.flags |= a;
  e.memoizedState = bi(1 | b, c, f, d);
}
function mi(a, b) {
  return ki(8390656, 8, a, b);
}
function $h(a, b) {
  return li(2048, 8, a, b);
}
function ni(a, b) {
  return li(4, 2, a, b);
}
function oi(a, b) {
  return li(4, 4, a, b);
}
function pi(a, b) {
  if ("function" === typeof b) return a = a(), b(a), function () {
    b(null);
  };
  if (null !== b && void 0 !== b) return a = a(), b.current = a, function () {
    b.current = null;
  };
}
function qi(a, b, c) {
  c = null !== c && void 0 !== c ? c.concat([a]) : null;
  return li(4, 4, pi.bind(null, b, a), c);
}
function ri() {}
function si(a, b) {
  var c = Uh();
  b = void 0 === b ? null : b;
  var d = c.memoizedState;
  if (null !== d && null !== b && Mh(b, d[1])) return d[0];
  c.memoizedState = [a, b];
  return a;
}
function ti(a, b) {
  var c = Uh();
  b = void 0 === b ? null : b;
  var d = c.memoizedState;
  if (null !== d && null !== b && Mh(b, d[1])) return d[0];
  a = a();
  c.memoizedState = [a, b];
  return a;
}
function ui(a, b, c) {
  if (0 === (Hh & 21)) return a.baseState && (a.baseState = !1, dh = !0), a.memoizedState = c;
  He(c, b) || (c = yc(), M.lanes |= c, rh |= c, a.baseState = !0);
  return b;
}
function vi(a, b) {
  var c = C;
  C = 0 !== c && 4 > c ? c : 4;
  a(!0);
  var d = Gh.transition;
  Gh.transition = {};
  try {
    a(!1), b();
  } finally {
    C = c, Gh.transition = d;
  }
}
function wi() {
  return Uh().memoizedState;
}
function xi(a, b, c) {
  var d = yi(a);
  c = {
    lane: d,
    action: c,
    hasEagerState: !1,
    eagerState: null,
    next: null
  };
  if (zi(a)) Ai(b, c);else if (c = hh(a, b, c, d), null !== c) {
    var e = R();
    gi(c, a, d, e);
    Bi(c, b, d);
  }
}
function ii(a, b, c) {
  var d = yi(a),
    e = {
      lane: d,
      action: c,
      hasEagerState: !1,
      eagerState: null,
      next: null
    };
  if (zi(a)) Ai(b, e);else {
    var f = a.alternate;
    if (0 === a.lanes && (null === f || 0 === f.lanes) && (f = b.lastRenderedReducer, null !== f)) try {
      var g = b.lastRenderedState,
        h = f(g, c);
      e.hasEagerState = !0;
      e.eagerState = h;
      if (He(h, g)) {
        var k = b.interleaved;
        null === k ? (e.next = e, gh(b)) : (e.next = k.next, k.next = e);
        b.interleaved = e;
        return;
      }
    } catch (l) {} finally {}
    c = hh(a, b, e, d);
    null !== c && (e = R(), gi(c, a, d, e), Bi(c, b, d));
  }
}
function zi(a) {
  var b = a.alternate;
  return a === M || null !== b && b === M;
}
function Ai(a, b) {
  Jh = Ih = !0;
  var c = a.pending;
  null === c ? b.next = b : (b.next = c.next, c.next = b);
  a.pending = b;
}
function Bi(a, b, c) {
  if (0 !== (c & 4194240)) {
    var d = b.lanes;
    d &= a.pendingLanes;
    c |= d;
    b.lanes = c;
    Cc(a, c);
  }
}
var Rh = {
    readContext: eh,
    useCallback: P,
    useContext: P,
    useEffect: P,
    useImperativeHandle: P,
    useInsertionEffect: P,
    useLayoutEffect: P,
    useMemo: P,
    useReducer: P,
    useRef: P,
    useState: P,
    useDebugValue: P,
    useDeferredValue: P,
    useTransition: P,
    useMutableSource: P,
    useSyncExternalStore: P,
    useId: P,
    unstable_isNewReconciler: !1
  },
  Oh = {
    readContext: eh,
    useCallback: function (a, b) {
      Th().memoizedState = [a, void 0 === b ? null : b];
      return a;
    },
    useContext: eh,
    useEffect: mi,
    useImperativeHandle: function (a, b, c) {
      c = null !== c && void 0 !== c ? c.concat([a]) : null;
      return ki(4194308, 4, pi.bind(null, b, a), c);
    },
    useLayoutEffect: function (a, b) {
      return ki(4194308, 4, a, b);
    },
    useInsertionEffect: function (a, b) {
      return ki(4, 2, a, b);
    },
    useMemo: function (a, b) {
      var c = Th();
      b = void 0 === b ? null : b;
      a = a();
      c.memoizedState = [a, b];
      return a;
    },
    useReducer: function (a, b, c) {
      var d = Th();
      b = void 0 !== c ? c(b) : b;
      d.memoizedState = d.baseState = b;
      a = {
        pending: null,
        interleaved: null,
        lanes: 0,
        dispatch: null,
        lastRenderedReducer: a,
        lastRenderedState: b
      };
      d.queue = a;
      a = a.dispatch = xi.bind(null, M, a);
      return [d.memoizedState, a];
    },
    useRef: function (a) {
      var b = Th();
      a = {
        current: a
      };
      return b.memoizedState = a;
    },
    useState: hi,
    useDebugValue: ri,
    useDeferredValue: function (a) {
      return Th().memoizedState = a;
    },
    useTransition: function () {
      var a = hi(!1),
        b = a[0];
      a = vi.bind(null, a[1]);
      Th().memoizedState = a;
      return [b, a];
    },
    useMutableSource: function () {},
    useSyncExternalStore: function (a, b, c) {
      var d = M,
        e = Th();
      if (I) {
        if (void 0 === c) throw Error(p(407));
        c = c();
      } else {
        c = b();
        if (null === Q) throw Error(p(349));
        0 !== (Hh & 30) || di(d, b, c);
      }
      e.memoizedState = c;
      var f = {
        value: c,
        getSnapshot: b
      };
      e.queue = f;
      mi(ai.bind(null, d, f, a), [a]);
      d.flags |= 2048;
      bi(9, ci.bind(null, d, f, c, b), void 0, null);
      return c;
    },
    useId: function () {
      var a = Th(),
        b = Q.identifierPrefix;
      if (I) {
        var c = sg;
        var d = rg;
        c = (d & ~(1 << 32 - oc(d) - 1)).toString(32) + c;
        b = ":" + b + "R" + c;
        c = Kh++;
        0 < c && (b += "H" + c.toString(32));
        b += ":";
      } else c = Lh++, b = ":" + b + "r" + c.toString(32) + ":";
      return a.memoizedState = b;
    },
    unstable_isNewReconciler: !1
  },
  Ph = {
    readContext: eh,
    useCallback: si,
    useContext: eh,
    useEffect: $h,
    useImperativeHandle: qi,
    useInsertionEffect: ni,
    useLayoutEffect: oi,
    useMemo: ti,
    useReducer: Wh,
    useRef: ji,
    useState: function () {
      return Wh(Vh);
    },
    useDebugValue: ri,
    useDeferredValue: function (a) {
      var b = Uh();
      return ui(b, N.memoizedState, a);
    },
    useTransition: function () {
      var a = Wh(Vh)[0],
        b = Uh().memoizedState;
      return [a, b];
    },
    useMutableSource: Yh,
    useSyncExternalStore: Zh,
    useId: wi,
    unstable_isNewReconciler: !1
  },
  Qh = {
    readContext: eh,
    useCallback: si,
    useContext: eh,
    useEffect: $h,
    useImperativeHandle: qi,
    useInsertionEffect: ni,
    useLayoutEffect: oi,
    useMemo: ti,
    useReducer: Xh,
    useRef: ji,
    useState: function () {
      return Xh(Vh);
    },
    useDebugValue: ri,
    useDeferredValue: function (a) {
      var b = Uh();
      return null === N ? b.memoizedState = a : ui(b, N.memoizedState, a);
    },
    useTransition: function () {
      var a = Xh(Vh)[0],
        b = Uh().memoizedState;
      return [a, b];
    },
    useMutableSource: Yh,
    useSyncExternalStore: Zh,
    useId: wi,
    unstable_isNewReconciler: !1
  };
function Ci(a, b) {
  if (a && a.defaultProps) {
    b = A({}, b);
    a = a.defaultProps;
    for (var c in a) void 0 === b[c] && (b[c] = a[c]);
    return b;
  }
  return b;
}
function Di(a, b, c, d) {
  b = a.memoizedState;
  c = c(d, b);
  c = null === c || void 0 === c ? b : A({}, b, c);
  a.memoizedState = c;
  0 === a.lanes && (a.updateQueue.baseState = c);
}
var Ei = {
  isMounted: function (a) {
    return (a = a._reactInternals) ? Vb(a) === a : !1;
  },
  enqueueSetState: function (a, b, c) {
    a = a._reactInternals;
    var d = R(),
      e = yi(a),
      f = mh(d, e);
    f.payload = b;
    void 0 !== c && null !== c && (f.callback = c);
    b = nh(a, f, e);
    null !== b && (gi(b, a, e, d), oh(b, a, e));
  },
  enqueueReplaceState: function (a, b, c) {
    a = a._reactInternals;
    var d = R(),
      e = yi(a),
      f = mh(d, e);
    f.tag = 1;
    f.payload = b;
    void 0 !== c && null !== c && (f.callback = c);
    b = nh(a, f, e);
    null !== b && (gi(b, a, e, d), oh(b, a, e));
  },
  enqueueForceUpdate: function (a, b) {
    a = a._reactInternals;
    var c = R(),
      d = yi(a),
      e = mh(c, d);
    e.tag = 2;
    void 0 !== b && null !== b && (e.callback = b);
    b = nh(a, e, d);
    null !== b && (gi(b, a, d, c), oh(b, a, d));
  }
};
function Fi(a, b, c, d, e, f, g) {
  a = a.stateNode;
  return "function" === typeof a.shouldComponentUpdate ? a.shouldComponentUpdate(d, f, g) : b.prototype && b.prototype.isPureReactComponent ? !Ie(c, d) || !Ie(e, f) : !0;
}
function Gi(a, b, c) {
  var d = !1,
    e = Vf;
  var f = b.contextType;
  "object" === typeof f && null !== f ? f = eh(f) : (e = Zf(b) ? Xf : H.current, d = b.contextTypes, f = (d = null !== d && void 0 !== d) ? Yf(a, e) : Vf);
  b = new b(c, f);
  a.memoizedState = null !== b.state && void 0 !== b.state ? b.state : null;
  b.updater = Ei;
  a.stateNode = b;
  b._reactInternals = a;
  d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = e, a.__reactInternalMemoizedMaskedChildContext = f);
  return b;
}
function Hi(a, b, c, d) {
  a = b.state;
  "function" === typeof b.componentWillReceiveProps && b.componentWillReceiveProps(c, d);
  "function" === typeof b.UNSAFE_componentWillReceiveProps && b.UNSAFE_componentWillReceiveProps(c, d);
  b.state !== a && Ei.enqueueReplaceState(b, b.state, null);
}
function Ii(a, b, c, d) {
  var e = a.stateNode;
  e.props = c;
  e.state = a.memoizedState;
  e.refs = {};
  kh(a);
  var f = b.contextType;
  "object" === typeof f && null !== f ? e.context = eh(f) : (f = Zf(b) ? Xf : H.current, e.context = Yf(a, f));
  e.state = a.memoizedState;
  f = b.getDerivedStateFromProps;
  "function" === typeof f && (Di(a, b, f, c), e.state = a.memoizedState);
  "function" === typeof b.getDerivedStateFromProps || "function" === typeof e.getSnapshotBeforeUpdate || "function" !== typeof e.UNSAFE_componentWillMount && "function" !== typeof e.componentWillMount || (b = e.state, "function" === typeof e.componentWillMount && e.componentWillMount(), "function" === typeof e.UNSAFE_componentWillMount && e.UNSAFE_componentWillMount(), b !== e.state && Ei.enqueueReplaceState(e, e.state, null), qh(a, c, e, d), e.state = a.memoizedState);
  "function" === typeof e.componentDidMount && (a.flags |= 4194308);
}
function Ji(a, b) {
  try {
    var c = "",
      d = b;
    do c += Pa(d), d = d.return; while (d);
    var e = c;
  } catch (f) {
    e = "\nError generating stack: " + f.message + "\n" + f.stack;
  }
  return {
    value: a,
    source: b,
    stack: e,
    digest: null
  };
}
function Ki(a, b, c) {
  return {
    value: a,
    source: null,
    stack: null != c ? c : null,
    digest: null != b ? b : null
  };
}
function Li(a, b) {
  try {
    console.error(b.value);
  } catch (c) {
    setTimeout(function () {
      throw c;
    });
  }
}
var Mi = "function" === typeof WeakMap ? WeakMap : Map;
function Ni(a, b, c) {
  c = mh(-1, c);
  c.tag = 3;
  c.payload = {
    element: null
  };
  var d = b.value;
  c.callback = function () {
    Oi || (Oi = !0, Pi = d);
    Li(a, b);
  };
  return c;
}
function Qi(a, b, c) {
  c = mh(-1, c);
  c.tag = 3;
  var d = a.type.getDerivedStateFromError;
  if ("function" === typeof d) {
    var e = b.value;
    c.payload = function () {
      return d(e);
    };
    c.callback = function () {
      Li(a, b);
    };
  }
  var f = a.stateNode;
  null !== f && "function" === typeof f.componentDidCatch && (c.callback = function () {
    Li(a, b);
    "function" !== typeof d && (null === Ri ? Ri = new Set([this]) : Ri.add(this));
    var c = b.stack;
    this.componentDidCatch(b.value, {
      componentStack: null !== c ? c : ""
    });
  });
  return c;
}
function Si(a, b, c) {
  var d = a.pingCache;
  if (null === d) {
    d = a.pingCache = new Mi();
    var e = new Set();
    d.set(b, e);
  } else e = d.get(b), void 0 === e && (e = new Set(), d.set(b, e));
  e.has(c) || (e.add(c), a = Ti.bind(null, a, b, c), b.then(a, a));
}
function Ui(a) {
  do {
    var b;
    if (b = 13 === a.tag) b = a.memoizedState, b = null !== b ? null !== b.dehydrated ? !0 : !1 : !0;
    if (b) return a;
    a = a.return;
  } while (null !== a);
  return null;
}
function Vi(a, b, c, d, e) {
  if (0 === (a.mode & 1)) return a === b ? a.flags |= 65536 : (a.flags |= 128, c.flags |= 131072, c.flags &= -52805, 1 === c.tag && (null === c.alternate ? c.tag = 17 : (b = mh(-1, 1), b.tag = 2, nh(c, b, 1))), c.lanes |= 1), a;
  a.flags |= 65536;
  a.lanes = e;
  return a;
}
var Wi = ua.ReactCurrentOwner,
  dh = !1;
function Xi(a, b, c, d) {
  b.child = null === a ? Vg(b, null, c, d) : Ug(b, a.child, c, d);
}
function Yi(a, b, c, d, e) {
  c = c.render;
  var f = b.ref;
  ch(b, e);
  d = Nh(a, b, c, d, f, e);
  c = Sh();
  if (null !== a && !dh) return b.updateQueue = a.updateQueue, b.flags &= -2053, a.lanes &= ~e, Zi(a, b, e);
  I && c && vg(b);
  b.flags |= 1;
  Xi(a, b, d, e);
  return b.child;
}
function $i(a, b, c, d, e) {
  if (null === a) {
    var f = c.type;
    if ("function" === typeof f && !aj(f) && void 0 === f.defaultProps && null === c.compare && void 0 === c.defaultProps) return b.tag = 15, b.type = f, bj(a, b, f, d, e);
    a = Rg(c.type, null, d, b, b.mode, e);
    a.ref = b.ref;
    a.return = b;
    return b.child = a;
  }
  f = a.child;
  if (0 === (a.lanes & e)) {
    var g = f.memoizedProps;
    c = c.compare;
    c = null !== c ? c : Ie;
    if (c(g, d) && a.ref === b.ref) return Zi(a, b, e);
  }
  b.flags |= 1;
  a = Pg(f, d);
  a.ref = b.ref;
  a.return = b;
  return b.child = a;
}
function bj(a, b, c, d, e) {
  if (null !== a) {
    var f = a.memoizedProps;
    if (Ie(f, d) && a.ref === b.ref) if (dh = !1, b.pendingProps = d = f, 0 !== (a.lanes & e)) 0 !== (a.flags & 131072) && (dh = !0);else return b.lanes = a.lanes, Zi(a, b, e);
  }
  return cj(a, b, c, d, e);
}
function dj(a, b, c) {
  var d = b.pendingProps,
    e = d.children,
    f = null !== a ? a.memoizedState : null;
  if ("hidden" === d.mode) {
    if (0 === (b.mode & 1)) b.memoizedState = {
      baseLanes: 0,
      cachePool: null,
      transitions: null
    }, G(ej, fj), fj |= c;else {
      if (0 === (c & 1073741824)) return a = null !== f ? f.baseLanes | c : c, b.lanes = b.childLanes = 1073741824, b.memoizedState = {
        baseLanes: a,
        cachePool: null,
        transitions: null
      }, b.updateQueue = null, G(ej, fj), fj |= a, null;
      b.memoizedState = {
        baseLanes: 0,
        cachePool: null,
        transitions: null
      };
      d = null !== f ? f.baseLanes : c;
      G(ej, fj);
      fj |= d;
    }
  } else null !== f ? (d = f.baseLanes | c, b.memoizedState = null) : d = c, G(ej, fj), fj |= d;
  Xi(a, b, e, c);
  return b.child;
}
function gj(a, b) {
  var c = b.ref;
  if (null === a && null !== c || null !== a && a.ref !== c) b.flags |= 512, b.flags |= 2097152;
}
function cj(a, b, c, d, e) {
  var f = Zf(c) ? Xf : H.current;
  f = Yf(b, f);
  ch(b, e);
  c = Nh(a, b, c, d, f, e);
  d = Sh();
  if (null !== a && !dh) return b.updateQueue = a.updateQueue, b.flags &= -2053, a.lanes &= ~e, Zi(a, b, e);
  I && d && vg(b);
  b.flags |= 1;
  Xi(a, b, c, e);
  return b.child;
}
function hj(a, b, c, d, e) {
  if (Zf(c)) {
    var f = !0;
    cg(b);
  } else f = !1;
  ch(b, e);
  if (null === b.stateNode) ij(a, b), Gi(b, c, d), Ii(b, c, d, e), d = !0;else if (null === a) {
    var g = b.stateNode,
      h = b.memoizedProps;
    g.props = h;
    var k = g.context,
      l = c.contextType;
    "object" === typeof l && null !== l ? l = eh(l) : (l = Zf(c) ? Xf : H.current, l = Yf(b, l));
    var m = c.getDerivedStateFromProps,
      q = "function" === typeof m || "function" === typeof g.getSnapshotBeforeUpdate;
    q || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== d || k !== l) && Hi(b, g, d, l);
    jh = !1;
    var r = b.memoizedState;
    g.state = r;
    qh(b, d, g, e);
    k = b.memoizedState;
    h !== d || r !== k || Wf.current || jh ? ("function" === typeof m && (Di(b, c, m, d), k = b.memoizedState), (h = jh || Fi(b, c, h, d, r, k, l)) ? (q || "function" !== typeof g.UNSAFE_componentWillMount && "function" !== typeof g.componentWillMount || ("function" === typeof g.componentWillMount && g.componentWillMount(), "function" === typeof g.UNSAFE_componentWillMount && g.UNSAFE_componentWillMount()), "function" === typeof g.componentDidMount && (b.flags |= 4194308)) : ("function" === typeof g.componentDidMount && (b.flags |= 4194308), b.memoizedProps = d, b.memoizedState = k), g.props = d, g.state = k, g.context = l, d = h) : ("function" === typeof g.componentDidMount && (b.flags |= 4194308), d = !1);
  } else {
    g = b.stateNode;
    lh(a, b);
    h = b.memoizedProps;
    l = b.type === b.elementType ? h : Ci(b.type, h);
    g.props = l;
    q = b.pendingProps;
    r = g.context;
    k = c.contextType;
    "object" === typeof k && null !== k ? k = eh(k) : (k = Zf(c) ? Xf : H.current, k = Yf(b, k));
    var y = c.getDerivedStateFromProps;
    (m = "function" === typeof y || "function" === typeof g.getSnapshotBeforeUpdate) || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== q || r !== k) && Hi(b, g, d, k);
    jh = !1;
    r = b.memoizedState;
    g.state = r;
    qh(b, d, g, e);
    var n = b.memoizedState;
    h !== q || r !== n || Wf.current || jh ? ("function" === typeof y && (Di(b, c, y, d), n = b.memoizedState), (l = jh || Fi(b, c, l, d, r, n, k) || !1) ? (m || "function" !== typeof g.UNSAFE_componentWillUpdate && "function" !== typeof g.componentWillUpdate || ("function" === typeof g.componentWillUpdate && g.componentWillUpdate(d, n, k), "function" === typeof g.UNSAFE_componentWillUpdate && g.UNSAFE_componentWillUpdate(d, n, k)), "function" === typeof g.componentDidUpdate && (b.flags |= 4), "function" === typeof g.getSnapshotBeforeUpdate && (b.flags |= 1024)) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 1024), b.memoizedProps = d, b.memoizedState = n), g.props = d, g.state = n, g.context = k, d = l) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 1024), d = !1);
  }
  return jj(a, b, c, d, f, e);
}
function jj(a, b, c, d, e, f) {
  gj(a, b);
  var g = 0 !== (b.flags & 128);
  if (!d && !g) return e && dg(b, c, !1), Zi(a, b, f);
  d = b.stateNode;
  Wi.current = b;
  var h = g && "function" !== typeof c.getDerivedStateFromError ? null : d.render();
  b.flags |= 1;
  null !== a && g ? (b.child = Ug(b, a.child, null, f), b.child = Ug(b, null, h, f)) : Xi(a, b, h, f);
  b.memoizedState = d.state;
  e && dg(b, c, !0);
  return b.child;
}
function kj(a) {
  var b = a.stateNode;
  b.pendingContext ? ag(a, b.pendingContext, b.pendingContext !== b.context) : b.context && ag(a, b.context, !1);
  yh(a, b.containerInfo);
}
function lj(a, b, c, d, e) {
  Ig();
  Jg(e);
  b.flags |= 256;
  Xi(a, b, c, d);
  return b.child;
}
var mj = {
  dehydrated: null,
  treeContext: null,
  retryLane: 0
};
function nj(a) {
  return {
    baseLanes: a,
    cachePool: null,
    transitions: null
  };
}
function oj(a, b, c) {
  var d = b.pendingProps,
    e = L.current,
    f = !1,
    g = 0 !== (b.flags & 128),
    h;
  (h = g) || (h = null !== a && null === a.memoizedState ? !1 : 0 !== (e & 2));
  if (h) f = !0, b.flags &= -129;else if (null === a || null !== a.memoizedState) e |= 1;
  G(L, e & 1);
  if (null === a) {
    Eg(b);
    a = b.memoizedState;
    if (null !== a && (a = a.dehydrated, null !== a)) return 0 === (b.mode & 1) ? b.lanes = 1 : "$!" === a.data ? b.lanes = 8 : b.lanes = 1073741824, null;
    g = d.children;
    a = d.fallback;
    return f ? (d = b.mode, f = b.child, g = {
      mode: "hidden",
      children: g
    }, 0 === (d & 1) && null !== f ? (f.childLanes = 0, f.pendingProps = g) : f = pj(g, d, 0, null), a = Tg(a, d, c, null), f.return = b, a.return = b, f.sibling = a, b.child = f, b.child.memoizedState = nj(c), b.memoizedState = mj, a) : qj(b, g);
  }
  e = a.memoizedState;
  if (null !== e && (h = e.dehydrated, null !== h)) return rj(a, b, g, d, h, e, c);
  if (f) {
    f = d.fallback;
    g = b.mode;
    e = a.child;
    h = e.sibling;
    var k = {
      mode: "hidden",
      children: d.children
    };
    0 === (g & 1) && b.child !== e ? (d = b.child, d.childLanes = 0, d.pendingProps = k, b.deletions = null) : (d = Pg(e, k), d.subtreeFlags = e.subtreeFlags & 14680064);
    null !== h ? f = Pg(h, f) : (f = Tg(f, g, c, null), f.flags |= 2);
    f.return = b;
    d.return = b;
    d.sibling = f;
    b.child = d;
    d = f;
    f = b.child;
    g = a.child.memoizedState;
    g = null === g ? nj(c) : {
      baseLanes: g.baseLanes | c,
      cachePool: null,
      transitions: g.transitions
    };
    f.memoizedState = g;
    f.childLanes = a.childLanes & ~c;
    b.memoizedState = mj;
    return d;
  }
  f = a.child;
  a = f.sibling;
  d = Pg(f, {
    mode: "visible",
    children: d.children
  });
  0 === (b.mode & 1) && (d.lanes = c);
  d.return = b;
  d.sibling = null;
  null !== a && (c = b.deletions, null === c ? (b.deletions = [a], b.flags |= 16) : c.push(a));
  b.child = d;
  b.memoizedState = null;
  return d;
}
function qj(a, b) {
  b = pj({
    mode: "visible",
    children: b
  }, a.mode, 0, null);
  b.return = a;
  return a.child = b;
}
function sj(a, b, c, d) {
  null !== d && Jg(d);
  Ug(b, a.child, null, c);
  a = qj(b, b.pendingProps.children);
  a.flags |= 2;
  b.memoizedState = null;
  return a;
}
function rj(a, b, c, d, e, f, g) {
  if (c) {
    if (b.flags & 256) return b.flags &= -257, d = Ki(Error(p(422))), sj(a, b, g, d);
    if (null !== b.memoizedState) return b.child = a.child, b.flags |= 128, null;
    f = d.fallback;
    e = b.mode;
    d = pj({
      mode: "visible",
      children: d.children
    }, e, 0, null);
    f = Tg(f, e, g, null);
    f.flags |= 2;
    d.return = b;
    f.return = b;
    d.sibling = f;
    b.child = d;
    0 !== (b.mode & 1) && Ug(b, a.child, null, g);
    b.child.memoizedState = nj(g);
    b.memoizedState = mj;
    return f;
  }
  if (0 === (b.mode & 1)) return sj(a, b, g, null);
  if ("$!" === e.data) {
    d = e.nextSibling && e.nextSibling.dataset;
    if (d) var h = d.dgst;
    d = h;
    f = Error(p(419));
    d = Ki(f, d, void 0);
    return sj(a, b, g, d);
  }
  h = 0 !== (g & a.childLanes);
  if (dh || h) {
    d = Q;
    if (null !== d) {
      switch (g & -g) {
        case 4:
          e = 2;
          break;
        case 16:
          e = 8;
          break;
        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
        case 67108864:
          e = 32;
          break;
        case 536870912:
          e = 268435456;
          break;
        default:
          e = 0;
      }
      e = 0 !== (e & (d.suspendedLanes | g)) ? 0 : e;
      0 !== e && e !== f.retryLane && (f.retryLane = e, ih(a, e), gi(d, a, e, -1));
    }
    tj();
    d = Ki(Error(p(421)));
    return sj(a, b, g, d);
  }
  if ("$?" === e.data) return b.flags |= 128, b.child = a.child, b = uj.bind(null, a), e._reactRetry = b, null;
  a = f.treeContext;
  yg = Lf(e.nextSibling);
  xg = b;
  I = !0;
  zg = null;
  null !== a && (og[pg++] = rg, og[pg++] = sg, og[pg++] = qg, rg = a.id, sg = a.overflow, qg = b);
  b = qj(b, d.children);
  b.flags |= 4096;
  return b;
}
function vj(a, b, c) {
  a.lanes |= b;
  var d = a.alternate;
  null !== d && (d.lanes |= b);
  bh(a.return, b, c);
}
function wj(a, b, c, d, e) {
  var f = a.memoizedState;
  null === f ? a.memoizedState = {
    isBackwards: b,
    rendering: null,
    renderingStartTime: 0,
    last: d,
    tail: c,
    tailMode: e
  } : (f.isBackwards = b, f.rendering = null, f.renderingStartTime = 0, f.last = d, f.tail = c, f.tailMode = e);
}
function xj(a, b, c) {
  var d = b.pendingProps,
    e = d.revealOrder,
    f = d.tail;
  Xi(a, b, d.children, c);
  d = L.current;
  if (0 !== (d & 2)) d = d & 1 | 2, b.flags |= 128;else {
    if (null !== a && 0 !== (a.flags & 128)) a: for (a = b.child; null !== a;) {
      if (13 === a.tag) null !== a.memoizedState && vj(a, c, b);else if (19 === a.tag) vj(a, c, b);else if (null !== a.child) {
        a.child.return = a;
        a = a.child;
        continue;
      }
      if (a === b) break a;
      for (; null === a.sibling;) {
        if (null === a.return || a.return === b) break a;
        a = a.return;
      }
      a.sibling.return = a.return;
      a = a.sibling;
    }
    d &= 1;
  }
  G(L, d);
  if (0 === (b.mode & 1)) b.memoizedState = null;else switch (e) {
    case "forwards":
      c = b.child;
      for (e = null; null !== c;) a = c.alternate, null !== a && null === Ch(a) && (e = c), c = c.sibling;
      c = e;
      null === c ? (e = b.child, b.child = null) : (e = c.sibling, c.sibling = null);
      wj(b, !1, e, c, f);
      break;
    case "backwards":
      c = null;
      e = b.child;
      for (b.child = null; null !== e;) {
        a = e.alternate;
        if (null !== a && null === Ch(a)) {
          b.child = e;
          break;
        }
        a = e.sibling;
        e.sibling = c;
        c = e;
        e = a;
      }
      wj(b, !0, c, null, f);
      break;
    case "together":
      wj(b, !1, null, null, void 0);
      break;
    default:
      b.memoizedState = null;
  }
  return b.child;
}
function ij(a, b) {
  0 === (b.mode & 1) && null !== a && (a.alternate = null, b.alternate = null, b.flags |= 2);
}
function Zi(a, b, c) {
  null !== a && (b.dependencies = a.dependencies);
  rh |= b.lanes;
  if (0 === (c & b.childLanes)) return null;
  if (null !== a && b.child !== a.child) throw Error(p(153));
  if (null !== b.child) {
    a = b.child;
    c = Pg(a, a.pendingProps);
    b.child = c;
    for (c.return = b; null !== a.sibling;) a = a.sibling, c = c.sibling = Pg(a, a.pendingProps), c.return = b;
    c.sibling = null;
  }
  return b.child;
}
function yj(a, b, c) {
  switch (b.tag) {
    case 3:
      kj(b);
      Ig();
      break;
    case 5:
      Ah(b);
      break;
    case 1:
      Zf(b.type) && cg(b);
      break;
    case 4:
      yh(b, b.stateNode.containerInfo);
      break;
    case 10:
      var d = b.type._context,
        e = b.memoizedProps.value;
      G(Wg, d._currentValue);
      d._currentValue = e;
      break;
    case 13:
      d = b.memoizedState;
      if (null !== d) {
        if (null !== d.dehydrated) return G(L, L.current & 1), b.flags |= 128, null;
        if (0 !== (c & b.child.childLanes)) return oj(a, b, c);
        G(L, L.current & 1);
        a = Zi(a, b, c);
        return null !== a ? a.sibling : null;
      }
      G(L, L.current & 1);
      break;
    case 19:
      d = 0 !== (c & b.childLanes);
      if (0 !== (a.flags & 128)) {
        if (d) return xj(a, b, c);
        b.flags |= 128;
      }
      e = b.memoizedState;
      null !== e && (e.rendering = null, e.tail = null, e.lastEffect = null);
      G(L, L.current);
      if (d) break;else return null;
    case 22:
    case 23:
      return b.lanes = 0, dj(a, b, c);
  }
  return Zi(a, b, c);
}
var zj, Aj, Bj, Cj;
zj = function (a, b) {
  for (var c = b.child; null !== c;) {
    if (5 === c.tag || 6 === c.tag) a.appendChild(c.stateNode);else if (4 !== c.tag && null !== c.child) {
      c.child.return = c;
      c = c.child;
      continue;
    }
    if (c === b) break;
    for (; null === c.sibling;) {
      if (null === c.return || c.return === b) return;
      c = c.return;
    }
    c.sibling.return = c.return;
    c = c.sibling;
  }
};
Aj = function () {};
Bj = function (a, b, c, d) {
  var e = a.memoizedProps;
  if (e !== d) {
    a = b.stateNode;
    xh(uh.current);
    var f = null;
    switch (c) {
      case "input":
        e = Ya(a, e);
        d = Ya(a, d);
        f = [];
        break;
      case "select":
        e = A({}, e, {
          value: void 0
        });
        d = A({}, d, {
          value: void 0
        });
        f = [];
        break;
      case "textarea":
        e = gb(a, e);
        d = gb(a, d);
        f = [];
        break;
      default:
        "function" !== typeof e.onClick && "function" === typeof d.onClick && (a.onclick = Bf);
    }
    ub(c, d);
    var g;
    c = null;
    for (l in e) if (!d.hasOwnProperty(l) && e.hasOwnProperty(l) && null != e[l]) if ("style" === l) {
      var h = e[l];
      for (g in h) h.hasOwnProperty(g) && (c || (c = {}), c[g] = "");
    } else "dangerouslySetInnerHTML" !== l && "children" !== l && "suppressContentEditableWarning" !== l && "suppressHydrationWarning" !== l && "autoFocus" !== l && (ea.hasOwnProperty(l) ? f || (f = []) : (f = f || []).push(l, null));
    for (l in d) {
      var k = d[l];
      h = null != e ? e[l] : void 0;
      if (d.hasOwnProperty(l) && k !== h && (null != k || null != h)) if ("style" === l) {
        if (h) {
          for (g in h) !h.hasOwnProperty(g) || k && k.hasOwnProperty(g) || (c || (c = {}), c[g] = "");
          for (g in k) k.hasOwnProperty(g) && h[g] !== k[g] && (c || (c = {}), c[g] = k[g]);
        } else c || (f || (f = []), f.push(l, c)), c = k;
      } else "dangerouslySetInnerHTML" === l ? (k = k ? k.__html : void 0, h = h ? h.__html : void 0, null != k && h !== k && (f = f || []).push(l, k)) : "children" === l ? "string" !== typeof k && "number" !== typeof k || (f = f || []).push(l, "" + k) : "suppressContentEditableWarning" !== l && "suppressHydrationWarning" !== l && (ea.hasOwnProperty(l) ? (null != k && "onScroll" === l && D("scroll", a), f || h === k || (f = [])) : (f = f || []).push(l, k));
    }
    c && (f = f || []).push("style", c);
    var l = f;
    if (b.updateQueue = l) b.flags |= 4;
  }
};
Cj = function (a, b, c, d) {
  c !== d && (b.flags |= 4);
};
function Dj(a, b) {
  if (!I) switch (a.tailMode) {
    case "hidden":
      b = a.tail;
      for (var c = null; null !== b;) null !== b.alternate && (c = b), b = b.sibling;
      null === c ? a.tail = null : c.sibling = null;
      break;
    case "collapsed":
      c = a.tail;
      for (var d = null; null !== c;) null !== c.alternate && (d = c), c = c.sibling;
      null === d ? b || null === a.tail ? a.tail = null : a.tail.sibling = null : d.sibling = null;
  }
}
function S(a) {
  var b = null !== a.alternate && a.alternate.child === a.child,
    c = 0,
    d = 0;
  if (b) for (var e = a.child; null !== e;) c |= e.lanes | e.childLanes, d |= e.subtreeFlags & 14680064, d |= e.flags & 14680064, e.return = a, e = e.sibling;else for (e = a.child; null !== e;) c |= e.lanes | e.childLanes, d |= e.subtreeFlags, d |= e.flags, e.return = a, e = e.sibling;
  a.subtreeFlags |= d;
  a.childLanes = c;
  return b;
}
function Ej(a, b, c) {
  var d = b.pendingProps;
  wg(b);
  switch (b.tag) {
    case 2:
    case 16:
    case 15:
    case 0:
    case 11:
    case 7:
    case 8:
    case 12:
    case 9:
    case 14:
      return S(b), null;
    case 1:
      return Zf(b.type) && $f(), S(b), null;
    case 3:
      d = b.stateNode;
      zh();
      E(Wf);
      E(H);
      Eh();
      d.pendingContext && (d.context = d.pendingContext, d.pendingContext = null);
      if (null === a || null === a.child) Gg(b) ? b.flags |= 4 : null === a || a.memoizedState.isDehydrated && 0 === (b.flags & 256) || (b.flags |= 1024, null !== zg && (Fj(zg), zg = null));
      Aj(a, b);
      S(b);
      return null;
    case 5:
      Bh(b);
      var e = xh(wh.current);
      c = b.type;
      if (null !== a && null != b.stateNode) Bj(a, b, c, d, e), a.ref !== b.ref && (b.flags |= 512, b.flags |= 2097152);else {
        if (!d) {
          if (null === b.stateNode) throw Error(p(166));
          S(b);
          return null;
        }
        a = xh(uh.current);
        if (Gg(b)) {
          d = b.stateNode;
          c = b.type;
          var f = b.memoizedProps;
          d[Of] = b;
          d[Pf] = f;
          a = 0 !== (b.mode & 1);
          switch (c) {
            case "dialog":
              D("cancel", d);
              D("close", d);
              break;
            case "iframe":
            case "object":
            case "embed":
              D("load", d);
              break;
            case "video":
            case "audio":
              for (e = 0; e < lf.length; e++) D(lf[e], d);
              break;
            case "source":
              D("error", d);
              break;
            case "img":
            case "image":
            case "link":
              D("error", d);
              D("load", d);
              break;
            case "details":
              D("toggle", d);
              break;
            case "input":
              Za(d, f);
              D("invalid", d);
              break;
            case "select":
              d._wrapperState = {
                wasMultiple: !!f.multiple
              };
              D("invalid", d);
              break;
            case "textarea":
              hb(d, f), D("invalid", d);
          }
          ub(c, f);
          e = null;
          for (var g in f) if (f.hasOwnProperty(g)) {
            var h = f[g];
            "children" === g ? "string" === typeof h ? d.textContent !== h && (!0 !== f.suppressHydrationWarning && Af(d.textContent, h, a), e = ["children", h]) : "number" === typeof h && d.textContent !== "" + h && (!0 !== f.suppressHydrationWarning && Af(d.textContent, h, a), e = ["children", "" + h]) : ea.hasOwnProperty(g) && null != h && "onScroll" === g && D("scroll", d);
          }
          switch (c) {
            case "input":
              Va(d);
              db(d, f, !0);
              break;
            case "textarea":
              Va(d);
              jb(d);
              break;
            case "select":
            case "option":
              break;
            default:
              "function" === typeof f.onClick && (d.onclick = Bf);
          }
          d = e;
          b.updateQueue = d;
          null !== d && (b.flags |= 4);
        } else {
          g = 9 === e.nodeType ? e : e.ownerDocument;
          "http://www.w3.org/1999/xhtml" === a && (a = kb(c));
          "http://www.w3.org/1999/xhtml" === a ? "script" === c ? (a = g.createElement("div"), a.innerHTML = "<script>\x3c/script>", a = a.removeChild(a.firstChild)) : "string" === typeof d.is ? a = g.createElement(c, {
            is: d.is
          }) : (a = g.createElement(c), "select" === c && (g = a, d.multiple ? g.multiple = !0 : d.size && (g.size = d.size))) : a = g.createElementNS(a, c);
          a[Of] = b;
          a[Pf] = d;
          zj(a, b, !1, !1);
          b.stateNode = a;
          a: {
            g = vb(c, d);
            switch (c) {
              case "dialog":
                D("cancel", a);
                D("close", a);
                e = d;
                break;
              case "iframe":
              case "object":
              case "embed":
                D("load", a);
                e = d;
                break;
              case "video":
              case "audio":
                for (e = 0; e < lf.length; e++) D(lf[e], a);
                e = d;
                break;
              case "source":
                D("error", a);
                e = d;
                break;
              case "img":
              case "image":
              case "link":
                D("error", a);
                D("load", a);
                e = d;
                break;
              case "details":
                D("toggle", a);
                e = d;
                break;
              case "input":
                Za(a, d);
                e = Ya(a, d);
                D("invalid", a);
                break;
              case "option":
                e = d;
                break;
              case "select":
                a._wrapperState = {
                  wasMultiple: !!d.multiple
                };
                e = A({}, d, {
                  value: void 0
                });
                D("invalid", a);
                break;
              case "textarea":
                hb(a, d);
                e = gb(a, d);
                D("invalid", a);
                break;
              default:
                e = d;
            }
            ub(c, e);
            h = e;
            for (f in h) if (h.hasOwnProperty(f)) {
              var k = h[f];
              "style" === f ? sb(a, k) : "dangerouslySetInnerHTML" === f ? (k = k ? k.__html : void 0, null != k && nb(a, k)) : "children" === f ? "string" === typeof k ? ("textarea" !== c || "" !== k) && ob(a, k) : "number" === typeof k && ob(a, "" + k) : "suppressContentEditableWarning" !== f && "suppressHydrationWarning" !== f && "autoFocus" !== f && (ea.hasOwnProperty(f) ? null != k && "onScroll" === f && D("scroll", a) : null != k && ta(a, f, k, g));
            }
            switch (c) {
              case "input":
                Va(a);
                db(a, d, !1);
                break;
              case "textarea":
                Va(a);
                jb(a);
                break;
              case "option":
                null != d.value && a.setAttribute("value", "" + Sa(d.value));
                break;
              case "select":
                a.multiple = !!d.multiple;
                f = d.value;
                null != f ? fb(a, !!d.multiple, f, !1) : null != d.defaultValue && fb(a, !!d.multiple, d.defaultValue, !0);
                break;
              default:
                "function" === typeof e.onClick && (a.onclick = Bf);
            }
            switch (c) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                d = !!d.autoFocus;
                break a;
              case "img":
                d = !0;
                break a;
              default:
                d = !1;
            }
          }
          d && (b.flags |= 4);
        }
        null !== b.ref && (b.flags |= 512, b.flags |= 2097152);
      }
      S(b);
      return null;
    case 6:
      if (a && null != b.stateNode) Cj(a, b, a.memoizedProps, d);else {
        if ("string" !== typeof d && null === b.stateNode) throw Error(p(166));
        c = xh(wh.current);
        xh(uh.current);
        if (Gg(b)) {
          d = b.stateNode;
          c = b.memoizedProps;
          d[Of] = b;
          if (f = d.nodeValue !== c) if (a = xg, null !== a) switch (a.tag) {
            case 3:
              Af(d.nodeValue, c, 0 !== (a.mode & 1));
              break;
            case 5:
              !0 !== a.memoizedProps.suppressHydrationWarning && Af(d.nodeValue, c, 0 !== (a.mode & 1));
          }
          f && (b.flags |= 4);
        } else d = (9 === c.nodeType ? c : c.ownerDocument).createTextNode(d), d[Of] = b, b.stateNode = d;
      }
      S(b);
      return null;
    case 13:
      E(L);
      d = b.memoizedState;
      if (null === a || null !== a.memoizedState && null !== a.memoizedState.dehydrated) {
        if (I && null !== yg && 0 !== (b.mode & 1) && 0 === (b.flags & 128)) Hg(), Ig(), b.flags |= 98560, f = !1;else if (f = Gg(b), null !== d && null !== d.dehydrated) {
          if (null === a) {
            if (!f) throw Error(p(318));
            f = b.memoizedState;
            f = null !== f ? f.dehydrated : null;
            if (!f) throw Error(p(317));
            f[Of] = b;
          } else Ig(), 0 === (b.flags & 128) && (b.memoizedState = null), b.flags |= 4;
          S(b);
          f = !1;
        } else null !== zg && (Fj(zg), zg = null), f = !0;
        if (!f) return b.flags & 65536 ? b : null;
      }
      if (0 !== (b.flags & 128)) return b.lanes = c, b;
      d = null !== d;
      d !== (null !== a && null !== a.memoizedState) && d && (b.child.flags |= 8192, 0 !== (b.mode & 1) && (null === a || 0 !== (L.current & 1) ? 0 === T && (T = 3) : tj()));
      null !== b.updateQueue && (b.flags |= 4);
      S(b);
      return null;
    case 4:
      return zh(), Aj(a, b), null === a && sf(b.stateNode.containerInfo), S(b), null;
    case 10:
      return ah(b.type._context), S(b), null;
    case 17:
      return Zf(b.type) && $f(), S(b), null;
    case 19:
      E(L);
      f = b.memoizedState;
      if (null === f) return S(b), null;
      d = 0 !== (b.flags & 128);
      g = f.rendering;
      if (null === g) {
        if (d) Dj(f, !1);else {
          if (0 !== T || null !== a && 0 !== (a.flags & 128)) for (a = b.child; null !== a;) {
            g = Ch(a);
            if (null !== g) {
              b.flags |= 128;
              Dj(f, !1);
              d = g.updateQueue;
              null !== d && (b.updateQueue = d, b.flags |= 4);
              b.subtreeFlags = 0;
              d = c;
              for (c = b.child; null !== c;) f = c, a = d, f.flags &= 14680066, g = f.alternate, null === g ? (f.childLanes = 0, f.lanes = a, f.child = null, f.subtreeFlags = 0, f.memoizedProps = null, f.memoizedState = null, f.updateQueue = null, f.dependencies = null, f.stateNode = null) : (f.childLanes = g.childLanes, f.lanes = g.lanes, f.child = g.child, f.subtreeFlags = 0, f.deletions = null, f.memoizedProps = g.memoizedProps, f.memoizedState = g.memoizedState, f.updateQueue = g.updateQueue, f.type = g.type, a = g.dependencies, f.dependencies = null === a ? null : {
                lanes: a.lanes,
                firstContext: a.firstContext
              }), c = c.sibling;
              G(L, L.current & 1 | 2);
              return b.child;
            }
            a = a.sibling;
          }
          null !== f.tail && B() > Gj && (b.flags |= 128, d = !0, Dj(f, !1), b.lanes = 4194304);
        }
      } else {
        if (!d) if (a = Ch(g), null !== a) {
          if (b.flags |= 128, d = !0, c = a.updateQueue, null !== c && (b.updateQueue = c, b.flags |= 4), Dj(f, !0), null === f.tail && "hidden" === f.tailMode && !g.alternate && !I) return S(b), null;
        } else 2 * B() - f.renderingStartTime > Gj && 1073741824 !== c && (b.flags |= 128, d = !0, Dj(f, !1), b.lanes = 4194304);
        f.isBackwards ? (g.sibling = b.child, b.child = g) : (c = f.last, null !== c ? c.sibling = g : b.child = g, f.last = g);
      }
      if (null !== f.tail) return b = f.tail, f.rendering = b, f.tail = b.sibling, f.renderingStartTime = B(), b.sibling = null, c = L.current, G(L, d ? c & 1 | 2 : c & 1), b;
      S(b);
      return null;
    case 22:
    case 23:
      return Hj(), d = null !== b.memoizedState, null !== a && null !== a.memoizedState !== d && (b.flags |= 8192), d && 0 !== (b.mode & 1) ? 0 !== (fj & 1073741824) && (S(b), b.subtreeFlags & 6 && (b.flags |= 8192)) : S(b), null;
    case 24:
      return null;
    case 25:
      return null;
  }
  throw Error(p(156, b.tag));
}
function Ij(a, b) {
  wg(b);
  switch (b.tag) {
    case 1:
      return Zf(b.type) && $f(), a = b.flags, a & 65536 ? (b.flags = a & -65537 | 128, b) : null;
    case 3:
      return zh(), E(Wf), E(H), Eh(), a = b.flags, 0 !== (a & 65536) && 0 === (a & 128) ? (b.flags = a & -65537 | 128, b) : null;
    case 5:
      return Bh(b), null;
    case 13:
      E(L);
      a = b.memoizedState;
      if (null !== a && null !== a.dehydrated) {
        if (null === b.alternate) throw Error(p(340));
        Ig();
      }
      a = b.flags;
      return a & 65536 ? (b.flags = a & -65537 | 128, b) : null;
    case 19:
      return E(L), null;
    case 4:
      return zh(), null;
    case 10:
      return ah(b.type._context), null;
    case 22:
    case 23:
      return Hj(), null;
    case 24:
      return null;
    default:
      return null;
  }
}
var Jj = !1,
  U = !1,
  Kj = "function" === typeof WeakSet ? WeakSet : Set,
  V = null;
function Lj(a, b) {
  var c = a.ref;
  if (null !== c) if ("function" === typeof c) try {
    c(null);
  } catch (d) {
    W(a, b, d);
  } else c.current = null;
}
function Mj(a, b, c) {
  try {
    c();
  } catch (d) {
    W(a, b, d);
  }
}
var Nj = !1;
function Oj(a, b) {
  Cf = dd;
  a = Me();
  if (Ne(a)) {
    if ("selectionStart" in a) var c = {
      start: a.selectionStart,
      end: a.selectionEnd
    };else a: {
      c = (c = a.ownerDocument) && c.defaultView || window;
      var d = c.getSelection && c.getSelection();
      if (d && 0 !== d.rangeCount) {
        c = d.anchorNode;
        var e = d.anchorOffset,
          f = d.focusNode;
        d = d.focusOffset;
        try {
          c.nodeType, f.nodeType;
        } catch (F) {
          c = null;
          break a;
        }
        var g = 0,
          h = -1,
          k = -1,
          l = 0,
          m = 0,
          q = a,
          r = null;
        b: for (;;) {
          for (var y;;) {
            q !== c || 0 !== e && 3 !== q.nodeType || (h = g + e);
            q !== f || 0 !== d && 3 !== q.nodeType || (k = g + d);
            3 === q.nodeType && (g += q.nodeValue.length);
            if (null === (y = q.firstChild)) break;
            r = q;
            q = y;
          }
          for (;;) {
            if (q === a) break b;
            r === c && ++l === e && (h = g);
            r === f && ++m === d && (k = g);
            if (null !== (y = q.nextSibling)) break;
            q = r;
            r = q.parentNode;
          }
          q = y;
        }
        c = -1 === h || -1 === k ? null : {
          start: h,
          end: k
        };
      } else c = null;
    }
    c = c || {
      start: 0,
      end: 0
    };
  } else c = null;
  Df = {
    focusedElem: a,
    selectionRange: c
  };
  dd = !1;
  for (V = b; null !== V;) if (b = V, a = b.child, 0 !== (b.subtreeFlags & 1028) && null !== a) a.return = b, V = a;else for (; null !== V;) {
    b = V;
    try {
      var n = b.alternate;
      if (0 !== (b.flags & 1024)) switch (b.tag) {
        case 0:
        case 11:
        case 15:
          break;
        case 1:
          if (null !== n) {
            var t = n.memoizedProps,
              J = n.memoizedState,
              x = b.stateNode,
              w = x.getSnapshotBeforeUpdate(b.elementType === b.type ? t : Ci(b.type, t), J);
            x.__reactInternalSnapshotBeforeUpdate = w;
          }
          break;
        case 3:
          var u = b.stateNode.containerInfo;
          1 === u.nodeType ? u.textContent = "" : 9 === u.nodeType && u.documentElement && u.removeChild(u.documentElement);
          break;
        case 5:
        case 6:
        case 4:
        case 17:
          break;
        default:
          throw Error(p(163));
      }
    } catch (F) {
      W(b, b.return, F);
    }
    a = b.sibling;
    if (null !== a) {
      a.return = b.return;
      V = a;
      break;
    }
    V = b.return;
  }
  n = Nj;
  Nj = !1;
  return n;
}
function Pj(a, b, c) {
  var d = b.updateQueue;
  d = null !== d ? d.lastEffect : null;
  if (null !== d) {
    var e = d = d.next;
    do {
      if ((e.tag & a) === a) {
        var f = e.destroy;
        e.destroy = void 0;
        void 0 !== f && Mj(b, c, f);
      }
      e = e.next;
    } while (e !== d);
  }
}
function Qj(a, b) {
  b = b.updateQueue;
  b = null !== b ? b.lastEffect : null;
  if (null !== b) {
    var c = b = b.next;
    do {
      if ((c.tag & a) === a) {
        var d = c.create;
        c.destroy = d();
      }
      c = c.next;
    } while (c !== b);
  }
}
function Rj(a) {
  var b = a.ref;
  if (null !== b) {
    var c = a.stateNode;
    switch (a.tag) {
      case 5:
        a = c;
        break;
      default:
        a = c;
    }
    "function" === typeof b ? b(a) : b.current = a;
  }
}
function Sj(a) {
  var b = a.alternate;
  null !== b && (a.alternate = null, Sj(b));
  a.child = null;
  a.deletions = null;
  a.sibling = null;
  5 === a.tag && (b = a.stateNode, null !== b && (delete b[Of], delete b[Pf], delete b[of], delete b[Qf], delete b[Rf]));
  a.stateNode = null;
  a.return = null;
  a.dependencies = null;
  a.memoizedProps = null;
  a.memoizedState = null;
  a.pendingProps = null;
  a.stateNode = null;
  a.updateQueue = null;
}
function Tj(a) {
  return 5 === a.tag || 3 === a.tag || 4 === a.tag;
}
function Uj(a) {
  a: for (;;) {
    for (; null === a.sibling;) {
      if (null === a.return || Tj(a.return)) return null;
      a = a.return;
    }
    a.sibling.return = a.return;
    for (a = a.sibling; 5 !== a.tag && 6 !== a.tag && 18 !== a.tag;) {
      if (a.flags & 2) continue a;
      if (null === a.child || 4 === a.tag) continue a;else a.child.return = a, a = a.child;
    }
    if (!(a.flags & 2)) return a.stateNode;
  }
}
function Vj(a, b, c) {
  var d = a.tag;
  if (5 === d || 6 === d) a = a.stateNode, b ? 8 === c.nodeType ? c.parentNode.insertBefore(a, b) : c.insertBefore(a, b) : (8 === c.nodeType ? (b = c.parentNode, b.insertBefore(a, c)) : (b = c, b.appendChild(a)), c = c._reactRootContainer, null !== c && void 0 !== c || null !== b.onclick || (b.onclick = Bf));else if (4 !== d && (a = a.child, null !== a)) for (Vj(a, b, c), a = a.sibling; null !== a;) Vj(a, b, c), a = a.sibling;
}
function Wj(a, b, c) {
  var d = a.tag;
  if (5 === d || 6 === d) a = a.stateNode, b ? c.insertBefore(a, b) : c.appendChild(a);else if (4 !== d && (a = a.child, null !== a)) for (Wj(a, b, c), a = a.sibling; null !== a;) Wj(a, b, c), a = a.sibling;
}
var X = null,
  Xj = !1;
function Yj(a, b, c) {
  for (c = c.child; null !== c;) Zj(a, b, c), c = c.sibling;
}
function Zj(a, b, c) {
  if (lc && "function" === typeof lc.onCommitFiberUnmount) try {
    lc.onCommitFiberUnmount(kc, c);
  } catch (h) {}
  switch (c.tag) {
    case 5:
      U || Lj(c, b);
    case 6:
      var d = X,
        e = Xj;
      X = null;
      Yj(a, b, c);
      X = d;
      Xj = e;
      null !== X && (Xj ? (a = X, c = c.stateNode, 8 === a.nodeType ? a.parentNode.removeChild(c) : a.removeChild(c)) : X.removeChild(c.stateNode));
      break;
    case 18:
      null !== X && (Xj ? (a = X, c = c.stateNode, 8 === a.nodeType ? Kf(a.parentNode, c) : 1 === a.nodeType && Kf(a, c), bd(a)) : Kf(X, c.stateNode));
      break;
    case 4:
      d = X;
      e = Xj;
      X = c.stateNode.containerInfo;
      Xj = !0;
      Yj(a, b, c);
      X = d;
      Xj = e;
      break;
    case 0:
    case 11:
    case 14:
    case 15:
      if (!U && (d = c.updateQueue, null !== d && (d = d.lastEffect, null !== d))) {
        e = d = d.next;
        do {
          var f = e,
            g = f.destroy;
          f = f.tag;
          void 0 !== g && (0 !== (f & 2) ? Mj(c, b, g) : 0 !== (f & 4) && Mj(c, b, g));
          e = e.next;
        } while (e !== d);
      }
      Yj(a, b, c);
      break;
    case 1:
      if (!U && (Lj(c, b), d = c.stateNode, "function" === typeof d.componentWillUnmount)) try {
        d.props = c.memoizedProps, d.state = c.memoizedState, d.componentWillUnmount();
      } catch (h) {
        W(c, b, h);
      }
      Yj(a, b, c);
      break;
    case 21:
      Yj(a, b, c);
      break;
    case 22:
      c.mode & 1 ? (U = (d = U) || null !== c.memoizedState, Yj(a, b, c), U = d) : Yj(a, b, c);
      break;
    default:
      Yj(a, b, c);
  }
}
function ak(a) {
  var b = a.updateQueue;
  if (null !== b) {
    a.updateQueue = null;
    var c = a.stateNode;
    null === c && (c = a.stateNode = new Kj());
    b.forEach(function (b) {
      var d = bk.bind(null, a, b);
      c.has(b) || (c.add(b), b.then(d, d));
    });
  }
}
function ck(a, b) {
  var c = b.deletions;
  if (null !== c) for (var d = 0; d < c.length; d++) {
    var e = c[d];
    try {
      var f = a,
        g = b,
        h = g;
      a: for (; null !== h;) {
        switch (h.tag) {
          case 5:
            X = h.stateNode;
            Xj = !1;
            break a;
          case 3:
            X = h.stateNode.containerInfo;
            Xj = !0;
            break a;
          case 4:
            X = h.stateNode.containerInfo;
            Xj = !0;
            break a;
        }
        h = h.return;
      }
      if (null === X) throw Error(p(160));
      Zj(f, g, e);
      X = null;
      Xj = !1;
      var k = e.alternate;
      null !== k && (k.return = null);
      e.return = null;
    } catch (l) {
      W(e, b, l);
    }
  }
  if (b.subtreeFlags & 12854) for (b = b.child; null !== b;) dk(b, a), b = b.sibling;
}
function dk(a, b) {
  var c = a.alternate,
    d = a.flags;
  switch (a.tag) {
    case 0:
    case 11:
    case 14:
    case 15:
      ck(b, a);
      ek(a);
      if (d & 4) {
        try {
          Pj(3, a, a.return), Qj(3, a);
        } catch (t) {
          W(a, a.return, t);
        }
        try {
          Pj(5, a, a.return);
        } catch (t) {
          W(a, a.return, t);
        }
      }
      break;
    case 1:
      ck(b, a);
      ek(a);
      d & 512 && null !== c && Lj(c, c.return);
      break;
    case 5:
      ck(b, a);
      ek(a);
      d & 512 && null !== c && Lj(c, c.return);
      if (a.flags & 32) {
        var e = a.stateNode;
        try {
          ob(e, "");
        } catch (t) {
          W(a, a.return, t);
        }
      }
      if (d & 4 && (e = a.stateNode, null != e)) {
        var f = a.memoizedProps,
          g = null !== c ? c.memoizedProps : f,
          h = a.type,
          k = a.updateQueue;
        a.updateQueue = null;
        if (null !== k) try {
          "input" === h && "radio" === f.type && null != f.name && ab(e, f);
          vb(h, g);
          var l = vb(h, f);
          for (g = 0; g < k.length; g += 2) {
            var m = k[g],
              q = k[g + 1];
            "style" === m ? sb(e, q) : "dangerouslySetInnerHTML" === m ? nb(e, q) : "children" === m ? ob(e, q) : ta(e, m, q, l);
          }
          switch (h) {
            case "input":
              bb(e, f);
              break;
            case "textarea":
              ib(e, f);
              break;
            case "select":
              var r = e._wrapperState.wasMultiple;
              e._wrapperState.wasMultiple = !!f.multiple;
              var y = f.value;
              null != y ? fb(e, !!f.multiple, y, !1) : r !== !!f.multiple && (null != f.defaultValue ? fb(e, !!f.multiple, f.defaultValue, !0) : fb(e, !!f.multiple, f.multiple ? [] : "", !1));
          }
          e[Pf] = f;
        } catch (t) {
          W(a, a.return, t);
        }
      }
      break;
    case 6:
      ck(b, a);
      ek(a);
      if (d & 4) {
        if (null === a.stateNode) throw Error(p(162));
        e = a.stateNode;
        f = a.memoizedProps;
        try {
          e.nodeValue = f;
        } catch (t) {
          W(a, a.return, t);
        }
      }
      break;
    case 3:
      ck(b, a);
      ek(a);
      if (d & 4 && null !== c && c.memoizedState.isDehydrated) try {
        bd(b.containerInfo);
      } catch (t) {
        W(a, a.return, t);
      }
      break;
    case 4:
      ck(b, a);
      ek(a);
      break;
    case 13:
      ck(b, a);
      ek(a);
      e = a.child;
      e.flags & 8192 && (f = null !== e.memoizedState, e.stateNode.isHidden = f, !f || null !== e.alternate && null !== e.alternate.memoizedState || (fk = B()));
      d & 4 && ak(a);
      break;
    case 22:
      m = null !== c && null !== c.memoizedState;
      a.mode & 1 ? (U = (l = U) || m, ck(b, a), U = l) : ck(b, a);
      ek(a);
      if (d & 8192) {
        l = null !== a.memoizedState;
        if ((a.stateNode.isHidden = l) && !m && 0 !== (a.mode & 1)) for (V = a, m = a.child; null !== m;) {
          for (q = V = m; null !== V;) {
            r = V;
            y = r.child;
            switch (r.tag) {
              case 0:
              case 11:
              case 14:
              case 15:
                Pj(4, r, r.return);
                break;
              case 1:
                Lj(r, r.return);
                var n = r.stateNode;
                if ("function" === typeof n.componentWillUnmount) {
                  d = r;
                  c = r.return;
                  try {
                    b = d, n.props = b.memoizedProps, n.state = b.memoizedState, n.componentWillUnmount();
                  } catch (t) {
                    W(d, c, t);
                  }
                }
                break;
              case 5:
                Lj(r, r.return);
                break;
              case 22:
                if (null !== r.memoizedState) {
                  gk(q);
                  continue;
                }
            }
            null !== y ? (y.return = r, V = y) : gk(q);
          }
          m = m.sibling;
        }
        a: for (m = null, q = a;;) {
          if (5 === q.tag) {
            if (null === m) {
              m = q;
              try {
                e = q.stateNode, l ? (f = e.style, "function" === typeof f.setProperty ? f.setProperty("display", "none", "important") : f.display = "none") : (h = q.stateNode, k = q.memoizedProps.style, g = void 0 !== k && null !== k && k.hasOwnProperty("display") ? k.display : null, h.style.display = rb("display", g));
              } catch (t) {
                W(a, a.return, t);
              }
            }
          } else if (6 === q.tag) {
            if (null === m) try {
              q.stateNode.nodeValue = l ? "" : q.memoizedProps;
            } catch (t) {
              W(a, a.return, t);
            }
          } else if ((22 !== q.tag && 23 !== q.tag || null === q.memoizedState || q === a) && null !== q.child) {
            q.child.return = q;
            q = q.child;
            continue;
          }
          if (q === a) break a;
          for (; null === q.sibling;) {
            if (null === q.return || q.return === a) break a;
            m === q && (m = null);
            q = q.return;
          }
          m === q && (m = null);
          q.sibling.return = q.return;
          q = q.sibling;
        }
      }
      break;
    case 19:
      ck(b, a);
      ek(a);
      d & 4 && ak(a);
      break;
    case 21:
      break;
    default:
      ck(b, a), ek(a);
  }
}
function ek(a) {
  var b = a.flags;
  if (b & 2) {
    try {
      a: {
        for (var c = a.return; null !== c;) {
          if (Tj(c)) {
            var d = c;
            break a;
          }
          c = c.return;
        }
        throw Error(p(160));
      }
      switch (d.tag) {
        case 5:
          var e = d.stateNode;
          d.flags & 32 && (ob(e, ""), d.flags &= -33);
          var f = Uj(a);
          Wj(a, f, e);
          break;
        case 3:
        case 4:
          var g = d.stateNode.containerInfo,
            h = Uj(a);
          Vj(a, h, g);
          break;
        default:
          throw Error(p(161));
      }
    } catch (k) {
      W(a, a.return, k);
    }
    a.flags &= -3;
  }
  b & 4096 && (a.flags &= -4097);
}
function hk(a, b, c) {
  V = a;
  ik(a, b, c);
}
function ik(a, b, c) {
  for (var d = 0 !== (a.mode & 1); null !== V;) {
    var e = V,
      f = e.child;
    if (22 === e.tag && d) {
      var g = null !== e.memoizedState || Jj;
      if (!g) {
        var h = e.alternate,
          k = null !== h && null !== h.memoizedState || U;
        h = Jj;
        var l = U;
        Jj = g;
        if ((U = k) && !l) for (V = e; null !== V;) g = V, k = g.child, 22 === g.tag && null !== g.memoizedState ? jk(e) : null !== k ? (k.return = g, V = k) : jk(e);
        for (; null !== f;) V = f, ik(f, b, c), f = f.sibling;
        V = e;
        Jj = h;
        U = l;
      }
      kk(a, b, c);
    } else 0 !== (e.subtreeFlags & 8772) && null !== f ? (f.return = e, V = f) : kk(a, b, c);
  }
}
function kk(a) {
  for (; null !== V;) {
    var b = V;
    if (0 !== (b.flags & 8772)) {
      var c = b.alternate;
      try {
        if (0 !== (b.flags & 8772)) switch (b.tag) {
          case 0:
          case 11:
          case 15:
            U || Qj(5, b);
            break;
          case 1:
            var d = b.stateNode;
            if (b.flags & 4 && !U) if (null === c) d.componentDidMount();else {
              var e = b.elementType === b.type ? c.memoizedProps : Ci(b.type, c.memoizedProps);
              d.componentDidUpdate(e, c.memoizedState, d.__reactInternalSnapshotBeforeUpdate);
            }
            var f = b.updateQueue;
            null !== f && sh(b, f, d);
            break;
          case 3:
            var g = b.updateQueue;
            if (null !== g) {
              c = null;
              if (null !== b.child) switch (b.child.tag) {
                case 5:
                  c = b.child.stateNode;
                  break;
                case 1:
                  c = b.child.stateNode;
              }
              sh(b, g, c);
            }
            break;
          case 5:
            var h = b.stateNode;
            if (null === c && b.flags & 4) {
              c = h;
              var k = b.memoizedProps;
              switch (b.type) {
                case "button":
                case "input":
                case "select":
                case "textarea":
                  k.autoFocus && c.focus();
                  break;
                case "img":
                  k.src && (c.src = k.src);
              }
            }
            break;
          case 6:
            break;
          case 4:
            break;
          case 12:
            break;
          case 13:
            if (null === b.memoizedState) {
              var l = b.alternate;
              if (null !== l) {
                var m = l.memoizedState;
                if (null !== m) {
                  var q = m.dehydrated;
                  null !== q && bd(q);
                }
              }
            }
            break;
          case 19:
          case 17:
          case 21:
          case 22:
          case 23:
          case 25:
            break;
          default:
            throw Error(p(163));
        }
        U || b.flags & 512 && Rj(b);
      } catch (r) {
        W(b, b.return, r);
      }
    }
    if (b === a) {
      V = null;
      break;
    }
    c = b.sibling;
    if (null !== c) {
      c.return = b.return;
      V = c;
      break;
    }
    V = b.return;
  }
}
function gk(a) {
  for (; null !== V;) {
    var b = V;
    if (b === a) {
      V = null;
      break;
    }
    var c = b.sibling;
    if (null !== c) {
      c.return = b.return;
      V = c;
      break;
    }
    V = b.return;
  }
}
function jk(a) {
  for (; null !== V;) {
    var b = V;
    try {
      switch (b.tag) {
        case 0:
        case 11:
        case 15:
          var c = b.return;
          try {
            Qj(4, b);
          } catch (k) {
            W(b, c, k);
          }
          break;
        case 1:
          var d = b.stateNode;
          if ("function" === typeof d.componentDidMount) {
            var e = b.return;
            try {
              d.componentDidMount();
            } catch (k) {
              W(b, e, k);
            }
          }
          var f = b.return;
          try {
            Rj(b);
          } catch (k) {
            W(b, f, k);
          }
          break;
        case 5:
          var g = b.return;
          try {
            Rj(b);
          } catch (k) {
            W(b, g, k);
          }
      }
    } catch (k) {
      W(b, b.return, k);
    }
    if (b === a) {
      V = null;
      break;
    }
    var h = b.sibling;
    if (null !== h) {
      h.return = b.return;
      V = h;
      break;
    }
    V = b.return;
  }
}
var lk = Math.ceil,
  mk = ua.ReactCurrentDispatcher,
  nk = ua.ReactCurrentOwner,
  ok = ua.ReactCurrentBatchConfig,
  K = 0,
  Q = null,
  Y = null,
  Z = 0,
  fj = 0,
  ej = Uf(0),
  T = 0,
  pk = null,
  rh = 0,
  qk = 0,
  rk = 0,
  sk = null,
  tk = null,
  fk = 0,
  Gj = Infinity,
  uk = null,
  Oi = !1,
  Pi = null,
  Ri = null,
  vk = !1,
  wk = null,
  xk = 0,
  yk = 0,
  zk = null,
  Ak = -1,
  Bk = 0;
function R() {
  return 0 !== (K & 6) ? B() : -1 !== Ak ? Ak : Ak = B();
}
function yi(a) {
  if (0 === (a.mode & 1)) return 1;
  if (0 !== (K & 2) && 0 !== Z) return Z & -Z;
  if (null !== Kg.transition) return 0 === Bk && (Bk = yc()), Bk;
  a = C;
  if (0 !== a) return a;
  a = window.event;
  a = void 0 === a ? 16 : jd(a.type);
  return a;
}
function gi(a, b, c, d) {
  if (50 < yk) throw yk = 0, zk = null, Error(p(185));
  Ac(a, c, d);
  if (0 === (K & 2) || a !== Q) a === Q && (0 === (K & 2) && (qk |= c), 4 === T && Ck(a, Z)), Dk(a, d), 1 === c && 0 === K && 0 === (b.mode & 1) && (Gj = B() + 500, fg && jg());
}
function Dk(a, b) {
  var c = a.callbackNode;
  wc(a, b);
  var d = uc(a, a === Q ? Z : 0);
  if (0 === d) null !== c && bc(c), a.callbackNode = null, a.callbackPriority = 0;else if (b = d & -d, a.callbackPriority !== b) {
    null != c && bc(c);
    if (1 === b) 0 === a.tag ? ig(Ek.bind(null, a)) : hg(Ek.bind(null, a)), Jf(function () {
      0 === (K & 6) && jg();
    }), c = null;else {
      switch (Dc(d)) {
        case 1:
          c = fc;
          break;
        case 4:
          c = gc;
          break;
        case 16:
          c = hc;
          break;
        case 536870912:
          c = jc;
          break;
        default:
          c = hc;
      }
      c = Fk(c, Gk.bind(null, a));
    }
    a.callbackPriority = b;
    a.callbackNode = c;
  }
}
function Gk(a, b) {
  Ak = -1;
  Bk = 0;
  if (0 !== (K & 6)) throw Error(p(327));
  var c = a.callbackNode;
  if (Hk() && a.callbackNode !== c) return null;
  var d = uc(a, a === Q ? Z : 0);
  if (0 === d) return null;
  if (0 !== (d & 30) || 0 !== (d & a.expiredLanes) || b) b = Ik(a, d);else {
    b = d;
    var e = K;
    K |= 2;
    var f = Jk();
    if (Q !== a || Z !== b) uk = null, Gj = B() + 500, Kk(a, b);
    do try {
      Lk();
      break;
    } catch (h) {
      Mk(a, h);
    } while (1);
    $g();
    mk.current = f;
    K = e;
    null !== Y ? b = 0 : (Q = null, Z = 0, b = T);
  }
  if (0 !== b) {
    2 === b && (e = xc(a), 0 !== e && (d = e, b = Nk(a, e)));
    if (1 === b) throw c = pk, Kk(a, 0), Ck(a, d), Dk(a, B()), c;
    if (6 === b) Ck(a, d);else {
      e = a.current.alternate;
      if (0 === (d & 30) && !Ok(e) && (b = Ik(a, d), 2 === b && (f = xc(a), 0 !== f && (d = f, b = Nk(a, f))), 1 === b)) throw c = pk, Kk(a, 0), Ck(a, d), Dk(a, B()), c;
      a.finishedWork = e;
      a.finishedLanes = d;
      switch (b) {
        case 0:
        case 1:
          throw Error(p(345));
        case 2:
          Pk(a, tk, uk);
          break;
        case 3:
          Ck(a, d);
          if ((d & 130023424) === d && (b = fk + 500 - B(), 10 < b)) {
            if (0 !== uc(a, 0)) break;
            e = a.suspendedLanes;
            if ((e & d) !== d) {
              R();
              a.pingedLanes |= a.suspendedLanes & e;
              break;
            }
            a.timeoutHandle = Ff(Pk.bind(null, a, tk, uk), b);
            break;
          }
          Pk(a, tk, uk);
          break;
        case 4:
          Ck(a, d);
          if ((d & 4194240) === d) break;
          b = a.eventTimes;
          for (e = -1; 0 < d;) {
            var g = 31 - oc(d);
            f = 1 << g;
            g = b[g];
            g > e && (e = g);
            d &= ~f;
          }
          d = e;
          d = B() - d;
          d = (120 > d ? 120 : 480 > d ? 480 : 1080 > d ? 1080 : 1920 > d ? 1920 : 3E3 > d ? 3E3 : 4320 > d ? 4320 : 1960 * lk(d / 1960)) - d;
          if (10 < d) {
            a.timeoutHandle = Ff(Pk.bind(null, a, tk, uk), d);
            break;
          }
          Pk(a, tk, uk);
          break;
        case 5:
          Pk(a, tk, uk);
          break;
        default:
          throw Error(p(329));
      }
    }
  }
  Dk(a, B());
  return a.callbackNode === c ? Gk.bind(null, a) : null;
}
function Nk(a, b) {
  var c = sk;
  a.current.memoizedState.isDehydrated && (Kk(a, b).flags |= 256);
  a = Ik(a, b);
  2 !== a && (b = tk, tk = c, null !== b && Fj(b));
  return a;
}
function Fj(a) {
  null === tk ? tk = a : tk.push.apply(tk, a);
}
function Ok(a) {
  for (var b = a;;) {
    if (b.flags & 16384) {
      var c = b.updateQueue;
      if (null !== c && (c = c.stores, null !== c)) for (var d = 0; d < c.length; d++) {
        var e = c[d],
          f = e.getSnapshot;
        e = e.value;
        try {
          if (!He(f(), e)) return !1;
        } catch (g) {
          return !1;
        }
      }
    }
    c = b.child;
    if (b.subtreeFlags & 16384 && null !== c) c.return = b, b = c;else {
      if (b === a) break;
      for (; null === b.sibling;) {
        if (null === b.return || b.return === a) return !0;
        b = b.return;
      }
      b.sibling.return = b.return;
      b = b.sibling;
    }
  }
  return !0;
}
function Ck(a, b) {
  b &= ~rk;
  b &= ~qk;
  a.suspendedLanes |= b;
  a.pingedLanes &= ~b;
  for (a = a.expirationTimes; 0 < b;) {
    var c = 31 - oc(b),
      d = 1 << c;
    a[c] = -1;
    b &= ~d;
  }
}
function Ek(a) {
  if (0 !== (K & 6)) throw Error(p(327));
  Hk();
  var b = uc(a, 0);
  if (0 === (b & 1)) return Dk(a, B()), null;
  var c = Ik(a, b);
  if (0 !== a.tag && 2 === c) {
    var d = xc(a);
    0 !== d && (b = d, c = Nk(a, d));
  }
  if (1 === c) throw c = pk, Kk(a, 0), Ck(a, b), Dk(a, B()), c;
  if (6 === c) throw Error(p(345));
  a.finishedWork = a.current.alternate;
  a.finishedLanes = b;
  Pk(a, tk, uk);
  Dk(a, B());
  return null;
}
function Qk(a, b) {
  var c = K;
  K |= 1;
  try {
    return a(b);
  } finally {
    K = c, 0 === K && (Gj = B() + 500, fg && jg());
  }
}
function Rk(a) {
  null !== wk && 0 === wk.tag && 0 === (K & 6) && Hk();
  var b = K;
  K |= 1;
  var c = ok.transition,
    d = C;
  try {
    if (ok.transition = null, C = 1, a) return a();
  } finally {
    C = d, ok.transition = c, K = b, 0 === (K & 6) && jg();
  }
}
function Hj() {
  fj = ej.current;
  E(ej);
}
function Kk(a, b) {
  a.finishedWork = null;
  a.finishedLanes = 0;
  var c = a.timeoutHandle;
  -1 !== c && (a.timeoutHandle = -1, Gf(c));
  if (null !== Y) for (c = Y.return; null !== c;) {
    var d = c;
    wg(d);
    switch (d.tag) {
      case 1:
        d = d.type.childContextTypes;
        null !== d && void 0 !== d && $f();
        break;
      case 3:
        zh();
        E(Wf);
        E(H);
        Eh();
        break;
      case 5:
        Bh(d);
        break;
      case 4:
        zh();
        break;
      case 13:
        E(L);
        break;
      case 19:
        E(L);
        break;
      case 10:
        ah(d.type._context);
        break;
      case 22:
      case 23:
        Hj();
    }
    c = c.return;
  }
  Q = a;
  Y = a = Pg(a.current, null);
  Z = fj = b;
  T = 0;
  pk = null;
  rk = qk = rh = 0;
  tk = sk = null;
  if (null !== fh) {
    for (b = 0; b < fh.length; b++) if (c = fh[b], d = c.interleaved, null !== d) {
      c.interleaved = null;
      var e = d.next,
        f = c.pending;
      if (null !== f) {
        var g = f.next;
        f.next = e;
        d.next = g;
      }
      c.pending = d;
    }
    fh = null;
  }
  return a;
}
function Mk(a, b) {
  do {
    var c = Y;
    try {
      $g();
      Fh.current = Rh;
      if (Ih) {
        for (var d = M.memoizedState; null !== d;) {
          var e = d.queue;
          null !== e && (e.pending = null);
          d = d.next;
        }
        Ih = !1;
      }
      Hh = 0;
      O = N = M = null;
      Jh = !1;
      Kh = 0;
      nk.current = null;
      if (null === c || null === c.return) {
        T = 1;
        pk = b;
        Y = null;
        break;
      }
      a: {
        var f = a,
          g = c.return,
          h = c,
          k = b;
        b = Z;
        h.flags |= 32768;
        if (null !== k && "object" === typeof k && "function" === typeof k.then) {
          var l = k,
            m = h,
            q = m.tag;
          if (0 === (m.mode & 1) && (0 === q || 11 === q || 15 === q)) {
            var r = m.alternate;
            r ? (m.updateQueue = r.updateQueue, m.memoizedState = r.memoizedState, m.lanes = r.lanes) : (m.updateQueue = null, m.memoizedState = null);
          }
          var y = Ui(g);
          if (null !== y) {
            y.flags &= -257;
            Vi(y, g, h, f, b);
            y.mode & 1 && Si(f, l, b);
            b = y;
            k = l;
            var n = b.updateQueue;
            if (null === n) {
              var t = new Set();
              t.add(k);
              b.updateQueue = t;
            } else n.add(k);
            break a;
          } else {
            if (0 === (b & 1)) {
              Si(f, l, b);
              tj();
              break a;
            }
            k = Error(p(426));
          }
        } else if (I && h.mode & 1) {
          var J = Ui(g);
          if (null !== J) {
            0 === (J.flags & 65536) && (J.flags |= 256);
            Vi(J, g, h, f, b);
            Jg(Ji(k, h));
            break a;
          }
        }
        f = k = Ji(k, h);
        4 !== T && (T = 2);
        null === sk ? sk = [f] : sk.push(f);
        f = g;
        do {
          switch (f.tag) {
            case 3:
              f.flags |= 65536;
              b &= -b;
              f.lanes |= b;
              var x = Ni(f, k, b);
              ph(f, x);
              break a;
            case 1:
              h = k;
              var w = f.type,
                u = f.stateNode;
              if (0 === (f.flags & 128) && ("function" === typeof w.getDerivedStateFromError || null !== u && "function" === typeof u.componentDidCatch && (null === Ri || !Ri.has(u)))) {
                f.flags |= 65536;
                b &= -b;
                f.lanes |= b;
                var F = Qi(f, h, b);
                ph(f, F);
                break a;
              }
          }
          f = f.return;
        } while (null !== f);
      }
      Sk(c);
    } catch (na) {
      b = na;
      Y === c && null !== c && (Y = c = c.return);
      continue;
    }
    break;
  } while (1);
}
function Jk() {
  var a = mk.current;
  mk.current = Rh;
  return null === a ? Rh : a;
}
function tj() {
  if (0 === T || 3 === T || 2 === T) T = 4;
  null === Q || 0 === (rh & 268435455) && 0 === (qk & 268435455) || Ck(Q, Z);
}
function Ik(a, b) {
  var c = K;
  K |= 2;
  var d = Jk();
  if (Q !== a || Z !== b) uk = null, Kk(a, b);
  do try {
    Tk();
    break;
  } catch (e) {
    Mk(a, e);
  } while (1);
  $g();
  K = c;
  mk.current = d;
  if (null !== Y) throw Error(p(261));
  Q = null;
  Z = 0;
  return T;
}
function Tk() {
  for (; null !== Y;) Uk(Y);
}
function Lk() {
  for (; null !== Y && !cc();) Uk(Y);
}
function Uk(a) {
  var b = Vk(a.alternate, a, fj);
  a.memoizedProps = a.pendingProps;
  null === b ? Sk(a) : Y = b;
  nk.current = null;
}
function Sk(a) {
  var b = a;
  do {
    var c = b.alternate;
    a = b.return;
    if (0 === (b.flags & 32768)) {
      if (c = Ej(c, b, fj), null !== c) {
        Y = c;
        return;
      }
    } else {
      c = Ij(c, b);
      if (null !== c) {
        c.flags &= 32767;
        Y = c;
        return;
      }
      if (null !== a) a.flags |= 32768, a.subtreeFlags = 0, a.deletions = null;else {
        T = 6;
        Y = null;
        return;
      }
    }
    b = b.sibling;
    if (null !== b) {
      Y = b;
      return;
    }
    Y = b = a;
  } while (null !== b);
  0 === T && (T = 5);
}
function Pk(a, b, c) {
  var d = C,
    e = ok.transition;
  try {
    ok.transition = null, C = 1, Wk(a, b, c, d);
  } finally {
    ok.transition = e, C = d;
  }
  return null;
}
function Wk(a, b, c, d) {
  do Hk(); while (null !== wk);
  if (0 !== (K & 6)) throw Error(p(327));
  c = a.finishedWork;
  var e = a.finishedLanes;
  if (null === c) return null;
  a.finishedWork = null;
  a.finishedLanes = 0;
  if (c === a.current) throw Error(p(177));
  a.callbackNode = null;
  a.callbackPriority = 0;
  var f = c.lanes | c.childLanes;
  Bc(a, f);
  a === Q && (Y = Q = null, Z = 0);
  0 === (c.subtreeFlags & 2064) && 0 === (c.flags & 2064) || vk || (vk = !0, Fk(hc, function () {
    Hk();
    return null;
  }));
  f = 0 !== (c.flags & 15990);
  if (0 !== (c.subtreeFlags & 15990) || f) {
    f = ok.transition;
    ok.transition = null;
    var g = C;
    C = 1;
    var h = K;
    K |= 4;
    nk.current = null;
    Oj(a, c);
    dk(c, a);
    Oe(Df);
    dd = !!Cf;
    Df = Cf = null;
    a.current = c;
    hk(c, a, e);
    dc();
    K = h;
    C = g;
    ok.transition = f;
  } else a.current = c;
  vk && (vk = !1, wk = a, xk = e);
  f = a.pendingLanes;
  0 === f && (Ri = null);
  mc(c.stateNode, d);
  Dk(a, B());
  if (null !== b) for (d = a.onRecoverableError, c = 0; c < b.length; c++) e = b[c], d(e.value, {
    componentStack: e.stack,
    digest: e.digest
  });
  if (Oi) throw Oi = !1, a = Pi, Pi = null, a;
  0 !== (xk & 1) && 0 !== a.tag && Hk();
  f = a.pendingLanes;
  0 !== (f & 1) ? a === zk ? yk++ : (yk = 0, zk = a) : yk = 0;
  jg();
  return null;
}
function Hk() {
  if (null !== wk) {
    var a = Dc(xk),
      b = ok.transition,
      c = C;
    try {
      ok.transition = null;
      C = 16 > a ? 16 : a;
      if (null === wk) var d = !1;else {
        a = wk;
        wk = null;
        xk = 0;
        if (0 !== (K & 6)) throw Error(p(331));
        var e = K;
        K |= 4;
        for (V = a.current; null !== V;) {
          var f = V,
            g = f.child;
          if (0 !== (V.flags & 16)) {
            var h = f.deletions;
            if (null !== h) {
              for (var k = 0; k < h.length; k++) {
                var l = h[k];
                for (V = l; null !== V;) {
                  var m = V;
                  switch (m.tag) {
                    case 0:
                    case 11:
                    case 15:
                      Pj(8, m, f);
                  }
                  var q = m.child;
                  if (null !== q) q.return = m, V = q;else for (; null !== V;) {
                    m = V;
                    var r = m.sibling,
                      y = m.return;
                    Sj(m);
                    if (m === l) {
                      V = null;
                      break;
                    }
                    if (null !== r) {
                      r.return = y;
                      V = r;
                      break;
                    }
                    V = y;
                  }
                }
              }
              var n = f.alternate;
              if (null !== n) {
                var t = n.child;
                if (null !== t) {
                  n.child = null;
                  do {
                    var J = t.sibling;
                    t.sibling = null;
                    t = J;
                  } while (null !== t);
                }
              }
              V = f;
            }
          }
          if (0 !== (f.subtreeFlags & 2064) && null !== g) g.return = f, V = g;else b: for (; null !== V;) {
            f = V;
            if (0 !== (f.flags & 2048)) switch (f.tag) {
              case 0:
              case 11:
              case 15:
                Pj(9, f, f.return);
            }
            var x = f.sibling;
            if (null !== x) {
              x.return = f.return;
              V = x;
              break b;
            }
            V = f.return;
          }
        }
        var w = a.current;
        for (V = w; null !== V;) {
          g = V;
          var u = g.child;
          if (0 !== (g.subtreeFlags & 2064) && null !== u) u.return = g, V = u;else b: for (g = w; null !== V;) {
            h = V;
            if (0 !== (h.flags & 2048)) try {
              switch (h.tag) {
                case 0:
                case 11:
                case 15:
                  Qj(9, h);
              }
            } catch (na) {
              W(h, h.return, na);
            }
            if (h === g) {
              V = null;
              break b;
            }
            var F = h.sibling;
            if (null !== F) {
              F.return = h.return;
              V = F;
              break b;
            }
            V = h.return;
          }
        }
        K = e;
        jg();
        if (lc && "function" === typeof lc.onPostCommitFiberRoot) try {
          lc.onPostCommitFiberRoot(kc, a);
        } catch (na) {}
        d = !0;
      }
      return d;
    } finally {
      C = c, ok.transition = b;
    }
  }
  return !1;
}
function Xk(a, b, c) {
  b = Ji(c, b);
  b = Ni(a, b, 1);
  a = nh(a, b, 1);
  b = R();
  null !== a && (Ac(a, 1, b), Dk(a, b));
}
function W(a, b, c) {
  if (3 === a.tag) Xk(a, a, c);else for (; null !== b;) {
    if (3 === b.tag) {
      Xk(b, a, c);
      break;
    } else if (1 === b.tag) {
      var d = b.stateNode;
      if ("function" === typeof b.type.getDerivedStateFromError || "function" === typeof d.componentDidCatch && (null === Ri || !Ri.has(d))) {
        a = Ji(c, a);
        a = Qi(b, a, 1);
        b = nh(b, a, 1);
        a = R();
        null !== b && (Ac(b, 1, a), Dk(b, a));
        break;
      }
    }
    b = b.return;
  }
}
function Ti(a, b, c) {
  var d = a.pingCache;
  null !== d && d.delete(b);
  b = R();
  a.pingedLanes |= a.suspendedLanes & c;
  Q === a && (Z & c) === c && (4 === T || 3 === T && (Z & 130023424) === Z && 500 > B() - fk ? Kk(a, 0) : rk |= c);
  Dk(a, b);
}
function Yk(a, b) {
  0 === b && (0 === (a.mode & 1) ? b = 1 : (b = sc, sc <<= 1, 0 === (sc & 130023424) && (sc = 4194304)));
  var c = R();
  a = ih(a, b);
  null !== a && (Ac(a, b, c), Dk(a, c));
}
function uj(a) {
  var b = a.memoizedState,
    c = 0;
  null !== b && (c = b.retryLane);
  Yk(a, c);
}
function bk(a, b) {
  var c = 0;
  switch (a.tag) {
    case 13:
      var d = a.stateNode;
      var e = a.memoizedState;
      null !== e && (c = e.retryLane);
      break;
    case 19:
      d = a.stateNode;
      break;
    default:
      throw Error(p(314));
  }
  null !== d && d.delete(b);
  Yk(a, c);
}
var Vk;
Vk = function (a, b, c) {
  if (null !== a) {
    if (a.memoizedProps !== b.pendingProps || Wf.current) dh = !0;else {
      if (0 === (a.lanes & c) && 0 === (b.flags & 128)) return dh = !1, yj(a, b, c);
      dh = 0 !== (a.flags & 131072) ? !0 : !1;
    }
  } else dh = !1, I && 0 !== (b.flags & 1048576) && ug(b, ng, b.index);
  b.lanes = 0;
  switch (b.tag) {
    case 2:
      var d = b.type;
      ij(a, b);
      a = b.pendingProps;
      var e = Yf(b, H.current);
      ch(b, c);
      e = Nh(null, b, d, a, e, c);
      var f = Sh();
      b.flags |= 1;
      "object" === typeof e && null !== e && "function" === typeof e.render && void 0 === e.$$typeof ? (b.tag = 1, b.memoizedState = null, b.updateQueue = null, Zf(d) ? (f = !0, cg(b)) : f = !1, b.memoizedState = null !== e.state && void 0 !== e.state ? e.state : null, kh(b), e.updater = Ei, b.stateNode = e, e._reactInternals = b, Ii(b, d, a, c), b = jj(null, b, d, !0, f, c)) : (b.tag = 0, I && f && vg(b), Xi(null, b, e, c), b = b.child);
      return b;
    case 16:
      d = b.elementType;
      a: {
        ij(a, b);
        a = b.pendingProps;
        e = d._init;
        d = e(d._payload);
        b.type = d;
        e = b.tag = Zk(d);
        a = Ci(d, a);
        switch (e) {
          case 0:
            b = cj(null, b, d, a, c);
            break a;
          case 1:
            b = hj(null, b, d, a, c);
            break a;
          case 11:
            b = Yi(null, b, d, a, c);
            break a;
          case 14:
            b = $i(null, b, d, Ci(d.type, a), c);
            break a;
        }
        throw Error(p(306, d, ""));
      }
      return b;
    case 0:
      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Ci(d, e), cj(a, b, d, e, c);
    case 1:
      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Ci(d, e), hj(a, b, d, e, c);
    case 3:
      a: {
        kj(b);
        if (null === a) throw Error(p(387));
        d = b.pendingProps;
        f = b.memoizedState;
        e = f.element;
        lh(a, b);
        qh(b, d, null, c);
        var g = b.memoizedState;
        d = g.element;
        if (f.isDehydrated) {
          if (f = {
            element: d,
            isDehydrated: !1,
            cache: g.cache,
            pendingSuspenseBoundaries: g.pendingSuspenseBoundaries,
            transitions: g.transitions
          }, b.updateQueue.baseState = f, b.memoizedState = f, b.flags & 256) {
            e = Ji(Error(p(423)), b);
            b = lj(a, b, d, c, e);
            break a;
          } else if (d !== e) {
            e = Ji(Error(p(424)), b);
            b = lj(a, b, d, c, e);
            break a;
          } else for (yg = Lf(b.stateNode.containerInfo.firstChild), xg = b, I = !0, zg = null, c = Vg(b, null, d, c), b.child = c; c;) c.flags = c.flags & -3 | 4096, c = c.sibling;
        } else {
          Ig();
          if (d === e) {
            b = Zi(a, b, c);
            break a;
          }
          Xi(a, b, d, c);
        }
        b = b.child;
      }
      return b;
    case 5:
      return Ah(b), null === a && Eg(b), d = b.type, e = b.pendingProps, f = null !== a ? a.memoizedProps : null, g = e.children, Ef(d, e) ? g = null : null !== f && Ef(d, f) && (b.flags |= 32), gj(a, b), Xi(a, b, g, c), b.child;
    case 6:
      return null === a && Eg(b), null;
    case 13:
      return oj(a, b, c);
    case 4:
      return yh(b, b.stateNode.containerInfo), d = b.pendingProps, null === a ? b.child = Ug(b, null, d, c) : Xi(a, b, d, c), b.child;
    case 11:
      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Ci(d, e), Yi(a, b, d, e, c);
    case 7:
      return Xi(a, b, b.pendingProps, c), b.child;
    case 8:
      return Xi(a, b, b.pendingProps.children, c), b.child;
    case 12:
      return Xi(a, b, b.pendingProps.children, c), b.child;
    case 10:
      a: {
        d = b.type._context;
        e = b.pendingProps;
        f = b.memoizedProps;
        g = e.value;
        G(Wg, d._currentValue);
        d._currentValue = g;
        if (null !== f) if (He(f.value, g)) {
          if (f.children === e.children && !Wf.current) {
            b = Zi(a, b, c);
            break a;
          }
        } else for (f = b.child, null !== f && (f.return = b); null !== f;) {
          var h = f.dependencies;
          if (null !== h) {
            g = f.child;
            for (var k = h.firstContext; null !== k;) {
              if (k.context === d) {
                if (1 === f.tag) {
                  k = mh(-1, c & -c);
                  k.tag = 2;
                  var l = f.updateQueue;
                  if (null !== l) {
                    l = l.shared;
                    var m = l.pending;
                    null === m ? k.next = k : (k.next = m.next, m.next = k);
                    l.pending = k;
                  }
                }
                f.lanes |= c;
                k = f.alternate;
                null !== k && (k.lanes |= c);
                bh(f.return, c, b);
                h.lanes |= c;
                break;
              }
              k = k.next;
            }
          } else if (10 === f.tag) g = f.type === b.type ? null : f.child;else if (18 === f.tag) {
            g = f.return;
            if (null === g) throw Error(p(341));
            g.lanes |= c;
            h = g.alternate;
            null !== h && (h.lanes |= c);
            bh(g, c, b);
            g = f.sibling;
          } else g = f.child;
          if (null !== g) g.return = f;else for (g = f; null !== g;) {
            if (g === b) {
              g = null;
              break;
            }
            f = g.sibling;
            if (null !== f) {
              f.return = g.return;
              g = f;
              break;
            }
            g = g.return;
          }
          f = g;
        }
        Xi(a, b, e.children, c);
        b = b.child;
      }
      return b;
    case 9:
      return e = b.type, d = b.pendingProps.children, ch(b, c), e = eh(e), d = d(e), b.flags |= 1, Xi(a, b, d, c), b.child;
    case 14:
      return d = b.type, e = Ci(d, b.pendingProps), e = Ci(d.type, e), $i(a, b, d, e, c);
    case 15:
      return bj(a, b, b.type, b.pendingProps, c);
    case 17:
      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Ci(d, e), ij(a, b), b.tag = 1, Zf(d) ? (a = !0, cg(b)) : a = !1, ch(b, c), Gi(b, d, e), Ii(b, d, e, c), jj(null, b, d, !0, a, c);
    case 19:
      return xj(a, b, c);
    case 22:
      return dj(a, b, c);
  }
  throw Error(p(156, b.tag));
};
function Fk(a, b) {
  return ac(a, b);
}
function $k(a, b, c, d) {
  this.tag = a;
  this.key = c;
  this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
  this.index = 0;
  this.ref = null;
  this.pendingProps = b;
  this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
  this.mode = d;
  this.subtreeFlags = this.flags = 0;
  this.deletions = null;
  this.childLanes = this.lanes = 0;
  this.alternate = null;
}
function Bg(a, b, c, d) {
  return new $k(a, b, c, d);
}
function aj(a) {
  a = a.prototype;
  return !(!a || !a.isReactComponent);
}
function Zk(a) {
  if ("function" === typeof a) return aj(a) ? 1 : 0;
  if (void 0 !== a && null !== a) {
    a = a.$$typeof;
    if (a === Da) return 11;
    if (a === Ga) return 14;
  }
  return 2;
}
function Pg(a, b) {
  var c = a.alternate;
  null === c ? (c = Bg(a.tag, b, a.key, a.mode), c.elementType = a.elementType, c.type = a.type, c.stateNode = a.stateNode, c.alternate = a, a.alternate = c) : (c.pendingProps = b, c.type = a.type, c.flags = 0, c.subtreeFlags = 0, c.deletions = null);
  c.flags = a.flags & 14680064;
  c.childLanes = a.childLanes;
  c.lanes = a.lanes;
  c.child = a.child;
  c.memoizedProps = a.memoizedProps;
  c.memoizedState = a.memoizedState;
  c.updateQueue = a.updateQueue;
  b = a.dependencies;
  c.dependencies = null === b ? null : {
    lanes: b.lanes,
    firstContext: b.firstContext
  };
  c.sibling = a.sibling;
  c.index = a.index;
  c.ref = a.ref;
  return c;
}
function Rg(a, b, c, d, e, f) {
  var g = 2;
  d = a;
  if ("function" === typeof a) aj(a) && (g = 1);else if ("string" === typeof a) g = 5;else a: switch (a) {
    case ya:
      return Tg(c.children, e, f, b);
    case za:
      g = 8;
      e |= 8;
      break;
    case Aa:
      return a = Bg(12, c, b, e | 2), a.elementType = Aa, a.lanes = f, a;
    case Ea:
      return a = Bg(13, c, b, e), a.elementType = Ea, a.lanes = f, a;
    case Fa:
      return a = Bg(19, c, b, e), a.elementType = Fa, a.lanes = f, a;
    case Ia:
      return pj(c, e, f, b);
    default:
      if ("object" === typeof a && null !== a) switch (a.$$typeof) {
        case Ba:
          g = 10;
          break a;
        case Ca:
          g = 9;
          break a;
        case Da:
          g = 11;
          break a;
        case Ga:
          g = 14;
          break a;
        case Ha:
          g = 16;
          d = null;
          break a;
      }
      throw Error(p(130, null == a ? a : typeof a, ""));
  }
  b = Bg(g, c, b, e);
  b.elementType = a;
  b.type = d;
  b.lanes = f;
  return b;
}
function Tg(a, b, c, d) {
  a = Bg(7, a, d, b);
  a.lanes = c;
  return a;
}
function pj(a, b, c, d) {
  a = Bg(22, a, d, b);
  a.elementType = Ia;
  a.lanes = c;
  a.stateNode = {
    isHidden: !1
  };
  return a;
}
function Qg(a, b, c) {
  a = Bg(6, a, null, b);
  a.lanes = c;
  return a;
}
function Sg(a, b, c) {
  b = Bg(4, null !== a.children ? a.children : [], a.key, b);
  b.lanes = c;
  b.stateNode = {
    containerInfo: a.containerInfo,
    pendingChildren: null,
    implementation: a.implementation
  };
  return b;
}
function al(a, b, c, d, e) {
  this.tag = b;
  this.containerInfo = a;
  this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
  this.timeoutHandle = -1;
  this.callbackNode = this.pendingContext = this.context = null;
  this.callbackPriority = 0;
  this.eventTimes = zc(0);
  this.expirationTimes = zc(-1);
  this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
  this.entanglements = zc(0);
  this.identifierPrefix = d;
  this.onRecoverableError = e;
  this.mutableSourceEagerHydrationData = null;
}
function bl(a, b, c, d, e, f, g, h, k) {
  a = new al(a, b, c, h, k);
  1 === b ? (b = 1, !0 === f && (b |= 8)) : b = 0;
  f = Bg(3, null, null, b);
  a.current = f;
  f.stateNode = a;
  f.memoizedState = {
    element: d,
    isDehydrated: c,
    cache: null,
    transitions: null,
    pendingSuspenseBoundaries: null
  };
  kh(f);
  return a;
}
function cl(a, b, c) {
  var d = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
  return {
    $$typeof: wa,
    key: null == d ? null : "" + d,
    children: a,
    containerInfo: b,
    implementation: c
  };
}
function dl(a) {
  if (!a) return Vf;
  a = a._reactInternals;
  a: {
    if (Vb(a) !== a || 1 !== a.tag) throw Error(p(170));
    var b = a;
    do {
      switch (b.tag) {
        case 3:
          b = b.stateNode.context;
          break a;
        case 1:
          if (Zf(b.type)) {
            b = b.stateNode.__reactInternalMemoizedMergedChildContext;
            break a;
          }
      }
      b = b.return;
    } while (null !== b);
    throw Error(p(171));
  }
  if (1 === a.tag) {
    var c = a.type;
    if (Zf(c)) return bg(a, c, b);
  }
  return b;
}
function el(a, b, c, d, e, f, g, h, k) {
  a = bl(c, d, !0, a, e, f, g, h, k);
  a.context = dl(null);
  c = a.current;
  d = R();
  e = yi(c);
  f = mh(d, e);
  f.callback = void 0 !== b && null !== b ? b : null;
  nh(c, f, e);
  a.current.lanes = e;
  Ac(a, e, d);
  Dk(a, d);
  return a;
}
function fl(a, b, c, d) {
  var e = b.current,
    f = R(),
    g = yi(e);
  c = dl(c);
  null === b.context ? b.context = c : b.pendingContext = c;
  b = mh(f, g);
  b.payload = {
    element: a
  };
  d = void 0 === d ? null : d;
  null !== d && (b.callback = d);
  a = nh(e, b, g);
  null !== a && (gi(a, e, g, f), oh(a, e, g));
  return g;
}
function gl(a) {
  a = a.current;
  if (!a.child) return null;
  switch (a.child.tag) {
    case 5:
      return a.child.stateNode;
    default:
      return a.child.stateNode;
  }
}
function hl(a, b) {
  a = a.memoizedState;
  if (null !== a && null !== a.dehydrated) {
    var c = a.retryLane;
    a.retryLane = 0 !== c && c < b ? c : b;
  }
}
function il(a, b) {
  hl(a, b);
  (a = a.alternate) && hl(a, b);
}
function jl() {
  return null;
}
var kl = "function" === typeof reportError ? reportError : function (a) {
  console.error(a);
};
function ll(a) {
  this._internalRoot = a;
}
ml.prototype.render = ll.prototype.render = function (a) {
  var b = this._internalRoot;
  if (null === b) throw Error(p(409));
  fl(a, b, null, null);
};
ml.prototype.unmount = ll.prototype.unmount = function () {
  var a = this._internalRoot;
  if (null !== a) {
    this._internalRoot = null;
    var b = a.containerInfo;
    Rk(function () {
      fl(null, a, null, null);
    });
    b[uf] = null;
  }
};
function ml(a) {
  this._internalRoot = a;
}
ml.prototype.unstable_scheduleHydration = function (a) {
  if (a) {
    var b = Hc();
    a = {
      blockedOn: null,
      target: a,
      priority: b
    };
    for (var c = 0; c < Qc.length && 0 !== b && b < Qc[c].priority; c++);
    Qc.splice(c, 0, a);
    0 === c && Vc(a);
  }
};
function nl(a) {
  return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType);
}
function ol(a) {
  return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType && (8 !== a.nodeType || " react-mount-point-unstable " !== a.nodeValue));
}
function pl() {}
function ql(a, b, c, d, e) {
  if (e) {
    if ("function" === typeof d) {
      var f = d;
      d = function () {
        var a = gl(g);
        f.call(a);
      };
    }
    var g = el(b, d, a, 0, null, !1, !1, "", pl);
    a._reactRootContainer = g;
    a[uf] = g.current;
    sf(8 === a.nodeType ? a.parentNode : a);
    Rk();
    return g;
  }
  for (; e = a.lastChild;) a.removeChild(e);
  if ("function" === typeof d) {
    var h = d;
    d = function () {
      var a = gl(k);
      h.call(a);
    };
  }
  var k = bl(a, 0, !1, null, null, !1, !1, "", pl);
  a._reactRootContainer = k;
  a[uf] = k.current;
  sf(8 === a.nodeType ? a.parentNode : a);
  Rk(function () {
    fl(b, k, c, d);
  });
  return k;
}
function rl(a, b, c, d, e) {
  var f = c._reactRootContainer;
  if (f) {
    var g = f;
    if ("function" === typeof e) {
      var h = e;
      e = function () {
        var a = gl(g);
        h.call(a);
      };
    }
    fl(b, g, a, e);
  } else g = ql(c, b, a, e, d);
  return gl(g);
}
Ec = function (a) {
  switch (a.tag) {
    case 3:
      var b = a.stateNode;
      if (b.current.memoizedState.isDehydrated) {
        var c = tc(b.pendingLanes);
        0 !== c && (Cc(b, c | 1), Dk(b, B()), 0 === (K & 6) && (Gj = B() + 500, jg()));
      }
      break;
    case 13:
      Rk(function () {
        var b = ih(a, 1);
        if (null !== b) {
          var c = R();
          gi(b, a, 1, c);
        }
      }), il(a, 1);
  }
};
Fc = function (a) {
  if (13 === a.tag) {
    var b = ih(a, 134217728);
    if (null !== b) {
      var c = R();
      gi(b, a, 134217728, c);
    }
    il(a, 134217728);
  }
};
Gc = function (a) {
  if (13 === a.tag) {
    var b = yi(a),
      c = ih(a, b);
    if (null !== c) {
      var d = R();
      gi(c, a, b, d);
    }
    il(a, b);
  }
};
Hc = function () {
  return C;
};
Ic = function (a, b) {
  var c = C;
  try {
    return C = a, b();
  } finally {
    C = c;
  }
};
yb = function (a, b, c) {
  switch (b) {
    case "input":
      bb(a, c);
      b = c.name;
      if ("radio" === c.type && null != b) {
        for (c = a; c.parentNode;) c = c.parentNode;
        c = c.querySelectorAll("input[name=" + JSON.stringify("" + b) + '][type="radio"]');
        for (b = 0; b < c.length; b++) {
          var d = c[b];
          if (d !== a && d.form === a.form) {
            var e = Db(d);
            if (!e) throw Error(p(90));
            Wa(d);
            bb(d, e);
          }
        }
      }
      break;
    case "textarea":
      ib(a, c);
      break;
    case "select":
      b = c.value, null != b && fb(a, !!c.multiple, b, !1);
  }
};
Gb = Qk;
Hb = Rk;
var sl = {
    usingClientEntryPoint: !1,
    Events: [Cb, ue, Db, Eb, Fb, Qk]
  },
  tl = {
    findFiberByHostInstance: Wc,
    bundleType: 0,
    version: "18.3.1",
    rendererPackageName: "react-dom"
  };
var ul = {
  bundleType: tl.bundleType,
  version: tl.version,
  rendererPackageName: tl.rendererPackageName,
  rendererConfig: tl.rendererConfig,
  overrideHookState: null,
  overrideHookStateDeletePath: null,
  overrideHookStateRenamePath: null,
  overrideProps: null,
  overridePropsDeletePath: null,
  overridePropsRenamePath: null,
  setErrorHandler: null,
  setSuspenseHandler: null,
  scheduleUpdate: null,
  currentDispatcherRef: ua.ReactCurrentDispatcher,
  findHostInstanceByFiber: function (a) {
    a = Zb(a);
    return null === a ? null : a.stateNode;
  },
  findFiberByHostInstance: tl.findFiberByHostInstance || jl,
  findHostInstancesForRefresh: null,
  scheduleRefresh: null,
  scheduleRoot: null,
  setRefreshHandler: null,
  getCurrentFiber: null,
  reconcilerVersion: "18.3.1-next-f1338f8080-20240426"
};
if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
  var vl = __REACT_DEVTOOLS_GLOBAL_HOOK__;
  if (!vl.isDisabled && vl.supportsFiber) try {
    kc = vl.inject(ul), lc = vl;
  } catch (a) {}
}
exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = sl;
exports.createPortal = function (a, b) {
  var c = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
  if (!nl(b)) throw Error(p(200));
  return cl(a, b, null, c);
};
exports.createRoot = function (a, b) {
  if (!nl(a)) throw Error(p(299));
  var c = !1,
    d = "",
    e = kl;
  null !== b && void 0 !== b && (!0 === b.unstable_strictMode && (c = !0), void 0 !== b.identifierPrefix && (d = b.identifierPrefix), void 0 !== b.onRecoverableError && (e = b.onRecoverableError));
  b = bl(a, 1, !1, null, null, c, !1, d, e);
  a[uf] = b.current;
  sf(8 === a.nodeType ? a.parentNode : a);
  return new ll(b);
};
exports.findDOMNode = function (a) {
  if (null == a) return null;
  if (1 === a.nodeType) return a;
  var b = a._reactInternals;
  if (void 0 === b) {
    if ("function" === typeof a.render) throw Error(p(188));
    a = Object.keys(a).join(",");
    throw Error(p(268, a));
  }
  a = Zb(b);
  a = null === a ? null : a.stateNode;
  return a;
};
exports.flushSync = function (a) {
  return Rk(a);
};
exports.hydrate = function (a, b, c) {
  if (!ol(b)) throw Error(p(200));
  return rl(null, a, b, !0, c);
};
exports.hydrateRoot = function (a, b, c) {
  if (!nl(a)) throw Error(p(405));
  var d = null != c && c.hydratedSources || null,
    e = !1,
    f = "",
    g = kl;
  null !== c && void 0 !== c && (!0 === c.unstable_strictMode && (e = !0), void 0 !== c.identifierPrefix && (f = c.identifierPrefix), void 0 !== c.onRecoverableError && (g = c.onRecoverableError));
  b = el(b, null, a, 1, null != c ? c : null, e, !1, f, g);
  a[uf] = b.current;
  sf(a);
  if (d) for (a = 0; a < d.length; a++) c = d[a], e = c._getVersion, e = e(c._source), null == b.mutableSourceEagerHydrationData ? b.mutableSourceEagerHydrationData = [c, e] : b.mutableSourceEagerHydrationData.push(c, e);
  return new ml(b);
};
exports.render = function (a, b, c) {
  if (!ol(b)) throw Error(p(200));
  return rl(null, a, b, !1, c);
};
exports.unmountComponentAtNode = function (a) {
  if (!ol(a)) throw Error(p(40));
  return a._reactRootContainer ? (Rk(function () {
    rl(null, null, a, !1, function () {
      a._reactRootContainer = null;
      a[uf] = null;
    });
  }), !0) : !1;
};
exports.unstable_batchedUpdates = Qk;
exports.unstable_renderSubtreeIntoContainer = function (a, b, c, d) {
  if (!ol(c)) throw Error(p(200));
  if (null == a || void 0 === a._reactInternals) throw Error(p(38));
  return rl(a, b, c, !1, d);
};
exports.version = "18.3.1-next-f1338f8080-20240426";

/***/ }),

/***/ 4723:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var m = __webpack_require__(9834);
if (true) {
  exports.createRoot = m.createRoot;
  exports.hydrateRoot = m.hydrateRoot;
} else { var i; }

/***/ }),

/***/ 9834:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



function checkDCE() {
  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') {
    return;
  }
  if (false) {}
  try {
    // Verify that the code above has been dead code eliminated (DCE'd).
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    // DevTools shouldn't crash React, no matter what.
    // We should still report in case we break this code.
    console.error(err);
  }
}
if (true) {
  // DCE check should happen before ReactDOM bundle executes so that
  // DevTools can report bad minification during injection.
  checkDCE();
  module.exports = __webpack_require__(7230);
} else {}

/***/ }),

/***/ 7933:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var f = __webpack_require__(9471),
  k = Symbol.for("react.element"),
  l = Symbol.for("react.fragment"),
  m = Object.prototype.hasOwnProperty,
  n = f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,
  p = {
    key: !0,
    ref: !0,
    __self: !0,
    __source: !0
  };
function q(c, a, g) {
  var b,
    d = {},
    e = null,
    h = null;
  void 0 !== g && (e = "" + g);
  void 0 !== a.key && (e = "" + a.key);
  void 0 !== a.ref && (h = a.ref);
  for (b in a) m.call(a, b) && !p.hasOwnProperty(b) && (d[b] = a[b]);
  if (c && c.defaultProps) for (b in a = c.defaultProps, a) void 0 === d[b] && (d[b] = a[b]);
  return {
    $$typeof: k,
    type: c,
    key: e,
    ref: h,
    props: d,
    _owner: n.current
  };
}
exports.Fragment = l;
exports.jsx = q;
exports.jsxs = q;

/***/ }),

/***/ 3534:
/***/ ((__unused_webpack_module, exports) => {

/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var l = Symbol.for("react.element"),
  n = Symbol.for("react.portal"),
  p = Symbol.for("react.fragment"),
  q = Symbol.for("react.strict_mode"),
  r = Symbol.for("react.profiler"),
  t = Symbol.for("react.provider"),
  u = Symbol.for("react.context"),
  v = Symbol.for("react.forward_ref"),
  w = Symbol.for("react.suspense"),
  x = Symbol.for("react.memo"),
  y = Symbol.for("react.lazy"),
  z = Symbol.iterator;
function A(a) {
  if (null === a || "object" !== typeof a) return null;
  a = z && a[z] || a["@@iterator"];
  return "function" === typeof a ? a : null;
}
var B = {
    isMounted: function () {
      return !1;
    },
    enqueueForceUpdate: function () {},
    enqueueReplaceState: function () {},
    enqueueSetState: function () {}
  },
  C = Object.assign,
  D = {};
function E(a, b, e) {
  this.props = a;
  this.context = b;
  this.refs = D;
  this.updater = e || B;
}
E.prototype.isReactComponent = {};
E.prototype.setState = function (a, b) {
  if ("object" !== typeof a && "function" !== typeof a && null != a) throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
  this.updater.enqueueSetState(this, a, b, "setState");
};
E.prototype.forceUpdate = function (a) {
  this.updater.enqueueForceUpdate(this, a, "forceUpdate");
};
function F() {}
F.prototype = E.prototype;
function G(a, b, e) {
  this.props = a;
  this.context = b;
  this.refs = D;
  this.updater = e || B;
}
var H = G.prototype = new F();
H.constructor = G;
C(H, E.prototype);
H.isPureReactComponent = !0;
var I = Array.isArray,
  J = Object.prototype.hasOwnProperty,
  K = {
    current: null
  },
  L = {
    key: !0,
    ref: !0,
    __self: !0,
    __source: !0
  };
function M(a, b, e) {
  var d,
    c = {},
    k = null,
    h = null;
  if (null != b) for (d in void 0 !== b.ref && (h = b.ref), void 0 !== b.key && (k = "" + b.key), b) J.call(b, d) && !L.hasOwnProperty(d) && (c[d] = b[d]);
  var g = arguments.length - 2;
  if (1 === g) c.children = e;else if (1 < g) {
    for (var f = Array(g), m = 0; m < g; m++) f[m] = arguments[m + 2];
    c.children = f;
  }
  if (a && a.defaultProps) for (d in g = a.defaultProps, g) void 0 === c[d] && (c[d] = g[d]);
  return {
    $$typeof: l,
    type: a,
    key: k,
    ref: h,
    props: c,
    _owner: K.current
  };
}
function N(a, b) {
  return {
    $$typeof: l,
    type: a.type,
    key: b,
    ref: a.ref,
    props: a.props,
    _owner: a._owner
  };
}
function O(a) {
  return "object" === typeof a && null !== a && a.$$typeof === l;
}
function escape(a) {
  var b = {
    "=": "=0",
    ":": "=2"
  };
  return "$" + a.replace(/[=:]/g, function (a) {
    return b[a];
  });
}
var P = /\/+/g;
function Q(a, b) {
  return "object" === typeof a && null !== a && null != a.key ? escape("" + a.key) : b.toString(36);
}
function R(a, b, e, d, c) {
  var k = typeof a;
  if ("undefined" === k || "boolean" === k) a = null;
  var h = !1;
  if (null === a) h = !0;else switch (k) {
    case "string":
    case "number":
      h = !0;
      break;
    case "object":
      switch (a.$$typeof) {
        case l:
        case n:
          h = !0;
      }
  }
  if (h) return h = a, c = c(h), a = "" === d ? "." + Q(h, 0) : d, I(c) ? (e = "", null != a && (e = a.replace(P, "$&/") + "/"), R(c, b, e, "", function (a) {
    return a;
  })) : null != c && (O(c) && (c = N(c, e + (!c.key || h && h.key === c.key ? "" : ("" + c.key).replace(P, "$&/") + "/") + a)), b.push(c)), 1;
  h = 0;
  d = "" === d ? "." : d + ":";
  if (I(a)) for (var g = 0; g < a.length; g++) {
    k = a[g];
    var f = d + Q(k, g);
    h += R(k, b, e, f, c);
  } else if (f = A(a), "function" === typeof f) for (a = f.call(a), g = 0; !(k = a.next()).done;) k = k.value, f = d + Q(k, g++), h += R(k, b, e, f, c);else if ("object" === k) throw b = String(a), Error("Objects are not valid as a React child (found: " + ("[object Object]" === b ? "object with keys {" + Object.keys(a).join(", ") + "}" : b) + "). If you meant to render a collection of children, use an array instead.");
  return h;
}
function S(a, b, e) {
  if (null == a) return a;
  var d = [],
    c = 0;
  R(a, d, "", "", function (a) {
    return b.call(e, a, c++);
  });
  return d;
}
function T(a) {
  if (-1 === a._status) {
    var b = a._result;
    b = b();
    b.then(function (b) {
      if (0 === a._status || -1 === a._status) a._status = 1, a._result = b;
    }, function (b) {
      if (0 === a._status || -1 === a._status) a._status = 2, a._result = b;
    });
    -1 === a._status && (a._status = 0, a._result = b);
  }
  if (1 === a._status) return a._result.default;
  throw a._result;
}
var U = {
    current: null
  },
  V = {
    transition: null
  },
  W = {
    ReactCurrentDispatcher: U,
    ReactCurrentBatchConfig: V,
    ReactCurrentOwner: K
  };
function X() {
  throw Error("act(...) is not supported in production builds of React.");
}
exports.Children = {
  map: S,
  forEach: function (a, b, e) {
    S(a, function () {
      b.apply(this, arguments);
    }, e);
  },
  count: function (a) {
    var b = 0;
    S(a, function () {
      b++;
    });
    return b;
  },
  toArray: function (a) {
    return S(a, function (a) {
      return a;
    }) || [];
  },
  only: function (a) {
    if (!O(a)) throw Error("React.Children.only expected to receive a single React element child.");
    return a;
  }
};
exports.Component = E;
exports.Fragment = p;
exports.Profiler = r;
exports.PureComponent = G;
exports.StrictMode = q;
exports.Suspense = w;
exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = W;
exports.act = X;
exports.cloneElement = function (a, b, e) {
  if (null === a || void 0 === a) throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + a + ".");
  var d = C({}, a.props),
    c = a.key,
    k = a.ref,
    h = a._owner;
  if (null != b) {
    void 0 !== b.ref && (k = b.ref, h = K.current);
    void 0 !== b.key && (c = "" + b.key);
    if (a.type && a.type.defaultProps) var g = a.type.defaultProps;
    for (f in b) J.call(b, f) && !L.hasOwnProperty(f) && (d[f] = void 0 === b[f] && void 0 !== g ? g[f] : b[f]);
  }
  var f = arguments.length - 2;
  if (1 === f) d.children = e;else if (1 < f) {
    g = Array(f);
    for (var m = 0; m < f; m++) g[m] = arguments[m + 2];
    d.children = g;
  }
  return {
    $$typeof: l,
    type: a.type,
    key: c,
    ref: k,
    props: d,
    _owner: h
  };
};
exports.createContext = function (a) {
  a = {
    $$typeof: u,
    _currentValue: a,
    _currentValue2: a,
    _threadCount: 0,
    Provider: null,
    Consumer: null,
    _defaultValue: null,
    _globalName: null
  };
  a.Provider = {
    $$typeof: t,
    _context: a
  };
  return a.Consumer = a;
};
exports.createElement = M;
exports.createFactory = function (a) {
  var b = M.bind(null, a);
  b.type = a;
  return b;
};
exports.createRef = function () {
  return {
    current: null
  };
};
exports.forwardRef = function (a) {
  return {
    $$typeof: v,
    render: a
  };
};
exports.isValidElement = O;
exports.lazy = function (a) {
  return {
    $$typeof: y,
    _payload: {
      _status: -1,
      _result: a
    },
    _init: T
  };
};
exports.memo = function (a, b) {
  return {
    $$typeof: x,
    type: a,
    compare: void 0 === b ? null : b
  };
};
exports.startTransition = function (a) {
  var b = V.transition;
  V.transition = {};
  try {
    a();
  } finally {
    V.transition = b;
  }
};
exports.unstable_act = X;
exports.useCallback = function (a, b) {
  return U.current.useCallback(a, b);
};
exports.useContext = function (a) {
  return U.current.useContext(a);
};
exports.useDebugValue = function () {};
exports.useDeferredValue = function (a) {
  return U.current.useDeferredValue(a);
};
exports.useEffect = function (a, b) {
  return U.current.useEffect(a, b);
};
exports.useId = function () {
  return U.current.useId();
};
exports.useImperativeHandle = function (a, b, e) {
  return U.current.useImperativeHandle(a, b, e);
};
exports.useInsertionEffect = function (a, b) {
  return U.current.useInsertionEffect(a, b);
};
exports.useLayoutEffect = function (a, b) {
  return U.current.useLayoutEffect(a, b);
};
exports.useMemo = function (a, b) {
  return U.current.useMemo(a, b);
};
exports.useReducer = function (a, b, e) {
  return U.current.useReducer(a, b, e);
};
exports.useRef = function (a) {
  return U.current.useRef(a);
};
exports.useState = function (a) {
  return U.current.useState(a);
};
exports.useSyncExternalStore = function (a, b, e) {
  return U.current.useSyncExternalStore(a, b, e);
};
exports.useTransition = function () {
  return U.current.useTransition();
};
exports.version = "18.3.1";

/***/ }),

/***/ 9471:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



if (true) {
  module.exports = __webpack_require__(3534);
} else {}

/***/ }),

/***/ 7671:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



if (true) {
  module.exports = __webpack_require__(7933);
} else {}

/***/ }),

/***/ 415:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Cc: () => (/* binding */ $b5e257d569688ac6$export$619500959fc48b26)
/* harmony export */ });
/* unused harmony exports SSRProvider, useIsSSR */
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9471);


/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // We must avoid a circular dependency with @react-aria/utils, and this useLayoutEffect is
// guarded by a check that it only runs on the client side.
// eslint-disable-next-line rulesdir/useLayoutEffectRule

// Default context value to use in case there is no SSRProvider. This is fine for
// client-only apps. In order to support multiple copies of React Aria potentially
// being on the page at once, the prefix is set to a random number. SSRProvider
// will reset this to zero for consistency between server and client, so in the
// SSR case multiple copies of React Aria is not supported.
const $b5e257d569688ac6$var$defaultContext = {
    prefix: String(Math.round(Math.random() * 10000000000)),
    current: 0
};
const $b5e257d569688ac6$var$SSRContext = /*#__PURE__*/ (0, react__WEBPACK_IMPORTED_MODULE_0__).createContext($b5e257d569688ac6$var$defaultContext);
const $b5e257d569688ac6$var$IsSSRContext = /*#__PURE__*/ (0, react__WEBPACK_IMPORTED_MODULE_0__).createContext(false);
// This is only used in React < 18.
function $b5e257d569688ac6$var$LegacySSRProvider(props) {
    let cur = (0, $670gB$useContext)($b5e257d569688ac6$var$SSRContext);
    let counter = $b5e257d569688ac6$var$useCounter(cur === $b5e257d569688ac6$var$defaultContext);
    let [isSSR, setIsSSR] = (0, $670gB$useState)(true);
    let value = (0, $670gB$useMemo)(()=>({
            // If this is the first SSRProvider, start with an empty string prefix, otherwise
            // append and increment the counter.
            prefix: cur === $b5e257d569688ac6$var$defaultContext ? '' : `${cur.prefix}-${counter}`,
            current: 0
        }), [
        cur,
        counter
    ]);
    // If on the client, and the component was initially server rendered,
    // then schedule a layout effect to update the component after hydration.
    if (typeof document !== 'undefined') // This if statement technically breaks the rules of hooks, but is safe
    // because the condition never changes after mounting.
    // eslint-disable-next-line react-hooks/rules-of-hooks
    (0, $670gB$useLayoutEffect)(()=>{
        setIsSSR(false);
    }, []);
    return /*#__PURE__*/ (0, $670gB$react).createElement($b5e257d569688ac6$var$SSRContext.Provider, {
        value: value
    }, /*#__PURE__*/ (0, $670gB$react).createElement($b5e257d569688ac6$var$IsSSRContext.Provider, {
        value: isSSR
    }, props.children));
}
let $b5e257d569688ac6$var$warnedAboutSSRProvider = false;
function $b5e257d569688ac6$export$9f8ac96af4b1b2ae(props) {
    if (typeof (0, $670gB$react)['useId'] === 'function') {
        if ( true && !$b5e257d569688ac6$var$warnedAboutSSRProvider) {
            console.warn('In React 18, SSRProvider is not necessary and is a noop. You can remove it from your app.');
            $b5e257d569688ac6$var$warnedAboutSSRProvider = true;
        }
        return /*#__PURE__*/ (0, $670gB$react).createElement((0, $670gB$react).Fragment, null, props.children);
    }
    return /*#__PURE__*/ (0, $670gB$react).createElement($b5e257d569688ac6$var$LegacySSRProvider, props);
}
let $b5e257d569688ac6$var$canUseDOM = Boolean(typeof window !== 'undefined' && window.document && window.document.createElement);
let $b5e257d569688ac6$var$componentIds = new WeakMap();
function $b5e257d569688ac6$var$useCounter(isDisabled = false) {
    let ctx = (0, react__WEBPACK_IMPORTED_MODULE_0__.useContext)($b5e257d569688ac6$var$SSRContext);
    let ref = (0, react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
    // eslint-disable-next-line rulesdir/pure-render
    if (ref.current === null && !isDisabled) {
        var _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner, _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        // In strict mode, React renders components twice, and the ref will be reset to null on the second render.
        // This means our id counter will be incremented twice instead of once. This is a problem because on the
        // server, components are only rendered once and so ids generated on the server won't match the client.
        // In React 18, useId was introduced to solve this, but it is not available in older versions. So to solve this
        // we need to use some React internals to access the underlying Fiber instance, which is stable between renders.
        // This is exposed as ReactCurrentOwner in development, which is all we need since StrictMode only runs in development.
        // To ensure that we only increment the global counter once, we store the starting id for this component in
        // a weak map associated with the Fiber. On the second render, we reset the global counter to this value.
        // Since React runs the second render immediately after the first, this is safe.
        // @ts-ignore
        let currentOwner = (_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = (0, react__WEBPACK_IMPORTED_MODULE_0__).__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED) === null || _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED === void 0 ? void 0 : (_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner = _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner) === null || _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner === void 0 ? void 0 : _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner.current;
        if (currentOwner) {
            let prevComponentValue = $b5e257d569688ac6$var$componentIds.get(currentOwner);
            if (prevComponentValue == null) // On the first render, and first call to useId, store the id and state in our weak map.
            $b5e257d569688ac6$var$componentIds.set(currentOwner, {
                id: ctx.current,
                state: currentOwner.memoizedState
            });
            else if (currentOwner.memoizedState !== prevComponentValue.state) {
                // On the second render, the memoizedState gets reset by React.
                // Reset the counter, and remove from the weak map so we don't
                // do this for subsequent useId calls.
                ctx.current = prevComponentValue.id;
                $b5e257d569688ac6$var$componentIds.delete(currentOwner);
            }
        }
        // eslint-disable-next-line rulesdir/pure-render
        ref.current = ++ctx.current;
    }
    // eslint-disable-next-line rulesdir/pure-render
    return ref.current;
}
function $b5e257d569688ac6$var$useLegacySSRSafeId(defaultId) {
    let ctx = (0, react__WEBPACK_IMPORTED_MODULE_0__.useContext)($b5e257d569688ac6$var$SSRContext);
    // If we are rendering in a non-DOM environment, and there's no SSRProvider,
    // provide a warning to hint to the developer to add one.
    if (ctx === $b5e257d569688ac6$var$defaultContext && !$b5e257d569688ac6$var$canUseDOM) console.warn('When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.');
    let counter = $b5e257d569688ac6$var$useCounter(!!defaultId);
    let prefix = ctx === $b5e257d569688ac6$var$defaultContext && "production" === 'test' ? 0 : `react-aria${ctx.prefix}`;
    return defaultId || `${prefix}-${counter}`;
}
function $b5e257d569688ac6$var$useModernSSRSafeId(defaultId) {
    let id = (0, react__WEBPACK_IMPORTED_MODULE_0__).useId();
    let [didSSR] = (0, react__WEBPACK_IMPORTED_MODULE_0__.useState)($b5e257d569688ac6$export$535bd6ca7f90a273());
    let prefix = didSSR || "production" === 'test' ? 'react-aria' : `react-aria${$b5e257d569688ac6$var$defaultContext.prefix}`;
    return defaultId || `${prefix}-${id}`;
}
const $b5e257d569688ac6$export$619500959fc48b26 = typeof (0, react__WEBPACK_IMPORTED_MODULE_0__)['useId'] === 'function' ? $b5e257d569688ac6$var$useModernSSRSafeId : $b5e257d569688ac6$var$useLegacySSRSafeId;
function $b5e257d569688ac6$var$getSnapshot() {
    return false;
}
function $b5e257d569688ac6$var$getServerSnapshot() {
    return true;
}
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function $b5e257d569688ac6$var$subscribe(onStoreChange) {
    // noop
    return ()=>{};
}
function $b5e257d569688ac6$export$535bd6ca7f90a273() {
    // In React 18, we can use useSyncExternalStore to detect if we're server rendering or hydrating.
    if (typeof (0, react__WEBPACK_IMPORTED_MODULE_0__)['useSyncExternalStore'] === 'function') return (0, react__WEBPACK_IMPORTED_MODULE_0__)['useSyncExternalStore']($b5e257d569688ac6$var$subscribe, $b5e257d569688ac6$var$getSnapshot, $b5e257d569688ac6$var$getServerSnapshot);
    // eslint-disable-next-line react-hooks/rules-of-hooks
    return (0, react__WEBPACK_IMPORTED_MODULE_0__.useContext)($b5e257d569688ac6$var$IsSSRContext);
}



//# sourceMappingURL=SSRProvider.module.js.map


/***/ }),

/***/ 7280:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  yo: () => (/* reexport */ Document),
  KQ: () => (/* binding */ react_pdf_browser_Font),
  _V: () => (/* reexport */ Image),
  N_: () => (/* reexport */ Link),
  TO: () => (/* binding */ PDFViewer),
  YW: () => (/* reexport */ Page),
  vv: () => (/* binding */ StyleSheet),
  EY: () => (/* reexport */ Text),
  Ss: () => (/* reexport */ View)
});

// UNUSED EXPORTS: BlobProvider, Canvas, Circle, ClipPath, Defs, Ellipse, G, Line, LinearGradient, Note, PDFDownloadLink, Path, Polygon, Polyline, RadialGradient, Rect, Stop, Svg, TextInstance, Tspan, createRenderer, default, pdf, render, renderToBuffer, renderToFile, renderToStream, renderToString, usePDF, version

// NAMESPACE OBJECT: ./node_modules/@react-pdf/primitives/src/index.js
var src_namespaceObject = {};
__webpack_require__.r(src_namespaceObject);
__webpack_require__.d(src_namespaceObject, {
  Canvas: () => (Canvas),
  Circle: () => (Circle),
  ClipPath: () => (ClipPath),
  Defs: () => (Defs),
  Document: () => (Document),
  Ellipse: () => (Ellipse),
  G: () => (G),
  Image: () => (Image),
  Line: () => (Line),
  LinearGradient: () => (LinearGradient),
  Link: () => (Link),
  Note: () => (Note),
  Page: () => (Page),
  Path: () => (Path),
  Polygon: () => (Polygon),
  Polyline: () => (Polyline),
  RadialGradient: () => (RadialGradient),
  Rect: () => (Rect),
  Stop: () => (Stop),
  Svg: () => (Svg),
  Text: () => (Text),
  TextInstance: () => (TextInstance),
  Tspan: () => (Tspan),
  View: () => (View)
});

;// ./node_modules/@react-pdf/primitives/src/index.js
const G = 'G';
const Svg = 'SVG';
const View = 'VIEW';
const Text = 'TEXT';
const Link = 'LINK';
const Page = 'PAGE';
const Note = 'NOTE';
const Path = 'PATH';
const Rect = 'RECT';
const Line = 'LINE';
const Stop = 'STOP';
const Defs = 'DEFS';
const Image = 'IMAGE';
const Tspan = 'TSPAN';
const Canvas = 'CANVAS';
const Circle = 'CIRCLE';
const Ellipse = 'ELLIPSE';
const Polygon = 'POLYGON';
const Document = 'DOCUMENT';
const Polyline = 'POLYLINE';
const ClipPath = 'CLIP_PATH';
const TextInstance = 'TEXT_INSTANCE';
const LinearGradient = 'LINEAR_GRADIENT';
const RadialGradient = 'RADIAL_GRADIENT';
// EXTERNAL MODULE: ./node_modules/queue/index.js
var queue = __webpack_require__(7967);
// EXTERNAL MODULE: ./node_modules/react/index.js
var react = __webpack_require__(9471);
// EXTERNAL MODULE: ./node_modules/is-url/index.js
var is_url = __webpack_require__(4188);
// EXTERNAL MODULE: ./node_modules/fontkit/dist/browser-module.mjs + 2 modules
var browser_module = __webpack_require__(5353);
;// ./node_modules/@react-pdf/font/lib/index.browser.js



/* eslint-disable max-classes-per-file */

const FONT_WEIGHTS = {
  thin: 100,
  hairline: 100,
  ultralight: 200,
  extralight: 200,
  light: 300,
  normal: 400,
  medium: 500,
  semibold: 600,
  demibold: 600,
  bold: 700,
  ultrabold: 800,
  extrabold: 800,
  heavy: 900,
  black: 900
};
const fetchFont = async (src, options) => {
  const response = await fetch(src, options);
  const data = await response.arrayBuffer();
  return new Uint8Array(data);
};
const isDataUrl = dataUrl => {
  const header = dataUrl.split(',')[0];
  const hasDataPrefix = header.substring(0, 5) === 'data:';
  const hasBase64Prefix = header.split(';')[1] === 'base64';
  return hasDataPrefix && hasBase64Prefix;
};
const resolveFontWeight = value => {
  return typeof value === 'string' ? FONT_WEIGHTS[value] : value;
};
const sortByFontWeight = (a, b) => a.fontWeight - b.fontWeight;
class FontSource {
  constructor(src, fontFamily, fontStyle, fontWeight, options) {
    this.src = src;
    this.fontFamily = fontFamily;
    this.fontStyle = fontStyle || 'normal';
    this.fontWeight = fontWeight || 400;
    this.data = null;
    this.options = options;
    this.loadResultPromise = null;
  }
  async _load() {
    const {
      postscriptName
    } = this.options;
    if (isDataUrl(this.src)) {
      const raw = this.src.split(',')[1];
      const uint8Array = new Uint8Array(atob(raw).split('').map(c => c.charCodeAt(0)));
      this.data = browser_module/* create */.vt(uint8Array, postscriptName);
    } else {
      const {
        headers,
        body,
        method = 'GET'
      } = this.options;
      const data = await fetchFont(this.src, {
        method,
        body,
        headers
      });
      this.data = browser_module/* create */.vt(data, postscriptName);
    }
  }
  async load() {
    if (this.loadResultPromise === null) {
      this.loadResultPromise = this._load();
    }
    return this.loadResultPromise;
  }
}
class Font {
  static create(family) {
    return new Font(family);
  }
  constructor(family) {
    this.family = family;
    this.sources = [];
  }
  register(_ref) {
    let {
      src,
      fontWeight,
      fontStyle,
      ...options
    } = _ref;
    const numericFontWeight = resolveFontWeight(fontWeight);
    this.sources.push(new FontSource(src, this.family, fontStyle, numericFontWeight, options));
  }
  resolve(descriptor) {
    const {
      fontWeight = 400,
      fontStyle = 'normal'
    } = descriptor;
    const styleSources = this.sources.filter(s => s.fontStyle === fontStyle);

    // Weight resolution. https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight#Fallback_weights
    const exactFit = styleSources.find(s => s.fontWeight === fontWeight);
    if (exactFit) return exactFit;
    let res;
    if (fontWeight >= 400 && fontWeight <= 500) {
      const leftOffset = styleSources.filter(s => s.fontWeight <= fontWeight);
      const rightOffset = styleSources.filter(s => s.fontWeight > 500);
      const fit = styleSources.filter(s => s.fontWeight >= fontWeight && s.fontWeight < 500);
      res = fit[0] || leftOffset[leftOffset.length - 1] || rightOffset[0];
    }
    const lt = styleSources.filter(s => s.fontWeight < fontWeight).sort(sortByFontWeight);
    const gt = styleSources.filter(s => s.fontWeight > fontWeight).sort(sortByFontWeight);
    if (fontWeight < 400) {
      res = lt[lt.length - 1] || gt[0];
    }
    if (fontWeight > 500) {
      res = gt[0] || lt[lt.length - 1];
    }
    if (!res) {
      throw new Error(`Could not resolve font for ${this.family}, fontWeight ${fontWeight}`);
    }
    return res;
  }
}
var standard = ['Courier', 'Courier-Bold', 'Courier-Oblique', 'Courier-BoldOblique', 'Helvetica', 'Helvetica-Bold', 'Helvetica-Oblique', 'Helvetica-BoldOblique', 'Times-Roman', 'Times-Bold', 'Times-Italic', 'Times-BoldItalic'];
function FontStore() {
  let fonts = {};
  let emojiSource = null;
  let hyphenationCallback = null;
  this.register = data => {
    const {
      family
    } = data;
    if (!fonts[family]) {
      fonts[family] = Font.create(family);
    }

    // Bulk loading
    if (data.fonts) {
      for (let i = 0; i < data.fonts.length; i += 1) {
        fonts[family].register({
          family,
          ...data.fonts[i]
        });
      }
    } else {
      fonts[family].register(data);
    }
  };
  this.registerEmojiSource = _ref => {
    let {
      url,
      format = 'png',
      builder,
      withVariationSelectors = false
    } = _ref;
    emojiSource = {
      url,
      format,
      builder,
      withVariationSelectors
    };
  };
  this.registerHyphenationCallback = callback => {
    hyphenationCallback = callback;
  };
  this.getFont = descriptor => {
    const {
      fontFamily
    } = descriptor;
    const isStandard = standard.includes(fontFamily);
    if (isStandard) return null;
    if (!fonts[fontFamily]) {
      throw new Error(`Font family not registered: ${fontFamily}. Please register it calling Font.register() method.`);
    }
    return fonts[fontFamily].resolve(descriptor);
  };
  this.load = async descriptor => {
    const {
      fontFamily
    } = descriptor;
    const fontFamilies = typeof fontFamily === 'string' ? [fontFamily] : [...(fontFamily || [])];
    const promises = [];
    for (let len = fontFamilies.length, i = 0; i < len; i += 1) {
      const family = fontFamilies[i];
      const isStandard = standard.includes(family);
      if (isStandard) return;
      const f = this.getFont({
        ...descriptor,
        fontFamily: family
      });
      promises.push(f.load());
    }
    await Promise.all(promises);
  };
  this.reset = () => {
    const keys = Object.keys(fonts);
    for (let i = 0; i < keys.length; i += 1) {
      const key = keys[i];
      fonts[key].data = null;
    }
  };
  this.clear = () => {
    fonts = {};
  };
  this.getRegisteredFonts = () => fonts;
  this.getEmojiSource = () => emojiSource;
  this.getHyphenationCallback = () => hyphenationCallback;
  this.getRegisteredFontFamilies = () => Object.keys(fonts);
}

;// ./node_modules/@react-pdf/fns/lib/index.js
/**
 * Applies a function to the value at the given index of an array

 * @param {number} index
 * @param {function} fn
 * @param {array} collection
 * @returns copy of the array with the element at the given index replaced with the result of the function application.
 */
const adjust = (index, fn, collection) => {
  if (index >= 0 && index >= collection.length) return collection;
  if (index < 0 && Math.abs(index) > collection.length) return collection;
  const i = index < 0 ? collection.length + index : index;
  return Object.assign([], collection, {
    [i]: fn(collection[i])
  });
};

/**
 * Reverses the list
 *
 * @template {unknown} T
 * @param {T[]} list list to be reversed
 * @returns {T[]} reversed list
 */
const reverse = list => Array.prototype.slice.call(list, 0).reverse();

/* eslint-disable no-await-in-loop */

/**
 * @typedef {Function} AsyncCompose
 * @param {any} value
 * @param {...any} args
 * @returns {any} result
 */

/**
 * Performs right-to-left function composition with async functions support
 *
 * @param {...Function} fns functions
 * @returns {AsyncCompose} composed function
 */
const asyncCompose = function () {
  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {
    fns[_key] = arguments[_key];
  }
  return async function (value) {
    let result = value;
    const reversedFns = reverse(fns);
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }
    for (let i = 0; i < reversedFns.length; i += 1) {
      const fn = reversedFns[i];
      result = await fn(result, ...args);
    }
    return result;
  };
};

/**
 * Capitalize first letter of each word
 *
 * @param {string} value string
 * @returns {string} capitalized string
 */
const capitalize = value => {
  if (!value) return value;
  return value.replace(/(^|\s)\S/g, l => l.toUpperCase());
};

/**
 * Casts value to array
 *
 * @template T
 * @param {T|T[]} value value
 * @returns {T[]} array
 */
const castArray = value => {
  return Array.isArray(value) ? value : [value];
};

/* eslint-disable no-await-in-loop */

/**
 * @typedef {Function} Compose
 * @param {any} value
 * @param {...any} args
 * @returns {any} result
 */

/**
 * Performs right-to-left function composition
 *
 * @param {...Function} fns functions
 * @returns {Compose} composed function
 */
const compose = function () {
  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {
    fns[_key] = arguments[_key];
  }
  return function (value) {
    let result = value;
    const reversedFns = reverse(fns);
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }
    for (let i = 0; i < reversedFns.length; i += 1) {
      const fn = reversedFns[i];
      result = fn(result, ...args);
    }
    return result;
  };
};

/**
 * Drops the last element from an array.
 *
 * @template T
 * @param {T[]} array the array to drop the last element from
 * @returns {T[]} the new array with the last element dropped
 */
const dropLast = array => array.slice(0, array.length - 1);

/**
 * Applies a set of transformations to an object and returns a new object with the transformed values.
 *
 * @template T
 * @param {Record<string, (value: T) => T | Record<string, (value: T) => T>>} transformations - The transformations to apply.
 * @param {T} object the object to transform.
 * @returns {T} the transformed object.
 */
const evolve = (transformations, object) => {
  const result = object instanceof Array ? [] : {};
  const keys = Object.keys(object);
  for (let i = 0; i < keys.length; i += 1) {
    const key = keys[i];
    const transformation = transformations[key];
    const type = typeof transformation;
    if (type === 'function') {
      result[key] = transformation(object[key]);
    } else if (transformation && type === 'object') {
      result[key] = evolve(transformation, object[key]);
    } else {
      result[key] = object[key];
    }
  }
  return result;
};

/**
 * Checks if a value is null or undefined.
 *
 * @template {unknown} T
 * @param {T} value the value to check
 * @returns {T is null | undefined} true if the value is null or undefined, false otherwise
 */
const isNil = value => value === null || value === undefined;

/**
 * Retrieves the value at a given path from an object.
 *
 * @param {object} target the object to retrieve the value from.
 * @param {string | string[]} path the path of the value to retrieve.
 * @param {*} defaultValue the default value to return if the path does not exist.
 * @returns {*} the value at the given path, or the default value if the path does not exist.
 */
const get = (target, path, defaultValue) => {
  if (isNil(target)) return defaultValue;
  const _path = castArray(path);
  let result = target;
  for (let i = 0; i < _path.length; i += 1) {
    if (isNil(result)) return undefined;
    result = result[_path[i]];
  }
  return isNil(result) ? defaultValue : result;
};

/**
 * Returns the last character of a string.
 *
 * @param {string} value the input string
 * @returns {string} the last character of the string
 */
const lib_last = value => {
  return value === '' ? '' : value[value.length - 1];
};

/**
 * Maps over the values of an object and applies a function to each value.
 *
 * @param {Object} object the object to map over
 * @param {Function} fn the function to apply to each value
 * @returns {Object} a new object with the mapped values
 */
const mapValues = (object, fn) => {
  const entries = Object.entries(object);
  return entries.reduce((acc, _ref, index) => {
    let [key, value] = _ref;
    acc[key] = fn(value, key, index);
    return acc;
  }, {});
};

/**
 * @param {string | number} value
 * @returns {RegExpExecArray | null} match
 */
const isPercent = value => /((-)?\d+\.?\d*)%/g.exec(`${value}`);

/**
 * Get percentage value of input
 *
 * @param {string | number} value
 * @returns {{ percent: number, value: number } | null} percent value (if matches)
 */
const matchPercent = value => {
  const match = isPercent(value);
  if (match) {
    const f = parseFloat(match[1]);
    const percent = f / 100;
    return {
      percent,
      value: f
    };
  }
  return null;
};

/**
 * Creates a new object by omitting specified keys from the original object.
 *
 * @param {string|string[]} keys the key or keys to omit
 * @param {object} object the original object
 * @returns {object} the new object without the omitted keys
 */
const omit = (keys, object) => {
  const _keys = castArray(keys);
  const copy = Object.assign({}, object);
  _keys.forEach(key => {
    delete copy[key];
  });
  return copy;
};

/**
 * Picks the specified keys from an object and returns a new object with only those keys.
 *
 * @param {string[]} keys the keys to pick from the object
 * @param {object} obj the object to pick the keys from
 * @returns {object} a new object with only the picked keys
 */
const pick = (keys, obj) => {
  const result = {};
  for (let i = 0; i < keys.length; i += 1) {
    const key = keys[i];
    if (key in obj) result[key] = obj[key];
  }
  return result;
};

/**
 * Repeats an element a specified number of times.
 *
 * @template {unknown} T
 * @param {T} element element to be repeated
 * @param {number} length number of times to repeat element
 * @returns {T[]} repeated elements
 */
const repeat = function (elem, length) {
  if (length === void 0) {
    length = 0;
  }
  const result = new Array(length);
  for (let i = 0; i < length; i += 1) {
    result[i] = elem;
  }
  return result;
};

/**
 * Capitalize first letter of string
 *
 * @param {string} value string
 * @returns {string} capitalized string
 */
const upperFirst = value => {
  if (!value) return value;
  return value.charAt(0).toUpperCase() + value.slice(1);
};

// EXTERNAL MODULE: ./node_modules/abs-svg-path/index.js
var abs_svg_path = __webpack_require__(1973);
// EXTERNAL MODULE: ./node_modules/parse-svg-path/index.js
var parse_svg_path = __webpack_require__(7336);
// EXTERNAL MODULE: ./node_modules/normalize-svg-path/index.mjs + 1 modules
var normalize_svg_path = __webpack_require__(9173);
// EXTERNAL MODULE: ./node_modules/color-string/index.js
var color_string = __webpack_require__(8239);
;// ./node_modules/@react-pdf/render/lib/index.js






const renderPath = (ctx, node) => {
  var _node$props;
  const d = (_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.d;
  if (d) ctx.path(node.props.d);
};
const KAPPA$3 = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);
const renderRect = (ctx, node) => {
  var _node$props, _node$props2, _node$props3, _node$props4, _node$props5, _node$props6;
  const x = ((_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.x) || 0;
  const y = ((_node$props2 = node.props) === null || _node$props2 === void 0 ? void 0 : _node$props2.y) || 0;
  const rx = ((_node$props3 = node.props) === null || _node$props3 === void 0 ? void 0 : _node$props3.rx) || 0;
  const ry = ((_node$props4 = node.props) === null || _node$props4 === void 0 ? void 0 : _node$props4.ry) || 0;
  const width = ((_node$props5 = node.props) === null || _node$props5 === void 0 ? void 0 : _node$props5.width) || 0;
  const height = ((_node$props6 = node.props) === null || _node$props6 === void 0 ? void 0 : _node$props6.height) || 0;
  if (!width || !height) return;
  if (rx && ry) {
    const krx = rx * KAPPA$3;
    const kry = ry * KAPPA$3;
    ctx.moveTo(x + rx, y);
    ctx.lineTo(x - rx + width, y);
    ctx.bezierCurveTo(x - rx + width + krx, y, x + width, y + ry - kry, x + width, y + ry);
    ctx.lineTo(x + width, y + height - ry);
    ctx.bezierCurveTo(x + width, y + height - ry + kry, x - rx + width + krx, y + height, x - rx + width, y + height);
    ctx.lineTo(x + rx, y + height);
    ctx.bezierCurveTo(x + rx - krx, y + height, x, y + height - ry + kry, x, y + height - ry);
    ctx.lineTo(x, y + ry);
    ctx.bezierCurveTo(x, y + ry - kry, x + rx - krx, y, x + rx, y);
  } else {
    ctx.moveTo(x, y);
    ctx.lineTo(x + width, y);
    ctx.lineTo(x + width, y + height);
    ctx.lineTo(x, y + height);
  }
  ctx.closePath();
};
const renderLine$1 = (ctx, node) => {
  const {
    x1,
    x2,
    y1,
    y2
  } = node.props || {};
  ctx.moveTo(x1, y1);
  ctx.lineTo(x2, y2);
};
const renderGroup = () => {
  // noop
};
const KAPPA$2 = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);
const drawEllipse = function (ctx, cx, cy, rx, ry) {
  if (cx === void 0) {
    cx = 0;
  }
  if (cy === void 0) {
    cy = 0;
  }
  const x = cx - rx;
  const y = cy - ry;
  const ox = rx * KAPPA$2;
  const oy = ry * KAPPA$2;
  const xe = x + rx * 2;
  const ye = y + ry * 2;
  const xm = x + rx;
  const ym = y + ry;
  ctx.moveTo(x, ym);
  ctx.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
  ctx.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);
  ctx.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
  ctx.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);
  ctx.closePath();
};
const renderEllipse = (ctx, node) => {
  const {
    cx,
    cy,
    rx,
    ry
  } = node.props || {};
  drawEllipse(ctx, cx, cy, rx, ry);
};
const renderCircle = (ctx, node) => {
  var _node$props, _node$props2, _node$props3;
  const cx = (_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.cx;
  const cy = (_node$props2 = node.props) === null || _node$props2 === void 0 ? void 0 : _node$props2.cy;
  const r = (_node$props3 = node.props) === null || _node$props3 === void 0 ? void 0 : _node$props3.r;
  drawEllipse(ctx, cx, cy, r, r);
};
const renderGlyphs = function (ctx, glyphs, positions, x, y, options) {
  if (options === void 0) {
    options = {};
  }
  const scale = 1000 / ctx._fontSize;
  const unitsPerEm = ctx._font.font.unitsPerEm || 1000;
  const advanceWidthScale = 1000 / unitsPerEm;

  // Glyph encoding and positioning
  const encodedGlyphs = ctx._font.encodeGlyphs(glyphs);
  const encodedPositions = positions.map((pos, i) => ({
    xAdvance: pos.xAdvance * scale,
    yAdvance: pos.yAdvance * scale,
    xOffset: pos.xOffset,
    yOffset: pos.yOffset,
    advanceWidth: glyphs[i].advanceWidth * advanceWidthScale
  }));
  return ctx._glyphs(encodedGlyphs, encodedPositions, x, y, options);
};
const renderRun$1 = (ctx, run) => {
  const runAdvanceWidth = run.xAdvance;
  const {
    font,
    fontSize,
    color,
    opacity
  } = run.attributes;
  ctx.fillColor(color);
  ctx.fillOpacity(opacity);
  if (font.sbix || font.COLR && font.CPAL) {
    ctx.save();
    ctx.translate(0, -run.ascent);
    for (let i = 0; i < run.glyphs.length; i += 1) {
      const position = run.positions[i];
      const glyph = run.glyphs[i];
      ctx.save();
      ctx.translate(position.xOffset, position.yOffset);
      glyph.render(ctx, fontSize);
      ctx.restore();
      ctx.translate(position.xAdvance, position.yAdvance);
    }
    ctx.restore();
  } else {
    ctx.font(typeof font.name === 'string' ? font.name : font, fontSize);
    try {
      renderGlyphs(ctx, run.glyphs, run.positions, 0, 0);
    } catch (error) {
      console.log(error);
    }
  }
  ctx.translate(runAdvanceWidth, 0);
};
const renderSpan = (ctx, line, textAnchor, dominantBaseline) => {
  var _line$box, _line$box2, _line$runs$, _line$runs$2, _line$runs$2$attribut;
  ctx.save();
  const x = ((_line$box = line.box) === null || _line$box === void 0 ? void 0 : _line$box.x) || 0;
  const y = ((_line$box2 = line.box) === null || _line$box2 === void 0 ? void 0 : _line$box2.y) || 0;
  const font = (_line$runs$ = line.runs[0]) === null || _line$runs$ === void 0 ? void 0 : _line$runs$.attributes.font;
  const scale = ((_line$runs$2 = line.runs[0]) === null || _line$runs$2 === void 0 ? void 0 : (_line$runs$2$attribut = _line$runs$2.attributes) === null || _line$runs$2$attribut === void 0 ? void 0 : _line$runs$2$attribut.scale) || 1;
  const width = line.xAdvance;
  const ascent = font.ascent * scale;
  const xHeight = font.xHeight * scale;
  const descent = font.descent * scale;
  const capHeight = font.capHeight * scale;
  let xTranslate = x;
  let yTranslate = y;
  switch (textAnchor) {
    case 'middle':
      xTranslate = x - width / 2;
      break;
    case 'end':
      xTranslate = x - width;
      break;
    default:
      xTranslate = x;
      break;
  }
  switch (dominantBaseline) {
    case 'middle':
    case 'central':
      yTranslate = y + capHeight / 2;
      break;
    case 'hanging':
      yTranslate = y + capHeight;
      break;
    case 'mathematical':
      yTranslate = y + xHeight;
      break;
    case 'text-after-edge':
      yTranslate = y + descent;
      break;
    case 'text-before-edge':
      yTranslate = y + ascent;
      break;
    default:
      yTranslate = y;
      break;
  }
  ctx.translate(xTranslate, yTranslate);
  line.runs.forEach(run => renderRun$1(ctx, run));
  ctx.restore();
};
const renderSvgText = (ctx, node) => {
  node.children.forEach(span => renderSpan(ctx, span.lines[0], span.props.textAnchor, span.props.dominantBaseline));
};

/**
 * Create pairs from array
 *
 * @template T
 * @param {T[]} values array
 * @returns {T[][]} pairs
 */
const pairs = values => {
  const result = [];
  for (let i = 0; i < values.length; i += 2) {
    result.push([values[i], values[i + 1]]);
  }
  return result;
};

/**
 * Parse svg-like points into number arrays
 *
 * @param {string} points string ex. "20,30 50,60"
 * @returns {number[][]} points array ex. [[20, 30], [50, 60]]
 */
const parsePoints = points => {
  let values = (points || '').trim().replace(/,/g, ' ').replace(/(\d)-(\d)/g, '$1 -$2').split(/\s+/);
  if (values.length % 2 !== 0) {
    values = values.slice(0, -1);
  }
  const mappedValues = values.map(parseFloat);
  return pairs(mappedValues);
};
const drawPolyline = (ctx, points) => {
  if (points.length > 0) {
    ctx.moveTo(points[0][0], points[0][1]);
    points.slice(1).forEach(p => ctx.lineTo(p[0], p[1]));
  }
};
const renderPolyline = (ctx, node) => {
  const points = parsePoints(node.props.points || '');
  drawPolyline(ctx, points);
};
const renderPolygon = (ctx, node) => {
  renderPolyline(ctx, node);
  ctx.closePath();
};
const renderImage$1 = (ctx, node) => {
  if (!node.image.data) return;
  const {
    x,
    y
  } = node.props;
  const {
    width,
    height,
    opacity
  } = node.style;
  const paddingTop = node.box.paddingLeft || 0;
  const paddingLeft = node.box.paddingLeft || 0;
  if (width === 0 || height === 0) {
    console.warn(`Image with src '${node.props.href}' skipped due to invalid dimensions`);
    return;
  }
  ctx.save();
  ctx.fillOpacity(opacity || 1).image(node.image.data, x + paddingLeft, y + paddingTop, {
    width,
    height
  });
  ctx.restore();
};

// This constant is used to approximate a symmetrical arc using a cubic
// Bezier curve.
const KAPPA$1 = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);
const clipNode = (ctx, node) => {
  if (!node.style) return;
  const {
    top,
    left,
    width,
    height
  } = node.box;
  const {
    borderTopLeftRadius = 0,
    borderTopRightRadius = 0,
    borderBottomRightRadius = 0,
    borderBottomLeftRadius = 0
  } = node.style;

  // Border top
  const rtr = Math.min(borderTopRightRadius, 0.5 * width, 0.5 * height);
  const ctr = rtr * (1.0 - KAPPA$1);
  ctx.moveTo(left + rtr, top);
  ctx.lineTo(left + width - rtr, top);
  ctx.bezierCurveTo(left + width - ctr, top, left + width, top + ctr, left + width, top + rtr);

  // Border right
  const rbr = Math.min(borderBottomRightRadius, 0.5 * width, 0.5 * height);
  const cbr = rbr * (1.0 - KAPPA$1);
  ctx.lineTo(left + width, top + height - rbr);
  ctx.bezierCurveTo(left + width, top + height - cbr, left + width - cbr, top + height, left + width - rbr, top + height);

  // Border bottom
  const rbl = Math.min(borderBottomLeftRadius, 0.5 * width, 0.5 * height);
  const cbl = rbl * (1.0 - KAPPA$1);
  ctx.lineTo(left + rbl, top + height);
  ctx.bezierCurveTo(left + cbl, top + height, left, top + height - cbl, left, top + height - rbl);

  // Border left
  const rtl = Math.min(borderTopLeftRadius, 0.5 * width, 0.5 * height);
  const ctl = rtl * (1.0 - KAPPA$1);
  ctx.lineTo(left, top + rtl);
  ctx.bezierCurveTo(left, top + ctl, left + ctl, top, left + rtl, top);
  ctx.closePath();
  ctx.clip();
};
const applySingleTransformation = (ctx, transform, origin) => {
  const {
    operation,
    value
  } = transform;
  switch (operation) {
    case 'scale':
      {
        const [scaleX, scaleY] = value;
        ctx.scale(scaleX, scaleY, {
          origin
        });
        break;
      }
    case 'rotate':
      {
        const [angle] = value;
        ctx.rotate(angle, {
          origin
        });
        break;
      }
    case 'translate':
      {
        const [x, y = 0] = value;
        ctx.translate(x, y, {
          origin
        });
        break;
      }
    case 'skew':
      {
        const [xAngle = 0, yAngle = 0] = value;
        const radx = xAngle * Math.PI / 180;
        const rady = yAngle * Math.PI / 180;
        const tanx = Math.tan(radx);
        const tany = Math.tan(rady);
        let x = 0;
        let y = 0;
        if (origin != null) {
          [x, y] = Array.from(origin);
          const x1 = x + tanx * y;
          const y1 = y + tany * x;
          x -= x1;
          y -= y1;
        }
        ctx.transform(1, tany, tanx, 1, x, y);
        break;
      }
    case 'matrix':
      {
        ctx.transform(...value);
        break;
      }
    default:
      {
        console.error(`Transform operation: '${operation}' doesn't supported`);
      }
  }
};
const applyTransformations = (ctx, node) => {
  var _node$style, _node$props;
  if (!node.origin) return;
  const origin = [node.origin.left, node.origin.top];
  const operations = ((_node$style = node.style) === null || _node$style === void 0 ? void 0 : _node$style.transform) || ((_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.transform) || [];
  operations.forEach(operation => {
    applySingleTransformation(ctx, operation, origin);
  });
};

// From https://github.com/dy/svg-path-bounds/blob/master/index.js
const getPathBoundingBox = node => {
  var _node$props;
  const path = (0,normalize_svg_path/* default */.A)(abs_svg_path(parse_svg_path(((_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.d) || '')));
  if (!path.length) return [0, 0, 0, 0];
  const bounds = [Infinity, Infinity, -Infinity, -Infinity];
  for (let i = 0, l = path.length; i < l; i += 1) {
    const points = path[i].slice(1);
    for (let j = 0; j < points.length; j += 2) {
      if (points[j + 0] < bounds[0]) bounds[0] = points[j + 0];
      if (points[j + 1] < bounds[1]) bounds[1] = points[j + 1];
      if (points[j + 0] > bounds[2]) bounds[2] = points[j + 0];
      if (points[j + 1] > bounds[3]) bounds[3] = points[j + 1];
    }
  }
  return bounds;
};
const getCircleBoundingBox = node => {
  var _node$props2, _node$props3, _node$props4;
  const r = ((_node$props2 = node.props) === null || _node$props2 === void 0 ? void 0 : _node$props2.r) || 0;
  const cx = ((_node$props3 = node.props) === null || _node$props3 === void 0 ? void 0 : _node$props3.cx) || 0;
  const cy = ((_node$props4 = node.props) === null || _node$props4 === void 0 ? void 0 : _node$props4.cy) || 0;
  return [cx - r, cy - r, cx + r, cy + r];
};
const getEllipseBoundingBox = node => {
  var _node$props5, _node$props6, _node$props7, _node$props8;
  const cx = ((_node$props5 = node.props) === null || _node$props5 === void 0 ? void 0 : _node$props5.cx) || 0;
  const cy = ((_node$props6 = node.props) === null || _node$props6 === void 0 ? void 0 : _node$props6.cy) || 0;
  const rx = ((_node$props7 = node.props) === null || _node$props7 === void 0 ? void 0 : _node$props7.rx) || 0;
  const ry = ((_node$props8 = node.props) === null || _node$props8 === void 0 ? void 0 : _node$props8.ry) || 0;
  return [cx - rx, cy - ry, cx + rx, cy + ry];
};
const getLineBoundingBox = node => {
  var _node$props9, _node$props10, _node$props11, _node$props12;
  const x1 = ((_node$props9 = node.props) === null || _node$props9 === void 0 ? void 0 : _node$props9.x1) || 0;
  const y1 = ((_node$props10 = node.props) === null || _node$props10 === void 0 ? void 0 : _node$props10.y1) || 0;
  const x2 = ((_node$props11 = node.props) === null || _node$props11 === void 0 ? void 0 : _node$props11.x2) || 0;
  const y2 = ((_node$props12 = node.props) === null || _node$props12 === void 0 ? void 0 : _node$props12.y2) || 0;
  return [Math.min(x1, x2), Math.min(y1, y2), Math.max(x1, x2), Math.max(y1, y2)];
};
const getRectBoundingBox = node => {
  var _node$props13, _node$props14, _node$props15, _node$props16;
  const x = ((_node$props13 = node.props) === null || _node$props13 === void 0 ? void 0 : _node$props13.x) || 0;
  const y = ((_node$props14 = node.props) === null || _node$props14 === void 0 ? void 0 : _node$props14.y) || 0;
  const width = ((_node$props15 = node.props) === null || _node$props15 === void 0 ? void 0 : _node$props15.width) || 0;
  const height = ((_node$props16 = node.props) === null || _node$props16 === void 0 ? void 0 : _node$props16.height) || 0;
  return [x, y, x + width, y + height];
};
const max = values => Math.max(-Infinity, ...values);
const min = values => Math.min(Infinity, ...values);
const getPolylineBoundingBox = node => {
  var _node$props17;
  const points = parsePoints(((_node$props17 = node.props) === null || _node$props17 === void 0 ? void 0 : _node$props17.points) || []);
  const xValues = points.map(p => p[0]);
  const yValues = points.map(p => p[1]);
  return [min(xValues), min(yValues), max(xValues), max(yValues)];
};
const boundingBoxFns = {
  [Rect]: getRectBoundingBox,
  [Line]: getLineBoundingBox,
  [Path]: getPathBoundingBox,
  [Circle]: getCircleBoundingBox,
  [Ellipse]: getEllipseBoundingBox,
  [Polygon]: getPolylineBoundingBox,
  [Polyline]: getPolylineBoundingBox
};
const getBoundingBox = node => {
  const boundingBoxFn = boundingBoxFns[node.type];
  return boundingBoxFn ? boundingBoxFn(node) : [0, 0, 0, 0];
};
const setStrokeWidth = (ctx, node) => {
  var _node$props;
  const lineWidth = ((_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.strokeWidth) || 0;
  if (lineWidth) ctx.lineWidth(lineWidth);
};
const setStrokeColor = (ctx, node) => {
  var _node$props2;
  const strokeColor = ((_node$props2 = node.props) === null || _node$props2 === void 0 ? void 0 : _node$props2.stroke) || null;
  if (strokeColor) ctx.strokeColor(strokeColor);
};
const setOpacity = (ctx, node) => {
  var _node$props3;
  const opacity = ((_node$props3 = node.props) === null || _node$props3 === void 0 ? void 0 : _node$props3.opacity) || null;
  if (!isNil(opacity)) ctx.opacity(opacity);
};
const setFillOpacity = (ctx, node) => {
  var _node$props4;
  const fillOpacity = ((_node$props4 = node.props) === null || _node$props4 === void 0 ? void 0 : _node$props4.fillOpacity) || null;
  if (!isNil(fillOpacity)) ctx.fillOpacity(fillOpacity);
};
const setStrokeOpacity = (ctx, node) => {
  var _node$props5;
  const strokeOpacity = ((_node$props5 = node.props) === null || _node$props5 === void 0 ? void 0 : _node$props5.strokeOpacity) || null;
  if (!isNil(strokeOpacity)) ctx.strokeOpacity(strokeOpacity);
};
const setLineJoin = (ctx, node) => {
  var _node$props6;
  const lineJoin = ((_node$props6 = node.props) === null || _node$props6 === void 0 ? void 0 : _node$props6.strokeLinejoin) || null;
  if (lineJoin) ctx.lineJoin(lineJoin);
};
const setLineCap = (ctx, node) => {
  var _node$props7;
  const lineCap = ((_node$props7 = node.props) === null || _node$props7 === void 0 ? void 0 : _node$props7.strokeLinecap) || null;
  if (lineCap) ctx.lineCap(lineCap);
};
const setLineDash = (ctx, node) => {
  var _node$props8;
  const value = ((_node$props8 = node.props) === null || _node$props8 === void 0 ? void 0 : _node$props8.strokeDasharray) || null;
  if (value) ctx.dash(value.split(/[\s,]+/).map(Number));
};
const hasLinearGradientFill = node => {
  var _node$props9, _node$props9$fill;
  return ((_node$props9 = node.props) === null || _node$props9 === void 0 ? void 0 : (_node$props9$fill = _node$props9.fill) === null || _node$props9$fill === void 0 ? void 0 : _node$props9$fill.type) === LinearGradient;
};
const hasRadialGradientFill = node => {
  var _node$props10, _node$props10$fill;
  return ((_node$props10 = node.props) === null || _node$props10 === void 0 ? void 0 : (_node$props10$fill = _node$props10.fill) === null || _node$props10$fill === void 0 ? void 0 : _node$props10$fill.type) === RadialGradient;
};

// Math simplified from https://github.com/devongovett/svgkit/blob/master/src/elements/SVGGradient.js#L104
const setLinearGradientFill = (ctx, node) => {
  var _node$props11;
  const bbox = getBoundingBox(node);
  const gradient = ((_node$props11 = node.props) === null || _node$props11 === void 0 ? void 0 : _node$props11.fill) || null;
  const x1 = gradient.props.x1 || 0;
  const y1 = gradient.props.y1 || 0;
  const x2 = gradient.props.x2 || 1;
  const y2 = gradient.props.y2 || 0;
  const m0 = bbox[2] - bbox[0];
  const m3 = bbox[3] - bbox[1];
  const m4 = bbox[0];
  const m5 = bbox[1];
  const gx1 = m0 * x1 + m4;
  const gy1 = m3 * y1 + m5;
  const gx2 = m0 * x2 + m4;
  const gy2 = m3 * y2 + m5;
  const grad = ctx.linearGradient(gx1, gy1, gx2, gy2);
  gradient.children.forEach(stop => {
    grad.stop(stop.props.offset, stop.props.stopColor, stop.props.stopOpacity);
  });
  ctx.fill(grad);
};

// Math simplified from https://github.com/devongovett/svgkit/blob/master/src/elements/SVGGradient.js#L155
const setRadialGradientFill = (ctx, node) => {
  var _node$props12;
  const bbox = getBoundingBox(node);
  const gradient = ((_node$props12 = node.props) === null || _node$props12 === void 0 ? void 0 : _node$props12.fill) || null;
  const cx = gradient.props.cx || 0.5;
  const cy = gradient.props.cy || 0.5;
  const fx = gradient.props.fx || cx;
  const fy = gradient.props.fy || cy;
  const r = gradient.props.r || 0.5;
  const m0 = bbox[2] - bbox[0];
  const m3 = bbox[3] - bbox[1];
  const m4 = bbox[0];
  const m5 = bbox[1];
  const gr = r * m0;
  const gcx = m0 * cx + m4;
  const gcy = m3 * cy + m5;
  const gfx = m0 * fx + m4;
  const gfy = m3 * fy + m5;
  const grad = ctx.radialGradient(gfx, gfy, 0, gcx, gcy, gr);
  gradient.children.forEach(stop => {
    grad.stop(stop.props.offset, stop.props.stopColor, stop.props.stopOpacity);
  });
  ctx.fill(grad);
};
const setFillColor = (ctx, node) => {
  var _node$props13;
  const fillColor = ((_node$props13 = node.props) === null || _node$props13 === void 0 ? void 0 : _node$props13.fill) || null;
  if (fillColor) ctx.fillColor(fillColor);
};
const setFill = (ctx, node) => {
  if (hasLinearGradientFill(node)) return setLinearGradientFill(ctx, node);
  if (hasRadialGradientFill(node)) return setRadialGradientFill(ctx, node);
  return setFillColor(ctx, node);
};
const draw = (ctx, node) => {
  const props = node.props || {};
  if (props.fill && props.stroke) {
    ctx.fillAndStroke(props.fillRule);
  } else if (props.fill) {
    ctx.fill(props.fillRule);
  } else if (props.stroke) {
    ctx.stroke();
  } else {
    ctx.save();
    ctx.opacity(0);
    ctx.fill(null);
    ctx.restore();
  }
};
const noop = () => {};
const renderFns$1 = {
  [Tspan]: noop,
  [TextInstance]: noop,
  [Path]: renderPath,
  [Rect]: renderRect,
  [Line]: renderLine$1,
  [G]: renderGroup,
  [Text]: renderSvgText,
  [Circle]: renderCircle,
  [Image]: renderImage$1,
  [Ellipse]: renderEllipse,
  [Polygon]: renderPolygon,
  [Polyline]: renderPolyline
};
const renderNode$1 = (ctx, node) => {
  const renderFn = renderFns$1[node.type];
  if (renderFn) {
    renderFn(ctx, node);
  } else {
    console.warn(`SVG node of type ${node.type} is not currently supported`);
  }
};
const drawNode = (ctx, node) => {
  setLineCap(ctx, node);
  setLineDash(ctx, node);
  setLineJoin(ctx, node);
  setStrokeWidth(ctx, node);
  setStrokeColor(ctx, node);
  setFill(ctx, node);
  setStrokeOpacity(ctx, node);
  setFillOpacity(ctx, node);
  setOpacity(ctx, node);
  applyTransformations(ctx, node);
  renderNode$1(ctx, node);
  draw(ctx, node);
};
const clipPath = (ctx, node) => {
  var _node$props14;
  const value = (_node$props14 = node.props) === null || _node$props14 === void 0 ? void 0 : _node$props14.clipPath;
  if (value) {
    const children = value.children || [];
    children.forEach(child => renderNode$1(ctx, child));
    ctx.clip();
  }
};
const drawChildren = (ctx, node) => {
  const children = node.children || [];
  children.forEach(child => {
    ctx.save();
    clipPath(ctx, child);
    drawNode(ctx, child);
    drawChildren(ctx, child);
    ctx.restore();
  });
};
const resolveAspectRatio = (ctx, node) => {
  const {
    width,
    height
  } = node.box;
  const {
    viewBox,
    preserveAspectRatio = {}
  } = node.props;
  const {
    meetOrSlice = 'meet',
    align = 'xMidYMid'
  } = preserveAspectRatio;
  if (viewBox == null || width == null || height == null) return;
  const x = (viewBox === null || viewBox === void 0 ? void 0 : viewBox.minX) || 0;
  const y = (viewBox === null || viewBox === void 0 ? void 0 : viewBox.minY) || 0;
  const logicalWidth = (viewBox === null || viewBox === void 0 ? void 0 : viewBox.maxX) || width;
  const logicalHeight = (viewBox === null || viewBox === void 0 ? void 0 : viewBox.maxY) || height;
  const logicalRatio = logicalWidth / logicalHeight;
  const physicalRatio = width / height;
  const scaleX = width / logicalWidth;
  const scaleY = height / logicalHeight;
  if (align === 'none') {
    ctx.scale(scaleX, scaleY);
    ctx.translate(-x, -y);
    return;
  }
  if (logicalRatio < physicalRatio && meetOrSlice === 'meet' || logicalRatio >= physicalRatio && meetOrSlice === 'slice') {
    ctx.scale(scaleY, scaleY);
    switch (align) {
      case 'xMinYMin':
      case 'xMinYMid':
      case 'xMinYMax':
        ctx.translate(-x, -y);
        break;
      case 'xMidYMin':
      case 'xMidYMid':
      case 'xMidYMax':
        ctx.translate(-x - (logicalWidth - width * logicalHeight / height) / 2, -y);
        break;
      default:
        ctx.translate(-x - (logicalWidth - width * logicalHeight / height), -y);
    }
  } else {
    ctx.scale(scaleX, scaleX);
    switch (align) {
      case 'xMinYMin':
      case 'xMidYMin':
      case 'xMaxYMin':
        ctx.translate(-x, -y);
        break;
      case 'xMinYMid':
      case 'xMidYMid':
      case 'xMaxYMid':
        ctx.translate(-x, -y - (logicalHeight - height * logicalWidth / width) / 2);
        break;
      default:
        ctx.translate(-x, -y - (logicalHeight - height * logicalWidth / width));
    }
  }
};
const moveToOrigin = (ctx, node) => {
  const {
    top,
    left
  } = node.box;
  const paddingLeft = node.box.paddingLeft || 0;
  const paddingTop = node.box.paddingTop || 0;
  ctx.translate(left + paddingLeft, top + paddingTop);
};
const renderSvg = (ctx, node) => {
  ctx.save();
  clipNode(ctx, node);
  moveToOrigin(ctx, node);
  resolveAspectRatio(ctx, node);
  drawChildren(ctx, node);
  ctx.restore();
};
const black = {
  value: [0, 0, 0],
  opacity: 1
};
const parseColor = hex => {
  const parsed = color_string.get(hex);
  if (!parsed) return black;
  const value = color_string.to.hex(parsed.value.slice(0, 3));
  const opacity = parsed.value[3];
  return {
    value,
    opacity
  };
};

/* eslint-disable no-param-reassign */
const DEST_REGEXP = /^#.+/;
const isSrcId$1 = src => src.match(DEST_REGEXP);
const renderAttachment = (ctx, attachment) => {
  const {
    xOffset = 0,
    yOffset = 0,
    width,
    height,
    image
  } = attachment;
  ctx.translate(-width + xOffset, -height + yOffset);
  ctx.image(image, 0, 0, {
    fit: [width, height],
    align: 'center',
    valign: 'bottom'
  });
};
const renderAttachments = (ctx, run) => {
  ctx.save();
  const {
    font
  } = run.attributes;
  const space = font.glyphForCodePoint(0x20);
  const objectReplacement = font.glyphForCodePoint(0xfffc);
  let attachmentAdvance = 0;
  for (let i = 0; i < run.glyphs.length; i += 1) {
    const position = run.positions[i];
    const glyph = run.glyphs[i];
    attachmentAdvance += position.xAdvance || 0;
    if (glyph.id === objectReplacement.id && run.attributes.attachment) {
      ctx.translate(attachmentAdvance, position.yOffset || 0);
      renderAttachment(ctx, run.attributes.attachment);
      run.glyphs[i] = space;
      attachmentAdvance = 0;
    }
  }
  ctx.restore();
};
const renderRun = (ctx, run, options) => {
  const {
    font,
    fontSize,
    link
  } = run.attributes;
  const color = parseColor(run.attributes.color);
  const opacity = isNil(run.attributes.opacity) ? color.opacity : run.attributes.opacity;
  const {
    height,
    descent,
    xAdvance
  } = run;
  if (options.outlineRuns) {
    ctx.rect(0, -height, xAdvance, height).stroke();
  }
  ctx.fillColor(color.value);
  ctx.fillOpacity(opacity);
  if (link) {
    if (isSrcId$1(link)) {
      ctx.goTo(0, -height - descent, xAdvance, height, link.slice(1));
    } else {
      ctx.link(0, -height - descent, xAdvance, height, link);
    }
  }
  renderAttachments(ctx, run);
  if (font.sbix || font.COLR && font.CPAL) {
    ctx.save();
    ctx.translate(0, -run.ascent);
    for (let i = 0; i < run.glyphs.length; i += 1) {
      const position = run.positions[i];
      const glyph = run.glyphs[i];
      ctx.save();
      ctx.translate(position.xOffset, position.yOffset);
      glyph.render(ctx, fontSize);
      ctx.restore();
      ctx.translate(position.xAdvance, position.yAdvance);
    }
    ctx.restore();
  } else {
    ctx.font(typeof font.name === 'string' ? font.name : font, fontSize);
    try {
      renderGlyphs(ctx, run.glyphs, run.positions, 0, 0);
    } catch (error) {
      console.log(error);
    }
  }
  ctx.translate(xAdvance, 0);
};
const renderBackground$1 = (ctx, rect, backgroundColor) => {
  const color = parseColor(backgroundColor);
  ctx.save();
  ctx.fillOpacity(color.opacity);
  ctx.rect(rect.x, rect.y, rect.width, rect.height);
  ctx.fill(color.value);
  ctx.restore();
};
const renderDecorationLine = (ctx, line) => {
  ctx.save();
  ctx.lineWidth(line.rect.height);
  ctx.strokeOpacity(line.opacity);
  if (/dashed/.test(line.style)) {
    ctx.dash(3 * line.rect.height);
  } else if (/dotted/.test(line.style)) {
    ctx.dash(line.rect.height);
  }
  if (/wavy/.test(line.style)) {
    const dist = Math.max(2, line.rect.height);
    let step = 1.1 * dist;
    const stepCount = Math.floor(line.rect.width / (2 * step));

    // Adjust step to fill entire width
    const remainingWidth = line.rect.width - stepCount * 2 * step;
    const adjustment = remainingWidth / stepCount / 2;
    step += adjustment;
    const cp1y = line.rect.y + dist;
    const cp2y = line.rect.y - dist;
    let {
      x
    } = line.rect;
    ctx.moveTo(line.rect.x, line.rect.y);
    for (let i = 0; i < stepCount; i += 1) {
      ctx.bezierCurveTo(x + step, cp1y, x + step, cp2y, x + 2 * step, line.rect.y);
      x += 2 * step;
    }
  } else {
    ctx.moveTo(line.rect.x, line.rect.y);
    ctx.lineTo(line.rect.x + line.rect.width, line.rect.y);
    if (/double/.test(line.style)) {
      ctx.moveTo(line.rect.x, line.rect.y + line.rect.height * 2);
      ctx.lineTo(line.rect.x + line.rect.width, line.rect.y + line.rect.height * 2);
    }
  }
  ctx.stroke(line.color);
  ctx.restore();
};
const renderLine = (ctx, line, options) => {
  const lineAscent = line.ascent;
  if (options.outlineLines) {
    ctx.rect(line.box.x, line.box.y, line.box.width, line.box.height).stroke();
  }
  ctx.save();
  ctx.translate(line.box.x, line.box.y + lineAscent);
  for (let i = 0; i < line.runs.length; i += 1) {
    const run = line.runs[i];
    const isLastRun = i === line.runs.length - 1;
    if (run.attributes.backgroundColor) {
      const overflowRight = isLastRun ? line.overflowRight : 0;
      const backgroundRect = {
        x: 0,
        y: -lineAscent,
        height: line.box.height,
        width: run.xAdvance - overflowRight
      };
      renderBackground$1(ctx, backgroundRect, run.attributes.backgroundColor);
    }
    renderRun(ctx, run, options);
  }
  ctx.restore();
  ctx.save();
  ctx.translate(line.box.x, line.box.y);
  for (let i = 0; i < line.decorationLines.length; i += 1) {
    const decorationLine = line.decorationLines[i];
    renderDecorationLine(ctx, decorationLine);
  }
  ctx.restore();
};
const renderBlock = (ctx, block, options) => {
  block.forEach(line => {
    renderLine(ctx, line, options);
  });
};
const renderText = (ctx, node) => {
  var _node$box, _node$box2;
  const {
    top,
    left
  } = node.box;
  const blocks = [node.lines];
  const paddingTop = ((_node$box = node.box) === null || _node$box === void 0 ? void 0 : _node$box.paddingTop) || 0;
  const paddingLeft = ((_node$box2 = node.box) === null || _node$box2 === void 0 ? void 0 : _node$box2.paddingLeft) || 0;
  const initialY = node.lines[0] ? node.lines[0].box.y : 0;
  const offsetX = node.alignOffset || 0;
  ctx.save();
  ctx.translate(left + paddingLeft - offsetX, top + paddingTop - initialY);
  blocks.forEach(block => {
    renderBlock(ctx, block, {});
  });
  ctx.restore();
};
const renderPage = (ctx, node) => {
  var _node$props;
  const {
    width,
    height
  } = node.box;
  const dpi = ((_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.dpi) || 72;
  const userUnit = dpi / 72;
  ctx.addPage({
    size: [width, height],
    margin: 0,
    userUnit
  });
};
const renderNote = (ctx, node) => {
  var _node$children, _node$style, _node$style2;
  const {
    top,
    left
  } = node.box;
  const value = (node === null || node === void 0 ? void 0 : (_node$children = node.children) === null || _node$children === void 0 ? void 0 : _node$children[0].value) || '';
  const color = ((_node$style = node.style) === null || _node$style === void 0 ? void 0 : _node$style.backgroundColor) || null;
  const borderWidth = ((_node$style2 = node.style) === null || _node$style2 === void 0 ? void 0 : _node$style2.borderWidth) || null;
  ctx.note(left, top, 0, 0, value, {
    color,
    borderWidth
  });
};
const isNumeric = n => {
  return !Number.isNaN(parseFloat(n)) && Number.isFinite(n);
};
const applyContainObjectFit = (cw, ch, iw, ih, px, py) => {
  const cr = cw / ch;
  const ir = iw / ih;
  const pxp = matchPercent(px);
  const pyp = matchPercent(py);
  const pxv = pxp ? pxp.percent : 0.5;
  const pyv = pyp ? pyp.percent : 0.5;
  if (cr > ir) {
    const height = ch;
    const width = height * ir;
    const yOffset = isNumeric(py) ? py : 0;
    const xOffset = isNumeric(px) ? px : (cw - width) * pxv;
    return {
      width,
      height,
      xOffset,
      yOffset
    };
  }
  const width = cw;
  const height = width / ir;
  const xOffset = isNumeric(px) ? px : 0;
  const yOffset = isNumeric(py) ? py : (ch - height) * pyv;
  return {
    width,
    height,
    yOffset,
    xOffset
  };
};
const applyNoneObjectFit = (cw, ch, iw, ih, px, py) => {
  const width = iw;
  const height = ih;
  const pxp = matchPercent(px);
  const pyp = matchPercent(py);
  const pxv = pxp ? pxp.percent : 0.5;
  const pyv = pyp ? pyp.percent : 0.5;
  const xOffset = isNumeric(px) ? px : (cw - width) * pxv;
  const yOffset = isNumeric(py) ? py : (ch - height) * pyv;
  return {
    width,
    height,
    xOffset,
    yOffset
  };
};
const applyCoverObjectFit = (cw, ch, iw, ih, px, py) => {
  const ir = iw / ih;
  const cr = cw / ch;
  const pxp = matchPercent(px);
  const pyp = matchPercent(py);
  const pxv = pxp ? pxp.percent : 0.5;
  const pyv = pyp ? pyp.percent : 0.5;
  if (cr > ir) {
    const width = cw;
    const height = width / ir;
    const xOffset = isNumeric(px) ? px : 0;
    const yOffset = isNumeric(py) ? py : (ch - height) * pyv;
    return {
      width,
      height,
      yOffset,
      xOffset
    };
  }
  const height = ch;
  const width = height * ir;
  const xOffset = isNumeric(px) ? px : (cw - width) * pxv;
  const yOffset = isNumeric(py) ? py : 0;
  return {
    width,
    height,
    xOffset,
    yOffset
  };
};
const applyScaleDownObjectFit = (cw, ch, iw, ih, px, py) => {
  const containDimension = applyContainObjectFit(cw, ch, iw, ih, px, py);
  const noneDimension = applyNoneObjectFit(cw, ch, iw, ih, px, py);
  return containDimension.width < noneDimension.width ? containDimension : noneDimension;
};
const applyFillObjectFit = (cw, ch, px, py) => {
  return {
    width: cw,
    height: ch,
    xOffset: matchPercent(px) ? 0 : px || 0,
    yOffset: matchPercent(py) ? 0 : py || 0
  };
};
const resolveObjectFit = function (type, cw, ch, iw, ih, px, py) {
  if (type === void 0) {
    type = 'fill';
  }
  switch (type) {
    case 'contain':
      return applyContainObjectFit(cw, ch, iw, ih, px, py);
    case 'cover':
      return applyCoverObjectFit(cw, ch, iw, ih, px, py);
    case 'none':
      return applyNoneObjectFit(cw, ch, iw, ih, px, py);
    case 'scale-down':
      return applyScaleDownObjectFit(cw, ch, iw, ih, px, py);
    default:
      return applyFillObjectFit(cw, ch, px, py);
  }
};
const drawImage = function (ctx, node, options) {
  var _node$style, _node$style2, _node$style3, _node$style4;
  if (options === void 0) {
    options = {};
  }
  const {
    left,
    top
  } = node.box;
  const opacity = (_node$style = node.style) === null || _node$style === void 0 ? void 0 : _node$style.opacity;
  const objectFit = (_node$style2 = node.style) === null || _node$style2 === void 0 ? void 0 : _node$style2.objectFit;
  const objectPositionX = (_node$style3 = node.style) === null || _node$style3 === void 0 ? void 0 : _node$style3.objectPositionX;
  const objectPositionY = (_node$style4 = node.style) === null || _node$style4 === void 0 ? void 0 : _node$style4.objectPositionY;
  const paddingTop = node.box.paddingTop || 0;
  const paddingRight = node.box.paddingRight || 0;
  const paddingBottom = node.box.paddingBottom || 0;
  const paddingLeft = node.box.paddingLeft || 0;
  const imageCache = options.imageCache || new Map();
  const {
    width,
    height,
    xOffset,
    yOffset
  } = resolveObjectFit(objectFit, node.box.width - paddingLeft - paddingRight, node.box.height - paddingTop - paddingBottom, node.image.width, node.image.height, objectPositionX, objectPositionY);
  if (node.image.data) {
    if (width !== 0 && height !== 0) {
      const cacheKey = node.image.key;
      const image = imageCache.get(cacheKey) || ctx.embedImage(node.image.data);
      if (cacheKey) imageCache.set(cacheKey, image);
      const imageOpacity = isNil(opacity) ? 1 : opacity;
      ctx.fillOpacity(imageOpacity).image(image, left + paddingLeft + xOffset, top + paddingTop + yOffset, {
        width,
        height
      });
    } else {
      console.warn(`Image with src '${JSON.stringify(node.props.src)}' skipped due to invalid dimensions`);
    }
  }
};
const renderImage = (ctx, node, options) => {
  ctx.save();
  clipNode(ctx, node);
  drawImage(ctx, node, options);
  ctx.restore();
};
const CONTENT_COLOR = '#a1c6e7';
const PADDING_COLOR = '#c4deb9';
const MARGIN_COLOR = '#f8cca1';

// TODO: Draw debug boxes using clipping to enhance quality

const debugContent = (ctx, node) => {
  const {
    left,
    top,
    width,
    height,
    paddingLeft = 0,
    paddingTop = 0,
    paddingRight = 0,
    paddingBottom = 0,
    borderLeftWidth = 0,
    borderTopWidth = 0,
    borderRightWidth = 0,
    borderBottomWidth = 0
  } = node.box;
  ctx.fillColor(CONTENT_COLOR).opacity(0.5).rect(left + paddingLeft + borderLeftWidth, top + paddingTop + borderTopWidth, width - paddingLeft - paddingRight - borderRightWidth - borderLeftWidth, height - paddingTop - paddingBottom - borderTopWidth - borderBottomWidth).fill();
};
const debugPadding = (ctx, node) => {
  const {
    left,
    top,
    width,
    height,
    paddingLeft = 0,
    paddingTop = 0,
    paddingRight = 0,
    paddingBottom = 0,
    borderLeftWidth = 0,
    borderTopWidth = 0,
    borderRightWidth = 0,
    borderBottomWidth = 0
  } = node.box;
  ctx.fillColor(PADDING_COLOR).opacity(0.5);

  // Padding top
  ctx.rect(left + paddingLeft + borderLeftWidth, top + borderTopWidth, width - paddingRight - paddingLeft - borderLeftWidth - borderRightWidth, paddingTop).fill();

  // Padding left
  ctx.rect(left + borderLeftWidth, top + borderTopWidth, paddingLeft, height - borderTopWidth - borderBottomWidth).fill();

  // Padding right
  ctx.rect(left + width - paddingRight - borderRightWidth, top + borderTopWidth, paddingRight, height - borderTopWidth - borderBottomWidth).fill();

  // Padding bottom
  ctx.rect(left + paddingLeft + borderLeftWidth, top + height - paddingBottom - borderBottomWidth, width - paddingRight - paddingLeft - borderLeftWidth - borderRightWidth, paddingBottom).fill();
};
const getMargin = box => {
  const marginLeft = box.marginLeft === 'auto' ? 0 : box.marginLeft;
  const marginTop = box.marginTop === 'auto' ? 0 : box.marginTop;
  const marginRight = box.marginRight === 'auto' ? 0 : box.marginRight;
  const marginBottom = box.marginBottom === 'auto' ? 0 : box.marginBottom;
  return {
    marginLeft,
    marginTop,
    marginRight,
    marginBottom
  };
};
const debugMargin = (ctx, node) => {
  const {
    left,
    top,
    width,
    height
  } = node.box;
  const {
    marginLeft = 0,
    marginTop = 0,
    marginRight = 0,
    marginBottom = 0
  } = getMargin(node.box);
  ctx.fillColor(MARGIN_COLOR).opacity(0.5);

  // Margin top
  ctx.rect(left, top - marginTop, width, marginTop).fill();

  // Margin left
  ctx.rect(left - marginLeft, top - marginTop, marginLeft, height + marginTop + marginBottom).fill();

  // Margin right
  ctx.rect(left + width, top - marginTop, marginRight, height + marginTop + marginBottom).fill();

  // Margin bottom
  ctx.rect(left, top + height, width, marginBottom).fill();
};
const debugText = (ctx, node) => {
  const {
    left,
    top,
    width,
    height
  } = node.box;
  const {
    marginLeft = 0,
    marginTop = 0,
    marginRight = 0,
    marginBottom = 0
  } = getMargin(node.box);
  const roundedWidth = Math.round(width + marginLeft + marginRight);
  const roundedHeight = Math.round(height + marginTop + marginBottom);
  ctx.fontSize(6).opacity(1).fillColor('black').text(`${roundedWidth} x ${roundedHeight}`, left - marginLeft, Math.max(top - marginTop - 4, 1));
};
const debugOrigin = (ctx, node) => {
  if (node.origin) {
    ctx.circle(node.origin.left, node.origin.top, 3).fill('red').circle(node.origin.left, node.origin.top, 5).stroke('red');
  }
};
const renderDebug = (ctx, node) => {
  var _node$props;
  if (!((_node$props = node.props) !== null && _node$props !== void 0 && _node$props.debug)) return;
  ctx.save();
  debugContent(ctx, node);
  debugPadding(ctx, node);
  debugMargin(ctx, node);
  debugText(ctx, node);
  debugOrigin(ctx, node);
  ctx.restore();
};
const availableMethods = ['dash', 'clip', 'save', 'path', 'fill', 'font', 'text', 'rect', 'scale', 'moveTo', 'lineTo', 'stroke', 'rotate', 'circle', 'lineCap', 'opacity', 'ellipse', 'polygon', 'restore', 'lineJoin', 'fontSize', 'fillColor', 'lineWidth', 'translate', 'miterLimit', 'strokeColor', 'fillOpacity', 'roundedRect', 'fillAndStroke', 'strokeOpacity', 'bezierCurveTo', 'quadraticCurveTo', 'linearGradient', 'radialGradient'];
const painter = ctx => {
  const p = availableMethods.reduce((acc, prop) => ({
    ...acc,
    [prop]: function () {
      ctx[prop](...arguments);
      return p;
    }
  }), {});
  return p;
};
const renderCanvas = (ctx, node) => {
  const {
    top,
    left,
    width,
    height
  } = node.box;
  const paddingTop = node.box.paddingTop || 0;
  const paddingLeft = node.box.paddingLeft || 0;
  const paddingRight = node.box.paddingRight || 0;
  const paddingBottom = node.box.paddingBottom || 0;
  const availableWidth = width - paddingLeft - paddingRight;
  const availableHeight = height - paddingTop - paddingBottom;
  if (!availableWidth || !availableHeight) {
    console.warn('Canvas element has null width or height. Please provide valid values via the `style` prop in order to correctly render it.');
  }
  ctx.save().translate(left + paddingLeft, top + paddingTop);
  if (node.props.paint) {
    node.props.paint(painter(ctx), availableWidth, availableHeight);
  }
  ctx.restore();
};

// Ref: https://www.w3.org/TR/css-backgrounds-3/#borders

// This constant is used to approximate a symmetrical arc using a cubic Bezier curve.
const KAPPA = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);
const clipBorderTop = (ctx, layout, style, rtr, rtl) => {
  const {
    top,
    left,
    width,
    height
  } = layout;
  const {
    borderTopWidth,
    borderRightWidth,
    borderLeftWidth
  } = style;

  // Clip outer top border edge
  ctx.moveTo(left + rtl, top);
  ctx.lineTo(left + width - rtr, top);

  // Ellipse coefficients outer top right cap
  const c0 = rtr * (1.0 - KAPPA);

  // Clip outer top right cap
  ctx.bezierCurveTo(left + width - c0, top, left + width, top + c0, left + width, top + rtr);

  // Move down in case the margin exceedes the radius
  const topRightYCoord = top + Math.max(borderTopWidth, rtr);
  ctx.lineTo(left + width, topRightYCoord);

  // Clip inner top right cap
  ctx.lineTo(left + width - borderRightWidth, topRightYCoord);

  // Ellipse coefficients inner top right cap
  const innerTopRightRadiusX = Math.max(rtr - borderRightWidth, 0);
  const innerTopRightRadiusY = Math.max(rtr - borderTopWidth, 0);
  const c1 = innerTopRightRadiusX * (1.0 - KAPPA);
  const c2 = innerTopRightRadiusY * (1.0 - KAPPA);

  // Clip inner top right cap
  ctx.bezierCurveTo(left + width - borderRightWidth, top + borderTopWidth + c2, left + width - borderRightWidth - c1, top + borderTopWidth, left + width - borderRightWidth - innerTopRightRadiusX, top + borderTopWidth);

  // Clip inner top border edge
  ctx.lineTo(left + Math.max(rtl, borderLeftWidth), top + borderTopWidth);

  // Ellipse coefficients inner top left cap
  const innerTopLeftRadiusX = Math.max(rtl - borderLeftWidth, 0);
  const innerTopLeftRadiusY = Math.max(rtl - borderTopWidth, 0);
  const c3 = innerTopLeftRadiusX * (1.0 - KAPPA);
  const c4 = innerTopLeftRadiusY * (1.0 - KAPPA);
  const topLeftYCoord = top + Math.max(borderTopWidth, rtl);

  // Clip inner top left cap
  ctx.bezierCurveTo(left + borderLeftWidth + c3, top + borderTopWidth, left + borderLeftWidth, top + borderTopWidth + c4, left + borderLeftWidth, topLeftYCoord);
  ctx.lineTo(left, topLeftYCoord);

  // Move down in case the margin exceedes the radius
  ctx.lineTo(left, top + rtl);

  // Ellipse coefficients outer top left cap
  const c5 = rtl * (1.0 - KAPPA);

  // Clip outer top left cap
  ctx.bezierCurveTo(left, top + c5, left + c5, top, left + rtl, top);
  ctx.closePath();
  ctx.clip();

  // Clip border top cap joins
  if (borderRightWidth) {
    const trSlope = -borderTopWidth / borderRightWidth;
    ctx.moveTo(left + width / 2, trSlope * (-width / 2) + top);
    ctx.lineTo(left + width, top);
    ctx.lineTo(left, top);
    ctx.lineTo(left, top + height);
    ctx.closePath();
    ctx.clip();
  }
  if (borderLeftWidth) {
    const trSlope = -borderTopWidth / borderLeftWidth;
    ctx.moveTo(left + width / 2, trSlope * (-width / 2) + top);
    ctx.lineTo(left, top);
    ctx.lineTo(left + width, top);
    ctx.lineTo(left + width, top + height);
    ctx.closePath();
    ctx.clip();
  }
};
const fillBorderTop = (ctx, layout, style, rtr, rtl) => {
  const {
    top,
    left,
    width
  } = layout;
  const {
    borderTopColor,
    borderTopWidth,
    borderTopStyle,
    borderRightWidth,
    borderLeftWidth
  } = style;
  const c0 = rtl * (1.0 - KAPPA);
  const c1 = rtr * (1.0 - KAPPA);
  ctx.moveTo(left, top + Math.max(rtl, borderTopWidth));
  ctx.bezierCurveTo(left, top + c0, left + c0, top, left + rtl, top);
  ctx.lineTo(left + width - rtr, top);
  ctx.bezierCurveTo(left + width - c1, top, left + width, top + c1, left + width, top + rtr);
  ctx.strokeColor(borderTopColor);
  ctx.lineWidth(Math.max(borderRightWidth, borderTopWidth, borderLeftWidth) * 2);
  if (borderTopStyle === 'dashed') {
    ctx.dash(borderTopWidth * 2, {
      space: borderTopWidth * 1.2
    });
  } else if (borderTopStyle === 'dotted') {
    ctx.dash(borderTopWidth, {
      space: borderTopWidth * 1.2
    });
  }
  ctx.stroke();
  ctx.undash();
};
const clipBorderRight = (ctx, layout, style, rtr, rbr) => {
  const {
    top,
    left,
    width,
    height
  } = layout;
  const {
    borderTopWidth,
    borderRightWidth,
    borderBottomWidth
  } = style;

  // Clip outer right border edge
  ctx.moveTo(left + width, top + rtr);
  ctx.lineTo(left + width, top + height - rbr);

  // Ellipse coefficients outer bottom right cap
  const c0 = rbr * (1.0 - KAPPA);

  // Clip outer top right cap
  ctx.bezierCurveTo(left + width, top + height - c0, left + width - c0, top + height, left + width - rbr, top + height);

  // Move left in case the margin exceedes the radius
  const topBottomXCoord = left + width - Math.max(borderRightWidth, rbr);
  ctx.lineTo(topBottomXCoord, top + height);

  // Clip inner bottom right cap
  ctx.lineTo(topBottomXCoord, top + height - borderBottomWidth);

  // Ellipse coefficients inner bottom right cap
  const innerBottomRightRadiusX = Math.max(rbr - borderRightWidth, 0);
  const innerBottomRightRadiusY = Math.max(rbr - borderBottomWidth, 0);
  const c1 = innerBottomRightRadiusX * (1.0 - KAPPA);
  const c2 = innerBottomRightRadiusY * (1.0 - KAPPA);

  // Clip inner top right cap
  ctx.bezierCurveTo(left + width - borderRightWidth - c1, top + height - borderBottomWidth, left + width - borderRightWidth, top + height - borderBottomWidth - c2, left + width - borderRightWidth, top + height - Math.max(rbr, borderBottomWidth));

  // Clip inner right border edge
  ctx.lineTo(left + width - borderRightWidth, top + Math.max(rtr, borderTopWidth));

  // Ellipse coefficients inner top right cap
  const innerTopRightRadiusX = Math.max(rtr - borderRightWidth, 0);
  const innerTopRightRadiusY = Math.max(rtr - borderTopWidth, 0);
  const c3 = innerTopRightRadiusX * (1.0 - KAPPA);
  const c4 = innerTopRightRadiusY * (1.0 - KAPPA);
  const topRightXCoord = left + width - Math.max(rtr, borderRightWidth);

  // Clip inner top left cap
  ctx.bezierCurveTo(left + width - borderRightWidth, top + borderTopWidth + c4, left + width - borderRightWidth - c3, top + borderTopWidth, topRightXCoord, top + borderTopWidth);
  ctx.lineTo(topRightXCoord, top);

  // Move right in case the margin exceedes the radius
  ctx.lineTo(left + width - rtr, top);

  // Ellipse coefficients outer top right cap
  const c5 = rtr * (1.0 - KAPPA);

  // Clip outer top right cap
  ctx.bezierCurveTo(left + width - c5, top, left + width, top + c5, left + width, top + rtr);
  ctx.closePath();
  ctx.clip();

  // Clip border right cap joins
  if (borderTopWidth) {
    const trSlope = -borderTopWidth / borderRightWidth;
    ctx.moveTo(left + width / 2, trSlope * (-width / 2) + top);
    ctx.lineTo(left + width, top);
    ctx.lineTo(left + width, top + height);
    ctx.lineTo(left, top + height);
    ctx.closePath();
    ctx.clip();
  }
  if (borderBottomWidth) {
    const brSlope = borderBottomWidth / borderRightWidth;
    ctx.moveTo(left + width / 2, brSlope * (-width / 2) + top + height);
    ctx.lineTo(left + width, top + height);
    ctx.lineTo(left + width, top);
    ctx.lineTo(left, top);
    ctx.closePath();
    ctx.clip();
  }
};
const fillBorderRight = (ctx, layout, style, rtr, rbr) => {
  const {
    top,
    left,
    width,
    height
  } = layout;
  const {
    borderRightColor,
    borderRightStyle,
    borderRightWidth,
    borderTopWidth,
    borderBottomWidth
  } = style;
  const c0 = rbr * (1.0 - KAPPA);
  const c1 = rtr * (1.0 - KAPPA);
  ctx.moveTo(left + width - rtr, top);
  ctx.bezierCurveTo(left + width - c1, top, left + width, top + c1, left + width, top + rtr);
  ctx.lineTo(left + width, top + height - rbr);
  ctx.bezierCurveTo(left + width, top + height - c0, left + width - c0, top + height, left + width - rbr, top + height);
  ctx.strokeColor(borderRightColor);
  ctx.lineWidth(Math.max(borderRightWidth, borderTopWidth, borderBottomWidth) * 2);
  if (borderRightStyle === 'dashed') {
    ctx.dash(borderRightWidth * 2, {
      space: borderRightWidth * 1.2
    });
  } else if (borderRightStyle === 'dotted') {
    ctx.dash(borderRightWidth, {
      space: borderRightWidth * 1.2
    });
  }
  ctx.stroke();
  ctx.undash();
};
const clipBorderBottom = (ctx, layout, style, rbl, rbr) => {
  const {
    top,
    left,
    width,
    height
  } = layout;
  const {
    borderBottomWidth,
    borderRightWidth,
    borderLeftWidth
  } = style;

  // Clip outer top border edge
  ctx.moveTo(left + width - rbr, top + height);
  ctx.lineTo(left + rbl, top + height);

  // Ellipse coefficients outer top right cap
  const c0 = rbl * (1.0 - KAPPA);

  // Clip outer top right cap
  ctx.bezierCurveTo(left + c0, top + height, left, top + height - c0, left, top + height - rbl);

  // Move up in case the margin exceedes the radius
  const bottomLeftYCoord = top + height - Math.max(borderBottomWidth, rbl);
  ctx.lineTo(left, bottomLeftYCoord);

  // Clip inner bottom left cap
  ctx.lineTo(left + borderLeftWidth, bottomLeftYCoord);

  // Ellipse coefficients inner top right cap
  const innerBottomLeftRadiusX = Math.max(rbl - borderLeftWidth, 0);
  const innerBottomLeftRadiusY = Math.max(rbl - borderBottomWidth, 0);
  const c1 = innerBottomLeftRadiusX * (1.0 - KAPPA);
  const c2 = innerBottomLeftRadiusY * (1.0 - KAPPA);

  // Clip inner bottom left cap
  ctx.bezierCurveTo(left + borderLeftWidth, top + height - borderBottomWidth - c2, left + borderLeftWidth + c1, top + height - borderBottomWidth, left + borderLeftWidth + innerBottomLeftRadiusX, top + height - borderBottomWidth);

  // Clip inner bottom border edge
  ctx.lineTo(left + width - Math.max(rbr, borderRightWidth), top + height - borderBottomWidth);

  // Ellipse coefficients inner top left cap
  const innerBottomRightRadiusX = Math.max(rbr - borderRightWidth, 0);
  const innerBottomRightRadiusY = Math.max(rbr - borderBottomWidth, 0);
  const c3 = innerBottomRightRadiusX * (1.0 - KAPPA);
  const c4 = innerBottomRightRadiusY * (1.0 - KAPPA);
  const bottomRightYCoord = top + height - Math.max(borderBottomWidth, rbr);

  // Clip inner top left cap
  ctx.bezierCurveTo(left + width - borderRightWidth - c3, top + height - borderBottomWidth, left + width - borderRightWidth, top + height - borderBottomWidth - c4, left + width - borderRightWidth, bottomRightYCoord);
  ctx.lineTo(left + width, bottomRightYCoord);

  // Move down in case the margin exceedes the radius
  ctx.lineTo(left + width, top + height - rbr);

  // Ellipse coefficients outer top left cap
  const c5 = rbr * (1.0 - KAPPA);

  // Clip outer top left cap
  ctx.bezierCurveTo(left + width, top + height - c5, left + width - c5, top + height, left + width - rbr, top + height);
  ctx.closePath();
  ctx.clip();

  // Clip border bottom cap joins
  if (borderRightWidth) {
    const brSlope = borderBottomWidth / borderRightWidth;
    ctx.moveTo(left + width / 2, brSlope * (-width / 2) + top + height);
    ctx.lineTo(left + width, top + height);
    ctx.lineTo(left, top + height);
    ctx.lineTo(left, top);
    ctx.closePath();
    ctx.clip();
  }
  if (borderLeftWidth) {
    const trSlope = -borderBottomWidth / borderLeftWidth;
    ctx.moveTo(left + width / 2, trSlope * (width / 2) + top + height);
    ctx.lineTo(left, top + height);
    ctx.lineTo(left + width, top + height);
    ctx.lineTo(left + width, top);
    ctx.closePath();
    ctx.clip();
  }
};
const fillBorderBottom = (ctx, layout, style, rbl, rbr) => {
  const {
    top,
    left,
    width,
    height
  } = layout;
  const {
    borderBottomColor,
    borderBottomStyle,
    borderBottomWidth,
    borderRightWidth,
    borderLeftWidth
  } = style;
  const c0 = rbl * (1.0 - KAPPA);
  const c1 = rbr * (1.0 - KAPPA);
  ctx.moveTo(left + width, top + height - rbr);
  ctx.bezierCurveTo(left + width, top + height - c1, left + width - c1, top + height, left + width - rbr, top + height);
  ctx.lineTo(left + rbl, top + height);
  ctx.bezierCurveTo(left + c0, top + height, left, top + height - c0, left, top + height - rbl);
  ctx.strokeColor(borderBottomColor);
  ctx.lineWidth(Math.max(borderBottomWidth, borderRightWidth, borderLeftWidth) * 2);
  if (borderBottomStyle === 'dashed') {
    ctx.dash(borderBottomWidth * 2, {
      space: borderBottomWidth * 1.2
    });
  } else if (borderBottomStyle === 'dotted') {
    ctx.dash(borderBottomWidth, {
      space: borderBottomWidth * 1.2
    });
  }
  ctx.stroke();
  ctx.undash();
};
const clipBorderLeft = (ctx, layout, style, rbl, rtl) => {
  const {
    top,
    left,
    width,
    height
  } = layout;
  const {
    borderTopWidth,
    borderLeftWidth,
    borderBottomWidth
  } = style;

  // Clip outer left border edge
  ctx.moveTo(left, top + height - rbl);
  ctx.lineTo(left, top + rtl);

  // Ellipse coefficients outer top left cap
  const c0 = rtl * (1.0 - KAPPA);

  // Clip outer top left cap
  ctx.bezierCurveTo(left, top + c0, left + c0, top, left + rtl, top);

  // Move right in case the margin exceedes the radius
  const topLeftCoordX = left + Math.max(borderLeftWidth, rtl);
  ctx.lineTo(topLeftCoordX, top);

  // Clip inner top left cap
  ctx.lineTo(topLeftCoordX, top + borderTopWidth);

  // Ellipse coefficients inner top left cap
  const innerTopLeftRadiusX = Math.max(rtl - borderLeftWidth, 0);
  const innerTopLeftRadiusY = Math.max(rtl - borderTopWidth, 0);
  const c1 = innerTopLeftRadiusX * (1.0 - KAPPA);
  const c2 = innerTopLeftRadiusY * (1.0 - KAPPA);

  // Clip inner top right cap
  ctx.bezierCurveTo(left + borderLeftWidth + c1, top + borderTopWidth, left + borderLeftWidth, top + borderTopWidth + c2, left + borderLeftWidth, top + Math.max(rtl, borderTopWidth));

  // Clip inner left border edge
  ctx.lineTo(left + borderLeftWidth, top + height - Math.max(rbl, borderBottomWidth));

  // Ellipse coefficients inner bottom left cap
  const innerBottomLeftRadiusX = Math.max(rbl - borderLeftWidth, 0);
  const innerBottomLeftRadiusY = Math.max(rbl - borderBottomWidth, 0);
  const c3 = innerBottomLeftRadiusX * (1.0 - KAPPA);
  const c4 = innerBottomLeftRadiusY * (1.0 - KAPPA);
  const bottomLeftXCoord = left + Math.max(rbl, borderLeftWidth);

  // Clip inner top left cap
  ctx.bezierCurveTo(left + borderLeftWidth, top + height - borderBottomWidth - c4, left + borderLeftWidth + c3, top + height - borderBottomWidth, bottomLeftXCoord, top + height - borderBottomWidth);
  ctx.lineTo(bottomLeftXCoord, top + height);

  // Move left in case the margin exceedes the radius
  ctx.lineTo(left + rbl, top + height);

  // Ellipse coefficients outer top right cap
  const c5 = rbl * (1.0 - KAPPA);

  // Clip outer top right cap
  ctx.bezierCurveTo(left + c5, top + height, left, top + height - c5, left, top + height - rbl);
  ctx.closePath();
  ctx.clip();

  // Clip border right cap joins
  if (borderBottomWidth) {
    const trSlope = -borderBottomWidth / borderLeftWidth;
    ctx.moveTo(left + width / 2, trSlope * (width / 2) + top + height);
    ctx.lineTo(left, top + height);
    ctx.lineTo(left, top);
    ctx.lineTo(left + width, top);
    ctx.closePath();
    ctx.clip();
  }
  if (borderBottomWidth) {
    const trSlope = -borderTopWidth / borderLeftWidth;
    ctx.moveTo(left + width / 2, trSlope * (-width / 2) + top);
    ctx.lineTo(left, top);
    ctx.lineTo(left, top + height);
    ctx.lineTo(left + width, top + height);
    ctx.closePath();
    ctx.clip();
  }
};
const fillBorderLeft = (ctx, layout, style, rbl, rtl) => {
  const {
    top,
    left,
    height
  } = layout;
  const {
    borderLeftColor,
    borderLeftStyle,
    borderLeftWidth,
    borderTopWidth,
    borderBottomWidth
  } = style;
  const c0 = rbl * (1.0 - KAPPA);
  const c1 = rtl * (1.0 - KAPPA);
  ctx.moveTo(left + rbl, top + height);
  ctx.bezierCurveTo(left + c0, top + height, left, top + height - c0, left, top + height - rbl);
  ctx.lineTo(left, top + rtl);
  ctx.bezierCurveTo(left, top + c1, left + c1, top, left + rtl, top);
  ctx.strokeColor(borderLeftColor);
  ctx.lineWidth(Math.max(borderLeftWidth, borderTopWidth, borderBottomWidth) * 2);
  if (borderLeftStyle === 'dashed') {
    ctx.dash(borderLeftWidth * 2, {
      space: borderLeftWidth * 1.2
    });
  } else if (borderLeftStyle === 'dotted') {
    ctx.dash(borderLeftWidth, {
      space: borderLeftWidth * 1.2
    });
  }
  ctx.stroke();
  ctx.undash();
};
const shouldRenderBorders = node => node.box && (node.box.borderTopWidth || node.box.borderRightWidth || node.box.borderBottomWidth || node.box.borderLeftWidth);
const renderBorders = (ctx, node) => {
  if (!shouldRenderBorders(node)) return;
  const {
    width,
    height,
    borderTopWidth,
    borderLeftWidth,
    borderRightWidth,
    borderBottomWidth
  } = node.box;
  const {
    opacity,
    borderTopLeftRadius = 0,
    borderTopRightRadius = 0,
    borderBottomLeftRadius = 0,
    borderBottomRightRadius = 0,
    borderTopColor = 'black',
    borderTopStyle = 'solid',
    borderLeftColor = 'black',
    borderLeftStyle = 'solid',
    borderRightColor = 'black',
    borderRightStyle = 'solid',
    borderBottomColor = 'black',
    borderBottomStyle = 'solid'
  } = node.style;
  const style = {
    borderTopColor,
    borderTopWidth,
    borderTopStyle,
    borderLeftColor,
    borderLeftWidth,
    borderLeftStyle,
    borderRightColor,
    borderRightWidth,
    borderRightStyle,
    borderBottomColor,
    borderBottomWidth,
    borderBottomStyle,
    borderTopLeftRadius,
    borderTopRightRadius,
    borderBottomLeftRadius,
    borderBottomRightRadius
  };
  const rtr = Math.min(borderTopRightRadius, 0.5 * width, 0.5 * height);
  const rtl = Math.min(borderTopLeftRadius, 0.5 * width, 0.5 * height);
  const rbr = Math.min(borderBottomRightRadius, 0.5 * width, 0.5 * height);
  const rbl = Math.min(borderBottomLeftRadius, 0.5 * width, 0.5 * height);
  ctx.save();
  ctx.strokeOpacity(opacity);
  if (borderTopWidth) {
    ctx.save();
    clipBorderTop(ctx, node.box, style, rtr, rtl);
    fillBorderTop(ctx, node.box, style, rtr, rtl);
    ctx.restore();
  }
  if (borderRightWidth) {
    ctx.save();
    clipBorderRight(ctx, node.box, style, rtr, rbr);
    fillBorderRight(ctx, node.box, style, rtr, rbr);
    ctx.restore();
  }
  if (borderBottomWidth) {
    ctx.save();
    clipBorderBottom(ctx, node.box, style, rbl, rbr);
    fillBorderBottom(ctx, node.box, style, rbl, rbr);
    ctx.restore();
  }
  if (borderLeftWidth) {
    ctx.save();
    clipBorderLeft(ctx, node.box, style, rbl, rtl);
    fillBorderLeft(ctx, node.box, style, rbl, rtl);
    ctx.restore();
  }
  ctx.restore();
};
const drawBackground = (ctx, node) => {
  var _node$style;
  const {
    top,
    left,
    width,
    height
  } = node.box;
  const color = parseColor(node.style.backgroundColor);
  const nodeOpacity = isNil((_node$style = node.style) === null || _node$style === void 0 ? void 0 : _node$style.opacity) ? 1 : node.style.opacity;
  const opacity = Math.min(color.opacity, nodeOpacity);
  ctx.fillOpacity(opacity).fillColor(color.value).rect(left, top, width, height).fill();
};
const renderBackground = (ctx, node) => {
  var _node$style2;
  const hasBackground = !!node.box && !!((_node$style2 = node.style) !== null && _node$style2 !== void 0 && _node$style2.backgroundColor);
  if (hasBackground) {
    ctx.save();
    clipNode(ctx, node);
    drawBackground(ctx, node);
    ctx.restore();
  }
};
const isSrcId = value => /^#.+/.test(value);
const setLink = (ctx, node) => {
  const props = node.props || {};
  const {
    top,
    left,
    width,
    height
  } = node.box;
  const src = props.src || props.href;
  if (src) {
    const isId = isSrcId(src);
    const method = isId ? 'goTo' : 'link';
    const value = isId ? src.slice(1) : src;
    ctx[method](left, top, width, height, value);
  }
};
const setDestination = (ctx, node) => {
  var _node$props;
  if ((_node$props = node.props) !== null && _node$props !== void 0 && _node$props.id) {
    ctx.addNamedDestination(node.props.id, 'XYZ', null, node.box.top, null);
  }
};
const isRecursiveNode = node => node.type !== Text && node.type !== Svg;
const renderChildren = (ctx, node, options) => {
  ctx.save();
  if (node.box) {
    ctx.translate(node.box.left, node.box.top);
  }
  const children = node.children || [];
  const renderChild = child => renderNode(ctx, child, options);
  children.forEach(renderChild);
  ctx.restore();
};
const renderFns = {
  [Text]: renderText,
  [Note]: renderNote,
  [Image]: renderImage,
  [Canvas]: renderCanvas,
  [Svg]: renderSvg,
  [Link]: setLink
};
const renderNode = (ctx, node, options) => {
  var _node$style;
  const overflowHidden = ((_node$style = node.style) === null || _node$style === void 0 ? void 0 : _node$style.overflow) === 'hidden';
  const shouldRenderChildren = isRecursiveNode(node);
  if (node.type === Page) renderPage(ctx, node);
  ctx.save();
  if (overflowHidden) clipNode(ctx, node);
  applyTransformations(ctx, node);
  renderBackground(ctx, node);
  renderBorders(ctx, node);
  const renderFn = renderFns[node.type];
  if (renderFn) renderFn(ctx, node, options);
  if (shouldRenderChildren) renderChildren(ctx, node, options);
  setDestination(ctx, node);
  renderDebug(ctx, node);
  ctx.restore();
};

/* eslint-disable no-param-reassign */

const addNodeBookmark = (ctx, node, pageNumber, registry) => {
  var _node$props;
  const bookmark = (_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.bookmark;
  if (bookmark) {
    const {
      title,
      parent,
      expanded,
      zoom,
      fit
    } = bookmark;
    const outline = registry[parent] || ctx.outline;
    const top = bookmark.top || node.box.top;
    const left = bookmark.left || node.box.left;
    const instance = outline.addItem(title, {
      pageNumber,
      expanded,
      top,
      left,
      zoom,
      fit
    });
    registry[bookmark.ref] = instance;
  }
  if (!node.children) return;
  node.children.forEach(child => addNodeBookmark(ctx, child, pageNumber, registry));
};
const addBookmarks = (ctx, root) => {
  const registry = {};
  const pages = root.children || [];
  pages.forEach((page, i) => {
    addNodeBookmark(ctx, page, i, registry);
  });
};
const lib_render = (ctx, doc) => {
  const pages = doc.children || [];
  const options = {
    imageCache: new Map()
  };
  pages.forEach(page => renderNode(ctx, page, options));
  addBookmarks(ctx, doc);
  ctx.end();
  return ctx;
};

// EXTERNAL MODULE: ./node_modules/pako/lib/zlib/zstream.js
var zstream = __webpack_require__(7217);
// EXTERNAL MODULE: ./node_modules/pako/lib/zlib/deflate.js
var deflate = __webpack_require__(5312);
// EXTERNAL MODULE: ./node_modules/pako/lib/zlib/inflate.js
var inflate = __webpack_require__(7900);
// EXTERNAL MODULE: ./node_modules/pako/lib/zlib/constants.js
var zlib_constants = __webpack_require__(5934);
// EXTERNAL MODULE: ./node_modules/crypto-js/md5.js
var md5 = __webpack_require__(6475);
// EXTERNAL MODULE: ./node_modules/jay-peg/src/index.js + 11 modules
var src = __webpack_require__(4871);
;// ./node_modules/@react-pdf/png-js/lib/png-js.browser.js
var global$1 = typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {};
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var inited = false;
function init() {
  inited = true;
  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
  for (var i = 0, len = code.length; i < len; ++i) {
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
  }
  revLookup['-'.charCodeAt(0)] = 62;
  revLookup['_'.charCodeAt(0)] = 63;
}
function toByteArray(b64) {
  if (!inited) {
    init();
  }
  var i, j, l, tmp, placeHolders, arr;
  var len = b64.length;
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4');
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

  // base64 is 4/3 + up to two characters of the original data
  arr = new Arr(len * 3 / 4 - placeHolders);

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len;
  var L = 0;
  for (i = 0, j = 0; i < l; i += 4, j += 3) {
    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
    arr[L++] = tmp >> 16 & 0xFF;
    arr[L++] = tmp >> 8 & 0xFF;
    arr[L++] = tmp & 0xFF;
  }
  if (placeHolders === 2) {
    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
    arr[L++] = tmp & 0xFF;
  } else if (placeHolders === 1) {
    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
    arr[L++] = tmp >> 8 & 0xFF;
    arr[L++] = tmp & 0xFF;
  }
  return arr;
}
function tripletToBase64(num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}
function encodeChunk(uint8, start, end) {
  var tmp;
  var output = [];
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
    output.push(tripletToBase64(tmp));
  }
  return output.join('');
}
function fromByteArray(uint8) {
  if (!inited) {
    init();
  }
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
  var output = '';
  var parts = [];
  var maxChunkLength = 16383; // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    output += lookup[tmp >> 2];
    output += lookup[tmp << 4 & 0x3F];
    output += '==';
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    output += lookup[tmp >> 10];
    output += lookup[tmp >> 4 & 0x3F];
    output += lookup[tmp << 2 & 0x3F];
    output += '=';
  }
  parts.push(output);
  return parts.join('');
}
function read(buffer, offset, isLE, mLen, nBytes) {
  var e, m;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i = isLE ? nBytes - 1 : 0;
  var d = isLE ? -1 : 1;
  var s = buffer[offset + i];
  i += d;
  e = s & (1 << -nBits) - 1;
  s >>= -nBits;
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}
  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}
  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : (s ? -1 : 1) * Infinity;
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
}
function write(buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
  var i = isLE ? 0 : nBytes - 1;
  var d = isLE ? 1 : -1;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  value = Math.abs(value);
  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }
    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }
  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}
  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}
  buffer[offset + i - d] |= s * 128;
}
var png_js_browser_toString = {}.toString;
var isArray$1 = Array.isArray || function (arr) {
  return png_js_browser_toString.call(arr) == '[object Array]';
};

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

var INSPECT_MAX_BYTES = 50;

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined ? global$1.TYPED_ARRAY_SUPPORT : true;

/*
 * Export kMaxLength after typed array support is determined.
 */
var _kMaxLength = kMaxLength();
function kMaxLength() {
  return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
}
function createBuffer(that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length');
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length);
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length);
    }
    that.length = length;
  }
  return that;
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer(arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length);
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error('If encoding is specified then the first argument must be a string');
    }
    return allocUnsafe(this, arg);
  }
  return from(this, arg, encodingOrOffset, length);
}
Buffer.poolSize = 8192; // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype;
  return arr;
};
function from(that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number');
  }
  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length);
  }
  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset);
  }
  return fromObject(that, value);
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length);
};
if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype;
  Buffer.__proto__ = Uint8Array;
  if (typeof Symbol !== 'undefined' && Symbol.species && Buffer[Symbol.species] === Buffer) ;
}
function assertSize(size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number');
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative');
  }
}
function alloc(that, size, fill, encoding) {
  assertSize(size);
  if (size <= 0) {
    return createBuffer(that, size);
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
  }
  return createBuffer(that, size);
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding);
};
function allocUnsafe(that, size) {
  assertSize(size);
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0;
    }
  }
  return that;
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size);
};
function fromString(that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8';
  }
  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding');
  }
  var length = byteLength(string, encoding) | 0;
  that = createBuffer(that, length);
  var actual = that.write(string, encoding);
  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual);
  }
  return that;
}
function fromArrayLike(that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0;
  that = createBuffer(that, length);
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255;
  }
  return that;
}
function fromArrayBuffer(that, array, byteOffset, length) {
  array.byteLength; // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds');
  }
  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds');
  }
  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array);
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset);
  } else {
    array = new Uint8Array(array, byteOffset, length);
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array;
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array);
  }
  return that;
}
function fromObject(that, obj) {
  if (internalIsBuffer(obj)) {
    var len = checked(obj.length) | 0;
    that = createBuffer(that, len);
    if (that.length === 0) {
      return that;
    }
    obj.copy(that, 0, 0, len);
    return that;
  }
  if (obj) {
    if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0);
      }
      return fromArrayLike(that, obj);
    }
    if (obj.type === 'Buffer' && isArray$1(obj.data)) {
      return fromArrayLike(that, obj.data);
    }
  }
  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
}
function checked(length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');
  }
  return length | 0;
}
function SlowBuffer(length) {
  if (+length != length) {
    // eslint-disable-line eqeqeq
    length = 0;
  }
  return Buffer.alloc(+length);
}
Buffer.isBuffer = isBuffer$1;
function internalIsBuffer(b) {
  return !!(b != null && b._isBuffer);
}
Buffer.compare = function compare(a, b) {
  if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
    throw new TypeError('Arguments must be Buffers');
  }
  if (a === b) return 0;
  var x = a.length;
  var y = b.length;
  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }
  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
};
Buffer.isEncoding = function isEncoding(encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true;
    default:
      return false;
  }
};
Buffer.concat = function concat(list, length) {
  if (!isArray$1(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers');
  }
  if (list.length === 0) {
    return Buffer.alloc(0);
  }
  var i;
  if (length === undefined) {
    length = 0;
    for (i = 0; i < list.length; ++i) {
      length += list[i].length;
    }
  }
  var buffer = Buffer.allocUnsafe(length);
  var pos = 0;
  for (i = 0; i < list.length; ++i) {
    var buf = list[i];
    if (!internalIsBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }
    buf.copy(buffer, pos);
    pos += buf.length;
  }
  return buffer;
};
function byteLength(string, encoding) {
  if (internalIsBuffer(string)) {
    return string.length;
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength;
  }
  if (typeof string !== 'string') {
    string = '' + string;
  }
  var len = string.length;
  if (len === 0) return 0;

  // Use a for loop to avoid recursion
  var loweredCase = false;
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len;
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length;
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2;
      case 'hex':
        return len >>> 1;
      case 'base64':
        return base64ToBytes(string).length;
      default:
        if (loweredCase) return utf8ToBytes(string).length; // assume utf8
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
}
Buffer.byteLength = byteLength;
function slowToString(encoding, start, end) {
  var loweredCase = false;

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0;
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return '';
  }
  if (end === undefined || end > this.length) {
    end = this.length;
  }
  if (end <= 0) {
    return '';
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0;
  start >>>= 0;
  if (end <= start) {
    return '';
  }
  if (!encoding) encoding = 'utf8';
  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end);
      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end);
      case 'ascii':
        return asciiSlice(this, start, end);
      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end);
      case 'base64':
        return base64Slice(this, start, end);
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end);
      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = (encoding + '').toLowerCase();
        loweredCase = true;
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true;
function swap(b, n, m) {
  var i = b[n];
  b[n] = b[m];
  b[m] = i;
}
Buffer.prototype.swap16 = function swap16() {
  var len = this.length;
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits');
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1);
  }
  return this;
};
Buffer.prototype.swap32 = function swap32() {
  var len = this.length;
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits');
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3);
    swap(this, i + 1, i + 2);
  }
  return this;
};
Buffer.prototype.swap64 = function swap64() {
  var len = this.length;
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits');
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7);
    swap(this, i + 1, i + 6);
    swap(this, i + 2, i + 5);
    swap(this, i + 3, i + 4);
  }
  return this;
};
Buffer.prototype.toString = function toString() {
  var length = this.length | 0;
  if (length === 0) return '';
  if (arguments.length === 0) return utf8Slice(this, 0, length);
  return slowToString.apply(this, arguments);
};
Buffer.prototype.equals = function equals(b) {
  if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer');
  if (this === b) return true;
  return Buffer.compare(this, b) === 0;
};
Buffer.prototype.inspect = function inspect() {
  var str = '';
  var max = INSPECT_MAX_BYTES;
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
    if (this.length > max) str += ' ... ';
  }
  return '<Buffer ' + str + '>';
};
Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
  if (!internalIsBuffer(target)) {
    throw new TypeError('Argument must be a Buffer');
  }
  if (start === undefined) {
    start = 0;
  }
  if (end === undefined) {
    end = target ? target.length : 0;
  }
  if (thisStart === undefined) {
    thisStart = 0;
  }
  if (thisEnd === undefined) {
    thisEnd = this.length;
  }
  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index');
  }
  if (thisStart >= thisEnd && start >= end) {
    return 0;
  }
  if (thisStart >= thisEnd) {
    return -1;
  }
  if (start >= end) {
    return 1;
  }
  start >>>= 0;
  end >>>= 0;
  thisStart >>>= 0;
  thisEnd >>>= 0;
  if (this === target) return 0;
  var x = thisEnd - thisStart;
  var y = end - start;
  var len = Math.min(x, y);
  var thisCopy = this.slice(thisStart, thisEnd);
  var targetCopy = target.slice(start, end);
  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i];
      y = targetCopy[i];
      break;
    }
  }
  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
};

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1;

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset;
    byteOffset = 0;
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff;
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000;
  }
  byteOffset = +byteOffset; // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
  if (byteOffset >= buffer.length) {
    if (dir) return -1;else byteOffset = buffer.length - 1;
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0;else return -1;
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding);
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (internalIsBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1;
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
  } else if (typeof val === 'number') {
    val = val & 0xFF; // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
      }
    }
    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
  }
  throw new TypeError('val must be string, number or Buffer');
}
function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
  var indexSize = 1;
  var arrLength = arr.length;
  var valLength = val.length;
  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase();
    if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1;
      }
      indexSize = 2;
      arrLength /= 2;
      valLength /= 2;
      byteOffset /= 2;
    }
  }
  function read(buf, i) {
    if (indexSize === 1) {
      return buf[i];
    } else {
      return buf.readUInt16BE(i * indexSize);
    }
  }
  var i;
  if (dir) {
    var foundIndex = -1;
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i;
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
      } else {
        if (foundIndex !== -1) i -= i - foundIndex;
        foundIndex = -1;
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
    for (i = byteOffset; i >= 0; i--) {
      var found = true;
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false;
          break;
        }
      }
      if (found) return i;
    }
  }
  return -1;
}
Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1;
};
Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function hexWrite(buf, string, offset, length) {
  offset = Number(offset) || 0;
  var remaining = buf.length - offset;
  if (!length) {
    length = remaining;
  } else {
    length = Number(length);
    if (length > remaining) {
      length = remaining;
    }
  }

  // must be an even number of digits
  var strLen = string.length;
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');
  if (length > strLen / 2) {
    length = strLen / 2;
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16);
    if (isNaN(parsed)) return i;
    buf[offset + i] = parsed;
  }
  return i;
}
function utf8Write(buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function asciiWrite(buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length);
}
function latin1Write(buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length);
}
function base64Write(buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length);
}
function ucs2Write(buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
Buffer.prototype.write = function write(string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8';
    length = this.length;
    offset = 0;
    // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset;
    length = this.length;
    offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0;
    if (isFinite(length)) {
      length = length | 0;
      if (encoding === undefined) encoding = 'utf8';
    } else {
      encoding = length;
      length = undefined;
    }
    // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
  }
  var remaining = this.length - offset;
  if (length === undefined || length > remaining) length = remaining;
  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds');
  }
  if (!encoding) encoding = 'utf8';
  var loweredCase = false;
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length);
      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length);
      case 'ascii':
        return asciiWrite(this, string, offset, length);
      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length);
      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length);
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length);
      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
};
Buffer.prototype.toJSON = function toJSON() {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  };
};
function base64Slice(buf, start, end) {
  if (start === 0 && end === buf.length) {
    return fromByteArray(buf);
  } else {
    return fromByteArray(buf.slice(start, end));
  }
}
function utf8Slice(buf, start, end) {
  end = Math.min(buf.length, end);
  var res = [];
  var i = start;
  while (i < end) {
    var firstByte = buf[i];
    var codePoint = null;
    var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint;
      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte;
          }
          break;
        case 2:
          secondByte = buf[i + 1];
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint;
            }
          }
          break;
        case 3:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint;
            }
          }
          break;
        case 4:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          fourthByte = buf[i + 3];
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint;
            }
          }
      }
    }
    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD;
      bytesPerSequence = 1;
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000;
      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
      codePoint = 0xDC00 | codePoint & 0x3FF;
    }
    res.push(codePoint);
    i += bytesPerSequence;
  }
  return decodeCodePointsArray(res);
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000;
function decodeCodePointsArray(codePoints) {
  var len = codePoints.length;
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = '';
  var i = 0;
  while (i < len) {
    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
  }
  return res;
}
function asciiSlice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);
  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F);
  }
  return ret;
}
function latin1Slice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);
  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i]);
  }
  return ret;
}
function hexSlice(buf, start, end) {
  var len = buf.length;
  if (!start || start < 0) start = 0;
  if (!end || end < 0 || end > len) end = len;
  var out = '';
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i]);
  }
  return out;
}
function utf16leSlice(buf, start, end) {
  var bytes = buf.slice(start, end);
  var res = '';
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
  }
  return res;
}
Buffer.prototype.slice = function slice(start, end) {
  var len = this.length;
  start = ~~start;
  end = end === undefined ? len : ~~end;
  if (start < 0) {
    start += len;
    if (start < 0) start = 0;
  } else if (start > len) {
    start = len;
  }
  if (end < 0) {
    end += len;
    if (end < 0) end = 0;
  } else if (end > len) {
    end = len;
  }
  if (end < start) end = start;
  var newBuf;
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end);
    newBuf.__proto__ = Buffer.prototype;
  } else {
    var sliceLen = end - start;
    newBuf = new Buffer(sliceLen, undefined);
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start];
    }
  }
  return newBuf;
};

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset(offset, ext, length) {
  if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
}
Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var val = this[offset];
  var mul = 1;
  var i = 0;
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }
  return val;
};
Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length);
  }
  var val = this[offset + --byteLength];
  var mul = 1;
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul;
  }
  return val;
};
Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  return this[offset];
};
Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] | this[offset + 1] << 8;
};
Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] << 8 | this[offset + 1];
};
Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};
Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var val = this[offset];
  var mul = 1;
  var i = 0;
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }
  mul *= 0x80;
  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
  return val;
};
Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var i = byteLength;
  var mul = 1;
  var val = this[offset + --i];
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul;
  }
  mul *= 0x80;
  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
  return val;
};
Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  if (!(this[offset] & 0x80)) return this[offset];
  return (0xff - this[offset] + 1) * -1;
};
Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset] | this[offset + 1] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset + 1] | this[offset] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return read(this, offset, true, 23, 4);
};
Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return read(this, offset, false, 23, 4);
};
Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return read(this, offset, true, 52, 8);
};
Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return read(this, offset, false, 52, 8);
};
function checkInt(buf, value, offset, ext, max, min) {
  if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
}
Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }
  var mul = 1;
  var i = 0;
  this[offset] = value & 0xFF;
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }
  return offset + byteLength;
};
Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }
  var i = byteLength - 1;
  var mul = 1;
  this[offset + i] = value & 0xFF;
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }
  return offset + byteLength;
};
Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  this[offset] = value & 0xff;
  return offset + 1;
};
function objectWriteUInt16(buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1;
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
  }
}
Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
  } else {
    objectWriteUInt16(this, value, offset, true);
  }
  return offset + 2;
};
Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
  } else {
    objectWriteUInt16(this, value, offset, false);
  }
  return offset + 2;
};
function objectWriteUInt32(buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1;
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;
  }
}
Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, true);
  }
  return offset + 4;
};
Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, false);
  }
  return offset + 4;
};
Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);
    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }
  var i = 0;
  var mul = 1;
  var sub = 0;
  this[offset] = value & 0xFF;
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }
  return offset + byteLength;
};
Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);
    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }
  var i = byteLength - 1;
  var mul = 1;
  var sub = 0;
  this[offset + i] = value & 0xFF;
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }
  return offset + byteLength;
};
Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  if (value < 0) value = 0xff + value + 1;
  this[offset] = value & 0xff;
  return offset + 1;
};
Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
  } else {
    objectWriteUInt16(this, value, offset, true);
  }
  return offset + 2;
};
Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
  } else {
    objectWriteUInt16(this, value, offset, false);
  }
  return offset + 2;
};
Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
  } else {
    objectWriteUInt32(this, value, offset, true);
  }
  return offset + 4;
};
Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (value < 0) value = 0xffffffff + value + 1;
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, false);
  }
  return offset + 4;
};
function checkIEEE754(buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
  if (offset < 0) throw new RangeError('Index out of range');
}
function writeFloat(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4);
  }
  write(buf, value, offset, littleEndian, 23, 4);
  return offset + 4;
}
Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert);
};
Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert);
};
function writeDouble(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8);
  }
  write(buf, value, offset, littleEndian, 52, 8);
  return offset + 8;
}
Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert);
};
Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert);
};

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
  if (!start) start = 0;
  if (!end && end !== 0) end = this.length;
  if (targetStart >= target.length) targetStart = target.length;
  if (!targetStart) targetStart = 0;
  if (end > 0 && end < start) end = start;

  // Copy 0 bytes; we're done
  if (end === start) return 0;
  if (target.length === 0 || this.length === 0) return 0;

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds');
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');
  if (end < 0) throw new RangeError('sourceEnd out of bounds');

  // Are we oob?
  if (end > this.length) end = this.length;
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start;
  }
  var len = end - start;
  var i;
  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start];
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start];
    }
  } else {
    Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
  }
  return len;
};

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill(val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start;
      start = 0;
      end = this.length;
    } else if (typeof end === 'string') {
      encoding = end;
      end = this.length;
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0);
      if (code < 256) {
        val = code;
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string');
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding);
    }
  } else if (typeof val === 'number') {
    val = val & 255;
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index');
  }
  if (end <= start) {
    return this;
  }
  start = start >>> 0;
  end = end === undefined ? this.length : end >>> 0;
  if (!val) val = 0;
  var i;
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val;
    }
  } else {
    var bytes = internalIsBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());
    var len = bytes.length;
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len];
    }
  }
  return this;
};

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;
function base64clean(str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '');
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return '';
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '=';
  }
  return str;
}
function stringtrim(str) {
  if (str.trim) return str.trim();
  return str.replace(/^\s+|\s+$/g, '');
}
function toHex(n) {
  if (n < 16) return '0' + n.toString(16);
  return n.toString(16);
}
function utf8ToBytes(string, units) {
  units = units || Infinity;
  var codePoint;
  var length = string.length;
  var leadSurrogate = null;
  var bytes = [];
  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i);

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        }

        // valid lead
        leadSurrogate = codePoint;
        continue;
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        leadSurrogate = codePoint;
        continue;
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
    }
    leadSurrogate = null;

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break;
      bytes.push(codePoint);
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break;
      bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break;
      bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break;
      bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else {
      throw new Error('Invalid code point');
    }
  }
  return bytes;
}
function asciiToBytes(str) {
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
  }
  return byteArray;
}
function utf16leToBytes(str, units) {
  var c, hi, lo;
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break;
    c = str.charCodeAt(i);
    hi = c >> 8;
    lo = c % 256;
    byteArray.push(lo);
    byteArray.push(hi);
  }
  return byteArray;
}
function base64ToBytes(str) {
  return toByteArray(base64clean(str));
}
function blitBuffer(src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if (i + offset >= dst.length || i >= src.length) break;
    dst[i + offset] = src[i];
  }
  return i;
}
function isnan(val) {
  return val !== val; // eslint-disable-line no-self-compare
}

// the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
function isBuffer$1(obj) {
  return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj));
}
function isFastBuffer(obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer(obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0));
}
var _polyfillNode_buffer = /*#__PURE__*/Object.freeze({
  __proto__: null,
  Buffer: Buffer,
  INSPECT_MAX_BYTES: INSPECT_MAX_BYTES,
  SlowBuffer: SlowBuffer,
  isBuffer: isBuffer$1,
  kMaxLength: _kMaxLength
});

// shim for using process in browser
// based off https://github.com/defunctzombie/node-process/blob/master/browser.js

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}
var cachedSetTimeout = defaultSetTimout;
var cachedClearTimeout = defaultClearTimeout;
if (typeof global$1.setTimeout === 'function') {
  cachedSetTimeout = setTimeout;
}
if (typeof global$1.clearTimeout === 'function') {
  cachedClearTimeout = clearTimeout;
}
function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  }
  // if setTimeout wasn't available but was latter defined
  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }
  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}
function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  }
  // if clearTimeout wasn't available but was latter defined
  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }
  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}
var png_js_browser_queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }
  draining = false;
  if (currentQueue.length) {
    png_js_browser_queue = currentQueue.concat(png_js_browser_queue);
  } else {
    queueIndex = -1;
  }
  if (png_js_browser_queue.length) {
    drainQueue();
  }
}
function drainQueue() {
  if (draining) {
    return;
  }
  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = png_js_browser_queue.length;
  while (len) {
    currentQueue = png_js_browser_queue;
    png_js_browser_queue = [];
    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }
    queueIndex = -1;
    len = png_js_browser_queue.length;
  }
  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}
function nextTick(fun) {
  var args = new Array(arguments.length - 1);
  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }
  png_js_browser_queue.push(new Item(fun, args));
  if (png_js_browser_queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}
// v8 likes predictible objects
function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}
Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};
var title = 'browser';
var platform = 'browser';
var browser = true;
var env = {};
var argv = [];
var version = ''; // empty string to avoid regexp issues
var versions = {};
var release = {};
var config = {};
function png_js_browser_noop() {}
var on = png_js_browser_noop;
var addListener = png_js_browser_noop;
var once = png_js_browser_noop;
var off = png_js_browser_noop;
var removeListener = png_js_browser_noop;
var removeAllListeners = png_js_browser_noop;
var emit = png_js_browser_noop;
function binding$1(name) {
  throw new Error('process.binding is not supported');
}
function cwd() {
  return '/';
}
function chdir(dir) {
  throw new Error('process.chdir is not supported');
}
function umask() {
  return 0;
}

// from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
var performance = global$1.performance || {};
var performanceNow = performance.now || performance.mozNow || performance.msNow || performance.oNow || performance.webkitNow || function () {
  return new Date().getTime();
};

// generate timestamp or delta
// see http://nodejs.org/api/process.html#process_process_hrtime
function hrtime(previousTimestamp) {
  var clocktime = performanceNow.call(performance) * 1e-3;
  var seconds = Math.floor(clocktime);
  var nanoseconds = Math.floor(clocktime % 1 * 1e9);
  if (previousTimestamp) {
    seconds = seconds - previousTimestamp[0];
    nanoseconds = nanoseconds - previousTimestamp[1];
    if (nanoseconds < 0) {
      seconds--;
      nanoseconds += 1e9;
    }
  }
  return [seconds, nanoseconds];
}
var startTime = new Date();
function uptime() {
  var currentTime = new Date();
  var dif = currentTime - startTime;
  return dif / 1000;
}
var browser$1 = {
  nextTick: nextTick,
  title: title,
  browser: browser,
  env: env,
  argv: argv,
  version: version,
  versions: versions,
  on: on,
  addListener: addListener,
  once: once,
  off: off,
  removeListener: removeListener,
  removeAllListeners: removeAllListeners,
  emit: emit,
  binding: binding$1,
  cwd: cwd,
  chdir: chdir,
  umask: umask,
  hrtime: hrtime,
  platform: platform,
  release: release,
  config: config,
  uptime: uptime
};
function getDefaultExportFromCjs(x) {
  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}
function getAugmentedNamespace(n) {
  if (n.__esModule) return n;
  var f = n.default;
  if (typeof f == "function") {
    var a = function a() {
      if (this instanceof a) {
        return Reflect.construct(f, arguments, this.constructor);
      }
      return f.apply(this, arguments);
    };
    a.prototype = f.prototype;
  } else a = {};
  Object.defineProperty(a, '__esModule', {
    value: true
  });
  Object.keys(n).forEach(function (k) {
    var d = Object.getOwnPropertyDescriptor(n, k);
    Object.defineProperty(a, k, d.get ? d : {
      enumerable: true,
      get: function () {
        return n[k];
      }
    });
  });
  return a;
}
var lib = {};
var require$$0 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_buffer);
var domain;

// This constructor is used to store event handlers. Instantiating this is
// faster than explicitly calling `Object.create(null)` to get a "clean" empty
// object (tested with v8 v4.9).
function EventHandlers() {}
EventHandlers.prototype = Object.create(null);
function EventEmitter() {
  EventEmitter.init.call(this);
}

// nodejs oddity
// require('events') === require('events').EventEmitter
EventEmitter.EventEmitter = EventEmitter;
EventEmitter.usingDomains = false;
EventEmitter.prototype.domain = undefined;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;
EventEmitter.init = function () {
  this.domain = null;
  if (EventEmitter.usingDomains) {
    // if there is an active domain, then attach to it.
    if (domain.active) ;
  }
  if (!this._events || this._events === Object.getPrototypeOf(this)._events) {
    this._events = new EventHandlers();
    this._eventsCount = 0;
  }
  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || isNaN(n)) throw new TypeError('"n" argument must be a positive number');
  this._maxListeners = n;
  return this;
};
function $getMaxListeners(that) {
  if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}
EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return $getMaxListeners(this);
};

// These standalone emit* functions are used to optimize calling of event
// handlers for fast cases because emit() itself often has a variable number of
// arguments and can be deoptimized because of that. These functions always have
// the same number of arguments and thus do not get deoptimized, so the code
// inside them can execute faster.
function emitNone(handler, isFn, self) {
  if (isFn) handler.call(self);else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i) listeners[i].call(self);
  }
}
function emitOne(handler, isFn, self, arg1) {
  if (isFn) handler.call(self, arg1);else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i) listeners[i].call(self, arg1);
  }
}
function emitTwo(handler, isFn, self, arg1, arg2) {
  if (isFn) handler.call(self, arg1, arg2);else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i) listeners[i].call(self, arg1, arg2);
  }
}
function emitThree(handler, isFn, self, arg1, arg2, arg3) {
  if (isFn) handler.call(self, arg1, arg2, arg3);else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i) listeners[i].call(self, arg1, arg2, arg3);
  }
}
function emitMany(handler, isFn, self, args) {
  if (isFn) handler.apply(self, args);else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i) listeners[i].apply(self, args);
  }
}
EventEmitter.prototype.emit = function emit(type) {
  var er, handler, len, args, i, events, domain;
  var doError = type === 'error';
  events = this._events;
  if (events) doError = doError && events.error == null;else if (!doError) return false;
  domain = this.domain;

  // If there is no 'error' event listener then throw.
  if (doError) {
    er = arguments[1];
    if (domain) {
      if (!er) er = new Error('Uncaught, unspecified "error" event');
      er.domainEmitter = this;
      er.domain = domain;
      er.domainThrown = false;
      domain.emit('error', er);
    } else if (er instanceof Error) {
      throw er; // Unhandled 'error' event
    } else {
      // At least give some kind of context to the user
      var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
      err.context = er;
      throw err;
    }
    return false;
  }
  handler = events[type];
  if (!handler) return false;
  var isFn = typeof handler === 'function';
  len = arguments.length;
  switch (len) {
    // fast cases
    case 1:
      emitNone(handler, isFn, this);
      break;
    case 2:
      emitOne(handler, isFn, this, arguments[1]);
      break;
    case 3:
      emitTwo(handler, isFn, this, arguments[1], arguments[2]);
      break;
    case 4:
      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
      break;
    // slower
    default:
      args = new Array(len - 1);
      for (i = 1; i < len; i++) args[i - 1] = arguments[i];
      emitMany(handler, isFn, this, args);
  }
  return true;
};
function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;
  if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
  events = target._events;
  if (!events) {
    events = target._events = new EventHandlers();
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener) {
      target.emit('newListener', type, listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }
  if (!existing) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] = prepend ? [listener, existing] : [existing, listener];
    } else {
      // If we've already got an array, just append.
      if (prepend) {
        existing.unshift(listener);
      } else {
        existing.push(listener);
      }
    }

    // Check for listener leak
    if (!existing.warned) {
      m = $getMaxListeners(target);
      if (m && m > 0 && existing.length > m) {
        existing.warned = true;
        var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + type + ' listeners added. ' + 'Use emitter.setMaxListeners() to increase limit');
        w.name = 'MaxListenersExceededWarning';
        w.emitter = target;
        w.type = type;
        w.count = existing.length;
        emitWarning(w);
      }
    }
  }
  return target;
}
function emitWarning(e) {
  typeof console.warn === 'function' ? console.warn(e) : console.log(e);
}
EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};
EventEmitter.prototype.on = EventEmitter.prototype.addListener;
EventEmitter.prototype.prependListener = function prependListener(type, listener) {
  return _addListener(this, type, listener, true);
};
function _onceWrap(target, type, listener) {
  var fired = false;
  function g() {
    target.removeListener(type, g);
    if (!fired) {
      fired = true;
      listener.apply(target, arguments);
    }
  }
  g.listener = listener;
  return g;
}
EventEmitter.prototype.once = function once(type, listener) {
  if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
  this.on(type, _onceWrap(this, type, listener));
  return this;
};
EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
  if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
  this.prependListener(type, _onceWrap(this, type, listener));
  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function removeListener(type, listener) {
  var list, events, position, i, originalListener;
  if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
  events = this._events;
  if (!events) return this;
  list = events[type];
  if (!list) return this;
  if (list === listener || list.listener && list.listener === listener) {
    if (--this._eventsCount === 0) this._events = new EventHandlers();else {
      delete events[type];
      if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
    }
  } else if (typeof list !== 'function') {
    position = -1;
    for (i = list.length; i-- > 0;) {
      if (list[i] === listener || list[i].listener && list[i].listener === listener) {
        originalListener = list[i].listener;
        position = i;
        break;
      }
    }
    if (position < 0) return this;
    if (list.length === 1) {
      list[0] = undefined;
      if (--this._eventsCount === 0) {
        this._events = new EventHandlers();
        return this;
      } else {
        delete events[type];
      }
    } else {
      spliceOne(list, position);
    }
    if (events.removeListener) this.emit('removeListener', type, originalListener || listener);
  }
  return this;
};

// Alias for removeListener added in NodeJS 10.0
// https://nodejs.org/api/events.html#events_emitter_off_eventname_listener
EventEmitter.prototype.off = function (type, listener) {
  return this.removeListener(type, listener);
};
EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
  var listeners, events;
  events = this._events;
  if (!events) return this;

  // not listening for removeListener, no need to emit
  if (!events.removeListener) {
    if (arguments.length === 0) {
      this._events = new EventHandlers();
      this._eventsCount = 0;
    } else if (events[type]) {
      if (--this._eventsCount === 0) this._events = new EventHandlers();else delete events[type];
    }
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    var keys = Object.keys(events);
    for (var i = 0, key; i < keys.length; ++i) {
      key = keys[i];
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = new EventHandlers();
    this._eventsCount = 0;
    return this;
  }
  listeners = events[type];
  if (typeof listeners === 'function') {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    do {
      this.removeListener(type, listeners[listeners.length - 1]);
    } while (listeners[0]);
  }
  return this;
};
EventEmitter.prototype.listeners = function listeners(type) {
  var evlistener;
  var ret;
  var events = this._events;
  if (!events) ret = [];else {
    evlistener = events[type];
    if (!evlistener) ret = [];else if (typeof evlistener === 'function') ret = [evlistener.listener || evlistener];else ret = unwrapListeners(evlistener);
  }
  return ret;
};
EventEmitter.listenerCount = function (emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount$1.call(emitter, type);
  }
};
EventEmitter.prototype.listenerCount = listenerCount$1;
function listenerCount$1(type) {
  var events = this._events;
  if (events) {
    var evlistener = events[type];
    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener) {
      return evlistener.length;
    }
  }
  return 0;
}
EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
};

// About 1.5x faster than the two-arg version of Array#splice().
function spliceOne(list, index) {
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) list[i] = list[k];
  list.pop();
}
function arrayClone(arr, i) {
  var copy = new Array(i);
  while (i--) copy[i] = arr[i];
  return copy;
}
function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}
var inherits;
if (typeof Object.create === 'function') {
  inherits = function inherits(ctor, superCtor) {
    // implementation from standard node.js 'util' module
    ctor.super_ = superCtor;
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  inherits = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  };
}
var inherits$1 = inherits;
var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors(obj) {
  var keys = Object.keys(obj);
  var descriptors = {};
  for (var i = 0; i < keys.length; i++) {
    descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
  }
  return descriptors;
};
var formatRegExp = /%[sdj%]/g;
function format(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect$1(arguments[i]));
    }
    return objects.join(' ');
  }
  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function (x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s':
        return String(args[i++]);
      case '%d':
        return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect$1(x);
    }
  }
  return str;
}

// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
function deprecate(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global$1.process)) {
    return function () {
      return deprecate(fn, msg).apply(this, arguments);
    };
  }
  if (browser$1.noDeprecation === true) {
    return fn;
  }
  var warned = false;
  function deprecated() {
    if (!warned) {
      if (browser$1.throwDeprecation) {
        throw new Error(msg);
      } else if (browser$1.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }
  return deprecated;
}
var debugs = {};
var debugEnviron;
function debuglog(set) {
  if (isUndefined(debugEnviron)) debugEnviron = browser$1.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = 0;
      debugs[set] = function () {
        var msg = format.apply(null, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function () {};
    }
  }
  return debugs[set];
}

/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect$1(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    _extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}

// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect$1.colors = {
  'bold': [1, 22],
  'italic': [3, 23],
  'underline': [4, 24],
  'inverse': [7, 27],
  'white': [37, 39],
  'grey': [90, 39],
  'black': [30, 39],
  'blue': [34, 39],
  'cyan': [36, 39],
  'green': [32, 39],
  'magenta': [35, 39],
  'red': [31, 39],
  'yellow': [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect$1.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};
function stylizeWithColor(str, styleType) {
  var style = inspect$1.styles[styleType];
  if (style) {
    return '\u001b[' + inspect$1.colors[style][0] + 'm' + str + '\u001b[' + inspect$1.colors[style][1] + 'm';
  } else {
    return str;
  }
}
function stylizeNoColor(str, styleType) {
  return str;
}
function arrayToHash(array) {
  var hash = {};
  array.forEach(function (val, idx) {
    hash[val] = true;
  });
  return hash;
}
function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect && value && isFunction(value.inspect) &&
  // Filter out the util module, it's inspect function is special
  value.inspect !== inspect$1 &&
  // Also filter out any prototype objects using the circular check.
  !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);
  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }
  var base = '',
    array = false,
    braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }
  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }
  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }
  ctx.seen.push(value);
  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function (key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }
  ctx.seen.pop();
  return reduceToSingleString(output, base, braces);
}
function formatPrimitive(ctx, value) {
  if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value)) return ctx.stylize('' + value, 'number');
  if (isBoolean(value)) return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value)) return ctx.stylize('null', 'null');
}
function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}
function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (png_js_browser_hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function (key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
    }
  });
  return output;
}
function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || {
    value: value[key]
  };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!png_js_browser_hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function (line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function (line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }
  return name + ': ' + str;
}
function reduceToSingleString(output, base, braces) {
  var length = output.reduce(function (prev, cur) {
    if (cur.indexOf('\n') >= 0) ;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);
  if (length > 60) {
    return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
  }
  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
function isBoolean(arg) {
  return typeof arg === 'boolean';
}
function isNull(arg) {
  return arg === null;
}
function isNullOrUndefined(arg) {
  return arg == null;
}
function isNumber(arg) {
  return typeof arg === 'number';
}
function isString(arg) {
  return typeof arg === 'string';
}
function isSymbol(arg) {
  return typeof arg === 'symbol';
}
function isUndefined(arg) {
  return arg === void 0;
}
function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
function isError(e) {
  return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
}
function isFunction(arg) {
  return typeof arg === 'function';
}
function isPrimitive(arg) {
  return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' ||
  // ES6 symbol
  typeof arg === 'undefined';
}
function isBuffer(maybeBuf) {
  return Buffer.isBuffer(maybeBuf);
}
function objectToString(o) {
  return Object.prototype.toString.call(o);
}
function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}
var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()), pad(d.getMinutes()), pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}

// log is just a thin wrapper to console.log that prepends a timestamp
function log() {
  console.log('%s - %s', timestamp(), format.apply(null, arguments));
}
function _extend(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;
  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
}
function png_js_browser_hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}
var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;
function promisify(original) {
  if (typeof original !== 'function') throw new TypeError('The "original" argument must be of type Function');
  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
    var fn = original[kCustomPromisifiedSymbol];
    if (typeof fn !== 'function') {
      throw new TypeError('The "util.promisify.custom" argument must be of type Function');
    }
    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
      value: fn,
      enumerable: false,
      writable: false,
      configurable: true
    });
    return fn;
  }
  function fn() {
    var promiseResolve, promiseReject;
    var promise = new Promise(function (resolve, reject) {
      promiseResolve = resolve;
      promiseReject = reject;
    });
    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }
    args.push(function (err, value) {
      if (err) {
        promiseReject(err);
      } else {
        promiseResolve(value);
      }
    });
    try {
      original.apply(this, args);
    } catch (err) {
      promiseReject(err);
    }
    return promise;
  }
  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));
  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
    value: fn,
    enumerable: false,
    writable: false,
    configurable: true
  });
  return Object.defineProperties(fn, getOwnPropertyDescriptors(original));
}
promisify.custom = kCustomPromisifiedSymbol;
function callbackifyOnRejected(reason, cb) {
  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
  // Because `null` is a special error value in callbacks which means "no error
  // occurred", we error-wrap so the callback consumer can distinguish between
  // "the promise rejected with null" or "the promise fulfilled with undefined".
  if (!reason) {
    var newReason = new Error('Promise was rejected with a falsy value');
    newReason.reason = reason;
    reason = newReason;
  }
  return cb(reason);
}
function callbackify(original) {
  if (typeof original !== 'function') {
    throw new TypeError('The "original" argument must be of type Function');
  }

  // We DO NOT return the promise as it gives the user a false sense that
  // the promise is actually somehow related to the callback's execution
  // and that the callback throwing will reject the promise.
  function callbackified() {
    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }
    var maybeCb = args.pop();
    if (typeof maybeCb !== 'function') {
      throw new TypeError('The last argument must be of type Function');
    }
    var self = this;
    var cb = function () {
      return maybeCb.apply(self, arguments);
    };
    // In true node style we process the callback on `nextTick` with all the
    // implications (stack, `uncaughtException`, `async_hooks`)
    original.apply(this, args).then(function (ret) {
      browser$1.nextTick(cb.bind(null, null, ret));
    }, function (rej) {
      browser$1.nextTick(callbackifyOnRejected.bind(null, rej, cb));
    });
  }
  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
  Object.defineProperties(callbackified, getOwnPropertyDescriptors(original));
  return callbackified;
}
var _polyfillNode_util = {
  inherits: inherits$1,
  _extend: _extend,
  log: log,
  isBuffer: isBuffer,
  isPrimitive: isPrimitive,
  isFunction: isFunction,
  isError: isError,
  isDate: isDate,
  isObject: isObject,
  isRegExp: isRegExp,
  isUndefined: isUndefined,
  isSymbol: isSymbol,
  isString: isString,
  isNumber: isNumber,
  isNullOrUndefined: isNullOrUndefined,
  isNull: isNull,
  isBoolean: isBoolean,
  isArray: isArray,
  inspect: inspect$1,
  deprecate: deprecate,
  format: format,
  debuglog: debuglog,
  promisify: promisify,
  callbackify: callbackify
};
var _polyfillNode_util$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  _extend: _extend,
  callbackify: callbackify,
  debuglog: debuglog,
  default: _polyfillNode_util,
  deprecate: deprecate,
  format: format,
  inherits: inherits$1,
  inspect: inspect$1,
  isArray: isArray,
  isBoolean: isBoolean,
  isBuffer: isBuffer,
  isDate: isDate,
  isError: isError,
  isFunction: isFunction,
  isNull: isNull,
  isNullOrUndefined: isNullOrUndefined,
  isNumber: isNumber,
  isObject: isObject,
  isPrimitive: isPrimitive,
  isRegExp: isRegExp,
  isString: isString,
  isSymbol: isSymbol,
  isUndefined: isUndefined,
  log: log,
  promisify: promisify
});
function BufferList() {
  this.head = null;
  this.tail = null;
  this.length = 0;
}
BufferList.prototype.push = function (v) {
  var entry = {
    data: v,
    next: null
  };
  if (this.length > 0) this.tail.next = entry;else this.head = entry;
  this.tail = entry;
  ++this.length;
};
BufferList.prototype.unshift = function (v) {
  var entry = {
    data: v,
    next: this.head
  };
  if (this.length === 0) this.tail = entry;
  this.head = entry;
  ++this.length;
};
BufferList.prototype.shift = function () {
  if (this.length === 0) return;
  var ret = this.head.data;
  if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
  --this.length;
  return ret;
};
BufferList.prototype.clear = function () {
  this.head = this.tail = null;
  this.length = 0;
};
BufferList.prototype.join = function (s) {
  if (this.length === 0) return '';
  var p = this.head;
  var ret = '' + p.data;
  while (p = p.next) {
    ret += s + p.data;
  }
  return ret;
};
BufferList.prototype.concat = function (n) {
  if (this.length === 0) return Buffer.alloc(0);
  if (this.length === 1) return this.head.data;
  var ret = Buffer.allocUnsafe(n >>> 0);
  var p = this.head;
  var i = 0;
  while (p) {
    p.data.copy(ret, i);
    i += p.data.length;
    p = p.next;
  }
  return ret;
};

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var isBufferEncoding = Buffer.isEncoding || function (encoding) {
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
    case 'raw':
      return true;
    default:
      return false;
  }
};
function assertEncoding(encoding) {
  if (encoding && !isBufferEncoding(encoding)) {
    throw new Error('Unknown encoding: ' + encoding);
  }
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters. CESU-8 is handled as part of the UTF-8 encoding.
//
// @TODO Handling all encodings inside a single object makes it very difficult
// to reason about this code, so it should be split up in the future.
// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
// points as used by CESU-8.
function StringDecoder(encoding) {
  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
  assertEncoding(encoding);
  switch (this.encoding) {
    case 'utf8':
      // CESU-8 represents each of Surrogate Pair by 3-bytes
      this.surrogateSize = 3;
      break;
    case 'ucs2':
    case 'utf16le':
      // UTF-16 represents each of Surrogate Pair by 2-bytes
      this.surrogateSize = 2;
      this.detectIncompleteChar = utf16DetectIncompleteChar;
      break;
    case 'base64':
      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
      this.surrogateSize = 3;
      this.detectIncompleteChar = base64DetectIncompleteChar;
      break;
    default:
      this.write = passThroughWrite;
      return;
  }

  // Enough space to store all bytes of a single character. UTF-8 needs 4
  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
  this.charBuffer = new Buffer(6);
  // Number of bytes received for the current incomplete multi-byte character.
  this.charReceived = 0;
  // Number of bytes expected for the current incomplete multi-byte character.
  this.charLength = 0;
}

// write decodes the given buffer and returns it as JS string that is
// guaranteed to not contain any partial multi-byte characters. Any partial
// character found at the end of the buffer is buffered up, and will be
// returned when calling write again with the remaining bytes.
//
// Note: Converting a Buffer containing an orphan surrogate to a String
// currently works, but converting a String to a Buffer (via `new Buffer`, or
// Buffer#write) will replace incomplete surrogates with the unicode
// replacement character. See https://codereview.chromium.org/121173009/ .
StringDecoder.prototype.write = function (buffer) {
  var charStr = '';
  // if our last write ended with an incomplete multibyte character
  while (this.charLength) {
    // determine how many remaining bytes this buffer has to offer for this char
    var available = buffer.length >= this.charLength - this.charReceived ? this.charLength - this.charReceived : buffer.length;

    // add the new bytes to the char buffer
    buffer.copy(this.charBuffer, this.charReceived, 0, available);
    this.charReceived += available;
    if (this.charReceived < this.charLength) {
      // still not enough chars in this buffer? wait for more ...
      return '';
    }

    // remove bytes belonging to the current character from the buffer
    buffer = buffer.slice(available, buffer.length);

    // get the character that was split
    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
    var charCode = charStr.charCodeAt(charStr.length - 1);
    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
      this.charLength += this.surrogateSize;
      charStr = '';
      continue;
    }
    this.charReceived = this.charLength = 0;

    // if there are no more bytes in this buffer, just emit our char
    if (buffer.length === 0) {
      return charStr;
    }
    break;
  }

  // determine and set charLength / charReceived
  this.detectIncompleteChar(buffer);
  var end = buffer.length;
  if (this.charLength) {
    // buffer the incomplete character bytes we got
    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
    end -= this.charReceived;
  }
  charStr += buffer.toString(this.encoding, 0, end);
  var end = charStr.length - 1;
  var charCode = charStr.charCodeAt(end);
  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
    var size = this.surrogateSize;
    this.charLength += size;
    this.charReceived += size;
    this.charBuffer.copy(this.charBuffer, size, 0, size);
    buffer.copy(this.charBuffer, 0, 0, size);
    return charStr.substring(0, end);
  }

  // or just emit the charStr
  return charStr;
};

// detectIncompleteChar determines if there is an incomplete UTF-8 character at
// the end of the given buffer. If so, it sets this.charLength to the byte
// length that character, and sets this.charReceived to the number of bytes
// that are available for this character.
StringDecoder.prototype.detectIncompleteChar = function (buffer) {
  // determine how many bytes we have to check at the end of this buffer
  var i = buffer.length >= 3 ? 3 : buffer.length;

  // Figure out if one of the last i bytes of our buffer announces an
  // incomplete char.
  for (; i > 0; i--) {
    var c = buffer[buffer.length - i];

    // See http://en.wikipedia.org/wiki/UTF-8#Description

    // 110XXXXX
    if (i == 1 && c >> 5 == 0x06) {
      this.charLength = 2;
      break;
    }

    // 1110XXXX
    if (i <= 2 && c >> 4 == 0x0E) {
      this.charLength = 3;
      break;
    }

    // 11110XXX
    if (i <= 3 && c >> 3 == 0x1E) {
      this.charLength = 4;
      break;
    }
  }
  this.charReceived = i;
};
StringDecoder.prototype.end = function (buffer) {
  var res = '';
  if (buffer && buffer.length) res = this.write(buffer);
  if (this.charReceived) {
    var cr = this.charReceived;
    var buf = this.charBuffer;
    var enc = this.encoding;
    res += buf.slice(0, cr).toString(enc);
  }
  return res;
};
function passThroughWrite(buffer) {
  return buffer.toString(this.encoding);
}
function utf16DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 2;
  this.charLength = this.charReceived ? 2 : 0;
}
function base64DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 3;
  this.charLength = this.charReceived ? 3 : 0;
}
Readable.ReadableState = ReadableState;
var debug = debuglog('stream');
inherits$1(Readable, EventEmitter);
function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') {
    return emitter.prependListener(event, fn);
  } else {
    // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
  }
}
function listenerCount(emitter, type) {
  return emitter.listeners(type).length;
}
function ReadableState(options, stream) {
  options = options || {};

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;
  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // when piping, we only care about 'readable' events that happen
  // after read()ing all the bytes and not getting any pushback.
  this.ranOut = false;

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;
  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}
function Readable(options) {
  if (!(this instanceof Readable)) return new Readable(options);
  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;
  if (options && typeof options.read === 'function') this._read = options.read;
  EventEmitter.call(this);
}

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  if (!state.objectMode && typeof chunk === 'string') {
    encoding = encoding || state.defaultEncoding;
    if (encoding !== state.encoding) {
      chunk = Buffer.from(chunk, encoding);
      encoding = '';
    }
  }
  return readableAddChunk(this, state, chunk, encoding, false);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  var state = this._readableState;
  return readableAddChunk(this, state, chunk, '', true);
};
Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};
function readableAddChunk(stream, state, chunk, encoding, addToFront) {
  var er = chunkInvalid(state, chunk);
  if (er) {
    stream.emit('error', er);
  } else if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else if (state.objectMode || chunk && chunk.length > 0) {
    if (state.ended && !addToFront) {
      var e = new Error('stream.push() after EOF');
      stream.emit('error', e);
    } else if (state.endEmitted && addToFront) {
      var _e = new Error('stream.unshift() after end event');
      stream.emit('error', _e);
    } else {
      var skipAdd;
      if (state.decoder && !addToFront && !encoding) {
        chunk = state.decoder.write(chunk);
        skipAdd = !state.objectMode && chunk.length === 0;
      }
      if (!addToFront) state.reading = false;

      // Don't add to the buffer if we've decoded to an empty string chunk and
      // we're not in object mode
      if (!skipAdd) {
        // if we want the data now, just emit it.
        if (state.flowing && state.length === 0 && !state.sync) {
          stream.emit('data', chunk);
          stream.read(0);
        } else {
          // update the buffer info.
          state.length += state.objectMode ? 1 : chunk.length;
          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
          if (state.needReadable) emitReadable(stream);
        }
      }
      maybeReadMore(stream, state);
    }
  } else if (!addToFront) {
    state.reading = false;
  }
  return needMoreData(state);
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;
  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }
  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }
  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;
  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }
  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }
  if (ret !== null) this.emit('data', ret);
  return ret;
};
function chunkInvalid(state, chunk) {
  var er = null;
  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}
function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) nextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}
function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    nextTick(maybeReadMore_, stream, state);
  }
}
function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('not implemented'));
};
Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;
  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
  var doEnd = !pipeOpts || pipeOpts.end !== false;
  var endFn = doEnd ? onend : cleanup;
  if (state.endEmitted) nextTick(endFn);else src.once('end', endFn);
  dest.on('unpipe', onunpipe);
  function onunpipe(readable) {
    debug('onunpipe');
    if (readable === src) {
      cleanup();
    }
  }
  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);
  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', cleanup);
    src.removeListener('data', ondata);
    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (listenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);
  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }
  return dest;
};
function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && src.listeners('data').length) {
      state.flowing = true;
      flow(src);
    }
  };
}
Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;
    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    for (var _i = 0; _i < len; _i++) {
      dests[_i].emit('unpipe', this);
    }
    return this;
  }

  // try to find the right one.
  var i = indexOf(state.pipes, dest);
  if (i === -1) return this;
  state.pipes.splice(i, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];
  dest.emit('unpipe', this);
  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = EventEmitter.prototype.on.call(this, ev, fn);
  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        nextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }
  return res;
};
Readable.prototype.addListener = Readable.prototype.on;
function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};
function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    nextTick(resume_, stream, state);
  }
}
function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }
  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}
Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};
function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var state = this._readableState;
  var paused = false;
  var self = this;
  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) self.push(chunk);
    }
    self.push(null);
  });
  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;
    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
  forEach(events, function (ev) {
    stream.on(ev, self.emit.bind(self, ev));
  });

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };
  return self;
};

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;
  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }
  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}
function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');
  if (!state.endEmitted) {
    state.ended = true;
    nextTick(endReadableNT, state, stream);
  }
}
function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}
function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}
function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

Writable.WritableState = WritableState;
inherits$1(Writable, EventEmitter);
function nop() {}
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}
function WritableState(options, stream) {
  Object.defineProperty(this, 'buffer', {
    get: deprecate(function () {
      return this.getBuffer();
    }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
  });
  options = options || {};

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;
  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}
WritableState.prototype.getBuffer = function writableStateGetBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};
function Writable(options) {
  // Writable ctor is applied to Duplexes, though they're not
  // instanceof Writable, they're instanceof Readable.
  if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);
  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;
  if (options) {
    if (typeof options.write === 'function') this._write = options.write;
    if (typeof options.writev === 'function') this._writev = options.writev;
  }
  EventEmitter.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};
function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  nextTick(cb, er);
}

// If we get something that is not a buffer, string, null, or undefined,
// and we're not in objectMode, then that's an error.
// Otherwise stream chunks are all considered to be of length=1, and the
// watermarks determine how many objects to keep in the buffer, rather than
// how many bytes or characters.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;
  // Always throw error if a null is written
  // if we are not in object mode then throw
  // if it is not a buffer, string, or undefined.
  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    nextTick(cb, er);
    valid = false;
  }
  return valid;
}
Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }
  if (Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  if (typeof cb !== 'function') cb = nop;
  if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, chunk, encoding, cb);
  }
  return ret;
};
Writable.prototype.cork = function () {
  var state = this._writableState;
  state.corked++;
};
Writable.prototype.uncork = function () {
  var state = this._writableState;
  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};
Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};
function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, chunk, encoding, cb) {
  chunk = decodeChunk(state, chunk, encoding);
  if (Buffer.isBuffer(chunk)) encoding = 'buffer';
  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;
  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }
  return ret;
}
function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}
function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;
  if (sync) nextTick(cb, er);else cb(er);
  stream._writableState.errorEmitted = true;
  stream.emit('error', er);
}
function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}
function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  onwriteStateUpdate(state);
  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);
    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }
    if (sync) {
      /*<replacement>*/
      nextTick(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}
function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;
  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;
    while (entry) {
      buffer[count] = entry;
      entry = entry.next;
      count += 1;
    }
    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }
    if (entry === null) state.lastBufferedRequest = null;
  }
  state.bufferedRequestCount = 0;
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}
Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('not implemented'));
};
Writable.prototype._writev = null;
Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;
  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }
  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};
function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function prefinish(stream, state) {
  if (!state.prefinished) {
    state.prefinished = true;
    stream.emit('prefinish');
  }
}
function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    if (state.pendingcb === 0) {
      prefinish(stream, state);
      state.finished = true;
      stream.emit('finish');
    } else {
      prefinish(stream, state);
    }
  }
  return need;
}
function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) nextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;
  this.next = null;
  this.entry = null;
  this.finish = function (err) {
    var entry = _this.entry;
    _this.entry = null;
    while (entry) {
      var cb = entry.callback;
      state.pendingcb--;
      cb(err);
      entry = entry.next;
    }
    if (state.corkedRequestsFree) {
      state.corkedRequestsFree.next = _this;
    } else {
      state.corkedRequestsFree = _this;
    }
  };
}
inherits$1(Duplex, Readable);
var keys = Object.keys(Writable.prototype);
for (var v = 0; v < keys.length; v++) {
  var method = keys[v];
  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}
function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);
  Readable.call(this, options);
  Writable.call(this, options);
  if (options && options.readable === false) this.readable = false;
  if (options && options.writable === false) this.writable = false;
  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;
  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  nextTick(onEndNT, this);
}
function onEndNT(self) {
  self.end();
}

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

inherits$1(png_js_browser_Transform, Duplex);
function TransformState(stream) {
  this.afterTransform = function (er, data) {
    return afterTransform(stream, er, data);
  };
  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
  this.writeencoding = null;
}
function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;
  var cb = ts.writecb;
  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));
  ts.writechunk = null;
  ts.writecb = null;
  if (data !== null && data !== undefined) stream.push(data);
  cb(er);
  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}
function png_js_browser_Transform(options) {
  if (!(this instanceof png_js_browser_Transform)) return new png_js_browser_Transform(options);
  Duplex.call(this, options);
  this._transformState = new TransformState(this);

  // when the writable side finishes, then flush out anything remaining.
  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;
  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;
    if (typeof options.flush === 'function') this._flush = options.flush;
  }
  this.once('prefinish', function () {
    if (typeof this._flush === 'function') this._flush(function (er) {
      done(stream, er);
    });else done(stream);
  });
}
png_js_browser_Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
png_js_browser_Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('Not implemented');
};
png_js_browser_Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
png_js_browser_Transform.prototype._read = function (n) {
  var ts = this._transformState;
  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};
function done(stream, er) {
  if (er) return stream.emit('error', er);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;
  if (ws.length) throw new Error('Calling transform done when ws.length != 0');
  if (ts.transforming) throw new Error('Calling transform done when still transforming');
  return stream.push(null);
}
inherits$1(PassThrough, png_js_browser_Transform);
function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);
  png_js_browser_Transform.call(this, options);
}
PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
inherits$1(Stream, EventEmitter);
Stream.Readable = Readable;
Stream.Writable = Writable;
Stream.Duplex = Duplex;
Stream.Transform = png_js_browser_Transform;
Stream.PassThrough = PassThrough;

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;

// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EventEmitter.call(this);
}
Stream.prototype.pipe = function (dest, options) {
  var source = this;
  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }
  source.on('data', ondata);
  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }
  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }
  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;
    dest.end();
  }
  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;
    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EventEmitter.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }
  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);
    source.removeListener('end', onend);
    source.removeListener('close', onclose);
    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);
    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);
    dest.removeListener('close', cleanup);
  }
  source.on('end', cleanup);
  source.on('close', cleanup);
  dest.on('close', cleanup);
  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};
var _polyfillNode_stream = /*#__PURE__*/Object.freeze({
  __proto__: null,
  Duplex: Duplex,
  PassThrough: PassThrough,
  Readable: Readable,
  Stream: Stream,
  Transform: png_js_browser_Transform,
  Writable: Writable,
  default: Stream
});
var require$$1 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_stream);
var binding = {};
function compare(a, b) {
  if (a === b) {
    return 0;
  }
  var x = a.length;
  var y = b.length;
  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }
  if (x < y) {
    return -1;
  }
  if (y < x) {
    return 1;
  }
  return 0;
}
var hasOwn = Object.prototype.hasOwnProperty;
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    if (hasOwn.call(obj, key)) keys.push(key);
  }
  return keys;
};
var pSlice = Array.prototype.slice;
var _functionsHaveNames;
function functionsHaveNames() {
  if (typeof _functionsHaveNames !== 'undefined') {
    return _functionsHaveNames;
  }
  return _functionsHaveNames = function () {
    return function foo() {}.name === 'foo';
  }();
}
function pToString(obj) {
  return Object.prototype.toString.call(obj);
}
function isView(arrbuf) {
  if (isBuffer$1(arrbuf)) {
    return false;
  }
  if (typeof global$1.ArrayBuffer !== 'function') {
    return false;
  }
  if (typeof ArrayBuffer.isView === 'function') {
    return ArrayBuffer.isView(arrbuf);
  }
  if (!arrbuf) {
    return false;
  }
  if (arrbuf instanceof DataView) {
    return true;
  }
  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
    return true;
  }
  return false;
}
// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

function assert(value, message) {
  if (!value) fail(value, true, message, '==', ok);
}

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

var regex = /\s*function\s+([^\(\s]*)\s*/;
// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
function getName(func) {
  if (!isFunction(func)) {
    return;
  }
  if (functionsHaveNames()) {
    return func.name;
  }
  var str = func.toString();
  var match = str.match(regex);
  return match && match[1];
}
assert.AssertionError = AssertionError;
function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }
  var stackStartFunction = options.stackStartFunction || fail;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  } else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();
    if (err.stack) {
      var out = err.stack;

      // try to strip useless frames
      var fn_name = getName(stackStartFunction);
      var idx = out.indexOf('\n' + fn_name);
      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }
      this.stack = out;
    }
  }
}

// assert.AssertionError instanceof Error
inherits$1(AssertionError, Error);
function truncate(s, n) {
  if (typeof s === 'string') {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}
function inspect(something) {
  if (functionsHaveNames() || !isFunction(something)) {
    return inspect$1(something);
  }
  var rawname = getName(something);
  var name = rawname ? ': ' + rawname : '';
  return '[Function' + name + ']';
}
function getMessage(self) {
  return truncate(inspect(self.actual), 128) + ' ' + self.operator + ' ' + truncate(inspect(self.expected), 128);
}

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);
assert.equal = equal;
function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', equal);
}

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);
assert.notEqual = notEqual;
function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', notEqual);
  }
}

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);
assert.deepEqual = deepEqual;
function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'deepEqual', deepEqual);
  }
}
assert.deepStrictEqual = deepStrictEqual;
function deepStrictEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'deepStrictEqual', deepStrictEqual);
  }
}
function _deepEqual(actual, expected, strict, memos) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;
  } else if (isBuffer$1(actual) && isBuffer$1(expected)) {
    return compare(actual, expected) === 0;

    // 7.2. If the expected value is a Date object, the actual value is
    // equivalent if it is also a Date object that refers to the same time.
  } else if (isDate(actual) && isDate(expected)) {
    return actual.getTime() === expected.getTime();

    // 7.3 If the expected value is a RegExp object, the actual value is
    // equivalent if it is also a RegExp object with the same source and
    // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (isRegExp(actual) && isRegExp(expected)) {
    return actual.source === expected.source && actual.global === expected.global && actual.multiline === expected.multiline && actual.lastIndex === expected.lastIndex && actual.ignoreCase === expected.ignoreCase;

    // 7.4. Other pairs that do not both pass typeof value == 'object',
    // equivalence is determined by ==.
  } else if ((actual === null || typeof actual !== 'object') && (expected === null || typeof expected !== 'object')) {
    return strict ? actual === expected : actual == expected;

    // If both values are instances of typed arrays, wrap their underlying
    // ArrayBuffers in a Buffer each to increase performance
    // This optimization requires the arrays to have the same type as checked by
    // Object.prototype.toString (aka pToString). Never perform binary
    // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
    // bit patterns are not identical.
  } else if (isView(actual) && isView(expected) && pToString(actual) === pToString(expected) && !(actual instanceof Float32Array || actual instanceof Float64Array)) {
    return compare(new Uint8Array(actual.buffer), new Uint8Array(expected.buffer)) === 0;

    // 7.5 For all other Object pairs, including Array objects, equivalence is
    // determined by having the same number of owned properties (as verified
    // with Object.prototype.hasOwnProperty.call), the same set of keys
    // (although not necessarily the same order), equivalent values for every
    // corresponding key, and an identical 'prototype' property. Note: this
    // accounts for both named and indexed properties on Arrays.
  } else if (isBuffer$1(actual) !== isBuffer$1(expected)) {
    return false;
  } else {
    memos = memos || {
      actual: [],
      expected: []
    };
    var actualIndex = memos.actual.indexOf(actual);
    if (actualIndex !== -1) {
      if (actualIndex === memos.expected.indexOf(expected)) {
        return true;
      }
    }
    memos.actual.push(actual);
    memos.expected.push(expected);
    return objEquiv(actual, expected, strict, memos);
  }
}
function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}
function objEquiv(a, b, strict, actualVisitedObjects) {
  if (a === null || a === undefined || b === null || b === undefined) return false;
  // if one is a primitive, the other must be same
  if (isPrimitive(a) || isPrimitive(b)) return a === b;
  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b)) return false;
  var aIsArgs = isArguments(a);
  var bIsArgs = isArguments(b);
  if (aIsArgs && !bIsArgs || !aIsArgs && bIsArgs) return false;
  if (aIsArgs) {
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b, strict);
  }
  var ka = objectKeys(a);
  var kb = objectKeys(b);
  var key, i;
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length !== kb.length) return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] !== kb[i]) return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects)) return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);
assert.notDeepEqual = notDeepEqual;
function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'notDeepEqual', notDeepEqual);
  }
}
assert.notDeepStrictEqual = notDeepStrictEqual;
function notDeepStrictEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
  }
}

// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);
assert.strictEqual = strictEqual;
function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', strictEqual);
  }
}

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);
assert.notStrictEqual = notStrictEqual;
function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', notStrictEqual);
  }
}
function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }
  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  }
  try {
    if (actual instanceof expected) {
      return true;
    }
  } catch (e) {
    // Ignore.  The instanceof check doesn't work for arrow functions.
  }
  if (Error.isPrototypeOf(expected)) {
    return false;
  }
  return expected.call({}, actual) === true;
}
function _tryBlock(block) {
  var error;
  try {
    block();
  } catch (e) {
    error = e;
  }
  return error;
}
function _throws(shouldThrow, block, expected, message) {
  var actual;
  if (typeof block !== 'function') {
    throw new TypeError('"block" argument must be a function');
  }
  if (typeof expected === 'string') {
    message = expected;
    expected = null;
  }
  actual = _tryBlock(block);
  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') + (message ? ' ' + message : '.');
  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }
  var userProvidedMessage = typeof message === 'string';
  var isUnwantedException = !shouldThrow && isError(actual);
  var isUnexpectedException = !shouldThrow && actual && !expected;
  if (isUnwantedException && userProvidedMessage && expectedException(actual, expected) || isUnexpectedException) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }
  if (shouldThrow && actual && expected && !expectedException(actual, expected) || !shouldThrow && actual) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);
assert.throws = png_js_browser_throws;
function png_js_browser_throws(block, /*optional*/error, /*optional*/message) {
  _throws(true, block, error, message);
}

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = doesNotThrow;
function doesNotThrow(block, /*optional*/error, /*optional*/message) {
  _throws(false, block, error, message);
}
assert.ifError = ifError;
function ifError(err) {
  if (err) throw err;
}
var _polyfillNode_assert = /*#__PURE__*/Object.freeze({
  __proto__: null,
  AssertionError: AssertionError,
  assert: ok,
  deepEqual: deepEqual,
  deepStrictEqual: deepStrictEqual,
  default: assert,
  doesNotThrow: doesNotThrow,
  equal: equal,
  fail: fail,
  ifError: ifError,
  notDeepEqual: notDeepEqual,
  notDeepStrictEqual: notDeepStrictEqual,
  notEqual: notEqual,
  notStrictEqual: notStrictEqual,
  ok: ok,
  strictEqual: strictEqual,
  throws: png_js_browser_throws
});
var require$$4 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_assert);

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function ZStream() {
  /* next input byte */
  this.input = null; // JS specific, because we have no pointers
  this.next_in = 0;
  /* number of bytes available at input */
  this.avail_in = 0;
  /* total number of input bytes read so far */
  this.total_in = 0;
  /* next output byte should be put there */
  this.output = null; // JS specific, because we have no pointers
  this.next_out = 0;
  /* remaining free space at output */
  this.avail_out = 0;
  /* total number of bytes output so far */
  this.total_out = 0;
  /* last error message, NULL if no error */
  this.msg = '' /*Z_NULL*/;
  /* not visible by applications */
  this.state = null;
  /* best guess about the data type: binary or text */
  this.data_type = 2 /*Z_UNKNOWN*/;
  /* adler32 value of the uncompressed data */
  this.adler = 0;
}
var png_js_browser_zstream = ZStream;
var deflate$1 = {};
var common = {};
(function (exports) {
  var TYPED_OK = typeof Uint8Array !== 'undefined' && typeof Uint16Array !== 'undefined' && typeof Int32Array !== 'undefined';
  function _has(obj, key) {
    return Object.prototype.hasOwnProperty.call(obj, key);
  }
  exports.assign = function (obj /*from1, from2, from3, ...*/) {
    var sources = Array.prototype.slice.call(arguments, 1);
    while (sources.length) {
      var source = sources.shift();
      if (!source) {
        continue;
      }
      if (typeof source !== 'object') {
        throw new TypeError(source + 'must be non-object');
      }
      for (var p in source) {
        if (_has(source, p)) {
          obj[p] = source[p];
        }
      }
    }
    return obj;
  };

  // reduce buffer size, avoiding mem copy
  exports.shrinkBuf = function (buf, size) {
    if (buf.length === size) {
      return buf;
    }
    if (buf.subarray) {
      return buf.subarray(0, size);
    }
    buf.length = size;
    return buf;
  };
  var fnTyped = {
    arraySet: function (dest, src, src_offs, len, dest_offs) {
      if (src.subarray && dest.subarray) {
        dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
        return;
      }
      // Fallback to ordinary array
      for (var i = 0; i < len; i++) {
        dest[dest_offs + i] = src[src_offs + i];
      }
    },
    // Join array of chunks to single array.
    flattenChunks: function (chunks) {
      var i, l, len, pos, chunk, result;

      // calculate data length
      len = 0;
      for (i = 0, l = chunks.length; i < l; i++) {
        len += chunks[i].length;
      }

      // join chunks
      result = new Uint8Array(len);
      pos = 0;
      for (i = 0, l = chunks.length; i < l; i++) {
        chunk = chunks[i];
        result.set(chunk, pos);
        pos += chunk.length;
      }
      return result;
    }
  };
  var fnUntyped = {
    arraySet: function (dest, src, src_offs, len, dest_offs) {
      for (var i = 0; i < len; i++) {
        dest[dest_offs + i] = src[src_offs + i];
      }
    },
    // Join array of chunks to single array.
    flattenChunks: function (chunks) {
      return [].concat.apply([], chunks);
    }
  };

  // Enable/Disable typed arrays use, for testing
  //
  exports.setTyped = function (on) {
    if (on) {
      exports.Buf8 = Uint8Array;
      exports.Buf16 = Uint16Array;
      exports.Buf32 = Int32Array;
      exports.assign(exports, fnTyped);
    } else {
      exports.Buf8 = Array;
      exports.Buf16 = Array;
      exports.Buf32 = Array;
      exports.assign(exports, fnUntyped);
    }
  };
  exports.setTyped(TYPED_OK);
})(common);
var trees$1 = {};

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

/* eslint-disable space-unary-ops */

var utils$3 = common;

/* Public constants ==========================================================*/
/* ===========================================================================*/

//var Z_FILTERED          = 1;
//var Z_HUFFMAN_ONLY      = 2;
//var Z_RLE               = 3;
var Z_FIXED$1 = 4;
//var Z_DEFAULT_STRATEGY  = 0;

/* Possible values of the data_type field (though see inflate()) */
var Z_BINARY = 0;
var Z_TEXT = 1;
//var Z_ASCII             = 1; // = Z_TEXT
var Z_UNKNOWN$1 = 2;

/*============================================================================*/

function zero$1(buf) {
  var len = buf.length;
  while (--len >= 0) {
    buf[len] = 0;
  }
}

// From zutil.h

var STORED_BLOCK = 0;
var STATIC_TREES = 1;
var DYN_TREES = 2;
/* The three kinds of block type */

var MIN_MATCH$1 = 3;
var MAX_MATCH$1 = 258;
/* The minimum and maximum match lengths */

// From deflate.h
/* ===========================================================================
 * Internal compression state.
 */

var LENGTH_CODES$1 = 29;
/* number of length codes, not counting the special END_BLOCK code */

var LITERALS$1 = 256;
/* number of literal bytes 0..255 */

var L_CODES$1 = LITERALS$1 + 1 + LENGTH_CODES$1;
/* number of Literal or Length codes, including the END_BLOCK code */

var D_CODES$1 = 30;
/* number of distance codes */

var BL_CODES$1 = 19;
/* number of codes used to transfer the bit lengths */

var HEAP_SIZE$1 = 2 * L_CODES$1 + 1;
/* maximum heap size */

var MAX_BITS$1 = 15;
/* All codes must not exceed MAX_BITS bits */

var Buf_size = 16;
/* size of bit buffer in bi_buf */

/* ===========================================================================
 * Constants
 */

var MAX_BL_BITS = 7;
/* Bit length codes must not exceed MAX_BL_BITS bits */

var END_BLOCK = 256;
/* end of block literal code */

var REP_3_6 = 16;
/* repeat previous bit length 3-6 times (2 bits of repeat count) */

var REPZ_3_10 = 17;
/* repeat a zero length 3-10 times  (3 bits of repeat count) */

var REPZ_11_138 = 18;
/* repeat a zero length 11-138 times  (7 bits of repeat count) */

/* eslint-disable comma-spacing,array-bracket-spacing */
var extra_lbits = /* extra bits for each length code */
[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0];
var extra_dbits = /* extra bits for each distance code */
[0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13];
var extra_blbits = /* extra bits for each bit length code */
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7];
var bl_order = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
/* eslint-enable comma-spacing,array-bracket-spacing */

/* The lengths of the bit length codes are sent in order of decreasing
 * probability, to avoid transmitting the lengths for unused bit length codes.
 */

/* ===========================================================================
 * Local data. These are initialized only once.
 */

// We pre-fill arrays with 0 to avoid uninitialized gaps

var DIST_CODE_LEN = 512; /* see definition of array dist_code below */

// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1
var static_ltree = new Array((L_CODES$1 + 2) * 2);
zero$1(static_ltree);
/* The static literal tree. Since the bit lengths are imposed, there is no
 * need for the L_CODES extra codes used during heap construction. However
 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
 * below).
 */

var static_dtree = new Array(D_CODES$1 * 2);
zero$1(static_dtree);
/* The static distance tree. (Actually a trivial tree since all codes use
 * 5 bits.)
 */

var _dist_code = new Array(DIST_CODE_LEN);
zero$1(_dist_code);
/* Distance codes. The first 256 values correspond to the distances
 * 3 .. 258, the last 256 values correspond to the top 8 bits of
 * the 15 bit distances.
 */

var _length_code = new Array(MAX_MATCH$1 - MIN_MATCH$1 + 1);
zero$1(_length_code);
/* length code for each normalized match length (0 == MIN_MATCH) */

var base_length = new Array(LENGTH_CODES$1);
zero$1(base_length);
/* First normalized length for each code (0 = MIN_MATCH) */

var base_dist = new Array(D_CODES$1);
zero$1(base_dist);
/* First normalized distance for each code (0 = distance of 1) */

function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {
  this.static_tree = static_tree; /* static tree or NULL */
  this.extra_bits = extra_bits; /* extra bits for each code or NULL */
  this.extra_base = extra_base; /* base index for extra_bits */
  this.elems = elems; /* max number of elements in the tree */
  this.max_length = max_length; /* max bit length for the codes */

  // show if `static_tree` has data or dummy - needed for monomorphic objects
  this.has_stree = static_tree && static_tree.length;
}
var static_l_desc;
var static_d_desc;
var static_bl_desc;
function TreeDesc(dyn_tree, stat_desc) {
  this.dyn_tree = dyn_tree; /* the dynamic tree */
  this.max_code = 0; /* largest code with non zero frequency */
  this.stat_desc = stat_desc; /* the corresponding static tree */
}
function d_code(dist) {
  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
}

/* ===========================================================================
 * Output a short LSB first on the stream.
 * IN assertion: there is enough room in pendingBuf.
 */
function put_short(s, w) {
  //    put_byte(s, (uch)((w) & 0xff));
  //    put_byte(s, (uch)((ush)(w) >> 8));
  s.pending_buf[s.pending++] = w & 0xff;
  s.pending_buf[s.pending++] = w >>> 8 & 0xff;
}

/* ===========================================================================
 * Send a value on a given number of bits.
 * IN assertion: length <= 16 and value fits in length bits.
 */
function send_bits(s, value, length) {
  if (s.bi_valid > Buf_size - length) {
    s.bi_buf |= value << s.bi_valid & 0xffff;
    put_short(s, s.bi_buf);
    s.bi_buf = value >> Buf_size - s.bi_valid;
    s.bi_valid += length - Buf_size;
  } else {
    s.bi_buf |= value << s.bi_valid & 0xffff;
    s.bi_valid += length;
  }
}
function send_code(s, c, tree) {
  send_bits(s, tree[c * 2] /*.Code*/, tree[c * 2 + 1] /*.Len*/);
}

/* ===========================================================================
 * Reverse the first len bits of a code, using straightforward code (a faster
 * method would use a table)
 * IN assertion: 1 <= len <= 15
 */
function bi_reverse(code, len) {
  var res = 0;
  do {
    res |= code & 1;
    code >>>= 1;
    res <<= 1;
  } while (--len > 0);
  return res >>> 1;
}

/* ===========================================================================
 * Flush the bit buffer, keeping at most 7 bits in it.
 */
function bi_flush(s) {
  if (s.bi_valid === 16) {
    put_short(s, s.bi_buf);
    s.bi_buf = 0;
    s.bi_valid = 0;
  } else if (s.bi_valid >= 8) {
    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
    s.bi_buf >>= 8;
    s.bi_valid -= 8;
  }
}

/* ===========================================================================
 * Compute the optimal bit lengths for a tree and update the total bit length
 * for the current block.
 * IN assertion: the fields freq and dad are set, heap[heap_max] and
 *    above are the tree nodes sorted by increasing frequency.
 * OUT assertions: the field len is set to the optimal bit length, the
 *     array bl_count contains the frequencies for each bit length.
 *     The length opt_len is updated; static_len is also updated if stree is
 *     not null.
 */
function gen_bitlen(s, desc)
//    deflate_state *s;
//    tree_desc *desc;    /* the tree descriptor */
{
  var tree = desc.dyn_tree;
  var max_code = desc.max_code;
  var stree = desc.stat_desc.static_tree;
  var has_stree = desc.stat_desc.has_stree;
  var extra = desc.stat_desc.extra_bits;
  var base = desc.stat_desc.extra_base;
  var max_length = desc.stat_desc.max_length;
  var h; /* heap index */
  var n, m; /* iterate over the tree elements */
  var bits; /* bit length */
  var xbits; /* extra bits */
  var f; /* frequency */
  var overflow = 0; /* number of elements with bit length too large */

  for (bits = 0; bits <= MAX_BITS$1; bits++) {
    s.bl_count[bits] = 0;
  }

  /* In a first pass, compute the optimal bit lengths (which may
   * overflow in the case of the bit length tree).
   */
  tree[s.heap[s.heap_max] * 2 + 1] /*.Len*/ = 0; /* root of the heap */

  for (h = s.heap_max + 1; h < HEAP_SIZE$1; h++) {
    n = s.heap[h];
    bits = tree[tree[n * 2 + 1] /*.Dad*/ * 2 + 1] /*.Len*/ + 1;
    if (bits > max_length) {
      bits = max_length;
      overflow++;
    }
    tree[n * 2 + 1] /*.Len*/ = bits;
    /* We overwrite tree[n].Dad which is no longer needed */

    if (n > max_code) {
      continue;
    } /* not a leaf node */

    s.bl_count[bits]++;
    xbits = 0;
    if (n >= base) {
      xbits = extra[n - base];
    }
    f = tree[n * 2] /*.Freq*/;
    s.opt_len += f * (bits + xbits);
    if (has_stree) {
      s.static_len += f * (stree[n * 2 + 1] /*.Len*/ + xbits);
    }
  }
  if (overflow === 0) {
    return;
  }

  // Trace((stderr,"\nbit length overflow\n"));
  /* This happens for example on obj2 and pic of the Calgary corpus */

  /* Find the first bit length which could increase: */
  do {
    bits = max_length - 1;
    while (s.bl_count[bits] === 0) {
      bits--;
    }
    s.bl_count[bits]--; /* move one leaf down the tree */
    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
    s.bl_count[max_length]--;
    /* The brother of the overflow item also moves one step up,
     * but this does not affect bl_count[max_length]
     */
    overflow -= 2;
  } while (overflow > 0);

  /* Now recompute all bit lengths, scanning in increasing frequency.
   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
   * lengths instead of fixing only the wrong ones. This idea is taken
   * from 'ar' written by Haruhiko Okumura.)
   */
  for (bits = max_length; bits !== 0; bits--) {
    n = s.bl_count[bits];
    while (n !== 0) {
      m = s.heap[--h];
      if (m > max_code) {
        continue;
      }
      if (tree[m * 2 + 1] /*.Len*/ !== bits) {
        // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
        s.opt_len += (bits - tree[m * 2 + 1] /*.Len*/) * tree[m * 2] /*.Freq*/;
        tree[m * 2 + 1] /*.Len*/ = bits;
      }
      n--;
    }
  }
}

/* ===========================================================================
 * Generate the codes for a given tree and bit counts (which need not be
 * optimal).
 * IN assertion: the array bl_count contains the bit length statistics for
 * the given tree and the field len is set for all tree elements.
 * OUT assertion: the field code is set for all tree elements of non
 *     zero code length.
 */
function gen_codes(tree, max_code, bl_count)
//    ct_data *tree;             /* the tree to decorate */
//    int max_code;              /* largest code with non zero frequency */
//    ushf *bl_count;            /* number of codes at each bit length */
{
  var next_code = new Array(MAX_BITS$1 + 1); /* next code value for each bit length */
  var code = 0; /* running code value */
  var bits; /* bit index */
  var n; /* code index */

  /* The distribution counts are first used to generate the code values
   * without bit reversal.
   */
  for (bits = 1; bits <= MAX_BITS$1; bits++) {
    next_code[bits] = code = code + bl_count[bits - 1] << 1;
  }
  /* Check that the bit counts in bl_count are consistent. The last code
   * must be all ones.
   */
  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
  //        "inconsistent bit counts");
  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

  for (n = 0; n <= max_code; n++) {
    var len = tree[n * 2 + 1] /*.Len*/;
    if (len === 0) {
      continue;
    }
    /* Now reverse the bits */
    tree[n * 2] /*.Code*/ = bi_reverse(next_code[len]++, len);

    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
  }
}

/* ===========================================================================
 * Initialize the various 'constant' tables.
 */
function tr_static_init() {
  var n; /* iterates over tree elements */
  var bits; /* bit counter */
  var length; /* length value */
  var code; /* code value */
  var dist; /* distance index */
  var bl_count = new Array(MAX_BITS$1 + 1);
  /* number of codes at each bit length for an optimal tree */

  // do check in _tr_init()
  //if (static_init_done) return;

  /* For some embedded targets, global variables are not initialized: */
  /*#ifdef NO_INIT_GLOBAL_POINTERS
    static_l_desc.static_tree = static_ltree;
    static_l_desc.extra_bits = extra_lbits;
    static_d_desc.static_tree = static_dtree;
    static_d_desc.extra_bits = extra_dbits;
    static_bl_desc.extra_bits = extra_blbits;
  #endif*/

  /* Initialize the mapping length (0..255) -> length code (0..28) */
  length = 0;
  for (code = 0; code < LENGTH_CODES$1 - 1; code++) {
    base_length[code] = length;
    for (n = 0; n < 1 << extra_lbits[code]; n++) {
      _length_code[length++] = code;
    }
  }
  //Assert (length == 256, "tr_static_init: length != 256");
  /* Note that the length 255 (match length 258) can be represented
   * in two different ways: code 284 + 5 bits or code 285, so we
   * overwrite length_code[255] to use the best encoding:
   */
  _length_code[length - 1] = code;

  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
  dist = 0;
  for (code = 0; code < 16; code++) {
    base_dist[code] = dist;
    for (n = 0; n < 1 << extra_dbits[code]; n++) {
      _dist_code[dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: dist != 256");
  dist >>= 7; /* from now on, all distances are divided by 128 */
  for (; code < D_CODES$1; code++) {
    base_dist[code] = dist << 7;
    for (n = 0; n < 1 << extra_dbits[code] - 7; n++) {
      _dist_code[256 + dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: 256+dist != 512");

  /* Construct the codes of the static literal tree */
  for (bits = 0; bits <= MAX_BITS$1; bits++) {
    bl_count[bits] = 0;
  }
  n = 0;
  while (n <= 143) {
    static_ltree[n * 2 + 1] /*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  while (n <= 255) {
    static_ltree[n * 2 + 1] /*.Len*/ = 9;
    n++;
    bl_count[9]++;
  }
  while (n <= 279) {
    static_ltree[n * 2 + 1] /*.Len*/ = 7;
    n++;
    bl_count[7]++;
  }
  while (n <= 287) {
    static_ltree[n * 2 + 1] /*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  /* Codes 286 and 287 do not exist, but we must include them in the
   * tree construction to get a canonical Huffman tree (longest code
   * all ones)
   */
  gen_codes(static_ltree, L_CODES$1 + 1, bl_count);

  /* The static distance tree is trivial: */
  for (n = 0; n < D_CODES$1; n++) {
    static_dtree[n * 2 + 1] /*.Len*/ = 5;
    static_dtree[n * 2] /*.Code*/ = bi_reverse(n, 5);
  }

  // Now data ready and we can init static trees
  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS$1 + 1, L_CODES$1, MAX_BITS$1);
  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0, D_CODES$1, MAX_BITS$1);
  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0, BL_CODES$1, MAX_BL_BITS);

  //static_init_done = true;
}

/* ===========================================================================
 * Initialize a new block.
 */
function init_block(s) {
  var n; /* iterates over tree elements */

  /* Initialize the trees. */
  for (n = 0; n < L_CODES$1; n++) {
    s.dyn_ltree[n * 2] /*.Freq*/ = 0;
  }
  for (n = 0; n < D_CODES$1; n++) {
    s.dyn_dtree[n * 2] /*.Freq*/ = 0;
  }
  for (n = 0; n < BL_CODES$1; n++) {
    s.bl_tree[n * 2] /*.Freq*/ = 0;
  }
  s.dyn_ltree[END_BLOCK * 2] /*.Freq*/ = 1;
  s.opt_len = s.static_len = 0;
  s.last_lit = s.matches = 0;
}

/* ===========================================================================
 * Flush the bit buffer and align the output on a byte boundary
 */
function bi_windup(s) {
  if (s.bi_valid > 8) {
    put_short(s, s.bi_buf);
  } else if (s.bi_valid > 0) {
    //put_byte(s, (Byte)s->bi_buf);
    s.pending_buf[s.pending++] = s.bi_buf;
  }
  s.bi_buf = 0;
  s.bi_valid = 0;
}

/* ===========================================================================
 * Copy a stored block, storing first the length and its
 * one's complement if requested.
 */
function copy_block(s, buf, len, header)
//DeflateState *s;
//charf    *buf;    /* the input data */
//unsigned len;     /* its length */
//int      header;  /* true if block header must be written */
{
  bi_windup(s); /* align on byte boundary */

  if (header) {
    put_short(s, len);
    put_short(s, ~len);
  }
  //  while (len--) {
  //    put_byte(s, *buf++);
  //  }
  utils$3.arraySet(s.pending_buf, s.window, buf, len, s.pending);
  s.pending += len;
}

/* ===========================================================================
 * Compares to subtrees, using the tree depth as tie breaker when
 * the subtrees have equal frequency. This minimizes the worst case length.
 */
function smaller(tree, n, m, depth) {
  var _n2 = n * 2;
  var _m2 = m * 2;
  return tree[_n2] /*.Freq*/ < tree[_m2] /*.Freq*/ || tree[_n2] /*.Freq*/ === tree[_m2] /*.Freq*/ && depth[n] <= depth[m];
}

/* ===========================================================================
 * Restore the heap property by moving down the tree starting at node k,
 * exchanging a node with the smallest of its two sons if necessary, stopping
 * when the heap property is re-established (each father smaller than its
 * two sons).
 */
function pqdownheap(s, tree, k)
//    deflate_state *s;
//    ct_data *tree;  /* the tree to restore */
//    int k;               /* node to move down */
{
  var v = s.heap[k];
  var j = k << 1; /* left son of k */
  while (j <= s.heap_len) {
    /* Set j to the smallest of the two sons: */
    if (j < s.heap_len && smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
      j++;
    }
    /* Exit if v is smaller than both sons */
    if (smaller(tree, v, s.heap[j], s.depth)) {
      break;
    }

    /* Exchange v with the smallest son */
    s.heap[k] = s.heap[j];
    k = j;

    /* And continue down the tree, setting j to the left son of k */
    j <<= 1;
  }
  s.heap[k] = v;
}

// inlined manually
// var SMALLEST = 1;

/* ===========================================================================
 * Send the block data compressed using the given Huffman trees
 */
function compress_block(s, ltree, dtree)
//    deflate_state *s;
//    const ct_data *ltree; /* literal tree */
//    const ct_data *dtree; /* distance tree */
{
  var dist; /* distance of matched string */
  var lc; /* match length or unmatched char (if dist == 0) */
  var lx = 0; /* running index in l_buf */
  var code; /* the code to send */
  var extra; /* number of extra bits to send */

  if (s.last_lit !== 0) {
    do {
      dist = s.pending_buf[s.d_buf + lx * 2] << 8 | s.pending_buf[s.d_buf + lx * 2 + 1];
      lc = s.pending_buf[s.l_buf + lx];
      lx++;
      if (dist === 0) {
        send_code(s, lc, ltree); /* send a literal byte */
        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
      } else {
        /* Here, lc is the match length - MIN_MATCH */
        code = _length_code[lc];
        send_code(s, code + LITERALS$1 + 1, ltree); /* send the length code */
        extra = extra_lbits[code];
        if (extra !== 0) {
          lc -= base_length[code];
          send_bits(s, lc, extra); /* send the extra length bits */
        }
        dist--; /* dist is now the match distance - 1 */
        code = d_code(dist);
        //Assert (code < D_CODES, "bad d_code");

        send_code(s, code, dtree); /* send the distance code */
        extra = extra_dbits[code];
        if (extra !== 0) {
          dist -= base_dist[code];
          send_bits(s, dist, extra); /* send the extra distance bits */
        }
      } /* literal or match pair ? */

      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
      //       "pendingBuf overflow");
    } while (lx < s.last_lit);
  }
  send_code(s, END_BLOCK, ltree);
}

/* ===========================================================================
 * Construct one Huffman tree and assigns the code bit strings and lengths.
 * Update the total bit length for the current block.
 * IN assertion: the field freq is set for all tree elements.
 * OUT assertions: the fields len and code are set to the optimal bit length
 *     and corresponding code. The length opt_len is updated; static_len is
 *     also updated if stree is not null. The field max_code is set.
 */
function build_tree(s, desc)
//    deflate_state *s;
//    tree_desc *desc; /* the tree descriptor */
{
  var tree = desc.dyn_tree;
  var stree = desc.stat_desc.static_tree;
  var has_stree = desc.stat_desc.has_stree;
  var elems = desc.stat_desc.elems;
  var n, m; /* iterate over heap elements */
  var max_code = -1; /* largest code with non zero frequency */
  var node; /* new node being created */

  /* Construct the initial heap, with least frequent element in
   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
   * heap[0] is not used.
   */
  s.heap_len = 0;
  s.heap_max = HEAP_SIZE$1;
  for (n = 0; n < elems; n++) {
    if (tree[n * 2] /*.Freq*/ !== 0) {
      s.heap[++s.heap_len] = max_code = n;
      s.depth[n] = 0;
    } else {
      tree[n * 2 + 1] /*.Len*/ = 0;
    }
  }

  /* The pkzip format requires that at least one distance code exists,
   * and that at least one bit should be sent even if there is only one
   * possible code. So to avoid special checks later on we force at least
   * two codes of non zero frequency.
   */
  while (s.heap_len < 2) {
    node = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0;
    tree[node * 2] /*.Freq*/ = 1;
    s.depth[node] = 0;
    s.opt_len--;
    if (has_stree) {
      s.static_len -= stree[node * 2 + 1] /*.Len*/;
    }
    /* node is 0 or 1 so it does not have extra bits */
  }
  desc.max_code = max_code;

  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
   * establish sub-heaps of increasing lengths:
   */
  for (n = s.heap_len >> 1 /*int /2*/; n >= 1; n--) {
    pqdownheap(s, tree, n);
  }

  /* Construct the Huffman tree by repeatedly combining the least two
   * frequent nodes.
   */
  node = elems; /* next internal node of the tree */
  do {
    //pqremove(s, tree, n);  /* n = node of least frequency */
    /*** pqremove ***/
    n = s.heap[1 /*SMALLEST*/];
    s.heap[1 /*SMALLEST*/] = s.heap[s.heap_len--];
    pqdownheap(s, tree, 1 /*SMALLEST*/);
    /***/

    m = s.heap[1 /*SMALLEST*/]; /* m = node of next least frequency */

    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
    s.heap[--s.heap_max] = m;

    /* Create a new node father of n and m */
    tree[node * 2] /*.Freq*/ = tree[n * 2] /*.Freq*/ + tree[m * 2] /*.Freq*/;
    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
    tree[n * 2 + 1] /*.Dad*/ = tree[m * 2 + 1] /*.Dad*/ = node;

    /* and insert the new node in the heap */
    s.heap[1 /*SMALLEST*/] = node++;
    pqdownheap(s, tree, 1 /*SMALLEST*/);
  } while (s.heap_len >= 2);
  s.heap[--s.heap_max] = s.heap[1 /*SMALLEST*/];

  /* At this point, the fields freq and dad are set. We can now
   * generate the bit lengths.
   */
  gen_bitlen(s, desc);

  /* The field len is now set, we can generate the bit codes */
  gen_codes(tree, max_code, s.bl_count);
}

/* ===========================================================================
 * Scan a literal or distance tree to determine the frequencies of the codes
 * in the bit length tree.
 */
function scan_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree;   /* the tree to be scanned */
//    int max_code;    /* and its largest code of non zero frequency */
{
  var n; /* iterates over all tree elements */
  var prevlen = -1; /* last emitted length */
  var curlen; /* length of current code */

  var nextlen = tree[0 * 2 + 1] /*.Len*/; /* length of next code */

  var count = 0; /* repeat count of the current code */
  var max_count = 7; /* max repeat count */
  var min_count = 4; /* min repeat count */

  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  tree[(max_code + 1) * 2 + 1] /*.Len*/ = 0xffff; /* guard */

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1] /*.Len*/;
    if (++count < max_count && curlen === nextlen) {
      continue;
    } else if (count < min_count) {
      s.bl_tree[curlen * 2] /*.Freq*/ += count;
    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        s.bl_tree[curlen * 2] /*.Freq*/++;
      }
      s.bl_tree[REP_3_6 * 2] /*.Freq*/++;
    } else if (count <= 10) {
      s.bl_tree[REPZ_3_10 * 2] /*.Freq*/++;
    } else {
      s.bl_tree[REPZ_11_138 * 2] /*.Freq*/++;
    }
    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;
    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;
    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}

/* ===========================================================================
 * Send a literal or distance tree in compressed form, using the codes in
 * bl_tree.
 */
function send_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree; /* the tree to be scanned */
//    int max_code;       /* and its largest code of non zero frequency */
{
  var n; /* iterates over all tree elements */
  var prevlen = -1; /* last emitted length */
  var curlen; /* length of current code */

  var nextlen = tree[0 * 2 + 1] /*.Len*/; /* length of next code */

  var count = 0; /* repeat count of the current code */
  var max_count = 7; /* max repeat count */
  var min_count = 4; /* min repeat count */

  /* tree[max_code+1].Len = -1; */ /* guard already set */
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1] /*.Len*/;
    if (++count < max_count && curlen === nextlen) {
      continue;
    } else if (count < min_count) {
      do {
        send_code(s, curlen, s.bl_tree);
      } while (--count !== 0);
    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        send_code(s, curlen, s.bl_tree);
        count--;
      }
      //Assert(count >= 3 && count <= 6, " 3_6?");
      send_code(s, REP_3_6, s.bl_tree);
      send_bits(s, count - 3, 2);
    } else if (count <= 10) {
      send_code(s, REPZ_3_10, s.bl_tree);
      send_bits(s, count - 3, 3);
    } else {
      send_code(s, REPZ_11_138, s.bl_tree);
      send_bits(s, count - 11, 7);
    }
    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;
    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;
    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}

/* ===========================================================================
 * Construct the Huffman tree for the bit lengths and return the index in
 * bl_order of the last bit length code to send.
 */
function build_bl_tree(s) {
  var max_blindex; /* index of last bit length code of non zero freq */

  /* Determine the bit length frequencies for literal and distance trees */
  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

  /* Build the bit length tree: */
  build_tree(s, s.bl_desc);
  /* opt_len now includes the length of the tree representations, except
   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
   */

  /* Determine the number of bit length codes to send. The pkzip format
   * requires that at least 4 bit length codes be sent. (appnote.txt says
   * 3 but the actual value used is 4.)
   */
  for (max_blindex = BL_CODES$1 - 1; max_blindex >= 3; max_blindex--) {
    if (s.bl_tree[bl_order[max_blindex] * 2 + 1] /*.Len*/ !== 0) {
      break;
    }
  }
  /* Update opt_len to include the bit length tree and counts */
  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
  //        s->opt_len, s->static_len));

  return max_blindex;
}

/* ===========================================================================
 * Send the header for a block using dynamic Huffman trees: the counts, the
 * lengths of the bit length codes, the literal tree and the distance tree.
 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
 */
function send_all_trees(s, lcodes, dcodes, blcodes)
//    deflate_state *s;
//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
{
  var rank; /* index in bl_order */

  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
  //        "too many codes");
  //Tracev((stderr, "\nbl counts: "));
  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
  send_bits(s, dcodes - 1, 5);
  send_bits(s, blcodes - 4, 4); /* not -3 as stated in appnote.txt */
  for (rank = 0; rank < blcodes; rank++) {
    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1] /*.Len*/, 3);
  }
  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
}

/* ===========================================================================
 * Check if the data type is TEXT or BINARY, using the following algorithm:
 * - TEXT if the two conditions below are satisfied:
 *    a) There are no non-portable control characters belonging to the
 *       "black list" (0..6, 14..25, 28..31).
 *    b) There is at least one printable character belonging to the
 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
 * - BINARY otherwise.
 * - The following partially-portable control characters form a
 *   "gray list" that is ignored in this detection algorithm:
 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
 * IN assertion: the fields Freq of dyn_ltree are set.
 */
function detect_data_type(s) {
  /* black_mask is the bit mask of black-listed bytes
   * set bits 0..6, 14..25, and 28..31
   * 0xf3ffc07f = binary 11110011111111111100000001111111
   */
  var black_mask = 0xf3ffc07f;
  var n;

  /* Check for non-textual ("black-listed") bytes. */
  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
    if (black_mask & 1 && s.dyn_ltree[n * 2] /*.Freq*/ !== 0) {
      return Z_BINARY;
    }
  }

  /* Check for textual ("white-listed") bytes. */
  if (s.dyn_ltree[9 * 2] /*.Freq*/ !== 0 || s.dyn_ltree[10 * 2] /*.Freq*/ !== 0 || s.dyn_ltree[13 * 2] /*.Freq*/ !== 0) {
    return Z_TEXT;
  }
  for (n = 32; n < LITERALS$1; n++) {
    if (s.dyn_ltree[n * 2] /*.Freq*/ !== 0) {
      return Z_TEXT;
    }
  }

  /* There are no "black-listed" or "white-listed" bytes:
   * this stream either is empty or has tolerated ("gray-listed") bytes only.
   */
  return Z_BINARY;
}
var static_init_done = false;

/* ===========================================================================
 * Initialize the tree data structures for a new zlib stream.
 */
function _tr_init(s) {
  if (!static_init_done) {
    tr_static_init();
    static_init_done = true;
  }
  s.l_desc = new TreeDesc(s.dyn_ltree, static_l_desc);
  s.d_desc = new TreeDesc(s.dyn_dtree, static_d_desc);
  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);
  s.bi_buf = 0;
  s.bi_valid = 0;

  /* Initialize the first block of the first file: */
  init_block(s);
}

/* ===========================================================================
 * Send a stored block
 */
function _tr_stored_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3); /* send block type */
  copy_block(s, buf, stored_len, true); /* with header */
}

/* ===========================================================================
 * Send one empty static block to give enough lookahead for inflate.
 * This takes 10 bits, of which 7 may remain in the bit buffer.
 */
function _tr_align(s) {
  send_bits(s, STATIC_TREES << 1, 3);
  send_code(s, END_BLOCK, static_ltree);
  bi_flush(s);
}

/* ===========================================================================
 * Determine the best encoding for the current block: dynamic trees, static
 * trees or store, and output the encoded block to the zip file.
 */
function _tr_flush_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block, or NULL if too old */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  var opt_lenb, static_lenb; /* opt_len and static_len in bytes */
  var max_blindex = 0; /* index of last bit length code of non zero freq */

  /* Build the Huffman trees unless a stored block is forced */
  if (s.level > 0) {
    /* Check if the file is binary or text */
    if (s.strm.data_type === Z_UNKNOWN$1) {
      s.strm.data_type = detect_data_type(s);
    }

    /* Construct the literal and distance trees */
    build_tree(s, s.l_desc);
    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));

    build_tree(s, s.d_desc);
    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));
    /* At this point, opt_len and static_len are the total bit lengths of
     * the compressed block data, excluding the tree representations.
     */

    /* Build the bit length tree for the above two trees, and get the index
     * in bl_order of the last bit length code to send.
     */
    max_blindex = build_bl_tree(s);

    /* Determine the best encoding. Compute the block lengths in bytes. */
    opt_lenb = s.opt_len + 3 + 7 >>> 3;
    static_lenb = s.static_len + 3 + 7 >>> 3;

    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
    //        s->last_lit));

    if (static_lenb <= opt_lenb) {
      opt_lenb = static_lenb;
    }
  } else {
    // Assert(buf != (char*)0, "lost buf");
    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
  }
  if (stored_len + 4 <= opt_lenb && buf !== -1) {
    /* 4: two words for the lengths */

    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
     * Otherwise we can't have processed more than WSIZE input bytes since
     * the last block flush, because compression would have been
     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
     * transform a block into a stored block.
     */
    _tr_stored_block(s, buf, stored_len, last);
  } else if (s.strategy === Z_FIXED$1 || static_lenb === opt_lenb) {
    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
    compress_block(s, static_ltree, static_dtree);
  } else {
    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
    compress_block(s, s.dyn_ltree, s.dyn_dtree);
  }
  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
  /* The above check is made mod 2^32, for files larger than 512 MB
   * and uLong implemented on 32 bits.
   */
  init_block(s);
  if (last) {
    bi_windup(s);
  }
  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
  //       s->compressed_len-7*last));
}

/* ===========================================================================
 * Save the match info and tally the frequency counts. Return true if
 * the current block must be flushed.
 */
function _tr_tally(s, dist, lc)
//    deflate_state *s;
//    unsigned dist;  /* distance of matched string */
//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
{
  //var out_length, in_length, dcode;

  s.pending_buf[s.d_buf + s.last_lit * 2] = dist >>> 8 & 0xff;
  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;
  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
  s.last_lit++;
  if (dist === 0) {
    /* lc is the unmatched char */
    s.dyn_ltree[lc * 2] /*.Freq*/++;
  } else {
    s.matches++;
    /* Here, lc is the match length - MIN_MATCH */
    dist--; /* dist = match distance - 1 */
    //Assert((ush)dist < (ush)MAX_DIST(s) &&
    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

    s.dyn_ltree[(_length_code[lc] + LITERALS$1 + 1) * 2] /*.Freq*/++;
    s.dyn_dtree[d_code(dist) * 2] /*.Freq*/++;
  }

  // (!) This block is disabled in zlib defaults,
  // don't enable it for binary compatibility

  //#ifdef TRUNCATE_BLOCK
  //  /* Try to guess if it is profitable to stop the current block here */
  //  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
  //    /* Compute an upper bound for the compressed length */
  //    out_length = s.last_lit*8;
  //    in_length = s.strstart - s.block_start;
  //
  //    for (dcode = 0; dcode < D_CODES; dcode++) {
  //      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
  //    }
  //    out_length >>>= 3;
  //    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
  //    //       s->last_lit, in_length, out_length,
  //    //       100L - out_length*100L/in_length));
  //    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
  //      return true;
  //    }
  //  }
  //#endif

  return s.last_lit === s.lit_bufsize - 1;
  /* We avoid equality with lit_bufsize because of wraparound at 64K
   * on 16 bit machines and because stored blocks are restricted to
   * 64K-1 bytes.
   */
}
trees$1._tr_init = _tr_init;
trees$1._tr_stored_block = _tr_stored_block;
trees$1._tr_flush_block = _tr_flush_block;
trees$1._tr_tally = _tr_tally;
trees$1._tr_align = _tr_align;

// Note: adler32 takes 12% for level 0 and 2% for level 6.
// It isn't worth it to make additional optimizations as in original.
// Small size is preferable.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function adler32$2(adler, buf, len, pos) {
  var s1 = adler & 0xffff | 0,
    s2 = adler >>> 16 & 0xffff | 0,
    n = 0;
  while (len !== 0) {
    // Set limit ~ twice less than 5552, to keep
    // s2 in 31-bits, because we force signed ints.
    // in other case %= will fail.
    n = len > 2000 ? 2000 : len;
    len -= n;
    do {
      s1 = s1 + buf[pos++] | 0;
      s2 = s2 + s1 | 0;
    } while (--n);
    s1 %= 65521;
    s2 %= 65521;
  }
  return s1 | s2 << 16 | 0;
}
var adler32_1 = adler32$2;

// Note: we can't get significant speed boost here.
// So write code to minimize size - no pregenerated tables
// and array tools dependencies.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// Use ordinary array, since untyped makes no boost here
function makeTable() {
  var c,
    table = [];
  for (var n = 0; n < 256; n++) {
    c = n;
    for (var k = 0; k < 8; k++) {
      c = c & 1 ? 0xEDB88320 ^ c >>> 1 : c >>> 1;
    }
    table[n] = c;
  }
  return table;
}

// Create table on load. Just 255 signed longs. Not a problem.
var crcTable = makeTable();
function crc32$2(crc, buf, len, pos) {
  var t = crcTable,
    end = pos + len;
  crc ^= -1;
  for (var i = pos; i < end; i++) {
    crc = crc >>> 8 ^ t[(crc ^ buf[i]) & 0xFF];
  }
  return crc ^ -1; // >>> 0;
}
var crc32_1 = crc32$2;

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var messages = {
  2: 'need dictionary',
  /* Z_NEED_DICT       2  */
  1: 'stream end',
  /* Z_STREAM_END      1  */
  0: '',
  /* Z_OK              0  */
  '-1': 'file error',
  /* Z_ERRNO         (-1) */
  '-2': 'stream error',
  /* Z_STREAM_ERROR  (-2) */
  '-3': 'data error',
  /* Z_DATA_ERROR    (-3) */
  '-4': 'insufficient memory',
  /* Z_MEM_ERROR     (-4) */
  '-5': 'buffer error',
  /* Z_BUF_ERROR     (-5) */
  '-6': 'incompatible version' /* Z_VERSION_ERROR (-6) */
};

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils$2 = common;
var trees = trees$1;
var adler32$1 = adler32_1;
var crc32$1 = crc32_1;
var msg = messages;

/* Public constants ==========================================================*/
/* ===========================================================================*/

/* Allowed flush values; see deflate() and inflate() below for details */
var Z_NO_FLUSH = 0;
var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
var Z_FULL_FLUSH = 3;
var Z_FINISH$1 = 4;
var Z_BLOCK$1 = 5;
//var Z_TREES         = 6;

/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK$1 = 0;
var Z_STREAM_END$1 = 1;
//var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR$1 = -2;
var Z_DATA_ERROR$1 = -3;
//var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR$1 = -5;
//var Z_VERSION_ERROR = -6;

/* compression levels */
//var Z_NO_COMPRESSION      = 0;
//var Z_BEST_SPEED          = 1;
//var Z_BEST_COMPRESSION    = 9;
var Z_DEFAULT_COMPRESSION = -1;
var Z_FILTERED = 1;
var Z_HUFFMAN_ONLY = 2;
var Z_RLE = 3;
var Z_FIXED = 4;
var Z_DEFAULT_STRATEGY = 0;

/* Possible values of the data_type field (though see inflate()) */
//var Z_BINARY              = 0;
//var Z_TEXT                = 1;
//var Z_ASCII               = 1; // = Z_TEXT
var Z_UNKNOWN = 2;

/* The deflate compression method */
var Z_DEFLATED$1 = 8;

/*============================================================================*/

var MAX_MEM_LEVEL = 9;
/* Maximum value for memLevel in deflateInit2 */
var MAX_WBITS$1 = 15;
/* 32K LZ77 window */
var DEF_MEM_LEVEL = 8;
var LENGTH_CODES = 29;
/* number of length codes, not counting the special END_BLOCK code */
var LITERALS = 256;
/* number of literal bytes 0..255 */
var L_CODES = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */
var D_CODES = 30;
/* number of distance codes */
var BL_CODES = 19;
/* number of codes used to transfer the bit lengths */
var HEAP_SIZE = 2 * L_CODES + 1;
/* maximum heap size */
var MAX_BITS = 15;
/* All codes must not exceed MAX_BITS bits */

var MIN_MATCH = 3;
var MAX_MATCH = 258;
var MIN_LOOKAHEAD = MAX_MATCH + MIN_MATCH + 1;
var PRESET_DICT = 0x20;
var INIT_STATE = 42;
var EXTRA_STATE = 69;
var NAME_STATE = 73;
var COMMENT_STATE = 91;
var HCRC_STATE = 103;
var BUSY_STATE = 113;
var FINISH_STATE = 666;
var BS_NEED_MORE = 1; /* block not completed, need more input or more output */
var BS_BLOCK_DONE = 2; /* block flush performed */
var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
var BS_FINISH_DONE = 4; /* finish done, accept no more input or output */

var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

function err(strm, errorCode) {
  strm.msg = msg[errorCode];
  return errorCode;
}
function rank(f) {
  return (f << 1) - (f > 4 ? 9 : 0);
}
function zero(buf) {
  var len = buf.length;
  while (--len >= 0) {
    buf[len] = 0;
  }
}

/* =========================================================================
 * Flush as much pending output as possible. All deflate() output goes
 * through this function so some applications may wish to modify it
 * to avoid allocating a large strm->output buffer and copying into it.
 * (See also read_buf()).
 */
function flush_pending(strm) {
  var s = strm.state;

  //_tr_flush_bits(s);
  var len = s.pending;
  if (len > strm.avail_out) {
    len = strm.avail_out;
  }
  if (len === 0) {
    return;
  }
  utils$2.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
  strm.next_out += len;
  s.pending_out += len;
  strm.total_out += len;
  strm.avail_out -= len;
  s.pending -= len;
  if (s.pending === 0) {
    s.pending_out = 0;
  }
}
function flush_block_only(s, last) {
  trees._tr_flush_block(s, s.block_start >= 0 ? s.block_start : -1, s.strstart - s.block_start, last);
  s.block_start = s.strstart;
  flush_pending(s.strm);
}
function put_byte(s, b) {
  s.pending_buf[s.pending++] = b;
}

/* =========================================================================
 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
 * IN assertion: the stream state is correct and there is enough room in
 * pending_buf.
 */
function putShortMSB(s, b) {
  //  put_byte(s, (Byte)(b >> 8));
  //  put_byte(s, (Byte)(b & 0xff));
  s.pending_buf[s.pending++] = b >>> 8 & 0xff;
  s.pending_buf[s.pending++] = b & 0xff;
}

/* ===========================================================================
 * Read a new buffer from the current input stream, update the adler32
 * and total number of bytes read.  All deflate() input goes through
 * this function so some applications may wish to modify it to avoid
 * allocating a large strm->input buffer and copying from it.
 * (See also flush_pending()).
 */
function read_buf(strm, buf, start, size) {
  var len = strm.avail_in;
  if (len > size) {
    len = size;
  }
  if (len === 0) {
    return 0;
  }
  strm.avail_in -= len;

  // zmemcpy(buf, strm->next_in, len);
  utils$2.arraySet(buf, strm.input, strm.next_in, len, start);
  if (strm.state.wrap === 1) {
    strm.adler = adler32$1(strm.adler, buf, len, start);
  } else if (strm.state.wrap === 2) {
    strm.adler = crc32$1(strm.adler, buf, len, start);
  }
  strm.next_in += len;
  strm.total_in += len;
  return len;
}

/* ===========================================================================
 * Set match_start to the longest match starting at the given string and
 * return its length. Matches shorter or equal to prev_length are discarded,
 * in which case the result is equal to prev_length and match_start is
 * garbage.
 * IN assertions: cur_match is the head of the hash chain for the current
 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
 * OUT assertion: the match length is not greater than s->lookahead.
 */
function longest_match(s, cur_match) {
  var chain_length = s.max_chain_length; /* max hash chain length */
  var scan = s.strstart; /* current string */
  var match; /* matched string */
  var len; /* length of current match */
  var best_len = s.prev_length; /* best match length so far */
  var nice_match = s.nice_match; /* stop if match long enough */
  var limit = s.strstart > s.w_size - MIN_LOOKAHEAD ? s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0 /*NIL*/;
  var _win = s.window; // shortcut

  var wmask = s.w_mask;
  var prev = s.prev;

  /* Stop when cur_match becomes <= limit. To simplify the code,
   * we prevent matches with the string of window index 0.
   */

  var strend = s.strstart + MAX_MATCH;
  var scan_end1 = _win[scan + best_len - 1];
  var scan_end = _win[scan + best_len];

  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
   * It is easy to get rid of this optimization if necessary.
   */
  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

  /* Do not waste too much time if we already have a good match: */
  if (s.prev_length >= s.good_match) {
    chain_length >>= 2;
  }
  /* Do not look for matches beyond the end of the input. This is necessary
   * to make deflate deterministic.
   */
  if (nice_match > s.lookahead) {
    nice_match = s.lookahead;
  }

  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

  do {
    // Assert(cur_match < s->strstart, "no future");
    match = cur_match;

    /* Skip to next match if the match length cannot increase
     * or if the match length is less than 2.  Note that the checks below
     * for insufficient lookahead only occur occasionally for performance
     * reasons.  Therefore uninitialized memory will be accessed, and
     * conditional jumps will be made that depend on those values.
     * However the length of the match is limited to the lookahead, so
     * the output of deflate is not affected by the uninitialized values.
     */

    if (_win[match + best_len] !== scan_end || _win[match + best_len - 1] !== scan_end1 || _win[match] !== _win[scan] || _win[++match] !== _win[scan + 1]) {
      continue;
    }

    /* The check at best_len-1 can be removed because it will be made
     * again later. (This heuristic is not always a win.)
     * It is not necessary to compare scan[2] and match[2] since they
     * are always equal when the other bytes match, given that
     * the hash keys are equal and that HASH_BITS >= 8.
     */
    scan += 2;
    match++;
    // Assert(*scan == *match, "match[2]?");

    /* We check for insufficient lookahead only every 8th comparison;
     * the 256th check will be made at strstart+258.
     */
    do {
      /*jshint noempty:false*/
    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && scan < strend);

    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

    len = MAX_MATCH - (strend - scan);
    scan = strend - MAX_MATCH;
    if (len > best_len) {
      s.match_start = cur_match;
      best_len = len;
      if (len >= nice_match) {
        break;
      }
      scan_end1 = _win[scan + best_len - 1];
      scan_end = _win[scan + best_len];
    }
  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);
  if (best_len <= s.lookahead) {
    return best_len;
  }
  return s.lookahead;
}

/* ===========================================================================
 * Fill the window when the lookahead becomes insufficient.
 * Updates strstart and lookahead.
 *
 * IN assertion: lookahead < MIN_LOOKAHEAD
 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
 *    At least one byte has been read, or avail_in == 0; reads are
 *    performed for at least two bytes (required for the zip translate_eol
 *    option -- not supported here).
 */
function fill_window(s) {
  var _w_size = s.w_size;
  var p, n, m, more, str;

  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

  do {
    more = s.window_size - s.lookahead - s.strstart;

    // JS ints have 32 bit, block below not needed
    /* Deal with !@#$% 64K limit: */
    //if (sizeof(int) <= 2) {
    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
    //        more = wsize;
    //
    //  } else if (more == (unsigned)(-1)) {
    //        /* Very unlikely, but possible on 16 bit machine if
    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
    //         */
    //        more--;
    //    }
    //}

    /* If the window is almost full and there is insufficient lookahead,
     * move the upper half to the lower one to make room in the upper half.
     */
    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {
      utils$2.arraySet(s.window, s.window, _w_size, _w_size, 0);
      s.match_start -= _w_size;
      s.strstart -= _w_size;
      /* we now have strstart >= MAX_DIST */
      s.block_start -= _w_size;

      /* Slide the hash table (could be avoided with 32 bit values
       at the expense of memory usage). We slide even when level == 0
       to keep the hash table consistent if we switch back to level > 0
       later. (Using level 0 permanently is not an optimal usage of
       zlib, so we don't care about this pathological case.)
       */

      n = s.hash_size;
      p = n;
      do {
        m = s.head[--p];
        s.head[p] = m >= _w_size ? m - _w_size : 0;
      } while (--n);
      n = _w_size;
      p = n;
      do {
        m = s.prev[--p];
        s.prev[p] = m >= _w_size ? m - _w_size : 0;
        /* If n is not on any hash chain, prev[n] is garbage but
         * its value will never be used.
         */
      } while (--n);
      more += _w_size;
    }
    if (s.strm.avail_in === 0) {
      break;
    }

    /* If there was no sliding:
     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
     *    more == window_size - lookahead - strstart
     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
     * => more >= window_size - 2*WSIZE + 2
     * In the BIG_MEM or MMAP case (not yet supported),
     *   window_size == input_size + MIN_LOOKAHEAD  &&
     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
     * Otherwise, window_size == 2*WSIZE so more >= 2.
     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
     */
    //Assert(more >= 2, "more < 2");
    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
    s.lookahead += n;

    /* Initialize the hash value now that we have some input: */
    if (s.lookahead + s.insert >= MIN_MATCH) {
      str = s.strstart - s.insert;
      s.ins_h = s.window[str];

      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
      s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + 1]) & s.hash_mask;
      //#if MIN_MATCH != 3
      //        Call update_hash() MIN_MATCH-3 more times
      //#endif
      while (s.insert) {
        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
        s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;
        s.prev[str & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = str;
        str++;
        s.insert--;
        if (s.lookahead + s.insert < MIN_MATCH) {
          break;
        }
      }
    }
    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
     * but this is not important since only literal bytes will be emitted.
     */
  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

  /* If the WIN_INIT bytes after the end of the current data have never been
   * written, then zero those bytes in order to avoid memory check reports of
   * the use of uninitialized (or uninitialised as Julian writes) bytes by
   * the longest match routines.  Update the high water mark for the next
   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
   */
  //  if (s.high_water < s.window_size) {
  //    var curr = s.strstart + s.lookahead;
  //    var init = 0;
  //
  //    if (s.high_water < curr) {
  //      /* Previous high water mark below current data -- zero WIN_INIT
  //       * bytes or up to end of window, whichever is less.
  //       */
  //      init = s.window_size - curr;
  //      if (init > WIN_INIT)
  //        init = WIN_INIT;
  //      zmemzero(s->window + curr, (unsigned)init);
  //      s->high_water = curr + init;
  //    }
  //    else if (s->high_water < (ulg)curr + WIN_INIT) {
  //      /* High water mark at or above current data, but below current data
  //       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
  //       * to end of window, whichever is less.
  //       */
  //      init = (ulg)curr + WIN_INIT - s->high_water;
  //      if (init > s->window_size - s->high_water)
  //        init = s->window_size - s->high_water;
  //      zmemzero(s->window + s->high_water, (unsigned)init);
  //      s->high_water += init;
  //    }
  //  }
  //
  //  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
  //    "not enough room for search");
}

/* ===========================================================================
 * Copy without compression as much as possible from the input stream, return
 * the current block state.
 * This function does not insert new strings in the dictionary since
 * uncompressible data is probably not useful. This function is used
 * only for the level=0 compression option.
 * NOTE: this function should be optimized to avoid extra copying from
 * window to pending_buf.
 */
function deflate_stored(s, flush) {
  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
   * to pending_buf_size, and each stored block has a 5 byte header:
   */
  var max_block_size = 0xffff;
  if (max_block_size > s.pending_buf_size - 5) {
    max_block_size = s.pending_buf_size - 5;
  }

  /* Copy as much as possible from input to output: */
  for (;;) {
    /* Fill the window as much as possible: */
    if (s.lookahead <= 1) {
      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
      //  s->block_start >= (long)s->w_size, "slide too late");
      //      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
      //        s.block_start >= s.w_size)) {
      //        throw  new Error("slide too late");
      //      }

      fill_window(s);
      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break;
      }
      /* flush the current block */
    }
    //Assert(s->block_start >= 0L, "block gone");
    //    if (s.block_start < 0) throw new Error("block gone");

    s.strstart += s.lookahead;
    s.lookahead = 0;

    /* Emit a stored block if pending_buf will be full: */
    var max_start = s.block_start + max_block_size;
    if (s.strstart === 0 || s.strstart >= max_start) {
      /* strstart == 0 is possible when wraparound on 16-bit machine */
      s.lookahead = s.strstart - max_start;
      s.strstart = max_start;
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
    /* Flush if we may have to slide, otherwise block_start may become
     * negative and the data will be gone:
     */
    if (s.strstart - s.block_start >= s.w_size - MIN_LOOKAHEAD) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH$1) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.strstart > s.block_start) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_NEED_MORE;
}

/* ===========================================================================
 * Compress as much as possible from the input stream, return the current
 * block state.
 * This function does not perform lazy evaluation of matches and inserts
 * new strings in the dictionary only for unmatched strings or for short
 * matches. It is used only for the fast compression options.
 */
function deflate_fast(s, flush) {
  var hash_head; /* head of the hash chain */
  var bflush; /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break; /* flush the current block */
      }
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0 /*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     * At this point we have always match_length < MIN_MATCH
     */
    if (hash_head !== 0 /*NIL*/ && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */
    }
    if (s.match_length >= MIN_MATCH) {
      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

      /*** _tr_tally_dist(s, s.strstart - s.match_start,
                     s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);
      s.lookahead -= s.match_length;

      /* Insert new strings in the hash table only if the match length
       * is not too large. This saves time but degrades compression.
       */
      if (s.match_length <= s.max_lazy_match /*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
        s.match_length--; /* string at strstart already in table */
        do {
          s.strstart++;
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
           * always MIN_MATCH bytes ahead.
           */
        } while (--s.match_length !== 0);
        s.strstart++;
      } else {
        s.strstart += s.match_length;
        s.match_length = 0;
        s.ins_h = s.window[s.strstart];
        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
        s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + 1]) & s.hash_mask;

        //#if MIN_MATCH != 3
        //                Call UPDATE_HASH() MIN_MATCH-3 more times
        //#endif
        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
         * matter since it will be recomputed at next deflate call.
         */
      }
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s.window[s.strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
  if (flush === Z_FINISH$1) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * Same as above, but achieves better compression. We use a lazy
 * evaluation for matches: a match is finally adopted only if there is
 * no better match at the next window position.
 */
function deflate_slow(s, flush) {
  var hash_head; /* head of hash chain */
  var bflush; /* set if current block must be flushed */

  var max_insert;

  /* Process the input block. */
  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break;
      } /* flush the current block */
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0 /*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     */
    s.prev_length = s.match_length;
    s.prev_match = s.match_start;
    s.match_length = MIN_MATCH - 1;
    if (hash_head !== 0 /*NIL*/ && s.prev_length < s.max_lazy_match && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD /*MAX_DIST(s)*/) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */

      if (s.match_length <= 5 && (s.strategy === Z_FILTERED || s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096 /*TOO_FAR*/)) {
        /* If prev_match is also MIN_MATCH, match_start is garbage
         * but we will ignore the current match anyway.
         */
        s.match_length = MIN_MATCH - 1;
      }
    }
    /* If there was a match at the previous step and the current
     * match is not better, output the previous match:
     */
    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
      max_insert = s.strstart + s.lookahead - MIN_MATCH;
      /* Do not insert strings in hash table beyond this. */

      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                     s.prev_length - MIN_MATCH, bflush);***/
      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
      /* Insert in hash table all strings up to the end of the match.
       * strstart-1 and strstart are already inserted. If there is not
       * enough lookahead, the last two strings are not inserted in
       * the hash table.
       */
      s.lookahead -= s.prev_length - 1;
      s.prev_length -= 2;
      do {
        if (++s.strstart <= max_insert) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }
      } while (--s.prev_length !== 0);
      s.match_available = 0;
      s.match_length = MIN_MATCH - 1;
      s.strstart++;
      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }
    } else if (s.match_available) {
      /* If there was no match at the previous position, output a
       * single literal. If there was a match but the current match
       * is longer, truncate the previous match to a single literal.
       */
      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);
      if (bflush) {
        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
        flush_block_only(s, false);
        /***/
      }
      s.strstart++;
      s.lookahead--;
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    } else {
      /* There is no previous match to compare with, wait for
       * the next step to decide.
       */
      s.match_available = 1;
      s.strstart++;
      s.lookahead--;
    }
  }
  //Assert (flush != Z_NO_FLUSH, "no flush?");
  if (s.match_available) {
    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);
    s.match_available = 0;
  }
  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
  if (flush === Z_FINISH$1) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
 * deflate switches away from Z_RLE.)
 */
function deflate_rle(s, flush) {
  var bflush; /* set if current block must be flushed */
  var prev; /* byte at distance one to match */
  var scan, strend; /* scan goes up to strend for length of run */

  var _win = s.window;
  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the longest run, plus one for the unrolled loop.
     */
    if (s.lookahead <= MAX_MATCH) {
      fill_window(s);
      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break;
      } /* flush the current block */
    }

    /* See how many times the previous byte repeats */
    s.match_length = 0;
    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
      scan = s.strstart - 1;
      prev = _win[scan];
      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
        strend = s.strstart + MAX_MATCH;
        do {
          /*jshint noempty:false*/
        } while (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && scan < strend);
        s.match_length = MAX_MATCH - (strend - scan);
        if (s.match_length > s.lookahead) {
          s.match_length = s.lookahead;
        }
      }
      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
    }

    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
    if (s.match_length >= MIN_MATCH) {
      //check_match(s, s.strstart, s.strstart - 1, s.match_length);

      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);
      s.lookahead -= s.match_length;
      s.strstart += s.match_length;
      s.match_length = 0;
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s->window[s->strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH$1) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
 * (It will be regenerated if this run of deflate switches away from Huffman.)
 */
function deflate_huff(s, flush) {
  var bflush; /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we have a literal to write. */
    if (s.lookahead === 0) {
      fill_window(s);
      if (s.lookahead === 0) {
        if (flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }
        break; /* flush the current block */
      }
    }

    /* Output a literal byte */
    s.match_length = 0;
    //Tracevv((stderr,"%c", s->window[s->strstart]));
    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
    s.lookahead--;
    s.strstart++;
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH$1) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* Values for max_lazy_match, good_match and max_chain_length, depending on
 * the desired pack level (0..9). The values given below have been tuned to
 * exclude worst case performance for pathological files. Better values may be
 * found for specific files.
 */
function Config(good_length, max_lazy, nice_length, max_chain, func) {
  this.good_length = good_length;
  this.max_lazy = max_lazy;
  this.nice_length = nice_length;
  this.max_chain = max_chain;
  this.func = func;
}
var configuration_table;
configuration_table = [/*      good lazy nice chain */
new Config(0, 0, 0, 0, deflate_stored), /* 0 store only */
new Config(4, 4, 8, 4, deflate_fast), /* 1 max speed, no lazy matches */
new Config(4, 5, 16, 8, deflate_fast), /* 2 */
new Config(4, 6, 32, 32, deflate_fast), /* 3 */

new Config(4, 4, 16, 16, deflate_slow), /* 4 lazy matches */
new Config(8, 16, 32, 32, deflate_slow), /* 5 */
new Config(8, 16, 128, 128, deflate_slow), /* 6 */
new Config(8, 32, 128, 256, deflate_slow), /* 7 */
new Config(32, 128, 258, 1024, deflate_slow), /* 8 */
new Config(32, 258, 258, 4096, deflate_slow) /* 9 max compression */];

/* ===========================================================================
 * Initialize the "longest match" routines for a new zlib stream
 */
function lm_init(s) {
  s.window_size = 2 * s.w_size;

  /*** CLEAR_HASH(s); ***/
  zero(s.head); // Fill with NIL (= 0);

  /* Set the default configuration parameters:
   */
  s.max_lazy_match = configuration_table[s.level].max_lazy;
  s.good_match = configuration_table[s.level].good_length;
  s.nice_match = configuration_table[s.level].nice_length;
  s.max_chain_length = configuration_table[s.level].max_chain;
  s.strstart = 0;
  s.block_start = 0;
  s.lookahead = 0;
  s.insert = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  s.ins_h = 0;
}
function DeflateState() {
  this.strm = null; /* pointer back to this zlib stream */
  this.status = 0; /* as the name implies */
  this.pending_buf = null; /* output still pending */
  this.pending_buf_size = 0; /* size of pending_buf */
  this.pending_out = 0; /* next pending byte to output to the stream */
  this.pending = 0; /* nb of bytes in the pending buffer */
  this.wrap = 0; /* bit 0 true for zlib, bit 1 true for gzip */
  this.gzhead = null; /* gzip header information to write */
  this.gzindex = 0; /* where in extra, name, or comment */
  this.method = Z_DEFLATED$1; /* can only be DEFLATED */
  this.last_flush = -1; /* value of flush param for previous deflate call */

  this.w_size = 0; /* LZ77 window size (32K by default) */
  this.w_bits = 0; /* log2(w_size)  (8..16) */
  this.w_mask = 0; /* w_size - 1 */

  this.window = null;
  /* Sliding window. Input bytes are read into the second half of the window,
   * and move to the first half later to keep a dictionary of at least wSize
   * bytes. With this organization, matches are limited to a distance of
   * wSize-MAX_MATCH bytes, but this ensures that IO is always
   * performed with a length multiple of the block size.
   */

  this.window_size = 0;
  /* Actual size of window: 2*wSize, except when the user input buffer
   * is directly used as sliding window.
   */

  this.prev = null;
  /* Link to older string with same hash index. To limit the size of this
   * array to 64K, this link is maintained only for the last 32K strings.
   * An index in this array is thus a window index modulo 32K.
   */

  this.head = null; /* Heads of the hash chains or NIL. */

  this.ins_h = 0; /* hash index of string to be inserted */
  this.hash_size = 0; /* number of elements in hash table */
  this.hash_bits = 0; /* log2(hash_size) */
  this.hash_mask = 0; /* hash_size-1 */

  this.hash_shift = 0;
  /* Number of bits by which ins_h must be shifted at each input
   * step. It must be such that after MIN_MATCH steps, the oldest
   * byte no longer takes part in the hash key, that is:
   *   hash_shift * MIN_MATCH >= hash_bits
   */

  this.block_start = 0;
  /* Window position at the beginning of the current output block. Gets
   * negative when the window is moved backwards.
   */

  this.match_length = 0; /* length of best match */
  this.prev_match = 0; /* previous match */
  this.match_available = 0; /* set if previous match exists */
  this.strstart = 0; /* start of string to insert */
  this.match_start = 0; /* start of matching string */
  this.lookahead = 0; /* number of valid bytes ahead in window */

  this.prev_length = 0;
  /* Length of the best match at previous step. Matches not greater than this
   * are discarded. This is used in the lazy match evaluation.
   */

  this.max_chain_length = 0;
  /* To speed up deflation, hash chains are never searched beyond this
   * length.  A higher limit improves compression ratio but degrades the
   * speed.
   */

  this.max_lazy_match = 0;
  /* Attempt to find a better match only when the current match is strictly
   * smaller than this value. This mechanism is used only for compression
   * levels >= 4.
   */
  // That's alias to max_lazy_match, don't use directly
  //this.max_insert_length = 0;
  /* Insert new strings in the hash table only if the match length is not
   * greater than this length. This saves time but degrades compression.
   * max_insert_length is used only for compression levels <= 3.
   */

  this.level = 0; /* compression level (1..9) */
  this.strategy = 0; /* favor or force Huffman coding*/

  this.good_match = 0;
  /* Use a faster search when the previous match is longer than this */

  this.nice_match = 0; /* Stop searching when current match exceeds this */

  /* used by trees.c: */

  /* Didn't use ct_data typedef below to suppress compiler warning */

  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

  // Use flat array of DOUBLE size, with interleaved fata,
  // because JS does not support effective
  this.dyn_ltree = new utils$2.Buf16(HEAP_SIZE * 2);
  this.dyn_dtree = new utils$2.Buf16((2 * D_CODES + 1) * 2);
  this.bl_tree = new utils$2.Buf16((2 * BL_CODES + 1) * 2);
  zero(this.dyn_ltree);
  zero(this.dyn_dtree);
  zero(this.bl_tree);
  this.l_desc = null; /* desc. for literal tree */
  this.d_desc = null; /* desc. for distance tree */
  this.bl_desc = null; /* desc. for bit length tree */

  //ush bl_count[MAX_BITS+1];
  this.bl_count = new utils$2.Buf16(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
  this.heap = new utils$2.Buf16(2 * L_CODES + 1); /* heap used to build the Huffman trees */
  zero(this.heap);
  this.heap_len = 0; /* number of elements in the heap */
  this.heap_max = 0; /* element of largest frequency */
  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
   * The same heap array is used to build all trees.
   */

  this.depth = new utils$2.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
  zero(this.depth);
  /* Depth of each subtree used as tie breaker for trees of equal frequency
   */

  this.l_buf = 0; /* buffer index for literals or lengths */

  this.lit_bufsize = 0;
  /* Size of match buffer for literals/lengths.  There are 4 reasons for
   * limiting lit_bufsize to 64K:
   *   - frequencies can be kept in 16 bit counters
   *   - if compression is not successful for the first block, all input
   *     data is still in the window so we can still emit a stored block even
   *     when input comes from standard input.  (This can also be done for
   *     all blocks if lit_bufsize is not greater than 32K.)
   *   - if compression is not successful for a file smaller than 64K, we can
   *     even emit a stored file instead of a stored block (saving 5 bytes).
   *     This is applicable only for zip (not gzip or zlib).
   *   - creating new Huffman trees less frequently may not provide fast
   *     adaptation to changes in the input data statistics. (Take for
   *     example a binary file with poorly compressible code followed by
   *     a highly compressible string table.) Smaller buffer sizes give
   *     fast adaptation but have of course the overhead of transmitting
   *     trees more frequently.
   *   - I can't count above 4
   */

  this.last_lit = 0; /* running index in l_buf */

  this.d_buf = 0;
  /* Buffer index for distances. To simplify the code, d_buf and l_buf have
   * the same number of elements. To use different lengths, an extra flag
   * array would be necessary.
   */

  this.opt_len = 0; /* bit length of current block with optimal trees */
  this.static_len = 0; /* bit length of current block with static trees */
  this.matches = 0; /* number of string matches in current block */
  this.insert = 0; /* bytes at end of window left to insert */

  this.bi_buf = 0;
  /* Output buffer. bits are inserted starting at the bottom (least
   * significant bits).
   */
  this.bi_valid = 0;
  /* Number of valid bits in bi_buf.  All bits above the last valid bit
   * are always zero.
   */

  // Used for window memory init. We safely ignore it for JS. That makes
  // sense only for pointers and memory check tools.
  //this.high_water = 0;
  /* High water mark offset in window for initialized bytes -- bytes above
   * this are set to zero in order to avoid memory check warnings when
   * longest match routines access bytes past the input.  This is then
   * updated to the new high water mark.
   */
}
function deflateResetKeep(strm) {
  var s;
  if (!strm || !strm.state) {
    return err(strm, Z_STREAM_ERROR$1);
  }
  strm.total_in = strm.total_out = 0;
  strm.data_type = Z_UNKNOWN;
  s = strm.state;
  s.pending = 0;
  s.pending_out = 0;
  if (s.wrap < 0) {
    s.wrap = -s.wrap;
    /* was made negative by deflate(..., Z_FINISH); */
  }
  s.status = s.wrap ? INIT_STATE : BUSY_STATE;
  strm.adler = s.wrap === 2 ? 0 // crc32(0, Z_NULL, 0)
  : 1; // adler32(0, Z_NULL, 0)
  s.last_flush = Z_NO_FLUSH;
  trees._tr_init(s);
  return Z_OK$1;
}
function deflateReset(strm) {
  var ret = deflateResetKeep(strm);
  if (ret === Z_OK$1) {
    lm_init(strm.state);
  }
  return ret;
}
function deflateSetHeader(strm, head) {
  if (!strm || !strm.state) {
    return Z_STREAM_ERROR$1;
  }
  if (strm.state.wrap !== 2) {
    return Z_STREAM_ERROR$1;
  }
  strm.state.gzhead = head;
  return Z_OK$1;
}
function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
  if (!strm) {
    // === Z_NULL
    return Z_STREAM_ERROR$1;
  }
  var wrap = 1;
  if (level === Z_DEFAULT_COMPRESSION) {
    level = 6;
  }
  if (windowBits < 0) {
    /* suppress zlib wrapper */
    wrap = 0;
    windowBits = -windowBits;
  } else if (windowBits > 15) {
    wrap = 2; /* write gzip wrapper instead */
    windowBits -= 16;
  }
  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED$1 || windowBits < 8 || windowBits > 15 || level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED) {
    return err(strm, Z_STREAM_ERROR$1);
  }
  if (windowBits === 8) {
    windowBits = 9;
  }
  /* until 256-byte window bug fixed */

  var s = new DeflateState();
  strm.state = s;
  s.strm = strm;
  s.wrap = wrap;
  s.gzhead = null;
  s.w_bits = windowBits;
  s.w_size = 1 << s.w_bits;
  s.w_mask = s.w_size - 1;
  s.hash_bits = memLevel + 7;
  s.hash_size = 1 << s.hash_bits;
  s.hash_mask = s.hash_size - 1;
  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);
  s.window = new utils$2.Buf8(s.w_size * 2);
  s.head = new utils$2.Buf16(s.hash_size);
  s.prev = new utils$2.Buf16(s.w_size);

  // Don't need mem init magic for JS.
  //s.high_water = 0;  /* nothing written to s->window yet */

  s.lit_bufsize = 1 << memLevel + 6; /* 16K elements by default */

  s.pending_buf_size = s.lit_bufsize * 4;

  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
  //s->pending_buf = (uchf *) overlay;
  s.pending_buf = new utils$2.Buf8(s.pending_buf_size);

  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
  s.d_buf = 1 * s.lit_bufsize;

  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
  s.l_buf = (1 + 2) * s.lit_bufsize;
  s.level = level;
  s.strategy = strategy;
  s.method = method;
  return deflateReset(strm);
}
function deflateInit(strm, level) {
  return deflateInit2(strm, level, Z_DEFLATED$1, MAX_WBITS$1, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
}
function png_js_browser_deflate(strm, flush) {
  var old_flush, s;
  var beg, val; // for gzip header write only

  if (!strm || !strm.state || flush > Z_BLOCK$1 || flush < 0) {
    return strm ? err(strm, Z_STREAM_ERROR$1) : Z_STREAM_ERROR$1;
  }
  s = strm.state;
  if (!strm.output || !strm.input && strm.avail_in !== 0 || s.status === FINISH_STATE && flush !== Z_FINISH$1) {
    return err(strm, strm.avail_out === 0 ? Z_BUF_ERROR$1 : Z_STREAM_ERROR$1);
  }
  s.strm = strm; /* just in case */
  old_flush = s.last_flush;
  s.last_flush = flush;

  /* Write the header */
  if (s.status === INIT_STATE) {
    if (s.wrap === 2) {
      // GZIP header
      strm.adler = 0; //crc32(0L, Z_NULL, 0);
      put_byte(s, 31);
      put_byte(s, 139);
      put_byte(s, 8);
      if (!s.gzhead) {
        // s->gzhead == Z_NULL
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
        put_byte(s, OS_CODE);
        s.status = BUSY_STATE;
      } else {
        put_byte(s, (s.gzhead.text ? 1 : 0) + (s.gzhead.hcrc ? 2 : 0) + (!s.gzhead.extra ? 0 : 4) + (!s.gzhead.name ? 0 : 8) + (!s.gzhead.comment ? 0 : 16));
        put_byte(s, s.gzhead.time & 0xff);
        put_byte(s, s.gzhead.time >> 8 & 0xff);
        put_byte(s, s.gzhead.time >> 16 & 0xff);
        put_byte(s, s.gzhead.time >> 24 & 0xff);
        put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
        put_byte(s, s.gzhead.os & 0xff);
        if (s.gzhead.extra && s.gzhead.extra.length) {
          put_byte(s, s.gzhead.extra.length & 0xff);
          put_byte(s, s.gzhead.extra.length >> 8 & 0xff);
        }
        if (s.gzhead.hcrc) {
          strm.adler = crc32$1(strm.adler, s.pending_buf, s.pending, 0);
        }
        s.gzindex = 0;
        s.status = EXTRA_STATE;
      }
    } else
      // DEFLATE header
      {
        var header = Z_DEFLATED$1 + (s.w_bits - 8 << 4) << 8;
        var level_flags = -1;
        if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
          level_flags = 0;
        } else if (s.level < 6) {
          level_flags = 1;
        } else if (s.level === 6) {
          level_flags = 2;
        } else {
          level_flags = 3;
        }
        header |= level_flags << 6;
        if (s.strstart !== 0) {
          header |= PRESET_DICT;
        }
        header += 31 - header % 31;
        s.status = BUSY_STATE;
        putShortMSB(s, header);

        /* Save the adler32 of the preset dictionary: */
        if (s.strstart !== 0) {
          putShortMSB(s, strm.adler >>> 16);
          putShortMSB(s, strm.adler & 0xffff);
        }
        strm.adler = 1; // adler32(0L, Z_NULL, 0);
      }
  }

  //#ifdef GZIP
  if (s.status === EXTRA_STATE) {
    if (s.gzhead.extra /* != Z_NULL*/) {
      beg = s.pending; /* start of bytes to update crc */

      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32$1(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            break;
          }
        }
        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
        s.gzindex++;
      }
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32$1(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (s.gzindex === s.gzhead.extra.length) {
        s.gzindex = 0;
        s.status = NAME_STATE;
      }
    } else {
      s.status = NAME_STATE;
    }
  }
  if (s.status === NAME_STATE) {
    if (s.gzhead.name /* != Z_NULL*/) {
      beg = s.pending; /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32$1(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.name.length) {
          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32$1(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.gzindex = 0;
        s.status = COMMENT_STATE;
      }
    } else {
      s.status = COMMENT_STATE;
    }
  }
  if (s.status === COMMENT_STATE) {
    if (s.gzhead.comment /* != Z_NULL*/) {
      beg = s.pending; /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32$1(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.comment.length) {
          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32$1(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.status = HCRC_STATE;
      }
    } else {
      s.status = HCRC_STATE;
    }
  }
  if (s.status === HCRC_STATE) {
    if (s.gzhead.hcrc) {
      if (s.pending + 2 > s.pending_buf_size) {
        flush_pending(strm);
      }
      if (s.pending + 2 <= s.pending_buf_size) {
        put_byte(s, strm.adler & 0xff);
        put_byte(s, strm.adler >> 8 & 0xff);
        strm.adler = 0; //crc32(0L, Z_NULL, 0);
        s.status = BUSY_STATE;
      }
    } else {
      s.status = BUSY_STATE;
    }
  }
  //#endif

  /* Flush as much pending output as possible */
  if (s.pending !== 0) {
    flush_pending(strm);
    if (strm.avail_out === 0) {
      /* Since avail_out is 0, deflate will be called again with
       * more output space, but possibly with both pending and
       * avail_in equal to zero. There won't be anything to do,
       * but this is not an error situation so make sure we
       * return OK instead of BUF_ERROR at next call of deflate:
       */
      s.last_flush = -1;
      return Z_OK$1;
    }

    /* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUF_ERROR.
     */
  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) && flush !== Z_FINISH$1) {
    return err(strm, Z_BUF_ERROR$1);
  }

  /* User must not provide more input after the first FINISH: */
  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
    return err(strm, Z_BUF_ERROR$1);
  }

  /* Start a new block or continue the current one.
   */
  if (strm.avail_in !== 0 || s.lookahead !== 0 || flush !== Z_NO_FLUSH && s.status !== FINISH_STATE) {
    var bstate = s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) : s.strategy === Z_RLE ? deflate_rle(s, flush) : configuration_table[s.level].func(s, flush);
    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
      s.status = FINISH_STATE;
    }
    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
      if (strm.avail_out === 0) {
        s.last_flush = -1;
        /* avoid BUF_ERROR next call, see above */
      }
      return Z_OK$1;
      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
       * of deflate should use the same flush parameter to make sure
       * that the flush is complete. So we don't have to output an
       * empty block here, this will be done at next call. This also
       * ensures that for a very small output buffer, we emit at most
       * one empty block.
       */
    }
    if (bstate === BS_BLOCK_DONE) {
      if (flush === Z_PARTIAL_FLUSH) {
        trees._tr_align(s);
      } else if (flush !== Z_BLOCK$1) {
        /* FULL_FLUSH or SYNC_FLUSH */

        trees._tr_stored_block(s, 0, 0, false);
        /* For a full flush, this empty block will be recognized
         * as a special marker by inflate_sync().
         */
        if (flush === Z_FULL_FLUSH) {
          /*** CLEAR_HASH(s); ***/ /* forget history */
          zero(s.head); // Fill with NIL (= 0);

          if (s.lookahead === 0) {
            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
          }
        }
      }
      flush_pending(strm);
      if (strm.avail_out === 0) {
        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
        return Z_OK$1;
      }
    }
  }
  //Assert(strm->avail_out > 0, "bug2");
  //if (strm.avail_out <= 0) { throw new Error("bug2");}

  if (flush !== Z_FINISH$1) {
    return Z_OK$1;
  }
  if (s.wrap <= 0) {
    return Z_STREAM_END$1;
  }

  /* Write the trailer */
  if (s.wrap === 2) {
    put_byte(s, strm.adler & 0xff);
    put_byte(s, strm.adler >> 8 & 0xff);
    put_byte(s, strm.adler >> 16 & 0xff);
    put_byte(s, strm.adler >> 24 & 0xff);
    put_byte(s, strm.total_in & 0xff);
    put_byte(s, strm.total_in >> 8 & 0xff);
    put_byte(s, strm.total_in >> 16 & 0xff);
    put_byte(s, strm.total_in >> 24 & 0xff);
  } else {
    putShortMSB(s, strm.adler >>> 16);
    putShortMSB(s, strm.adler & 0xffff);
  }
  flush_pending(strm);
  /* If avail_out is zero, the application will call deflate again
   * to flush the rest.
   */
  if (s.wrap > 0) {
    s.wrap = -s.wrap;
  }
  /* write the trailer only once! */
  return s.pending !== 0 ? Z_OK$1 : Z_STREAM_END$1;
}
function deflateEnd(strm) {
  var status;
  if (!strm /*== Z_NULL*/ || !strm.state /*== Z_NULL*/) {
    return Z_STREAM_ERROR$1;
  }
  status = strm.state.status;
  if (status !== INIT_STATE && status !== EXTRA_STATE && status !== NAME_STATE && status !== COMMENT_STATE && status !== HCRC_STATE && status !== BUSY_STATE && status !== FINISH_STATE) {
    return err(strm, Z_STREAM_ERROR$1);
  }
  strm.state = null;
  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR$1) : Z_OK$1;
}

/* =========================================================================
 * Initializes the compression dictionary from the given byte
 * sequence without producing any compressed output.
 */
function deflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;
  var s;
  var str, n;
  var wrap;
  var avail;
  var next;
  var input;
  var tmpDict;
  if (!strm /*== Z_NULL*/ || !strm.state /*== Z_NULL*/) {
    return Z_STREAM_ERROR$1;
  }
  s = strm.state;
  wrap = s.wrap;
  if (wrap === 2 || wrap === 1 && s.status !== INIT_STATE || s.lookahead) {
    return Z_STREAM_ERROR$1;
  }

  /* when using zlib wrappers, compute Adler-32 for provided dictionary */
  if (wrap === 1) {
    /* adler32(strm->adler, dictionary, dictLength); */
    strm.adler = adler32$1(strm.adler, dictionary, dictLength, 0);
  }
  s.wrap = 0; /* avoid computing Adler-32 in read_buf */

  /* if dictionary would fill window, just replace the history */
  if (dictLength >= s.w_size) {
    if (wrap === 0) {
      /* already empty otherwise */
      /*** CLEAR_HASH(s); ***/
      zero(s.head); // Fill with NIL (= 0);
      s.strstart = 0;
      s.block_start = 0;
      s.insert = 0;
    }
    /* use the tail */
    // dictionary = dictionary.slice(dictLength - s.w_size);
    tmpDict = new utils$2.Buf8(s.w_size);
    utils$2.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);
    dictionary = tmpDict;
    dictLength = s.w_size;
  }
  /* insert dictionary into window and hash */
  avail = strm.avail_in;
  next = strm.next_in;
  input = strm.input;
  strm.avail_in = dictLength;
  strm.next_in = 0;
  strm.input = dictionary;
  fill_window(s);
  while (s.lookahead >= MIN_MATCH) {
    str = s.strstart;
    n = s.lookahead - (MIN_MATCH - 1);
    do {
      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
      s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;
      s.prev[str & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = str;
      str++;
    } while (--n);
    s.strstart = str;
    s.lookahead = MIN_MATCH - 1;
    fill_window(s);
  }
  s.strstart += s.lookahead;
  s.block_start = s.strstart;
  s.insert = s.lookahead;
  s.lookahead = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  strm.next_in = next;
  strm.input = input;
  strm.avail_in = avail;
  s.wrap = wrap;
  return Z_OK$1;
}
deflate$1.deflateInit = deflateInit;
deflate$1.deflateInit2 = deflateInit2;
deflate$1.deflateReset = deflateReset;
deflate$1.deflateResetKeep = deflateResetKeep;
deflate$1.deflateSetHeader = deflateSetHeader;
deflate$1.deflate = png_js_browser_deflate;
deflate$1.deflateEnd = deflateEnd;
deflate$1.deflateSetDictionary = deflateSetDictionary;
deflate$1.deflateInfo = 'pako deflate (from Nodeca project)';
var inflate$1 = {};

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// See state defs from inflate.js
var BAD$1 = 30; /* got a data error -- remain here until reset */
var TYPE$1 = 12; /* i: waiting for type bits, including last-flag bit */

/*
   Decode literal, length, and distance codes and write out the resulting
   literal and match bytes until either not enough input or output is
   available, an end-of-block is encountered, or a data error is encountered.
   When large enough input and output buffers are supplied to inflate(), for
   example, a 16K input buffer and a 64K output buffer, more than 95% of the
   inflate execution time is spent in this routine.

   Entry assumptions:

        state.mode === LEN
        strm.avail_in >= 6
        strm.avail_out >= 258
        start >= strm.avail_out
        state.bits < 8

   On return, state.mode is one of:

        LEN -- ran out of enough output space or enough available input
        TYPE -- reached end of block code, inflate() to interpret next block
        BAD -- error in block data

   Notes:

    - The maximum input bits used by a length/distance pair is 15 bits for the
      length code, 5 bits for the length extra, 15 bits for the distance code,
      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
      Therefore if strm.avail_in >= 6, then there is enough input to avoid
      checking for available input while decoding.

    - The maximum bytes that a single length/distance pair can output is 258
      bytes, which is the maximum length that can be coded.  inflate_fast()
      requires strm.avail_out >= 258 for each loop to avoid checking for
      output space.
 */
var inffast = function inflate_fast(strm, start) {
  var state;
  var _in; /* local strm.input */
  var last; /* have enough input while in < last */
  var _out; /* local strm.output */
  var beg; /* inflate()'s initial strm.output */
  var end; /* while out < end, enough space available */
  //#ifdef INFLATE_STRICT
  var dmax; /* maximum distance from zlib header */
  //#endif
  var wsize; /* window size or zero if not using window */
  var whave; /* valid bytes in the window */
  var wnext; /* window write index */
  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
  var s_window; /* allocated sliding window, if wsize != 0 */
  var hold; /* local strm.hold */
  var bits; /* local strm.bits */
  var lcode; /* local strm.lencode */
  var dcode; /* local strm.distcode */
  var lmask; /* mask for first level of length codes */
  var dmask; /* mask for first level of distance codes */
  var here; /* retrieved table entry */
  var op; /* code bits, operation, extra bits, or */
  /*  window position, window bytes to copy */
  var len; /* match length, unused bytes */
  var dist; /* match distance */
  var from; /* where to copy match from */
  var from_source;
  var input, output; // JS specific, because we have no pointers

  /* copy state to local variables */
  state = strm.state;
  //here = state.here;
  _in = strm.next_in;
  input = strm.input;
  last = _in + (strm.avail_in - 5);
  _out = strm.next_out;
  output = strm.output;
  beg = _out - (start - strm.avail_out);
  end = _out + (strm.avail_out - 257);
  //#ifdef INFLATE_STRICT
  dmax = state.dmax;
  //#endif
  wsize = state.wsize;
  whave = state.whave;
  wnext = state.wnext;
  s_window = state.window;
  hold = state.hold;
  bits = state.bits;
  lcode = state.lencode;
  dcode = state.distcode;
  lmask = (1 << state.lenbits) - 1;
  dmask = (1 << state.distbits) - 1;

  /* decode literals and length/distances until end-of-block or not enough
     input data or output space */

  top: do {
    if (bits < 15) {
      hold += input[_in++] << bits;
      bits += 8;
      hold += input[_in++] << bits;
      bits += 8;
    }
    here = lcode[hold & lmask];
    dolen: for (;;) {
      // Goto emulation
      op = here >>> 24 /*here.bits*/;
      hold >>>= op;
      bits -= op;
      op = here >>> 16 & 0xff /*here.op*/;
      if (op === 0) {
        /* literal */
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        output[_out++] = here & 0xffff /*here.val*/;
      } else if (op & 16) {
        /* length base */
        len = here & 0xffff /*here.val*/;
        op &= 15; /* number of extra bits */
        if (op) {
          if (bits < op) {
            hold += input[_in++] << bits;
            bits += 8;
          }
          len += hold & (1 << op) - 1;
          hold >>>= op;
          bits -= op;
        }
        //Tracevv((stderr, "inflate:         length %u\n", len));
        if (bits < 15) {
          hold += input[_in++] << bits;
          bits += 8;
          hold += input[_in++] << bits;
          bits += 8;
        }
        here = dcode[hold & dmask];
        dodist: for (;;) {
          // goto emulation
          op = here >>> 24 /*here.bits*/;
          hold >>>= op;
          bits -= op;
          op = here >>> 16 & 0xff /*here.op*/;
          if (op & 16) {
            /* distance base */
            dist = here & 0xffff /*here.val*/;
            op &= 15; /* number of extra bits */
            if (bits < op) {
              hold += input[_in++] << bits;
              bits += 8;
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
            }
            dist += hold & (1 << op) - 1;
            //#ifdef INFLATE_STRICT
            if (dist > dmax) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD$1;
              break top;
            }
            //#endif
            hold >>>= op;
            bits -= op;
            //Tracevv((stderr, "inflate:         distance %u\n", dist));
            op = _out - beg; /* max distance in output */
            if (dist > op) {
              /* see if copy from window */
              op = dist - op; /* distance back in window */
              if (op > whave) {
                if (state.sane) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD$1;
                  break top;
                }

                // (!) This block is disabled in zlib defaults,
                // don't enable it for binary compatibility
                //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
                //                if (len <= op - whave) {
                //                  do {
                //                    output[_out++] = 0;
                //                  } while (--len);
                //                  continue top;
                //                }
                //                len -= op - whave;
                //                do {
                //                  output[_out++] = 0;
                //                } while (--op > whave);
                //                if (op === 0) {
                //                  from = _out - dist;
                //                  do {
                //                    output[_out++] = output[from++];
                //                  } while (--len);
                //                  continue top;
                //                }
                //#endif
              }
              from = 0; // window index
              from_source = s_window;
              if (wnext === 0) {
                /* very common case */
                from += wsize - op;
                if (op < len) {
                  /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist; /* rest from output */
                  from_source = output;
                }
              } else if (wnext < op) {
                /* wrap around window */
                from += wsize + wnext - op;
                op -= wnext;
                if (op < len) {
                  /* some from end of window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = 0;
                  if (wnext < len) {
                    /* some from start of window */
                    op = wnext;
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist; /* rest from output */
                    from_source = output;
                  }
                }
              } else {
                /* contiguous in window */
                from += wnext - op;
                if (op < len) {
                  /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist; /* rest from output */
                  from_source = output;
                }
              }
              while (len > 2) {
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                len -= 3;
              }
              if (len) {
                output[_out++] = from_source[from++];
                if (len > 1) {
                  output[_out++] = from_source[from++];
                }
              }
            } else {
              from = _out - dist; /* copy direct from output */
              do {
                /* minimum length is three */
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                len -= 3;
              } while (len > 2);
              if (len) {
                output[_out++] = output[from++];
                if (len > 1) {
                  output[_out++] = output[from++];
                }
              }
            }
          } else if ((op & 64) === 0) {
            /* 2nd level distance code */
            here = dcode[(here & 0xffff /*here.val*/) + (hold & (1 << op) - 1)];
            continue dodist;
          } else {
            strm.msg = 'invalid distance code';
            state.mode = BAD$1;
            break top;
          }
          break; // need to emulate goto via "continue"
        }
      } else if ((op & 64) === 0) {
        /* 2nd level length code */
        here = lcode[(here & 0xffff /*here.val*/) + (hold & (1 << op) - 1)];
        continue dolen;
      } else if (op & 32) {
        /* end-of-block */
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.mode = TYPE$1;
        break top;
      } else {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD$1;
        break top;
      }
      break; // need to emulate goto via "continue"
    }
  } while (_in < last && _out < end);

  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
  len = bits >> 3;
  _in -= len;
  bits -= len << 3;
  hold &= (1 << bits) - 1;

  /* update state and return */
  strm.next_in = _in;
  strm.next_out = _out;
  strm.avail_in = _in < last ? 5 + (last - _in) : 5 - (_in - last);
  strm.avail_out = _out < end ? 257 + (end - _out) : 257 - (_out - end);
  state.hold = hold;
  state.bits = bits;
  return;
};

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils$1 = common;
var MAXBITS = 15;
var ENOUGH_LENS$1 = 852;
var ENOUGH_DISTS$1 = 592;
//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

var CODES$1 = 0;
var LENS$1 = 1;
var DISTS$1 = 2;
var lbase = [/* Length codes 257..285 base */
3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0];
var lext = [/* Length codes 257..285 extra */
16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78];
var dbase = [/* Distance codes 0..29 base */
1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0];
var dext = [/* Distance codes 0..29 extra */
16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64];
var inftrees = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts) {
  var bits = opts.bits;
  //here = opts.here; /* table entry for duplication */

  var len = 0; /* a code's length in bits */
  var sym = 0; /* index of code symbols */
  var min = 0,
    max = 0; /* minimum and maximum code lengths */
  var root = 0; /* number of index bits for root table */
  var curr = 0; /* number of index bits for current table */
  var drop = 0; /* code bits to drop for sub-table */
  var left = 0; /* number of prefix codes available */
  var used = 0; /* code entries in table used */
  var huff = 0; /* Huffman code */
  var incr; /* for incrementing code, index */
  var fill; /* index for replicating entries */
  var low; /* low bits for current root entry */
  var mask; /* mask for low root bits */
  var next; /* next available space in table */
  var base = null; /* base value table to use */
  var base_index = 0;
  //  var shoextra;    /* extra bits table to use */
  var end; /* use base and extra for symbol > end */
  var count = new utils$1.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
  var offs = new utils$1.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
  var extra = null;
  var extra_index = 0;
  var here_bits, here_op, here_val;

  /*
   Process a set of code lengths to create a canonical Huffman code.  The
   code lengths are lens[0..codes-1].  Each length corresponds to the
   symbols 0..codes-1.  The Huffman code is generated by first sorting the
   symbols by length from short to long, and retaining the symbol order
   for codes with equal lengths.  Then the code starts with all zero bits
   for the first code of the shortest length, and the codes are integer
   increments for the same length, and zeros are appended as the length
   increases.  For the deflate format, these bits are stored backwards
   from their more natural integer increment ordering, and so when the
   decoding tables are built in the large loop below, the integer codes
   are incremented backwards.
    This routine assumes, but does not check, that all of the entries in
   lens[] are in the range 0..MAXBITS.  The caller must assure this.
   1..MAXBITS is interpreted as that code length.  zero means that that
   symbol does not occur in this code.
    The codes are sorted by computing a count of codes for each length,
   creating from that a table of starting indices for each length in the
   sorted table, and then entering the symbols in order in the sorted
   table.  The sorted table is work[], with that space being provided by
   the caller.
    The length counts are used for other purposes as well, i.e. finding
   the minimum and maximum length codes, determining if there are any
   codes at all, checking for a valid set of lengths, and looking ahead
   at length counts to determine sub-table sizes when building the
   decoding tables.
   */

  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
  for (len = 0; len <= MAXBITS; len++) {
    count[len] = 0;
  }
  for (sym = 0; sym < codes; sym++) {
    count[lens[lens_index + sym]]++;
  }

  /* bound code lengths, force root to be within code lengths */
  root = bits;
  for (max = MAXBITS; max >= 1; max--) {
    if (count[max] !== 0) {
      break;
    }
  }
  if (root > max) {
    root = max;
  }
  if (max === 0) {
    /* no symbols to code at all */
    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
    table[table_index++] = 1 << 24 | 64 << 16 | 0;

    //table.op[opts.table_index] = 64;
    //table.bits[opts.table_index] = 1;
    //table.val[opts.table_index++] = 0;
    table[table_index++] = 1 << 24 | 64 << 16 | 0;
    opts.bits = 1;
    return 0; /* no symbols, but wait for decoding to report error */
  }
  for (min = 1; min < max; min++) {
    if (count[min] !== 0) {
      break;
    }
  }
  if (root < min) {
    root = min;
  }

  /* check for an over-subscribed or incomplete set of lengths */
  left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= count[len];
    if (left < 0) {
      return -1;
    } /* over-subscribed */
  }
  if (left > 0 && (type === CODES$1 || max !== 1)) {
    return -1; /* incomplete set */
  }

  /* generate offsets into symbol table for each length for sorting */
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++) {
    offs[len + 1] = offs[len] + count[len];
  }

  /* sort symbols by length, by symbol order within each length */
  for (sym = 0; sym < codes; sym++) {
    if (lens[lens_index + sym] !== 0) {
      work[offs[lens[lens_index + sym]]++] = sym;
    }
  }

  /*
   Create and fill in decoding tables.  In this loop, the table being
   filled is at next and has curr index bits.  The code being used is huff
   with length len.  That code is converted to an index by dropping drop
   bits off of the bottom.  For codes where len is less than drop + curr,
   those top drop + curr - len bits are incremented through all values to
   fill the table with replicated entries.
    root is the number of index bits for the root table.  When len exceeds
   root, sub-tables are created pointed to by the root entry with an index
   of the low root bits of huff.  This is saved in low to check for when a
   new sub-table should be started.  drop is zero when the root table is
   being filled, and drop is root when sub-tables are being filled.
    When a new sub-table is needed, it is necessary to look ahead in the
   code lengths to determine what size sub-table is needed.  The length
   counts are used for this, and so count[] is decremented as codes are
   entered in the tables.
    used keeps track of how many table entries have been allocated from the
   provided *table space.  It is checked for LENS and DIST tables against
   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
   the initial root table size constants.  See the comments in inftrees.h
   for more information.
    sym increments through all symbols, and the loop terminates when
   all codes of length max, i.e. all codes, have been processed.  This
   routine permits incomplete codes, so another loop after this one fills
   in the rest of the decoding tables with invalid code markers.
   */

  /* set up for code type */
  // poor man optimization - use if-else instead of switch,
  // to avoid deopts in old v8
  if (type === CODES$1) {
    base = extra = work; /* dummy value--not used */
    end = 19;
  } else if (type === LENS$1) {
    base = lbase;
    base_index -= 257;
    extra = lext;
    extra_index -= 257;
    end = 256;
  } else {
    /* DISTS */
    base = dbase;
    extra = dext;
    end = -1;
  }

  /* initialize opts for loop */
  huff = 0; /* starting code */
  sym = 0; /* starting code symbol */
  len = min; /* starting code length */
  next = table_index; /* current table to fill in */
  curr = root; /* current table index bits */
  drop = 0; /* current bits to drop from code for index */
  low = -1; /* trigger new sub-table when len > root */
  used = 1 << root; /* use root table entries */
  mask = used - 1; /* mask for comparing low */

  /* check available table space */
  if (type === LENS$1 && used > ENOUGH_LENS$1 || type === DISTS$1 && used > ENOUGH_DISTS$1) {
    return 1;
  }

  /* process all codes and make table entries */
  for (;;) {
    /* create table entry */
    here_bits = len - drop;
    if (work[sym] < end) {
      here_op = 0;
      here_val = work[sym];
    } else if (work[sym] > end) {
      here_op = extra[extra_index + work[sym]];
      here_val = base[base_index + work[sym]];
    } else {
      here_op = 32 + 64; /* end of block */
      here_val = 0;
    }

    /* replicate for those indices with low len bits equal to huff */
    incr = 1 << len - drop;
    fill = 1 << curr;
    min = fill; /* save offset to next table */
    do {
      fill -= incr;
      table[next + (huff >> drop) + fill] = here_bits << 24 | here_op << 16 | here_val | 0;
    } while (fill !== 0);

    /* backwards increment the len-bit code huff */
    incr = 1 << len - 1;
    while (huff & incr) {
      incr >>= 1;
    }
    if (incr !== 0) {
      huff &= incr - 1;
      huff += incr;
    } else {
      huff = 0;
    }

    /* go to next symbol, update count, len */
    sym++;
    if (--count[len] === 0) {
      if (len === max) {
        break;
      }
      len = lens[lens_index + work[sym]];
    }

    /* create new sub-table if needed */
    if (len > root && (huff & mask) !== low) {
      /* if first time, transition to sub-tables */
      if (drop === 0) {
        drop = root;
      }

      /* increment past last table */
      next += min; /* here min is 1 << curr */

      /* determine length of next table */
      curr = len - drop;
      left = 1 << curr;
      while (curr + drop < max) {
        left -= count[curr + drop];
        if (left <= 0) {
          break;
        }
        curr++;
        left <<= 1;
      }

      /* check for enough space */
      used += 1 << curr;
      if (type === LENS$1 && used > ENOUGH_LENS$1 || type === DISTS$1 && used > ENOUGH_DISTS$1) {
        return 1;
      }

      /* point entry in root table to sub-table */
      low = huff & mask;
      /*table.op[low] = curr;
      table.bits[low] = root;
      table.val[low] = next - opts.table_index;*/
      table[low] = root << 24 | curr << 16 | next - table_index | 0;
    }
  }

  /* fill in remaining table entry if code is incomplete (guaranteed to have
   at most one remaining entry, since if the code is incomplete, the
   maximum code length that was allowed to get this far is one bit) */
  if (huff !== 0) {
    //table.op[next + huff] = 64;            /* invalid code marker */
    //table.bits[next + huff] = len - drop;
    //table.val[next + huff] = 0;
    table[next + huff] = len - drop << 24 | 64 << 16 | 0;
  }

  /* set return parameters */
  //opts.table_index += used;
  opts.bits = root;
  return 0;
};

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils = common;
var adler32 = adler32_1;
var crc32 = crc32_1;
var inflate_fast = inffast;
var inflate_table = inftrees;
var CODES = 0;
var LENS = 1;
var DISTS = 2;

/* Public constants ==========================================================*/
/* ===========================================================================*/

/* Allowed flush values; see deflate() and inflate() below for details */
//var Z_NO_FLUSH      = 0;
//var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
//var Z_FULL_FLUSH    = 3;
var Z_FINISH = 4;
var Z_BLOCK = 5;
var Z_TREES = 6;

/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK = 0;
var Z_STREAM_END = 1;
var Z_NEED_DICT = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR = -2;
var Z_DATA_ERROR = -3;
var Z_MEM_ERROR = -4;
var Z_BUF_ERROR = -5;
//var Z_VERSION_ERROR = -6;

/* The deflate compression method */
var Z_DEFLATED = 8;

/* STATES ====================================================================*/
/* ===========================================================================*/

var HEAD = 1; /* i: waiting for magic header */
var FLAGS = 2; /* i: waiting for method and flags (gzip) */
var TIME = 3; /* i: waiting for modification time (gzip) */
var OS = 4; /* i: waiting for extra flags and operating system (gzip) */
var EXLEN = 5; /* i: waiting for extra length (gzip) */
var EXTRA = 6; /* i: waiting for extra bytes (gzip) */
var NAME = 7; /* i: waiting for end of file name (gzip) */
var COMMENT = 8; /* i: waiting for end of comment (gzip) */
var HCRC = 9; /* i: waiting for header crc (gzip) */
var DICTID = 10; /* i: waiting for dictionary check value */
var DICT = 11; /* waiting for inflateSetDictionary() call */
var TYPE = 12; /* i: waiting for type bits, including last-flag bit */
var TYPEDO = 13; /* i: same, but skip check to exit inflate on new block */
var STORED = 14; /* i: waiting for stored size (length and complement) */
var COPY_ = 15; /* i/o: same as COPY below, but only first time in */
var COPY = 16; /* i/o: waiting for input or output to copy stored block */
var TABLE = 17; /* i: waiting for dynamic block table lengths */
var LENLENS = 18; /* i: waiting for code length code lengths */
var CODELENS = 19; /* i: waiting for length/lit and distance code lengths */
var LEN_ = 20; /* i: same as LEN below, but only first time in */
var LEN = 21; /* i: waiting for length/lit/eob code */
var LENEXT = 22; /* i: waiting for length extra bits */
var DIST = 23; /* i: waiting for distance code */
var DISTEXT = 24; /* i: waiting for distance extra bits */
var MATCH = 25; /* o: waiting for output space to copy string */
var LIT = 26; /* o: waiting for output space to write literal */
var CHECK = 27; /* i: waiting for 32-bit check value */
var LENGTH = 28; /* i: waiting for 32-bit length (gzip) */
var DONE = 29; /* finished check, done -- remain here until reset */
var BAD = 30; /* got a data error -- remain here until reset */
var MEM = 31; /* got an inflate() memory error -- remain here until reset */
var SYNC = 32; /* looking for synchronization bytes to restart inflate() */

/* ===========================================================================*/

var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_WBITS = MAX_WBITS;
function zswap32(q) {
  return (q >>> 24 & 0xff) + (q >>> 8 & 0xff00) + ((q & 0xff00) << 8) + ((q & 0xff) << 24);
}
function InflateState() {
  this.mode = 0; /* current inflate mode */
  this.last = false; /* true if processing last block */
  this.wrap = 0; /* bit 0 true for zlib, bit 1 true for gzip */
  this.havedict = false; /* true if dictionary provided */
  this.flags = 0; /* gzip header method and flags (0 if zlib) */
  this.dmax = 0; /* zlib header max distance (INFLATE_STRICT) */
  this.check = 0; /* protected copy of check value */
  this.total = 0; /* protected copy of output count */
  // TODO: may be {}
  this.head = null; /* where to save gzip header information */

  /* sliding window */
  this.wbits = 0; /* log base 2 of requested window size */
  this.wsize = 0; /* window size or zero if not using window */
  this.whave = 0; /* valid bytes in the window */
  this.wnext = 0; /* window write index */
  this.window = null; /* allocated sliding window, if needed */

  /* bit accumulator */
  this.hold = 0; /* input bit accumulator */
  this.bits = 0; /* number of bits in "in" */

  /* for string and stored block copying */
  this.length = 0; /* literal or length of data to copy */
  this.offset = 0; /* distance back to copy string from */

  /* for table and code decoding */
  this.extra = 0; /* extra bits needed */

  /* fixed and dynamic code tables */
  this.lencode = null; /* starting table for length/literal codes */
  this.distcode = null; /* starting table for distance codes */
  this.lenbits = 0; /* index bits for lencode */
  this.distbits = 0; /* index bits for distcode */

  /* dynamic table building */
  this.ncode = 0; /* number of code length code lengths */
  this.nlen = 0; /* number of length code lengths */
  this.ndist = 0; /* number of distance code lengths */
  this.have = 0; /* number of code lengths in lens[] */
  this.next = null; /* next available space in codes[] */

  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */
  this.work = new utils.Buf16(288); /* work area for code table building */

  /*
   because we don't have pointers in js, we use lencode and distcode directly
   as buffers so we don't need codes
  */
  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
  this.lendyn = null; /* dynamic table for length/literal codes (JS specific) */
  this.distdyn = null; /* dynamic table for distance codes (JS specific) */
  this.sane = 0; /* if false, allow invalid distance too far */
  this.back = 0; /* bits back of last unprocessed length/lit */
  this.was = 0; /* initial length of match */
}
function inflateResetKeep(strm) {
  var state;
  if (!strm || !strm.state) {
    return Z_STREAM_ERROR;
  }
  state = strm.state;
  strm.total_in = strm.total_out = state.total = 0;
  strm.msg = ''; /*Z_NULL*/
  if (state.wrap) {
    /* to support ill-conceived Java test suite */
    strm.adler = state.wrap & 1;
  }
  state.mode = HEAD;
  state.last = 0;
  state.havedict = 0;
  state.dmax = 32768;
  state.head = null /*Z_NULL*/;
  state.hold = 0;
  state.bits = 0;
  //state.lencode = state.distcode = state.next = state.codes;
  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);
  state.sane = 1;
  state.back = -1;
  //Tracev((stderr, "inflate: reset\n"));
  return Z_OK;
}
function inflateReset(strm) {
  var state;
  if (!strm || !strm.state) {
    return Z_STREAM_ERROR;
  }
  state = strm.state;
  state.wsize = 0;
  state.whave = 0;
  state.wnext = 0;
  return inflateResetKeep(strm);
}
function inflateReset2(strm, windowBits) {
  var wrap;
  var state;

  /* get the state */
  if (!strm || !strm.state) {
    return Z_STREAM_ERROR;
  }
  state = strm.state;

  /* extract wrap request from windowBits parameter */
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  } else {
    wrap = (windowBits >> 4) + 1;
    if (windowBits < 48) {
      windowBits &= 15;
    }
  }

  /* set number of window bits, free window if different */
  if (windowBits && (windowBits < 8 || windowBits > 15)) {
    return Z_STREAM_ERROR;
  }
  if (state.window !== null && state.wbits !== windowBits) {
    state.window = null;
  }

  /* update state and reset the rest of it */
  state.wrap = wrap;
  state.wbits = windowBits;
  return inflateReset(strm);
}
function inflateInit2(strm, windowBits) {
  var ret;
  var state;
  if (!strm) {
    return Z_STREAM_ERROR;
  }
  //strm.msg = Z_NULL;                 /* in case we return an error */

  state = new InflateState();

  //if (state === Z_NULL) return Z_MEM_ERROR;
  //Tracev((stderr, "inflate: allocated\n"));
  strm.state = state;
  state.window = null /*Z_NULL*/;
  ret = inflateReset2(strm, windowBits);
  if (ret !== Z_OK) {
    strm.state = null /*Z_NULL*/;
  }
  return ret;
}
function inflateInit(strm) {
  return inflateInit2(strm, DEF_WBITS);
}

/*
 Return state with length and distance decoding tables and index sizes set to
 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
 If BUILDFIXED is defined, then instead this routine builds the tables the
 first time it's called, and returns those tables the first time and
 thereafter.  This reduces the size of the code by about 2K bytes, in
 exchange for a little execution time.  However, BUILDFIXED should not be
 used for threaded applications, since the rewriting of the tables and virgin
 may not be thread-safe.
 */
var virgin = true;
var lenfix, distfix; // We have no pointers in JS, so keep tables separate

function fixedtables(state) {
  /* build fixed huffman tables if first call (may not be thread safe) */
  if (virgin) {
    var sym;
    lenfix = new utils.Buf32(512);
    distfix = new utils.Buf32(32);

    /* literal/length table */
    sym = 0;
    while (sym < 144) {
      state.lens[sym++] = 8;
    }
    while (sym < 256) {
      state.lens[sym++] = 9;
    }
    while (sym < 280) {
      state.lens[sym++] = 7;
    }
    while (sym < 288) {
      state.lens[sym++] = 8;
    }
    inflate_table(LENS, state.lens, 0, 288, lenfix, 0, state.work, {
      bits: 9
    });

    /* distance table */
    sym = 0;
    while (sym < 32) {
      state.lens[sym++] = 5;
    }
    inflate_table(DISTS, state.lens, 0, 32, distfix, 0, state.work, {
      bits: 5
    });

    /* do this just once */
    virgin = false;
  }
  state.lencode = lenfix;
  state.lenbits = 9;
  state.distcode = distfix;
  state.distbits = 5;
}

/*
 Update the window with the last wsize (normally 32K) bytes written before
 returning.  If window does not exist yet, create it.  This is only called
 when a window is already in use, or when output has been written during this
 inflate call, but the end of the deflate stream has not been reached yet.
 It is also called to create a window for dictionary data when a dictionary
 is loaded.

 Providing output buffers larger than 32K to inflate() should provide a speed
 advantage, since only the last 32K of output is copied to the sliding window
 upon return from inflate(), and since all distances after the first 32K of
 output will fall in the output data, making match copies simpler and faster.
 The advantage may be dependent on the size of the processor's data caches.
 */
function updatewindow(strm, src, end, copy) {
  var dist;
  var state = strm.state;

  /* if it hasn't been done already, allocate space for the window */
  if (state.window === null) {
    state.wsize = 1 << state.wbits;
    state.wnext = 0;
    state.whave = 0;
    state.window = new utils.Buf8(state.wsize);
  }

  /* copy state->wsize or less output bytes into the circular window */
  if (copy >= state.wsize) {
    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
    state.wnext = 0;
    state.whave = state.wsize;
  } else {
    dist = state.wsize - state.wnext;
    if (dist > copy) {
      dist = copy;
    }
    //zmemcpy(state->window + state->wnext, end - copy, dist);
    utils.arraySet(state.window, src, end - copy, dist, state.wnext);
    copy -= dist;
    if (copy) {
      //zmemcpy(state->window, end - copy, copy);
      utils.arraySet(state.window, src, end - copy, copy, 0);
      state.wnext = copy;
      state.whave = state.wsize;
    } else {
      state.wnext += dist;
      if (state.wnext === state.wsize) {
        state.wnext = 0;
      }
      if (state.whave < state.wsize) {
        state.whave += dist;
      }
    }
  }
  return 0;
}
function png_js_browser_inflate(strm, flush) {
  var state;
  var input, output; // input/output buffers
  var next; /* next input INDEX */
  var put; /* next output INDEX */
  var have, left; /* available input and output */
  var hold; /* bit buffer */
  var bits; /* bits in bit buffer */
  var _in, _out; /* save starting available input and output */
  var copy; /* number of stored or match bytes to copy */
  var from; /* where to copy match bytes from */
  var from_source;
  var here = 0; /* current decoding table entry */
  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
  //var last;                   /* parent table entry */
  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
  var len; /* length to copy for repeats, bits to drop */
  var ret; /* return code */
  var hbuf = new utils.Buf8(4); /* buffer for gzip header crc calculation */
  var opts;
  var n; // temporary var for NEED_BITS

  var order = /* permutation of code lengths */
  [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
  if (!strm || !strm.state || !strm.output || !strm.input && strm.avail_in !== 0) {
    return Z_STREAM_ERROR;
  }
  state = strm.state;
  if (state.mode === TYPE) {
    state.mode = TYPEDO;
  } /* skip check */

  //--- LOAD() ---
  put = strm.next_out;
  output = strm.output;
  left = strm.avail_out;
  next = strm.next_in;
  input = strm.input;
  have = strm.avail_in;
  hold = state.hold;
  bits = state.bits;
  //---

  _in = have;
  _out = left;
  ret = Z_OK;
  inf_leave:
  // goto emulation
  for (;;) {
    switch (state.mode) {
      case HEAD:
        if (state.wrap === 0) {
          state.mode = TYPEDO;
          break;
        }
        //=== NEEDBITS(16);
        while (bits < 16) {
          if (have === 0) {
            break inf_leave;
          }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.wrap & 2 && hold === 0x8b1f) {
          /* gzip header */
          state.check = 0 /*crc32(0L, Z_NULL, 0)*/;
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = hold >>> 8 & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//

          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          state.mode = FLAGS;
          break;
        }
        state.flags = 0; /* expect zlib header */
        if (state.head) {
          state.head.done = false;
        }
        if (!(state.wrap & 1) || /* check if zlib header allowed */
        (((hold & 0xff /*BITS(8)*/) << 8) + (hold >> 8)) % 31) {
          strm.msg = 'incorrect header check';
          state.mode = BAD;
          break;
        }
        if ((hold & 0x0f /*BITS(4)*/) !== Z_DEFLATED) {
          strm.msg = 'unknown compression method';
          state.mode = BAD;
          break;
        }
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
        len = (hold & 0x0f /*BITS(4)*/) + 8;
        if (state.wbits === 0) {
          state.wbits = len;
        } else if (len > state.wbits) {
          strm.msg = 'invalid window size';
          state.mode = BAD;
          break;
        }
        state.dmax = 1 << len;
        //Tracev((stderr, "inflate:   zlib header ok\n"));
        strm.adler = state.check = 1 /*adler32(0L, Z_NULL, 0)*/;
        state.mode = hold & 0x200 ? DICTID : TYPE;
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        break;
      case FLAGS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) {
            break inf_leave;
          }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.flags = hold;
        if ((state.flags & 0xff) !== Z_DEFLATED) {
          strm.msg = 'unknown compression method';
          state.mode = BAD;
          break;
        }
        if (state.flags & 0xe000) {
          strm.msg = 'unknown header flags set';
          state.mode = BAD;
          break;
        }
        if (state.head) {
          state.head.text = hold >> 8 & 1;
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = hold >>> 8 & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = TIME;
      /* falls through */
      case TIME:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) {
            break inf_leave;
          }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.time = hold;
        }
        if (state.flags & 0x0200) {
          //=== CRC4(state.check, hold)
          hbuf[0] = hold & 0xff;
          hbuf[1] = hold >>> 8 & 0xff;
          hbuf[2] = hold >>> 16 & 0xff;
          hbuf[3] = hold >>> 24 & 0xff;
          state.check = crc32(state.check, hbuf, 4, 0);
          //===
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = OS;
      /* falls through */
      case OS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) {
            break inf_leave;
          }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.xflags = hold & 0xff;
          state.head.os = hold >> 8;
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = hold >>> 8 & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = EXLEN;
      /* falls through */
      case EXLEN:
        if (state.flags & 0x0400) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length = hold;
          if (state.head) {
            state.head.extra_len = hold;
          }
          if (state.flags & 0x0200) {
            //=== CRC2(state.check, hold);
            hbuf[0] = hold & 0xff;
            hbuf[1] = hold >>> 8 & 0xff;
            state.check = crc32(state.check, hbuf, 2, 0);
            //===//
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        } else if (state.head) {
          state.head.extra = null /*Z_NULL*/;
        }
        state.mode = EXTRA;
      /* falls through */
      case EXTRA:
        if (state.flags & 0x0400) {
          copy = state.length;
          if (copy > have) {
            copy = have;
          }
          if (copy) {
            if (state.head) {
              len = state.head.extra_len - state.length;
              if (!state.head.extra) {
                // Use untyped array for more convenient processing later
                state.head.extra = new Array(state.head.extra_len);
              }
              utils.arraySet(state.head.extra, input, next,
              // extra field is limited to 65536 bytes
              // - no need for additional size check
              copy, /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
              len);
              //zmemcpy(state.head.extra + len, next,
              //        len + copy > state.head.extra_max ?
              //        state.head.extra_max - len : copy);
            }
            if (state.flags & 0x0200) {
              state.check = crc32(state.check, input, copy, next);
            }
            have -= copy;
            next += copy;
            state.length -= copy;
          }
          if (state.length) {
            break inf_leave;
          }
        }
        state.length = 0;
        state.mode = NAME;
      /* falls through */
      case NAME:
        if (state.flags & 0x0800) {
          if (have === 0) {
            break inf_leave;
          }
          copy = 0;
          do {
            // TODO: 2 or 1 bytes?
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len && state.length < 65536 /*state.head.name_max*/) {
              state.head.name += String.fromCharCode(len);
            }
          } while (len && copy < have);
          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) {
            break inf_leave;
          }
        } else if (state.head) {
          state.head.name = null;
        }
        state.length = 0;
        state.mode = COMMENT;
      /* falls through */
      case COMMENT:
        if (state.flags & 0x1000) {
          if (have === 0) {
            break inf_leave;
          }
          copy = 0;
          do {
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len && state.length < 65536 /*state.head.comm_max*/) {
              state.head.comment += String.fromCharCode(len);
            }
          } while (len && copy < have);
          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) {
            break inf_leave;
          }
        } else if (state.head) {
          state.head.comment = null;
        }
        state.mode = HCRC;
      /* falls through */
      case HCRC:
        if (state.flags & 0x0200) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (hold !== (state.check & 0xffff)) {
            strm.msg = 'header crc mismatch';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        }
        if (state.head) {
          state.head.hcrc = state.flags >> 9 & 1;
          state.head.done = true;
        }
        strm.adler = state.check = 0;
        state.mode = TYPE;
        break;
      case DICTID:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) {
            break inf_leave;
          }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        strm.adler = state.check = zswap32(hold);
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = DICT;
      /* falls through */
      case DICT:
        if (state.havedict === 0) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          return Z_NEED_DICT;
        }
        strm.adler = state.check = 1 /*adler32(0L, Z_NULL, 0)*/;
        state.mode = TYPE;
      /* falls through */
      case TYPE:
        if (flush === Z_BLOCK || flush === Z_TREES) {
          break inf_leave;
        }
      /* falls through */
      case TYPEDO:
        if (state.last) {
          //--- BYTEBITS() ---//
          hold >>>= bits & 7;
          bits -= bits & 7;
          //---//
          state.mode = CHECK;
          break;
        }
        //=== NEEDBITS(3); */
        while (bits < 3) {
          if (have === 0) {
            break inf_leave;
          }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.last = hold & 0x01 /*BITS(1)*/;
        //--- DROPBITS(1) ---//
        hold >>>= 1;
        bits -= 1;
        //---//

        switch (hold & 0x03 /*BITS(2)*/) {
          case 0:
            /* stored block */
            //Tracev((stderr, "inflate:     stored block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = STORED;
            break;
          case 1:
            /* fixed block */
            fixedtables(state);
            //Tracev((stderr, "inflate:     fixed codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = LEN_; /* decode codes */
            if (flush === Z_TREES) {
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
              break inf_leave;
            }
            break;
          case 2:
            /* dynamic block */
            //Tracev((stderr, "inflate:     dynamic codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = TABLE;
            break;
          case 3:
            strm.msg = 'invalid block type';
            state.mode = BAD;
        }
        //--- DROPBITS(2) ---//
        hold >>>= 2;
        bits -= 2;
        //---//
        break;
      case STORED:
        //--- BYTEBITS() ---// /* go to byte boundary */
        hold >>>= bits & 7;
        bits -= bits & 7;
        //---//
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) {
            break inf_leave;
          }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if ((hold & 0xffff) !== (hold >>> 16 ^ 0xffff)) {
          strm.msg = 'invalid stored block lengths';
          state.mode = BAD;
          break;
        }
        state.length = hold & 0xffff;
        //Tracev((stderr, "inflate:       stored length %u\n",
        //        state.length));
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = COPY_;
        if (flush === Z_TREES) {
          break inf_leave;
        }
      /* falls through */
      case COPY_:
        state.mode = COPY;
      /* falls through */
      case COPY:
        copy = state.length;
        if (copy) {
          if (copy > have) {
            copy = have;
          }
          if (copy > left) {
            copy = left;
          }
          if (copy === 0) {
            break inf_leave;
          }
          //--- zmemcpy(put, next, copy); ---
          utils.arraySet(output, input, next, copy, put);
          //---//
          have -= copy;
          next += copy;
          left -= copy;
          put += copy;
          state.length -= copy;
          break;
        }
        //Tracev((stderr, "inflate:       stored end\n"));
        state.mode = TYPE;
        break;
      case TABLE:
        //=== NEEDBITS(14); */
        while (bits < 14) {
          if (have === 0) {
            break inf_leave;
          }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.nlen = (hold & 0x1f /*BITS(5)*/) + 257;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ndist = (hold & 0x1f /*BITS(5)*/) + 1;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ncode = (hold & 0x0f /*BITS(4)*/) + 4;
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
        //#ifndef PKZIP_BUG_WORKAROUND
        if (state.nlen > 286 || state.ndist > 30) {
          strm.msg = 'too many length or distance symbols';
          state.mode = BAD;
          break;
        }
        //#endif
        //Tracev((stderr, "inflate:       table sizes ok\n"));
        state.have = 0;
        state.mode = LENLENS;
      /* falls through */
      case LENLENS:
        while (state.have < state.ncode) {
          //=== NEEDBITS(3);
          while (bits < 3) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.lens[order[state.have++]] = hold & 0x07; //BITS(3);
          //--- DROPBITS(3) ---//
          hold >>>= 3;
          bits -= 3;
          //---//
        }
        while (state.have < 19) {
          state.lens[order[state.have++]] = 0;
        }
        // We have separate tables & no pointers. 2 commented lines below not needed.
        //state.next = state.codes;
        //state.lencode = state.next;
        // Switch to use dynamic table
        state.lencode = state.lendyn;
        state.lenbits = 7;
        opts = {
          bits: state.lenbits
        };
        ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
        state.lenbits = opts.bits;
        if (ret) {
          strm.msg = 'invalid code lengths set';
          state.mode = BAD;
          break;
        }
        //Tracev((stderr, "inflate:       code lengths ok\n"));
        state.have = 0;
        state.mode = CODELENS;
      /* falls through */
      case CODELENS:
        while (state.have < state.nlen + state.ndist) {
          for (;;) {
            here = state.lencode[hold & (1 << state.lenbits) - 1]; /*BITS(state.lenbits)*/
            here_bits = here >>> 24;
            here_op = here >>> 16 & 0xff;
            here_val = here & 0xffff;
            if (here_bits <= bits) {
              break;
            }
            //--- PULLBYTE() ---//
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          if (here_val < 16) {
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            state.lens[state.have++] = here_val;
          } else {
            if (here_val === 16) {
              //=== NEEDBITS(here.bits + 2);
              n = here_bits + 2;
              while (bits < n) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              if (state.have === 0) {
                strm.msg = 'invalid bit length repeat';
                state.mode = BAD;
                break;
              }
              len = state.lens[state.have - 1];
              copy = 3 + (hold & 0x03); //BITS(2);
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
            } else if (here_val === 17) {
              //=== NEEDBITS(here.bits + 3);
              n = here_bits + 3;
              while (bits < n) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 3 + (hold & 0x07); //BITS(3);
              //--- DROPBITS(3) ---//
              hold >>>= 3;
              bits -= 3;
              //---//
            } else {
              //=== NEEDBITS(here.bits + 7);
              n = here_bits + 7;
              while (bits < n) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 11 + (hold & 0x7f); //BITS(7);
              //--- DROPBITS(7) ---//
              hold >>>= 7;
              bits -= 7;
              //---//
            }
            if (state.have + copy > state.nlen + state.ndist) {
              strm.msg = 'invalid bit length repeat';
              state.mode = BAD;
              break;
            }
            while (copy--) {
              state.lens[state.have++] = len;
            }
          }
        }

        /* handle error breaks in while */
        if (state.mode === BAD) {
          break;
        }

        /* check for end-of-block code (better have one) */
        if (state.lens[256] === 0) {
          strm.msg = 'invalid code -- missing end-of-block';
          state.mode = BAD;
          break;
        }

        /* build code tables -- note: do not change the lenbits or distbits
           values here (9 and 6) without reading the comments in inftrees.h
           concerning the ENOUGH constants, which depend on those values */
        state.lenbits = 9;
        opts = {
          bits: state.lenbits
        };
        ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.lenbits = opts.bits;
        // state.lencode = state.next;

        if (ret) {
          strm.msg = 'invalid literal/lengths set';
          state.mode = BAD;
          break;
        }
        state.distbits = 6;
        //state.distcode.copy(state.codes);
        // Switch to use dynamic table
        state.distcode = state.distdyn;
        opts = {
          bits: state.distbits
        };
        ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.distbits = opts.bits;
        // state.distcode = state.next;

        if (ret) {
          strm.msg = 'invalid distances set';
          state.mode = BAD;
          break;
        }
        //Tracev((stderr, 'inflate:       codes ok\n'));
        state.mode = LEN_;
        if (flush === Z_TREES) {
          break inf_leave;
        }
      /* falls through */
      case LEN_:
        state.mode = LEN;
      /* falls through */
      case LEN:
        if (have >= 6 && left >= 258) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          inflate_fast(strm, _out);
          //--- LOAD() ---
          put = strm.next_out;
          output = strm.output;
          left = strm.avail_out;
          next = strm.next_in;
          input = strm.input;
          have = strm.avail_in;
          hold = state.hold;
          bits = state.bits;
          //---

          if (state.mode === TYPE) {
            state.back = -1;
          }
          break;
        }
        state.back = 0;
        for (;;) {
          here = state.lencode[hold & (1 << state.lenbits) - 1]; /*BITS(state.lenbits)*/
          here_bits = here >>> 24;
          here_op = here >>> 16 & 0xff;
          here_val = here & 0xffff;
          if (here_bits <= bits) {
            break;
          }
          //--- PULLBYTE() ---//
          if (have === 0) {
            break inf_leave;
          }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if (here_op && (here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.lencode[last_val + ((hold & (1 << last_bits + last_op) - 1 /*BITS(last.bits + last.op)*/) >> last_bits)];
            here_bits = here >>> 24;
            here_op = here >>> 16 & 0xff;
            here_val = here & 0xffff;
            if (last_bits + here_bits <= bits) {
              break;
            }
            //--- PULLBYTE() ---//
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        state.length = here_val;
        if (here_op === 0) {
          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
          //        "inflate:         literal '%c'\n" :
          //        "inflate:         literal 0x%02x\n", here.val));
          state.mode = LIT;
          break;
        }
        if (here_op & 32) {
          //Tracevv((stderr, "inflate:         end of block\n"));
          state.back = -1;
          state.mode = TYPE;
          break;
        }
        if (here_op & 64) {
          strm.msg = 'invalid literal/length code';
          state.mode = BAD;
          break;
        }
        state.extra = here_op & 15;
        state.mode = LENEXT;
      /* falls through */
      case LENEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length += hold & (1 << state.extra) - 1 /*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
        //Tracevv((stderr, "inflate:         length %u\n", state.length));
        state.was = state.length;
        state.mode = DIST;
      /* falls through */
      case DIST:
        for (;;) {
          here = state.distcode[hold & (1 << state.distbits) - 1]; /*BITS(state.distbits)*/
          here_bits = here >>> 24;
          here_op = here >>> 16 & 0xff;
          here_val = here & 0xffff;
          if (here_bits <= bits) {
            break;
          }
          //--- PULLBYTE() ---//
          if (have === 0) {
            break inf_leave;
          }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if ((here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.distcode[last_val + ((hold & (1 << last_bits + last_op) - 1 /*BITS(last.bits + last.op)*/) >> last_bits)];
            here_bits = here >>> 24;
            here_op = here >>> 16 & 0xff;
            here_val = here & 0xffff;
            if (last_bits + here_bits <= bits) {
              break;
            }
            //--- PULLBYTE() ---//
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        if (here_op & 64) {
          strm.msg = 'invalid distance code';
          state.mode = BAD;
          break;
        }
        state.offset = here_val;
        state.extra = here_op & 15;
        state.mode = DISTEXT;
      /* falls through */
      case DISTEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.offset += hold & (1 << state.extra) - 1 /*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
        //#ifdef INFLATE_STRICT
        if (state.offset > state.dmax) {
          strm.msg = 'invalid distance too far back';
          state.mode = BAD;
          break;
        }
        //#endif
        //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
        state.mode = MATCH;
      /* falls through */
      case MATCH:
        if (left === 0) {
          break inf_leave;
        }
        copy = _out - left;
        if (state.offset > copy) {
          /* copy from window */
          copy = state.offset - copy;
          if (copy > state.whave) {
            if (state.sane) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break;
            }
            // (!) This block is disabled in zlib defaults,
            // don't enable it for binary compatibility
            //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
            //          Trace((stderr, "inflate.c too far\n"));
            //          copy -= state.whave;
            //          if (copy > state.length) { copy = state.length; }
            //          if (copy > left) { copy = left; }
            //          left -= copy;
            //          state.length -= copy;
            //          do {
            //            output[put++] = 0;
            //          } while (--copy);
            //          if (state.length === 0) { state.mode = LEN; }
            //          break;
            //#endif
          }
          if (copy > state.wnext) {
            copy -= state.wnext;
            from = state.wsize - copy;
          } else {
            from = state.wnext - copy;
          }
          if (copy > state.length) {
            copy = state.length;
          }
          from_source = state.window;
        } else {
          /* copy from output */
          from_source = output;
          from = put - state.offset;
          copy = state.length;
        }
        if (copy > left) {
          copy = left;
        }
        left -= copy;
        state.length -= copy;
        do {
          output[put++] = from_source[from++];
        } while (--copy);
        if (state.length === 0) {
          state.mode = LEN;
        }
        break;
      case LIT:
        if (left === 0) {
          break inf_leave;
        }
        output[put++] = state.length;
        left--;
        state.mode = LEN;
        break;
      case CHECK:
        if (state.wrap) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            // Use '|' instead of '+' to make sure that result is signed
            hold |= input[next++] << bits;
            bits += 8;
          }
          //===//
          _out -= left;
          strm.total_out += _out;
          state.total += _out;
          if (_out) {
            strm.adler = state.check = /*UPDATE(state.check, put - _out, _out);*/
            state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out);
          }
          _out = left;
          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
          if ((state.flags ? hold : zswap32(hold)) !== state.check) {
            strm.msg = 'incorrect data check';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   check matches trailer\n"));
        }
        state.mode = LENGTH;
      /* falls through */
      case LENGTH:
        if (state.wrap && state.flags) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (hold !== (state.total & 0xffffffff)) {
            strm.msg = 'incorrect length check';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   length matches trailer\n"));
        }
        state.mode = DONE;
      /* falls through */
      case DONE:
        ret = Z_STREAM_END;
        break inf_leave;
      case BAD:
        ret = Z_DATA_ERROR;
        break inf_leave;
      case MEM:
        return Z_MEM_ERROR;
      case SYNC:
      /* falls through */
      default:
        return Z_STREAM_ERROR;
    }
  }

  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

  /*
     Return from inflate(), updating the total counts and the check value.
     If there was no progress during the inflate() call, return a buffer
     error.  Call updatewindow() to create and/or update the window state.
     Note: a memory error from inflate() is non-recoverable.
   */

  //--- RESTORE() ---
  strm.next_out = put;
  strm.avail_out = left;
  strm.next_in = next;
  strm.avail_in = have;
  state.hold = hold;
  state.bits = bits;
  //---

  if (state.wsize || _out !== strm.avail_out && state.mode < BAD && (state.mode < CHECK || flush !== Z_FINISH)) {
    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) ;
  }
  _in -= strm.avail_in;
  _out -= strm.avail_out;
  strm.total_in += _in;
  strm.total_out += _out;
  state.total += _out;
  if (state.wrap && _out) {
    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
    state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out);
  }
  strm.data_type = state.bits + (state.last ? 64 : 0) + (state.mode === TYPE ? 128 : 0) + (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
  if ((_in === 0 && _out === 0 || flush === Z_FINISH) && ret === Z_OK) {
    ret = Z_BUF_ERROR;
  }
  return ret;
}
function inflateEnd(strm) {
  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
    return Z_STREAM_ERROR;
  }
  var state = strm.state;
  if (state.window) {
    state.window = null;
  }
  strm.state = null;
  return Z_OK;
}
function inflateGetHeader(strm, head) {
  var state;

  /* check state */
  if (!strm || !strm.state) {
    return Z_STREAM_ERROR;
  }
  state = strm.state;
  if ((state.wrap & 2) === 0) {
    return Z_STREAM_ERROR;
  }

  /* save header structure */
  state.head = head;
  head.done = false;
  return Z_OK;
}
function inflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;
  var state;
  var dictid;
  var ret;

  /* check state */
  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) {
    return Z_STREAM_ERROR;
  }
  state = strm.state;
  if (state.wrap !== 0 && state.mode !== DICT) {
    return Z_STREAM_ERROR;
  }

  /* check for correct dictionary identifier */
  if (state.mode === DICT) {
    dictid = 1; /* adler32(0, null, 0)*/
    /* dictid = adler32(dictid, dictionary, dictLength); */
    dictid = adler32(dictid, dictionary, dictLength, 0);
    if (dictid !== state.check) {
      return Z_DATA_ERROR;
    }
  }
  /* copy dictionary to window using updatewindow(), which will amend the
   existing dictionary if appropriate */
  ret = updatewindow(strm, dictionary, dictLength, dictLength);
  if (ret) {
    state.mode = MEM;
    return Z_MEM_ERROR;
  }
  state.havedict = 1;
  // Tracev((stderr, "inflate:   dictionary set\n"));
  return Z_OK;
}
inflate$1.inflateReset = inflateReset;
inflate$1.inflateReset2 = inflateReset2;
inflate$1.inflateResetKeep = inflateResetKeep;
inflate$1.inflateInit = inflateInit;
inflate$1.inflateInit2 = inflateInit2;
inflate$1.inflate = png_js_browser_inflate;
inflate$1.inflateEnd = inflateEnd;
inflate$1.inflateGetHeader = inflateGetHeader;
inflate$1.inflateSetDictionary = inflateSetDictionary;
inflate$1.inflateInfo = 'pako inflate (from Nodeca project)';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var constants = {
  /* Allowed flush values; see deflate() and inflate() below for details */
  Z_NO_FLUSH: 0,
  Z_PARTIAL_FLUSH: 1,
  Z_SYNC_FLUSH: 2,
  Z_FULL_FLUSH: 3,
  Z_FINISH: 4,
  Z_BLOCK: 5,
  Z_TREES: 6,
  /* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */
  Z_OK: 0,
  Z_STREAM_END: 1,
  Z_NEED_DICT: 2,
  Z_ERRNO: -1,
  Z_STREAM_ERROR: -2,
  Z_DATA_ERROR: -3,
  //Z_MEM_ERROR:     -4,
  Z_BUF_ERROR: -5,
  //Z_VERSION_ERROR: -6,

  /* compression levels */
  Z_NO_COMPRESSION: 0,
  Z_BEST_SPEED: 1,
  Z_BEST_COMPRESSION: 9,
  Z_DEFAULT_COMPRESSION: -1,
  Z_FILTERED: 1,
  Z_HUFFMAN_ONLY: 2,
  Z_RLE: 3,
  Z_FIXED: 4,
  Z_DEFAULT_STRATEGY: 0,
  /* Possible values of the data_type field (though see inflate()) */
  Z_BINARY: 0,
  Z_TEXT: 1,
  //Z_ASCII:                1, // = Z_TEXT (deprecated)
  Z_UNKNOWN: 2,
  /* The deflate compression method */
  Z_DEFLATED: 8
  //Z_NULL:                 null // Use -1 or null inline, depending on var type
};
(function (exports) {
  /* eslint camelcase: "off" */
  var assert = require$$4;
  var Zstream = png_js_browser_zstream;
  var zlib_deflate = deflate$1;
  var zlib_inflate = inflate$1;
  var constants$1 = constants;
  for (var key in constants$1) {
    exports[key] = constants$1[key];
  }

  // zlib modes
  exports.NONE = 0;
  exports.DEFLATE = 1;
  exports.INFLATE = 2;
  exports.GZIP = 3;
  exports.GUNZIP = 4;
  exports.DEFLATERAW = 5;
  exports.INFLATERAW = 6;
  exports.UNZIP = 7;
  var GZIP_HEADER_ID1 = 0x1f;
  var GZIP_HEADER_ID2 = 0x8b;

  /**
   * Emulate Node's zlib C++ layer for use by the JS layer in index.js
   */
  function Zlib(mode) {
    if (typeof mode !== 'number' || mode < exports.DEFLATE || mode > exports.UNZIP) {
      throw new TypeError('Bad argument');
    }
    this.dictionary = null;
    this.err = 0;
    this.flush = 0;
    this.init_done = false;
    this.level = 0;
    this.memLevel = 0;
    this.mode = mode;
    this.strategy = 0;
    this.windowBits = 0;
    this.write_in_progress = false;
    this.pending_close = false;
    this.gzip_id_bytes_read = 0;
  }
  Zlib.prototype.close = function () {
    if (this.write_in_progress) {
      this.pending_close = true;
      return;
    }
    this.pending_close = false;
    assert(this.init_done, 'close before init');
    assert(this.mode <= exports.UNZIP);
    if (this.mode === exports.DEFLATE || this.mode === exports.GZIP || this.mode === exports.DEFLATERAW) {
      zlib_deflate.deflateEnd(this.strm);
    } else if (this.mode === exports.INFLATE || this.mode === exports.GUNZIP || this.mode === exports.INFLATERAW || this.mode === exports.UNZIP) {
      zlib_inflate.inflateEnd(this.strm);
    }
    this.mode = exports.NONE;
    this.dictionary = null;
  };
  Zlib.prototype.write = function (flush, input, in_off, in_len, out, out_off, out_len) {
    return this._write(true, flush, input, in_off, in_len, out, out_off, out_len);
  };
  Zlib.prototype.writeSync = function (flush, input, in_off, in_len, out, out_off, out_len) {
    return this._write(false, flush, input, in_off, in_len, out, out_off, out_len);
  };
  Zlib.prototype._write = function (async, flush, input, in_off, in_len, out, out_off, out_len) {
    assert.equal(arguments.length, 8);
    assert(this.init_done, 'write before init');
    assert(this.mode !== exports.NONE, 'already finalized');
    assert.equal(false, this.write_in_progress, 'write already in progress');
    assert.equal(false, this.pending_close, 'close is pending');
    this.write_in_progress = true;
    assert.equal(false, flush === undefined, 'must provide flush value');
    this.write_in_progress = true;
    if (flush !== exports.Z_NO_FLUSH && flush !== exports.Z_PARTIAL_FLUSH && flush !== exports.Z_SYNC_FLUSH && flush !== exports.Z_FULL_FLUSH && flush !== exports.Z_FINISH && flush !== exports.Z_BLOCK) {
      throw new Error('Invalid flush value');
    }
    if (input == null) {
      input = Buffer.alloc(0);
      in_len = 0;
      in_off = 0;
    }
    this.strm.avail_in = in_len;
    this.strm.input = input;
    this.strm.next_in = in_off;
    this.strm.avail_out = out_len;
    this.strm.output = out;
    this.strm.next_out = out_off;
    this.flush = flush;
    if (!async) {
      // sync version
      this._process();
      if (this._checkError()) {
        return this._afterSync();
      }
      return;
    }

    // async version
    var self = this;
    browser$1.nextTick(function () {
      self._process();
      self._after();
    });
    return this;
  };
  Zlib.prototype._afterSync = function () {
    var avail_out = this.strm.avail_out;
    var avail_in = this.strm.avail_in;
    this.write_in_progress = false;
    return [avail_in, avail_out];
  };
  Zlib.prototype._process = function () {
    var next_expected_header_byte = null;

    // If the avail_out is left at 0, then it means that it ran out
    // of room.  If there was avail_out left over, then it means
    // that all of the input was consumed.
    switch (this.mode) {
      case exports.DEFLATE:
      case exports.GZIP:
      case exports.DEFLATERAW:
        this.err = zlib_deflate.deflate(this.strm, this.flush);
        break;
      case exports.UNZIP:
        if (this.strm.avail_in > 0) {
          next_expected_header_byte = this.strm.next_in;
        }
        switch (this.gzip_id_bytes_read) {
          case 0:
            if (next_expected_header_byte === null) {
              break;
            }
            if (this.strm.input[next_expected_header_byte] === GZIP_HEADER_ID1) {
              this.gzip_id_bytes_read = 1;
              next_expected_header_byte++;
              if (this.strm.avail_in === 1) {
                // The only available byte was already read.
                break;
              }
            } else {
              this.mode = exports.INFLATE;
              break;
            }

          // fallthrough
          case 1:
            if (next_expected_header_byte === null) {
              break;
            }
            if (this.strm.input[next_expected_header_byte] === GZIP_HEADER_ID2) {
              this.gzip_id_bytes_read = 2;
              this.mode = exports.GUNZIP;
            } else {
              // There is no actual difference between INFLATE and INFLATERAW
              // (after initialization).
              this.mode = exports.INFLATE;
            }
            break;
          default:
            throw new Error('invalid number of gzip magic number bytes read');
        }

      // fallthrough
      case exports.INFLATE:
      case exports.GUNZIP:
      case exports.INFLATERAW:
        this.err = zlib_inflate.inflate(this.strm, this.flush

        // If data was encoded with dictionary
        );
        if (this.err === exports.Z_NEED_DICT && this.dictionary) {
          // Load it
          this.err = zlib_inflate.inflateSetDictionary(this.strm, this.dictionary);
          if (this.err === exports.Z_OK) {
            // And try to decode again
            this.err = zlib_inflate.inflate(this.strm, this.flush);
          } else if (this.err === exports.Z_DATA_ERROR) {
            // Both inflateSetDictionary() and inflate() return Z_DATA_ERROR.
            // Make it possible for After() to tell a bad dictionary from bad
            // input.
            this.err = exports.Z_NEED_DICT;
          }
        }
        while (this.strm.avail_in > 0 && this.mode === exports.GUNZIP && this.err === exports.Z_STREAM_END && this.strm.next_in[0] !== 0x00) {
          // Bytes remain in input buffer. Perhaps this is another compressed
          // member in the same archive, or just trailing garbage.
          // Trailing zero bytes are okay, though, since they are frequently
          // used for padding.

          this.reset();
          this.err = zlib_inflate.inflate(this.strm, this.flush);
        }
        break;
      default:
        throw new Error('Unknown mode ' + this.mode);
    }
  };
  Zlib.prototype._checkError = function () {
    // Acceptable error states depend on the type of zlib stream.
    switch (this.err) {
      case exports.Z_OK:
      case exports.Z_BUF_ERROR:
        if (this.strm.avail_out !== 0 && this.flush === exports.Z_FINISH) {
          this._error('unexpected end of file');
          return false;
        }
        break;
      case exports.Z_STREAM_END:
        // normal statuses, not fatal
        break;
      case exports.Z_NEED_DICT:
        if (this.dictionary == null) {
          this._error('Missing dictionary');
        } else {
          this._error('Bad dictionary');
        }
        return false;
      default:
        // something else.
        this._error('Zlib error');
        return false;
    }
    return true;
  };
  Zlib.prototype._after = function () {
    if (!this._checkError()) {
      return;
    }
    var avail_out = this.strm.avail_out;
    var avail_in = this.strm.avail_in;
    this.write_in_progress = false;

    // call the write() cb
    this.callback(avail_in, avail_out);
    if (this.pending_close) {
      this.close();
    }
  };
  Zlib.prototype._error = function (message) {
    if (this.strm.msg) {
      message = this.strm.msg;
    }
    this.onerror(message, this.err

    // no hope of rescue.
    );
    this.write_in_progress = false;
    if (this.pending_close) {
      this.close();
    }
  };
  Zlib.prototype.init = function (windowBits, level, memLevel, strategy, dictionary) {
    assert(arguments.length === 4 || arguments.length === 5, 'init(windowBits, level, memLevel, strategy, [dictionary])');
    assert(windowBits >= 8 && windowBits <= 15, 'invalid windowBits');
    assert(level >= -1 && level <= 9, 'invalid compression level');
    assert(memLevel >= 1 && memLevel <= 9, 'invalid memlevel');
    assert(strategy === exports.Z_FILTERED || strategy === exports.Z_HUFFMAN_ONLY || strategy === exports.Z_RLE || strategy === exports.Z_FIXED || strategy === exports.Z_DEFAULT_STRATEGY, 'invalid strategy');
    this._init(level, windowBits, memLevel, strategy, dictionary);
    this._setDictionary();
  };
  Zlib.prototype.params = function () {
    throw new Error('deflateParams Not supported');
  };
  Zlib.prototype.reset = function () {
    this._reset();
    this._setDictionary();
  };
  Zlib.prototype._init = function (level, windowBits, memLevel, strategy, dictionary) {
    this.level = level;
    this.windowBits = windowBits;
    this.memLevel = memLevel;
    this.strategy = strategy;
    this.flush = exports.Z_NO_FLUSH;
    this.err = exports.Z_OK;
    if (this.mode === exports.GZIP || this.mode === exports.GUNZIP) {
      this.windowBits += 16;
    }
    if (this.mode === exports.UNZIP) {
      this.windowBits += 32;
    }
    if (this.mode === exports.DEFLATERAW || this.mode === exports.INFLATERAW) {
      this.windowBits = -1 * this.windowBits;
    }
    this.strm = new Zstream();
    switch (this.mode) {
      case exports.DEFLATE:
      case exports.GZIP:
      case exports.DEFLATERAW:
        this.err = zlib_deflate.deflateInit2(this.strm, this.level, exports.Z_DEFLATED, this.windowBits, this.memLevel, this.strategy);
        break;
      case exports.INFLATE:
      case exports.GUNZIP:
      case exports.INFLATERAW:
      case exports.UNZIP:
        this.err = zlib_inflate.inflateInit2(this.strm, this.windowBits);
        break;
      default:
        throw new Error('Unknown mode ' + this.mode);
    }
    if (this.err !== exports.Z_OK) {
      this._error('Init error');
    }
    this.dictionary = dictionary;
    this.write_in_progress = false;
    this.init_done = true;
  };
  Zlib.prototype._setDictionary = function () {
    if (this.dictionary == null) {
      return;
    }
    this.err = exports.Z_OK;
    switch (this.mode) {
      case exports.DEFLATE:
      case exports.DEFLATERAW:
        this.err = zlib_deflate.deflateSetDictionary(this.strm, this.dictionary);
        break;
    }
    if (this.err !== exports.Z_OK) {
      this._error('Failed to set dictionary');
    }
  };
  Zlib.prototype._reset = function () {
    this.err = exports.Z_OK;
    switch (this.mode) {
      case exports.DEFLATE:
      case exports.DEFLATERAW:
      case exports.GZIP:
        this.err = zlib_deflate.deflateReset(this.strm);
        break;
      case exports.INFLATE:
      case exports.INFLATERAW:
      case exports.GUNZIP:
        this.err = zlib_inflate.inflateReset(this.strm);
        break;
    }
    if (this.err !== exports.Z_OK) {
      this._error('Failed to reset stream');
    }
  };
  exports.Zlib = Zlib;
})(binding);
var require$$3 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_util$1);
(function (exports) {
  var Buffer = require$$0.Buffer;
  var Transform = require$$1.Transform;
  var binding$1 = binding;
  var util = require$$3;
  var assert = require$$4.ok;
  var kMaxLength = require$$0.kMaxLength;
  var kRangeErrorMessage = 'Cannot create final Buffer. It would be larger ' + 'than 0x' + kMaxLength.toString(16) + ' bytes';

  // zlib doesn't provide these, so kludge them in following the same
  // const naming scheme zlib uses.
  binding$1.Z_MIN_WINDOWBITS = 8;
  binding$1.Z_MAX_WINDOWBITS = 15;
  binding$1.Z_DEFAULT_WINDOWBITS = 15;

  // fewer than 64 bytes per chunk is stupid.
  // technically it could work with as few as 8, but even 64 bytes
  // is absurdly low.  Usually a MB or more is best.
  binding$1.Z_MIN_CHUNK = 64;
  binding$1.Z_MAX_CHUNK = Infinity;
  binding$1.Z_DEFAULT_CHUNK = 16 * 1024;
  binding$1.Z_MIN_MEMLEVEL = 1;
  binding$1.Z_MAX_MEMLEVEL = 9;
  binding$1.Z_DEFAULT_MEMLEVEL = 8;
  binding$1.Z_MIN_LEVEL = -1;
  binding$1.Z_MAX_LEVEL = 9;
  binding$1.Z_DEFAULT_LEVEL = binding$1.Z_DEFAULT_COMPRESSION;

  // expose all the zlib constants
  var bkeys = Object.keys(binding$1);
  for (var bk = 0; bk < bkeys.length; bk++) {
    var bkey = bkeys[bk];
    if (bkey.match(/^Z/)) {
      Object.defineProperty(exports, bkey, {
        enumerable: true,
        value: binding$1[bkey],
        writable: false
      });
    }
  }

  // translation table for return codes.
  var codes = {
    Z_OK: binding$1.Z_OK,
    Z_STREAM_END: binding$1.Z_STREAM_END,
    Z_NEED_DICT: binding$1.Z_NEED_DICT,
    Z_ERRNO: binding$1.Z_ERRNO,
    Z_STREAM_ERROR: binding$1.Z_STREAM_ERROR,
    Z_DATA_ERROR: binding$1.Z_DATA_ERROR,
    Z_MEM_ERROR: binding$1.Z_MEM_ERROR,
    Z_BUF_ERROR: binding$1.Z_BUF_ERROR,
    Z_VERSION_ERROR: binding$1.Z_VERSION_ERROR
  };
  var ckeys = Object.keys(codes);
  for (var ck = 0; ck < ckeys.length; ck++) {
    var ckey = ckeys[ck];
    codes[codes[ckey]] = ckey;
  }
  Object.defineProperty(exports, 'codes', {
    enumerable: true,
    value: Object.freeze(codes),
    writable: false
  });
  exports.Deflate = Deflate;
  exports.Inflate = Inflate;
  exports.Gzip = Gzip;
  exports.Gunzip = Gunzip;
  exports.DeflateRaw = DeflateRaw;
  exports.InflateRaw = InflateRaw;
  exports.Unzip = Unzip;
  exports.createDeflate = function (o) {
    return new Deflate(o);
  };
  exports.createInflate = function (o) {
    return new Inflate(o);
  };
  exports.createDeflateRaw = function (o) {
    return new DeflateRaw(o);
  };
  exports.createInflateRaw = function (o) {
    return new InflateRaw(o);
  };
  exports.createGzip = function (o) {
    return new Gzip(o);
  };
  exports.createGunzip = function (o) {
    return new Gunzip(o);
  };
  exports.createUnzip = function (o) {
    return new Unzip(o);
  };

  // Convenience methods.
  // compress/decompress a string or buffer in one step.
  exports.deflate = function (buffer, opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }
    return zlibBuffer(new Deflate(opts), buffer, callback);
  };
  exports.deflateSync = function (buffer, opts) {
    return zlibBufferSync(new Deflate(opts), buffer);
  };
  exports.gzip = function (buffer, opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }
    return zlibBuffer(new Gzip(opts), buffer, callback);
  };
  exports.gzipSync = function (buffer, opts) {
    return zlibBufferSync(new Gzip(opts), buffer);
  };
  exports.deflateRaw = function (buffer, opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }
    return zlibBuffer(new DeflateRaw(opts), buffer, callback);
  };
  exports.deflateRawSync = function (buffer, opts) {
    return zlibBufferSync(new DeflateRaw(opts), buffer);
  };
  exports.unzip = function (buffer, opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }
    return zlibBuffer(new Unzip(opts), buffer, callback);
  };
  exports.unzipSync = function (buffer, opts) {
    return zlibBufferSync(new Unzip(opts), buffer);
  };
  exports.inflate = function (buffer, opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }
    return zlibBuffer(new Inflate(opts), buffer, callback);
  };
  exports.inflateSync = function (buffer, opts) {
    return zlibBufferSync(new Inflate(opts), buffer);
  };
  exports.gunzip = function (buffer, opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }
    return zlibBuffer(new Gunzip(opts), buffer, callback);
  };
  exports.gunzipSync = function (buffer, opts) {
    return zlibBufferSync(new Gunzip(opts), buffer);
  };
  exports.inflateRaw = function (buffer, opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }
    return zlibBuffer(new InflateRaw(opts), buffer, callback);
  };
  exports.inflateRawSync = function (buffer, opts) {
    return zlibBufferSync(new InflateRaw(opts), buffer);
  };
  function zlibBuffer(engine, buffer, callback) {
    var buffers = [];
    var nread = 0;
    engine.on('error', onError);
    engine.on('end', onEnd);
    engine.end(buffer);
    flow();
    function flow() {
      var chunk;
      while (null !== (chunk = engine.read())) {
        buffers.push(chunk);
        nread += chunk.length;
      }
      engine.once('readable', flow);
    }
    function onError(err) {
      engine.removeListener('end', onEnd);
      engine.removeListener('readable', flow);
      callback(err);
    }
    function onEnd() {
      var buf;
      var err = null;
      if (nread >= kMaxLength) {
        err = new RangeError(kRangeErrorMessage);
      } else {
        buf = Buffer.concat(buffers, nread);
      }
      buffers = [];
      engine.close();
      callback(err, buf);
    }
  }
  function zlibBufferSync(engine, buffer) {
    if (typeof buffer === 'string') buffer = Buffer.from(buffer);
    if (!Buffer.isBuffer(buffer)) throw new TypeError('Not a string or buffer');
    var flushFlag = engine._finishFlushFlag;
    return engine._processChunk(buffer, flushFlag);
  }

  // generic zlib
  // minimal 2-byte header
  function Deflate(opts) {
    if (!(this instanceof Deflate)) return new Deflate(opts);
    Zlib.call(this, opts, binding$1.DEFLATE);
  }
  function Inflate(opts) {
    if (!(this instanceof Inflate)) return new Inflate(opts);
    Zlib.call(this, opts, binding$1.INFLATE);
  }

  // gzip - bigger header, same deflate compression
  function Gzip(opts) {
    if (!(this instanceof Gzip)) return new Gzip(opts);
    Zlib.call(this, opts, binding$1.GZIP);
  }
  function Gunzip(opts) {
    if (!(this instanceof Gunzip)) return new Gunzip(opts);
    Zlib.call(this, opts, binding$1.GUNZIP);
  }

  // raw - no header
  function DeflateRaw(opts) {
    if (!(this instanceof DeflateRaw)) return new DeflateRaw(opts);
    Zlib.call(this, opts, binding$1.DEFLATERAW);
  }
  function InflateRaw(opts) {
    if (!(this instanceof InflateRaw)) return new InflateRaw(opts);
    Zlib.call(this, opts, binding$1.INFLATERAW);
  }

  // auto-detect header.
  function Unzip(opts) {
    if (!(this instanceof Unzip)) return new Unzip(opts);
    Zlib.call(this, opts, binding$1.UNZIP);
  }
  function isValidFlushFlag(flag) {
    return flag === binding$1.Z_NO_FLUSH || flag === binding$1.Z_PARTIAL_FLUSH || flag === binding$1.Z_SYNC_FLUSH || flag === binding$1.Z_FULL_FLUSH || flag === binding$1.Z_FINISH || flag === binding$1.Z_BLOCK;
  }

  // the Zlib class they all inherit from
  // This thing manages the queue of requests, and returns
  // true or false if there is anything in the queue when
  // you call the .write() method.

  function Zlib(opts, mode) {
    var _this = this;
    this._opts = opts = opts || {};
    this._chunkSize = opts.chunkSize || exports.Z_DEFAULT_CHUNK;
    Transform.call(this, opts);
    if (opts.flush && !isValidFlushFlag(opts.flush)) {
      throw new Error('Invalid flush flag: ' + opts.flush);
    }
    if (opts.finishFlush && !isValidFlushFlag(opts.finishFlush)) {
      throw new Error('Invalid flush flag: ' + opts.finishFlush);
    }
    this._flushFlag = opts.flush || binding$1.Z_NO_FLUSH;
    this._finishFlushFlag = typeof opts.finishFlush !== 'undefined' ? opts.finishFlush : binding$1.Z_FINISH;
    if (opts.chunkSize) {
      if (opts.chunkSize < exports.Z_MIN_CHUNK || opts.chunkSize > exports.Z_MAX_CHUNK) {
        throw new Error('Invalid chunk size: ' + opts.chunkSize);
      }
    }
    if (opts.windowBits) {
      if (opts.windowBits < exports.Z_MIN_WINDOWBITS || opts.windowBits > exports.Z_MAX_WINDOWBITS) {
        throw new Error('Invalid windowBits: ' + opts.windowBits);
      }
    }
    if (opts.level) {
      if (opts.level < exports.Z_MIN_LEVEL || opts.level > exports.Z_MAX_LEVEL) {
        throw new Error('Invalid compression level: ' + opts.level);
      }
    }
    if (opts.memLevel) {
      if (opts.memLevel < exports.Z_MIN_MEMLEVEL || opts.memLevel > exports.Z_MAX_MEMLEVEL) {
        throw new Error('Invalid memLevel: ' + opts.memLevel);
      }
    }
    if (opts.strategy) {
      if (opts.strategy != exports.Z_FILTERED && opts.strategy != exports.Z_HUFFMAN_ONLY && opts.strategy != exports.Z_RLE && opts.strategy != exports.Z_FIXED && opts.strategy != exports.Z_DEFAULT_STRATEGY) {
        throw new Error('Invalid strategy: ' + opts.strategy);
      }
    }
    if (opts.dictionary) {
      if (!Buffer.isBuffer(opts.dictionary)) {
        throw new Error('Invalid dictionary: it should be a Buffer instance');
      }
    }
    this._handle = new binding$1.Zlib(mode);
    var self = this;
    this._hadError = false;
    this._handle.onerror = function (message, errno) {
      // there is no way to cleanly recover.
      // continuing only obscures problems.
      _close(self);
      self._hadError = true;
      var error = new Error(message);
      error.errno = errno;
      error.code = exports.codes[errno];
      self.emit('error', error);
    };
    var level = exports.Z_DEFAULT_COMPRESSION;
    if (typeof opts.level === 'number') level = opts.level;
    var strategy = exports.Z_DEFAULT_STRATEGY;
    if (typeof opts.strategy === 'number') strategy = opts.strategy;
    this._handle.init(opts.windowBits || exports.Z_DEFAULT_WINDOWBITS, level, opts.memLevel || exports.Z_DEFAULT_MEMLEVEL, strategy, opts.dictionary);
    this._buffer = Buffer.allocUnsafe(this._chunkSize);
    this._offset = 0;
    this._level = level;
    this._strategy = strategy;
    this.once('end', this.close);
    Object.defineProperty(this, '_closed', {
      get: function () {
        return !_this._handle;
      },
      configurable: true,
      enumerable: true
    });
  }
  util.inherits(Zlib, Transform);
  Zlib.prototype.params = function (level, strategy, callback) {
    if (level < exports.Z_MIN_LEVEL || level > exports.Z_MAX_LEVEL) {
      throw new RangeError('Invalid compression level: ' + level);
    }
    if (strategy != exports.Z_FILTERED && strategy != exports.Z_HUFFMAN_ONLY && strategy != exports.Z_RLE && strategy != exports.Z_FIXED && strategy != exports.Z_DEFAULT_STRATEGY) {
      throw new TypeError('Invalid strategy: ' + strategy);
    }
    if (this._level !== level || this._strategy !== strategy) {
      var self = this;
      this.flush(binding$1.Z_SYNC_FLUSH, function () {
        assert(self._handle, 'zlib binding closed');
        self._handle.params(level, strategy);
        if (!self._hadError) {
          self._level = level;
          self._strategy = strategy;
          if (callback) callback();
        }
      });
    } else {
      browser$1.nextTick(callback);
    }
  };
  Zlib.prototype.reset = function () {
    assert(this._handle, 'zlib binding closed');
    return this._handle.reset();
  };

  // This is the _flush function called by the transform class,
  // internally, when the last chunk has been written.
  Zlib.prototype._flush = function (callback) {
    this._transform(Buffer.alloc(0), '', callback);
  };
  Zlib.prototype.flush = function (kind, callback) {
    var _this2 = this;
    var ws = this._writableState;
    if (typeof kind === 'function' || kind === undefined && !callback) {
      callback = kind;
      kind = binding$1.Z_FULL_FLUSH;
    }
    if (ws.ended) {
      if (callback) browser$1.nextTick(callback);
    } else if (ws.ending) {
      if (callback) this.once('end', callback);
    } else if (ws.needDrain) {
      if (callback) {
        this.once('drain', function () {
          return _this2.flush(kind, callback);
        });
      }
    } else {
      this._flushFlag = kind;
      this.write(Buffer.alloc(0), '', callback);
    }
  };
  Zlib.prototype.close = function (callback) {
    _close(this, callback);
    browser$1.nextTick(emitCloseNT, this);
  };
  function _close(engine, callback) {
    if (callback) browser$1.nextTick(callback);

    // Caller may invoke .close after a zlib error (which will null _handle).
    if (!engine._handle) return;
    engine._handle.close();
    engine._handle = null;
  }
  function emitCloseNT(self) {
    self.emit('close');
  }
  Zlib.prototype._transform = function (chunk, encoding, cb) {
    var flushFlag;
    var ws = this._writableState;
    var ending = ws.ending || ws.ended;
    var last = ending && (!chunk || ws.length === chunk.length);
    if (chunk !== null && !Buffer.isBuffer(chunk)) return cb(new Error('invalid input'));
    if (!this._handle) return cb(new Error('zlib binding closed'));

    // If it's the last chunk, or a final flush, we use the Z_FINISH flush flag
    // (or whatever flag was provided using opts.finishFlush).
    // If it's explicitly flushing at some other time, then we use
    // Z_FULL_FLUSH. Otherwise, use Z_NO_FLUSH for maximum compression
    // goodness.
    if (last) flushFlag = this._finishFlushFlag;else {
      flushFlag = this._flushFlag;
      // once we've flushed the last of the queue, stop flushing and
      // go back to the normal behavior.
      if (chunk.length >= ws.length) {
        this._flushFlag = this._opts.flush || binding$1.Z_NO_FLUSH;
      }
    }
    this._processChunk(chunk, flushFlag, cb);
  };
  Zlib.prototype._processChunk = function (chunk, flushFlag, cb) {
    var availInBefore = chunk && chunk.length;
    var availOutBefore = this._chunkSize - this._offset;
    var inOff = 0;
    var self = this;
    var async = typeof cb === 'function';
    if (!async) {
      var buffers = [];
      var nread = 0;
      var error;
      this.on('error', function (er) {
        error = er;
      });
      assert(this._handle, 'zlib binding closed');
      do {
        var res = this._handle.writeSync(flushFlag, chunk,
        // in
        inOff,
        // in_off
        availInBefore,
        // in_len
        this._buffer,
        // out
        this._offset,
        //out_off
        availOutBefore); // out_len
      } while (!this._hadError && callback(res[0], res[1]));
      if (this._hadError) {
        throw error;
      }
      if (nread >= kMaxLength) {
        _close(this);
        throw new RangeError(kRangeErrorMessage);
      }
      var buf = Buffer.concat(buffers, nread);
      _close(this);
      return buf;
    }
    assert(this._handle, 'zlib binding closed');
    var req = this._handle.write(flushFlag, chunk,
    // in
    inOff,
    // in_off
    availInBefore,
    // in_len
    this._buffer,
    // out
    this._offset,
    //out_off
    availOutBefore); // out_len

    req.buffer = chunk;
    req.callback = callback;
    function callback(availInAfter, availOutAfter) {
      // When the callback is used in an async write, the callback's
      // context is the `req` object that was created. The req object
      // is === this._handle, and that's why it's important to null
      // out the values after they are done being used. `this._handle`
      // can stay in memory longer than the callback and buffer are needed.
      if (this) {
        this.buffer = null;
        this.callback = null;
      }
      if (self._hadError) return;
      var have = availOutBefore - availOutAfter;
      assert(have >= 0, 'have should not go down');
      if (have > 0) {
        var out = self._buffer.slice(self._offset, self._offset + have);
        self._offset += have;
        // serve some output to the consumer.
        if (async) {
          self.push(out);
        } else {
          buffers.push(out);
          nread += out.length;
        }
      }

      // exhausted the output buffer, or used all the input create a new one.
      if (availOutAfter === 0 || self._offset >= self._chunkSize) {
        availOutBefore = self._chunkSize;
        self._offset = 0;
        self._buffer = Buffer.allocUnsafe(self._chunkSize);
      }
      if (availOutAfter === 0) {
        // Not actually done.  Need to reprocess.
        // Also, update the availInBefore to the availInAfter value,
        // so that if we have to hit it a third (fourth, etc.) time,
        // it'll have the correct byte counts.
        inOff += availInBefore - availInAfter;
        availInBefore = availInAfter;
        if (!async) return true;
        var newReq = self._handle.write(flushFlag, chunk, inOff, availInBefore, self._buffer, self._offset, self._chunkSize);
        newReq.callback = callback; // this same function
        newReq.buffer = chunk;
        return;
      }
      if (!async) return false;

      // finished with the chunk.
      cb();
    }
  };
  util.inherits(Deflate, Zlib);
  util.inherits(Inflate, Zlib);
  util.inherits(Gzip, Zlib);
  util.inherits(Gunzip, Zlib);
  util.inherits(DeflateRaw, Zlib);
  util.inherits(InflateRaw, Zlib);
  util.inherits(Unzip, Zlib);
})(lib);
var zlib = /*@__PURE__*/getDefaultExportFromCjs(lib);
class PNG {
  static decode(path, fn) {
    {
      throw new Error('PNG.decode not available in browser build');
    }
  }
  static load(path) {
    {
      throw new Error('PNG.load not available in browser build');
    }
  }
  constructor(data) {
    let i;
    this.data = data;
    this.pos = 8; // Skip the default header

    this.palette = [];
    this.imgData = [];
    this.transparency = {};
    this.text = {};
    while (true) {
      const chunkSize = this.readUInt32();
      let section = '';
      for (i = 0; i < 4; i++) {
        section += String.fromCharCode(this.data[this.pos++]);
      }
      switch (section) {
        case 'IHDR':
          // we can grab  interesting values from here (like width, height, etc)
          this.width = this.readUInt32();
          this.height = this.readUInt32();
          this.bits = this.data[this.pos++];
          this.colorType = this.data[this.pos++];
          this.compressionMethod = this.data[this.pos++];
          this.filterMethod = this.data[this.pos++];
          this.interlaceMethod = this.data[this.pos++];
          break;
        case 'PLTE':
          this.palette = this.read(chunkSize);
          break;
        case 'IDAT':
          for (i = 0; i < chunkSize; i++) {
            this.imgData.push(this.data[this.pos++]);
          }
          break;
        case 'tRNS':
          // This chunk can only occur once and it must occur after the
          // PLTE chunk and before the IDAT chunk.
          this.transparency = {};
          switch (this.colorType) {
            case 3:
              // Indexed color, RGB. Each byte in this chunk is an alpha for
              // the palette index in the PLTE ("palette") chunk up until the
              // last non-opaque entry. Set up an array, stretching over all
              // palette entries which will be 0 (opaque) or 1 (transparent).
              this.transparency.indexed = this.read(chunkSize);
              var short = 255 - this.transparency.indexed.length;
              if (short > 0) {
                for (i = 0; i < short; i++) {
                  this.transparency.indexed.push(255);
                }
              }
              break;
            case 0:
              // Greyscale. Corresponding to entries in the PLTE chunk.
              // Grey is two bytes, range 0 .. (2 ^ bit-depth) - 1
              this.transparency.grayscale = this.read(chunkSize)[0];
              break;
            case 2:
              // True color with proper alpha channel.
              this.transparency.rgb = this.read(chunkSize);
              break;
          }
          break;
        case 'tEXt':
          var text = this.read(chunkSize);
          var index = text.indexOf(0);
          var key = String.fromCharCode.apply(String, text.slice(0, index));
          this.text[key] = String.fromCharCode.apply(String, text.slice(index + 1));
          break;
        case 'IEND':
          // we've got everything we need!
          switch (this.colorType) {
            case 0:
            case 3:
            case 4:
              this.colors = 1;
              break;
            case 2:
            case 6:
              this.colors = 3;
              break;
          }
          this.hasAlphaChannel = [4, 6].includes(this.colorType);
          var colors = this.colors + (this.hasAlphaChannel ? 1 : 0);
          this.pixelBitlength = this.bits * colors;
          switch (this.colors) {
            case 1:
              this.colorSpace = 'DeviceGray';
              break;
            case 3:
              this.colorSpace = 'DeviceRGB';
              break;
          }
          this.imgData = Buffer.from(this.imgData);
          return;
        default:
          // unknown (or unimportant) section, skip it
          this.pos += chunkSize;
      }
      this.pos += 4; // Skip the CRC

      if (this.pos > this.data.length) {
        throw new Error('Incomplete or corrupt PNG file');
      }
    }
  }
  read(bytes) {
    const result = new Array(bytes);
    for (let i = 0; i < bytes; i++) {
      result[i] = this.data[this.pos++];
    }
    return result;
  }
  readUInt32() {
    const b1 = this.data[this.pos++] << 24;
    const b2 = this.data[this.pos++] << 16;
    const b3 = this.data[this.pos++] << 8;
    const b4 = this.data[this.pos++];
    return b1 | b2 | b3 | b4;
  }
  readUInt16() {
    const b1 = this.data[this.pos++] << 8;
    const b2 = this.data[this.pos++];
    return b1 | b2;
  }
  decodePixels(fn) {
    return zlib.inflate(this.imgData, (err, data) => {
      if (err) throw err;
      var pos = 0;
      const {
        width,
        height
      } = this;
      var pixelBytes = this.pixelBitlength / 8;
      const pixels = Buffer.alloc(width * height * pixelBytes);
      function pass(x0, y0, dx, dy, singlePass) {
        if (singlePass === void 0) {
          singlePass = false;
        }
        const w = Math.ceil((width - x0) / dx);
        const h = Math.ceil((height - y0) / dy);
        const scanlineLength = pixelBytes * w;
        const buffer = singlePass ? pixels : Buffer.alloc(scanlineLength * h);
        let row = 0;
        let c = 0;
        while (row < h && pos < data.length) {
          var byte;
          var col;
          var i;
          var left;
          var upper;
          switch (data[pos++]) {
            case 0:
              // None
              for (i = 0; i < scanlineLength; i++) {
                buffer[c++] = data[pos++];
              }
              break;
            case 1:
              // Sub
              for (i = 0; i < scanlineLength; i++) {
                byte = data[pos++];
                left = i < pixelBytes ? 0 : buffer[c - pixelBytes];
                buffer[c++] = (byte + left) % 256;
              }
              break;
            case 2:
              // Up
              for (i = 0; i < scanlineLength; i++) {
                byte = data[pos++];
                col = (i - i % pixelBytes) / pixelBytes;
                upper = row && buffer[(row - 1) * scanlineLength + col * pixelBytes + i % pixelBytes];
                buffer[c++] = (upper + byte) % 256;
              }
              break;
            case 3:
              // Average
              for (i = 0; i < scanlineLength; i++) {
                byte = data[pos++];
                col = (i - i % pixelBytes) / pixelBytes;
                left = i < pixelBytes ? 0 : buffer[c - pixelBytes];
                upper = row && buffer[(row - 1) * scanlineLength + col * pixelBytes + i % pixelBytes];
                buffer[c++] = (byte + Math.floor((left + upper) / 2)) % 256;
              }
              break;
            case 4:
              // Paeth
              for (i = 0; i < scanlineLength; i++) {
                var paeth;
                var upperLeft;
                byte = data[pos++];
                col = (i - i % pixelBytes) / pixelBytes;
                left = i < pixelBytes ? 0 : buffer[c - pixelBytes];
                if (row === 0) {
                  upper = upperLeft = 0;
                } else {
                  upper = buffer[(row - 1) * scanlineLength + col * pixelBytes + i % pixelBytes];
                  upperLeft = col && buffer[(row - 1) * scanlineLength + (col - 1) * pixelBytes + i % pixelBytes];
                }
                const p = left + upper - upperLeft;
                const pa = Math.abs(p - left);
                const pb = Math.abs(p - upper);
                const pc = Math.abs(p - upperLeft);
                if (pa <= pb && pa <= pc) {
                  paeth = left;
                } else if (pb <= pc) {
                  paeth = upper;
                } else {
                  paeth = upperLeft;
                }
                buffer[c++] = (byte + paeth) % 256;
              }
              break;
            default:
              throw new Error(`Invalid filter algorithm: ${data[pos - 1]}`);
          }
          if (!singlePass) {
            let pixelsPos = ((y0 + row * dy) * width + x0) * pixelBytes;
            let bufferPos = row * scanlineLength;
            for (i = 0; i < w; i++) {
              for (let j = 0; j < pixelBytes; j++) pixels[pixelsPos++] = buffer[bufferPos++];
              pixelsPos += (dx - 1) * pixelBytes;
            }
          }
          row++;
        }
      }
      if (this.interlaceMethod === 1) {
        /*
          1 6 4 6 2 6 4 6
          7 7 7 7 7 7 7 7
          5 6 5 6 5 6 5 6
          7 7 7 7 7 7 7 7
          3 6 4 6 3 6 4 6
          7 7 7 7 7 7 7 7
          5 6 5 6 5 6 5 6
          7 7 7 7 7 7 7 7
        */
        pass(0, 0, 8, 8); // 1
        pass(4, 0, 8, 8); // 2
        pass(0, 4, 4, 8); // 3
        pass(2, 0, 4, 4); // 4
        pass(0, 2, 2, 4); // 5
        pass(1, 0, 2, 2); // 6
        pass(0, 1, 1, 2); // 7
      } else {
        pass(0, 0, 1, 1, true);
      }
      return fn(pixels);
    });
  }
  decodePalette() {
    const {
      palette
    } = this;
    const {
      length
    } = palette;
    const transparency = this.transparency.indexed || [];
    const ret = Buffer.alloc(transparency.length + length);
    let pos = 0;
    let c = 0;
    for (let i = 0; i < length; i += 3) {
      var left;
      ret[pos++] = palette[i];
      ret[pos++] = palette[i + 1];
      ret[pos++] = palette[i + 2];
      ret[pos++] = (left = transparency[c++]) != null ? left : 255;
    }
    return ret;
  }
  copyToImageData(imageData, pixels) {
    let j;
    var k;
    let {
      colors
    } = this;
    let palette = null;
    let alpha = this.hasAlphaChannel;
    if (this.palette.length) {
      palette = this._decodedPalette || (this._decodedPalette = this.decodePalette());
      colors = 4;
      alpha = true;
    }
    const data = imageData.data || imageData;
    const {
      length
    } = data;
    const input = palette || pixels;
    let i = j = 0;
    if (colors === 1) {
      while (i < length) {
        k = palette ? pixels[i / 4] * 4 : j;
        const v = input[k++];
        data[i++] = v;
        data[i++] = v;
        data[i++] = v;
        data[i++] = alpha ? input[k++] : 255;
        j = k;
      }
    } else {
      while (i < length) {
        k = palette ? pixels[i / 4] * 4 : j;
        data[i++] = input[k++];
        data[i++] = input[k++];
        data[i++] = input[k++];
        data[i++] = alpha ? input[k++] : 255;
        j = k;
      }
    }
  }
  decode(fn) {
    const ret = Buffer.alloc(this.width * this.height * 4);
    return this.decodePixels(pixels => {
      this.copyToImageData(ret, pixels);
      return fn(ret);
    });
  }
}

// EXTERNAL MODULE: ./node_modules/crypto-js/core.js
var core = __webpack_require__(7548);
;// ./node_modules/@react-pdf/pdfkit/lib/pdfkit.browser.js
var pdfkit_browser_global$1=typeof global!=="undefined"?global:typeof self!=="undefined"?self:typeof window!=="undefined"?window:{};var pdfkit_browser_lookup=[];var pdfkit_browser_revLookup=[];var pdfkit_browser_Arr=typeof Uint8Array!=='undefined'?Uint8Array:Array;var pdfkit_browser_inited=false;function pdfkit_browser_init(){pdfkit_browser_inited=true;var code='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';for(var i=0,len=code.length;i<len;++i){pdfkit_browser_lookup[i]=code[i];pdfkit_browser_revLookup[code.charCodeAt(i)]=i;}pdfkit_browser_revLookup['-'.charCodeAt(0)]=62;pdfkit_browser_revLookup['_'.charCodeAt(0)]=63;}function pdfkit_browser_toByteArray(b64){if(!pdfkit_browser_inited){pdfkit_browser_init();}var i,j,l,tmp,placeHolders,arr;var len=b64.length;if(len%4>0){throw new Error('Invalid string. Length must be a multiple of 4');}// the number of equal signs (place holders)
// if there are two placeholders, than the two characters before it
// represent one byte
// if there is only one, then the three characters before it represent 2 bytes
// this is just a cheap hack to not do indexOf twice
placeHolders=b64[len-2]==='='?2:b64[len-1]==='='?1:0;// base64 is 4/3 + up to two characters of the original data
arr=new pdfkit_browser_Arr(len*3/4-placeHolders);// if there are placeholders, only get up to the last complete 4 chars
l=placeHolders>0?len-4:len;var L=0;for(i=0,j=0;i<l;i+=4,j+=3){tmp=pdfkit_browser_revLookup[b64.charCodeAt(i)]<<18|pdfkit_browser_revLookup[b64.charCodeAt(i+1)]<<12|pdfkit_browser_revLookup[b64.charCodeAt(i+2)]<<6|pdfkit_browser_revLookup[b64.charCodeAt(i+3)];arr[L++]=tmp>>16&0xFF;arr[L++]=tmp>>8&0xFF;arr[L++]=tmp&0xFF;}if(placeHolders===2){tmp=pdfkit_browser_revLookup[b64.charCodeAt(i)]<<2|pdfkit_browser_revLookup[b64.charCodeAt(i+1)]>>4;arr[L++]=tmp&0xFF;}else if(placeHolders===1){tmp=pdfkit_browser_revLookup[b64.charCodeAt(i)]<<10|pdfkit_browser_revLookup[b64.charCodeAt(i+1)]<<4|pdfkit_browser_revLookup[b64.charCodeAt(i+2)]>>2;arr[L++]=tmp>>8&0xFF;arr[L++]=tmp&0xFF;}return arr;}function pdfkit_browser_tripletToBase64(num){return pdfkit_browser_lookup[num>>18&0x3F]+pdfkit_browser_lookup[num>>12&0x3F]+pdfkit_browser_lookup[num>>6&0x3F]+pdfkit_browser_lookup[num&0x3F];}function pdfkit_browser_encodeChunk(uint8,start,end){var tmp;var output=[];for(var i=start;i<end;i+=3){tmp=(uint8[i]<<16)+(uint8[i+1]<<8)+uint8[i+2];output.push(pdfkit_browser_tripletToBase64(tmp));}return output.join('');}function pdfkit_browser_fromByteArray(uint8){if(!pdfkit_browser_inited){pdfkit_browser_init();}var tmp;var len=uint8.length;var extraBytes=len%3;// if we have 1 byte left, pad 2 bytes
var output='';var parts=[];var maxChunkLength=16383;// must be multiple of 3
// go through the array every three bytes, we'll deal with trailing stuff later
for(var i=0,len2=len-extraBytes;i<len2;i+=maxChunkLength){parts.push(pdfkit_browser_encodeChunk(uint8,i,i+maxChunkLength>len2?len2:i+maxChunkLength));}// pad the end with zeros, but make sure to not forget the extra bytes
if(extraBytes===1){tmp=uint8[len-1];output+=pdfkit_browser_lookup[tmp>>2];output+=pdfkit_browser_lookup[tmp<<4&0x3F];output+='==';}else if(extraBytes===2){tmp=(uint8[len-2]<<8)+uint8[len-1];output+=pdfkit_browser_lookup[tmp>>10];output+=pdfkit_browser_lookup[tmp>>4&0x3F];output+=pdfkit_browser_lookup[tmp<<2&0x3F];output+='=';}parts.push(output);return parts.join('');}function pdfkit_browser_read(buffer,offset,isLE,mLen,nBytes){var e,m;var eLen=nBytes*8-mLen-1;var eMax=(1<<eLen)-1;var eBias=eMax>>1;var nBits=-7;var i=isLE?nBytes-1:0;var d=isLE?-1:1;var s=buffer[offset+i];i+=d;e=s&(1<<-nBits)-1;s>>=-nBits;nBits+=eLen;for(;nBits>0;e=e*256+buffer[offset+i],i+=d,nBits-=8){}m=e&(1<<-nBits)-1;e>>=-nBits;nBits+=mLen;for(;nBits>0;m=m*256+buffer[offset+i],i+=d,nBits-=8){}if(e===0){e=1-eBias;}else if(e===eMax){return m?NaN:(s?-1:1)*Infinity;}else{m=m+Math.pow(2,mLen);e=e-eBias;}return(s?-1:1)*m*Math.pow(2,e-mLen);}function pdfkit_browser_write(buffer,value,offset,isLE,mLen,nBytes){var e,m,c;var eLen=nBytes*8-mLen-1;var eMax=(1<<eLen)-1;var eBias=eMax>>1;var rt=mLen===23?Math.pow(2,-24)-Math.pow(2,-77):0;var i=isLE?0:nBytes-1;var d=isLE?1:-1;var s=value<0||value===0&&1/value<0?1:0;value=Math.abs(value);if(isNaN(value)||value===Infinity){m=isNaN(value)?1:0;e=eMax;}else{e=Math.floor(Math.log(value)/Math.LN2);if(value*(c=Math.pow(2,-e))<1){e--;c*=2;}if(e+eBias>=1){value+=rt/c;}else{value+=rt*Math.pow(2,1-eBias);}if(value*c>=2){e++;c/=2;}if(e+eBias>=eMax){m=0;e=eMax;}else if(e+eBias>=1){m=(value*c-1)*Math.pow(2,mLen);e=e+eBias;}else{m=value*Math.pow(2,eBias-1)*Math.pow(2,mLen);e=0;}}for(;mLen>=8;buffer[offset+i]=m&0xff,i+=d,m/=256,mLen-=8){}e=e<<mLen|m;eLen+=mLen;for(;eLen>0;buffer[offset+i]=e&0xff,i+=d,e/=256,eLen-=8){}buffer[offset+i-d]|=s*128;}var pdfkit_browser_toString={}.toString;var pdfkit_browser_isArray$1=Array.isArray||function(arr){return pdfkit_browser_toString.call(arr)=='[object Array]';};/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 *//* eslint-disable no-proto */var pdfkit_browser_INSPECT_MAX_BYTES=50;/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */Buffer$2.TYPED_ARRAY_SUPPORT=pdfkit_browser_global$1.TYPED_ARRAY_SUPPORT!==undefined?pdfkit_browser_global$1.TYPED_ARRAY_SUPPORT:true;/*
 * Export kMaxLength after typed array support is determined.
 */var pdfkit_browser_kMaxLength=lib_pdfkit_browser_kMaxLength();function lib_pdfkit_browser_kMaxLength(){return Buffer$2.TYPED_ARRAY_SUPPORT?0x7fffffff:0x3fffffff;}function pdfkit_browser_createBuffer(that,length){if(lib_pdfkit_browser_kMaxLength()<length){throw new RangeError('Invalid typed array length');}if(Buffer$2.TYPED_ARRAY_SUPPORT){// Return an augmented `Uint8Array` instance, for best performance
that=new Uint8Array(length);that.__proto__=Buffer$2.prototype;}else{// Fallback: Return an object instance of the Buffer class
if(that===null){that=new Buffer$2(length);}that.length=length;}return that;}/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */function Buffer$2(arg,encodingOrOffset,length){if(!Buffer$2.TYPED_ARRAY_SUPPORT&&!(this instanceof Buffer$2)){return new Buffer$2(arg,encodingOrOffset,length);}// Common case.
if(typeof arg==='number'){if(typeof encodingOrOffset==='string'){throw new Error('If encoding is specified then the first argument must be a string');}return pdfkit_browser_allocUnsafe(this,arg);}return from$1(this,arg,encodingOrOffset,length);}Buffer$2.poolSize=8192;// not used by this implementation
// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer$2._augment=function(arr){arr.__proto__=Buffer$2.prototype;return arr;};function from$1(that,value,encodingOrOffset,length){if(typeof value==='number'){throw new TypeError('"value" argument must not be a number');}if(typeof ArrayBuffer!=='undefined'&&value instanceof ArrayBuffer){return pdfkit_browser_fromArrayBuffer(that,value,encodingOrOffset,length);}if(typeof value==='string'){return pdfkit_browser_fromString(that,value,encodingOrOffset);}return pdfkit_browser_fromObject(that,value);}/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/Buffer$2.from=function(value,encodingOrOffset,length){return from$1(null,value,encodingOrOffset,length);};if(Buffer$2.TYPED_ARRAY_SUPPORT){Buffer$2.prototype.__proto__=Uint8Array.prototype;Buffer$2.__proto__=Uint8Array;if(typeof Symbol!=='undefined'&&Symbol.species&&Buffer$2[Symbol.species]===Buffer$2);}function pdfkit_browser_assertSize(size){if(typeof size!=='number'){throw new TypeError('"size" argument must be a number');}else if(size<0){throw new RangeError('"size" argument must not be negative');}}function pdfkit_browser_alloc(that,size,fill,encoding){pdfkit_browser_assertSize(size);if(size<=0){return pdfkit_browser_createBuffer(that,size);}if(fill!==undefined){// Only pay attention to encoding if it's a string. This
// prevents accidentally sending in a number that would
// be interpretted as a start offset.
return typeof encoding==='string'?pdfkit_browser_createBuffer(that,size).fill(fill,encoding):pdfkit_browser_createBuffer(that,size).fill(fill);}return pdfkit_browser_createBuffer(that,size);}/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/Buffer$2.alloc=function(size,fill,encoding){return pdfkit_browser_alloc(null,size,fill,encoding);};function pdfkit_browser_allocUnsafe(that,size){pdfkit_browser_assertSize(size);that=pdfkit_browser_createBuffer(that,size<0?0:pdfkit_browser_checked(size)|0);if(!Buffer$2.TYPED_ARRAY_SUPPORT){for(var i=0;i<size;++i){that[i]=0;}}return that;}/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */Buffer$2.allocUnsafe=function(size){return pdfkit_browser_allocUnsafe(null,size);};/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */Buffer$2.allocUnsafeSlow=function(size){return pdfkit_browser_allocUnsafe(null,size);};function pdfkit_browser_fromString(that,string,encoding){if(typeof encoding!=='string'||encoding===''){encoding='utf8';}if(!Buffer$2.isEncoding(encoding)){throw new TypeError('"encoding" must be a valid string encoding');}var length=pdfkit_browser_byteLength(string,encoding)|0;that=pdfkit_browser_createBuffer(that,length);var actual=that.write(string,encoding);if(actual!==length){// Writing a hex string, for example, that contains invalid characters will
// cause everything after the first invalid character to be ignored. (e.g.
// 'abxxcd' will be treated as 'ab')
that=that.slice(0,actual);}return that;}function pdfkit_browser_fromArrayLike(that,array){var length=array.length<0?0:pdfkit_browser_checked(array.length)|0;that=pdfkit_browser_createBuffer(that,length);for(var i=0;i<length;i+=1){that[i]=array[i]&255;}return that;}function pdfkit_browser_fromArrayBuffer(that,array,byteOffset,length){array.byteLength;// this throws if `array` is not a valid ArrayBuffer
if(byteOffset<0||array.byteLength<byteOffset){throw new RangeError('\'offset\' is out of bounds');}if(array.byteLength<byteOffset+(length||0)){throw new RangeError('\'length\' is out of bounds');}if(byteOffset===undefined&&length===undefined){array=new Uint8Array(array);}else if(length===undefined){array=new Uint8Array(array,byteOffset);}else{array=new Uint8Array(array,byteOffset,length);}if(Buffer$2.TYPED_ARRAY_SUPPORT){// Return an augmented `Uint8Array` instance, for best performance
that=array;that.__proto__=Buffer$2.prototype;}else{// Fallback: Return an object instance of the Buffer class
that=pdfkit_browser_fromArrayLike(that,array);}return that;}function pdfkit_browser_fromObject(that,obj){if(pdfkit_browser_internalIsBuffer(obj)){var len=pdfkit_browser_checked(obj.length)|0;that=pdfkit_browser_createBuffer(that,len);if(that.length===0){return that;}obj.copy(that,0,0,len);return that;}if(obj){if(typeof ArrayBuffer!=='undefined'&&obj.buffer instanceof ArrayBuffer||'length'in obj){if(typeof obj.length!=='number'||pdfkit_browser_isnan(obj.length)){return pdfkit_browser_createBuffer(that,0);}return pdfkit_browser_fromArrayLike(that,obj);}if(obj.type==='Buffer'&&pdfkit_browser_isArray$1(obj.data)){return pdfkit_browser_fromArrayLike(that,obj.data);}}throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');}function pdfkit_browser_checked(length){// Note: cannot use `length < kMaxLength()` here because that fails when
// length is NaN (which is otherwise coerced to zero.)
if(length>=lib_pdfkit_browser_kMaxLength()){throw new RangeError('Attempt to allocate Buffer larger than maximum '+'size: 0x'+lib_pdfkit_browser_kMaxLength().toString(16)+' bytes');}return length|0;}function pdfkit_browser_SlowBuffer(length){if(+length!=length){// eslint-disable-line eqeqeq
length=0;}return Buffer$2.alloc(+length);}Buffer$2.isBuffer=pdfkit_browser_isBuffer$1;function pdfkit_browser_internalIsBuffer(b){return!!(b!=null&&b._isBuffer);}Buffer$2.compare=function compare(a,b){if(!pdfkit_browser_internalIsBuffer(a)||!pdfkit_browser_internalIsBuffer(b)){throw new TypeError('Arguments must be Buffers');}if(a===b)return 0;var x=a.length;var y=b.length;for(var i=0,len=Math.min(x,y);i<len;++i){if(a[i]!==b[i]){x=a[i];y=b[i];break;}}if(x<y)return-1;if(y<x)return 1;return 0;};Buffer$2.isEncoding=function isEncoding(encoding){switch(String(encoding).toLowerCase()){case'hex':case'utf8':case'utf-8':case'ascii':case'latin1':case'binary':case'base64':case'ucs2':case'ucs-2':case'utf16le':case'utf-16le':return true;default:return false;}};Buffer$2.concat=function concat(list,length){if(!pdfkit_browser_isArray$1(list)){throw new TypeError('"list" argument must be an Array of Buffers');}if(list.length===0){return Buffer$2.alloc(0);}var i;if(length===undefined){length=0;for(i=0;i<list.length;++i){length+=list[i].length;}}var buffer=Buffer$2.allocUnsafe(length);var pos=0;for(i=0;i<list.length;++i){var buf=list[i];if(!pdfkit_browser_internalIsBuffer(buf)){throw new TypeError('"list" argument must be an Array of Buffers');}buf.copy(buffer,pos);pos+=buf.length;}return buffer;};function pdfkit_browser_byteLength(string,encoding){if(pdfkit_browser_internalIsBuffer(string)){return string.length;}if(typeof ArrayBuffer!=='undefined'&&typeof ArrayBuffer.isView==='function'&&(ArrayBuffer.isView(string)||string instanceof ArrayBuffer)){return string.byteLength;}if(typeof string!=='string'){string=''+string;}var len=string.length;if(len===0)return 0;// Use a for loop to avoid recursion
var loweredCase=false;for(;;){switch(encoding){case'ascii':case'latin1':case'binary':return len;case'utf8':case'utf-8':case undefined:return pdfkit_browser_utf8ToBytes(string).length;case'ucs2':case'ucs-2':case'utf16le':case'utf-16le':return len*2;case'hex':return len>>>1;case'base64':return pdfkit_browser_base64ToBytes(string).length;default:if(loweredCase)return pdfkit_browser_utf8ToBytes(string).length;// assume utf8
encoding=(''+encoding).toLowerCase();loweredCase=true;}}}Buffer$2.byteLength=pdfkit_browser_byteLength;function pdfkit_browser_slowToString(encoding,start,end){var loweredCase=false;// No need to verify that "this.length <= MAX_UINT32" since it's a read-only
// property of a typed array.
// This behaves neither like String nor Uint8Array in that we set start/end
// to their upper/lower bounds if the value passed is out of range.
// undefined is handled specially as per ECMA-262 6th Edition,
// Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
if(start===undefined||start<0){start=0;}// Return early if start > this.length. Done here to prevent potential uint32
// coercion fail below.
if(start>this.length){return'';}if(end===undefined||end>this.length){end=this.length;}if(end<=0){return'';}// Force coersion to uint32. This will also coerce falsey/NaN values to 0.
end>>>=0;start>>>=0;if(end<=start){return'';}if(!encoding)encoding='utf8';while(true){switch(encoding){case'hex':return pdfkit_browser_hexSlice(this,start,end);case'utf8':case'utf-8':return pdfkit_browser_utf8Slice(this,start,end);case'ascii':return pdfkit_browser_asciiSlice(this,start,end);case'latin1':case'binary':return pdfkit_browser_latin1Slice(this,start,end);case'base64':return pdfkit_browser_base64Slice(this,start,end);case'ucs2':case'ucs-2':case'utf16le':case'utf-16le':return pdfkit_browser_utf16leSlice(this,start,end);default:if(loweredCase)throw new TypeError('Unknown encoding: '+encoding);encoding=(encoding+'').toLowerCase();loweredCase=true;}}}// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer$2.prototype._isBuffer=true;function pdfkit_browser_swap(b,n,m){var i=b[n];b[n]=b[m];b[m]=i;}Buffer$2.prototype.swap16=function swap16(){var len=this.length;if(len%2!==0){throw new RangeError('Buffer size must be a multiple of 16-bits');}for(var i=0;i<len;i+=2){pdfkit_browser_swap(this,i,i+1);}return this;};Buffer$2.prototype.swap32=function swap32(){var len=this.length;if(len%4!==0){throw new RangeError('Buffer size must be a multiple of 32-bits');}for(var i=0;i<len;i+=4){pdfkit_browser_swap(this,i,i+3);pdfkit_browser_swap(this,i+1,i+2);}return this;};Buffer$2.prototype.swap64=function swap64(){var len=this.length;if(len%8!==0){throw new RangeError('Buffer size must be a multiple of 64-bits');}for(var i=0;i<len;i+=8){pdfkit_browser_swap(this,i,i+7);pdfkit_browser_swap(this,i+1,i+6);pdfkit_browser_swap(this,i+2,i+5);pdfkit_browser_swap(this,i+3,i+4);}return this;};Buffer$2.prototype.toString=function toString(){var length=this.length|0;if(length===0)return'';if(arguments.length===0)return pdfkit_browser_utf8Slice(this,0,length);return pdfkit_browser_slowToString.apply(this,arguments);};Buffer$2.prototype.equals=function equals(b){if(!pdfkit_browser_internalIsBuffer(b))throw new TypeError('Argument must be a Buffer');if(this===b)return true;return Buffer$2.compare(this,b)===0;};Buffer$2.prototype.inspect=function inspect(){var str='';var max=pdfkit_browser_INSPECT_MAX_BYTES;if(this.length>0){str=this.toString('hex',0,max).match(/.{2}/g).join(' ');if(this.length>max)str+=' ... ';}return'<Buffer '+str+'>';};Buffer$2.prototype.compare=function compare(target,start,end,thisStart,thisEnd){if(!pdfkit_browser_internalIsBuffer(target)){throw new TypeError('Argument must be a Buffer');}if(start===undefined){start=0;}if(end===undefined){end=target?target.length:0;}if(thisStart===undefined){thisStart=0;}if(thisEnd===undefined){thisEnd=this.length;}if(start<0||end>target.length||thisStart<0||thisEnd>this.length){throw new RangeError('out of range index');}if(thisStart>=thisEnd&&start>=end){return 0;}if(thisStart>=thisEnd){return-1;}if(start>=end){return 1;}start>>>=0;end>>>=0;thisStart>>>=0;thisEnd>>>=0;if(this===target)return 0;var x=thisEnd-thisStart;var y=end-start;var len=Math.min(x,y);var thisCopy=this.slice(thisStart,thisEnd);var targetCopy=target.slice(start,end);for(var i=0;i<len;++i){if(thisCopy[i]!==targetCopy[i]){x=thisCopy[i];y=targetCopy[i];break;}}if(x<y)return-1;if(y<x)return 1;return 0;};// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function pdfkit_browser_bidirectionalIndexOf(buffer,val,byteOffset,encoding,dir){// Empty buffer means no match
if(buffer.length===0)return-1;// Normalize byteOffset
if(typeof byteOffset==='string'){encoding=byteOffset;byteOffset=0;}else if(byteOffset>0x7fffffff){byteOffset=0x7fffffff;}else if(byteOffset<-0x80000000){byteOffset=-0x80000000;}byteOffset=+byteOffset;// Coerce to Number.
if(isNaN(byteOffset)){// byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
byteOffset=dir?0:buffer.length-1;}// Normalize byteOffset: negative offsets start from the end of the buffer
if(byteOffset<0)byteOffset=buffer.length+byteOffset;if(byteOffset>=buffer.length){if(dir)return-1;else byteOffset=buffer.length-1;}else if(byteOffset<0){if(dir)byteOffset=0;else return-1;}// Normalize val
if(typeof val==='string'){val=Buffer$2.from(val,encoding);}// Finally, search either indexOf (if dir is true) or lastIndexOf
if(pdfkit_browser_internalIsBuffer(val)){// Special case: looking for empty string/buffer always fails
if(val.length===0){return-1;}return pdfkit_browser_arrayIndexOf(buffer,val,byteOffset,encoding,dir);}else if(typeof val==='number'){val=val&0xFF;// Search for a byte value [0-255]
if(Buffer$2.TYPED_ARRAY_SUPPORT&&typeof Uint8Array.prototype.indexOf==='function'){if(dir){return Uint8Array.prototype.indexOf.call(buffer,val,byteOffset);}else{return Uint8Array.prototype.lastIndexOf.call(buffer,val,byteOffset);}}return pdfkit_browser_arrayIndexOf(buffer,[val],byteOffset,encoding,dir);}throw new TypeError('val must be string, number or Buffer');}function pdfkit_browser_arrayIndexOf(arr,val,byteOffset,encoding,dir){var indexSize=1;var arrLength=arr.length;var valLength=val.length;if(encoding!==undefined){encoding=String(encoding).toLowerCase();if(encoding==='ucs2'||encoding==='ucs-2'||encoding==='utf16le'||encoding==='utf-16le'){if(arr.length<2||val.length<2){return-1;}indexSize=2;arrLength/=2;valLength/=2;byteOffset/=2;}}function read(buf,i){if(indexSize===1){return buf[i];}else{return buf.readUInt16BE(i*indexSize);}}var i;if(dir){var foundIndex=-1;for(i=byteOffset;i<arrLength;i++){if(read(arr,i)===read(val,foundIndex===-1?0:i-foundIndex)){if(foundIndex===-1)foundIndex=i;if(i-foundIndex+1===valLength)return foundIndex*indexSize;}else{if(foundIndex!==-1)i-=i-foundIndex;foundIndex=-1;}}}else{if(byteOffset+valLength>arrLength)byteOffset=arrLength-valLength;for(i=byteOffset;i>=0;i--){var found=true;for(var j=0;j<valLength;j++){if(read(arr,i+j)!==read(val,j)){found=false;break;}}if(found)return i;}}return-1;}Buffer$2.prototype.includes=function includes(val,byteOffset,encoding){return this.indexOf(val,byteOffset,encoding)!==-1;};Buffer$2.prototype.indexOf=function indexOf(val,byteOffset,encoding){return pdfkit_browser_bidirectionalIndexOf(this,val,byteOffset,encoding,true);};Buffer$2.prototype.lastIndexOf=function lastIndexOf(val,byteOffset,encoding){return pdfkit_browser_bidirectionalIndexOf(this,val,byteOffset,encoding,false);};function pdfkit_browser_hexWrite(buf,string,offset,length){offset=Number(offset)||0;var remaining=buf.length-offset;if(!length){length=remaining;}else{length=Number(length);if(length>remaining){length=remaining;}}// must be an even number of digits
var strLen=string.length;if(strLen%2!==0)throw new TypeError('Invalid hex string');if(length>strLen/2){length=strLen/2;}for(var i=0;i<length;++i){var parsed=parseInt(string.substr(i*2,2),16);if(isNaN(parsed))return i;buf[offset+i]=parsed;}return i;}function pdfkit_browser_utf8Write(buf,string,offset,length){return pdfkit_browser_blitBuffer(pdfkit_browser_utf8ToBytes(string,buf.length-offset),buf,offset,length);}function pdfkit_browser_asciiWrite(buf,string,offset,length){return pdfkit_browser_blitBuffer(pdfkit_browser_asciiToBytes(string),buf,offset,length);}function pdfkit_browser_latin1Write(buf,string,offset,length){return pdfkit_browser_asciiWrite(buf,string,offset,length);}function pdfkit_browser_base64Write(buf,string,offset,length){return pdfkit_browser_blitBuffer(pdfkit_browser_base64ToBytes(string),buf,offset,length);}function pdfkit_browser_ucs2Write(buf,string,offset,length){return pdfkit_browser_blitBuffer(pdfkit_browser_utf16leToBytes(string,buf.length-offset),buf,offset,length);}Buffer$2.prototype.write=function write(string,offset,length,encoding){// Buffer#write(string)
if(offset===undefined){encoding='utf8';length=this.length;offset=0;// Buffer#write(string, encoding)
}else if(length===undefined&&typeof offset==='string'){encoding=offset;length=this.length;offset=0;// Buffer#write(string, offset[, length][, encoding])
}else if(isFinite(offset)){offset=offset|0;if(isFinite(length)){length=length|0;if(encoding===undefined)encoding='utf8';}else{encoding=length;length=undefined;}// legacy write(string, encoding, offset, length) - remove in v0.13
}else{throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');}var remaining=this.length-offset;if(length===undefined||length>remaining)length=remaining;if(string.length>0&&(length<0||offset<0)||offset>this.length){throw new RangeError('Attempt to write outside buffer bounds');}if(!encoding)encoding='utf8';var loweredCase=false;for(;;){switch(encoding){case'hex':return pdfkit_browser_hexWrite(this,string,offset,length);case'utf8':case'utf-8':return pdfkit_browser_utf8Write(this,string,offset,length);case'ascii':return pdfkit_browser_asciiWrite(this,string,offset,length);case'latin1':case'binary':return pdfkit_browser_latin1Write(this,string,offset,length);case'base64':// Warning: maxLength not taken into account in base64Write
return pdfkit_browser_base64Write(this,string,offset,length);case'ucs2':case'ucs-2':case'utf16le':case'utf-16le':return pdfkit_browser_ucs2Write(this,string,offset,length);default:if(loweredCase)throw new TypeError('Unknown encoding: '+encoding);encoding=(''+encoding).toLowerCase();loweredCase=true;}}};Buffer$2.prototype.toJSON=function toJSON(){return{type:'Buffer',data:Array.prototype.slice.call(this._arr||this,0)};};function pdfkit_browser_base64Slice(buf,start,end){if(start===0&&end===buf.length){return pdfkit_browser_fromByteArray(buf);}else{return pdfkit_browser_fromByteArray(buf.slice(start,end));}}function pdfkit_browser_utf8Slice(buf,start,end){end=Math.min(buf.length,end);var res=[];var i=start;while(i<end){var firstByte=buf[i];var codePoint=null;var bytesPerSequence=firstByte>0xEF?4:firstByte>0xDF?3:firstByte>0xBF?2:1;if(i+bytesPerSequence<=end){var secondByte,thirdByte,fourthByte,tempCodePoint;switch(bytesPerSequence){case 1:if(firstByte<0x80){codePoint=firstByte;}break;case 2:secondByte=buf[i+1];if((secondByte&0xC0)===0x80){tempCodePoint=(firstByte&0x1F)<<0x6|secondByte&0x3F;if(tempCodePoint>0x7F){codePoint=tempCodePoint;}}break;case 3:secondByte=buf[i+1];thirdByte=buf[i+2];if((secondByte&0xC0)===0x80&&(thirdByte&0xC0)===0x80){tempCodePoint=(firstByte&0xF)<<0xC|(secondByte&0x3F)<<0x6|thirdByte&0x3F;if(tempCodePoint>0x7FF&&(tempCodePoint<0xD800||tempCodePoint>0xDFFF)){codePoint=tempCodePoint;}}break;case 4:secondByte=buf[i+1];thirdByte=buf[i+2];fourthByte=buf[i+3];if((secondByte&0xC0)===0x80&&(thirdByte&0xC0)===0x80&&(fourthByte&0xC0)===0x80){tempCodePoint=(firstByte&0xF)<<0x12|(secondByte&0x3F)<<0xC|(thirdByte&0x3F)<<0x6|fourthByte&0x3F;if(tempCodePoint>0xFFFF&&tempCodePoint<0x110000){codePoint=tempCodePoint;}}}}if(codePoint===null){// we did not generate a valid codePoint so insert a
// replacement char (U+FFFD) and advance only 1 byte
codePoint=0xFFFD;bytesPerSequence=1;}else if(codePoint>0xFFFF){// encode to utf16 (surrogate pair dance)
codePoint-=0x10000;res.push(codePoint>>>10&0x3FF|0xD800);codePoint=0xDC00|codePoint&0x3FF;}res.push(codePoint);i+=bytesPerSequence;}return pdfkit_browser_decodeCodePointsArray(res);}// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var pdfkit_browser_MAX_ARGUMENTS_LENGTH=0x1000;function pdfkit_browser_decodeCodePointsArray(codePoints){var len=codePoints.length;if(len<=pdfkit_browser_MAX_ARGUMENTS_LENGTH){return String.fromCharCode.apply(String,codePoints);// avoid extra slice()
}// Decode in chunks to avoid "call stack size exceeded".
var res='';var i=0;while(i<len){res+=String.fromCharCode.apply(String,codePoints.slice(i,i+=pdfkit_browser_MAX_ARGUMENTS_LENGTH));}return res;}function pdfkit_browser_asciiSlice(buf,start,end){var ret='';end=Math.min(buf.length,end);for(var i=start;i<end;++i){ret+=String.fromCharCode(buf[i]&0x7F);}return ret;}function pdfkit_browser_latin1Slice(buf,start,end){var ret='';end=Math.min(buf.length,end);for(var i=start;i<end;++i){ret+=String.fromCharCode(buf[i]);}return ret;}function pdfkit_browser_hexSlice(buf,start,end){var len=buf.length;if(!start||start<0)start=0;if(!end||end<0||end>len)end=len;var out='';for(var i=start;i<end;++i){out+=toHex$1(buf[i]);}return out;}function pdfkit_browser_utf16leSlice(buf,start,end){var bytes=buf.slice(start,end);var res='';for(var i=0;i<bytes.length;i+=2){res+=String.fromCharCode(bytes[i]+bytes[i+1]*256);}return res;}Buffer$2.prototype.slice=function slice(start,end){var len=this.length;start=~~start;end=end===undefined?len:~~end;if(start<0){start+=len;if(start<0)start=0;}else if(start>len){start=len;}if(end<0){end+=len;if(end<0)end=0;}else if(end>len){end=len;}if(end<start)end=start;var newBuf;if(Buffer$2.TYPED_ARRAY_SUPPORT){newBuf=this.subarray(start,end);newBuf.__proto__=Buffer$2.prototype;}else{var sliceLen=end-start;newBuf=new Buffer$2(sliceLen,undefined);for(var i=0;i<sliceLen;++i){newBuf[i]=this[i+start];}}return newBuf;};/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */function pdfkit_browser_checkOffset(offset,ext,length){if(offset%1!==0||offset<0)throw new RangeError('offset is not uint');if(offset+ext>length)throw new RangeError('Trying to access beyond buffer length');}Buffer$2.prototype.readUIntLE=function readUIntLE(offset,byteLength,noAssert){offset=offset|0;byteLength=byteLength|0;if(!noAssert)pdfkit_browser_checkOffset(offset,byteLength,this.length);var val=this[offset];var mul=1;var i=0;while(++i<byteLength&&(mul*=0x100)){val+=this[offset+i]*mul;}return val;};Buffer$2.prototype.readUIntBE=function readUIntBE(offset,byteLength,noAssert){offset=offset|0;byteLength=byteLength|0;if(!noAssert){pdfkit_browser_checkOffset(offset,byteLength,this.length);}var val=this[offset+--byteLength];var mul=1;while(byteLength>0&&(mul*=0x100)){val+=this[offset+--byteLength]*mul;}return val;};Buffer$2.prototype.readUInt8=function readUInt8(offset,noAssert){if(!noAssert)pdfkit_browser_checkOffset(offset,1,this.length);return this[offset];};Buffer$2.prototype.readUInt16LE=function readUInt16LE(offset,noAssert){if(!noAssert)pdfkit_browser_checkOffset(offset,2,this.length);return this[offset]|this[offset+1]<<8;};Buffer$2.prototype.readUInt16BE=function readUInt16BE(offset,noAssert){if(!noAssert)pdfkit_browser_checkOffset(offset,2,this.length);return this[offset]<<8|this[offset+1];};Buffer$2.prototype.readUInt32LE=function readUInt32LE(offset,noAssert){if(!noAssert)pdfkit_browser_checkOffset(offset,4,this.length);return(this[offset]|this[offset+1]<<8|this[offset+2]<<16)+this[offset+3]*0x1000000;};Buffer$2.prototype.readUInt32BE=function readUInt32BE(offset,noAssert){if(!noAssert)pdfkit_browser_checkOffset(offset,4,this.length);return this[offset]*0x1000000+(this[offset+1]<<16|this[offset+2]<<8|this[offset+3]);};Buffer$2.prototype.readIntLE=function readIntLE(offset,byteLength,noAssert){offset=offset|0;byteLength=byteLength|0;if(!noAssert)pdfkit_browser_checkOffset(offset,byteLength,this.length);var val=this[offset];var mul=1;var i=0;while(++i<byteLength&&(mul*=0x100)){val+=this[offset+i]*mul;}mul*=0x80;if(val>=mul)val-=Math.pow(2,8*byteLength);return val;};Buffer$2.prototype.readIntBE=function readIntBE(offset,byteLength,noAssert){offset=offset|0;byteLength=byteLength|0;if(!noAssert)pdfkit_browser_checkOffset(offset,byteLength,this.length);var i=byteLength;var mul=1;var val=this[offset+--i];while(i>0&&(mul*=0x100)){val+=this[offset+--i]*mul;}mul*=0x80;if(val>=mul)val-=Math.pow(2,8*byteLength);return val;};Buffer$2.prototype.readInt8=function readInt8(offset,noAssert){if(!noAssert)pdfkit_browser_checkOffset(offset,1,this.length);if(!(this[offset]&0x80))return this[offset];return(0xff-this[offset]+1)*-1;};Buffer$2.prototype.readInt16LE=function readInt16LE(offset,noAssert){if(!noAssert)pdfkit_browser_checkOffset(offset,2,this.length);var val=this[offset]|this[offset+1]<<8;return val&0x8000?val|0xFFFF0000:val;};Buffer$2.prototype.readInt16BE=function readInt16BE(offset,noAssert){if(!noAssert)pdfkit_browser_checkOffset(offset,2,this.length);var val=this[offset+1]|this[offset]<<8;return val&0x8000?val|0xFFFF0000:val;};Buffer$2.prototype.readInt32LE=function readInt32LE(offset,noAssert){if(!noAssert)pdfkit_browser_checkOffset(offset,4,this.length);return this[offset]|this[offset+1]<<8|this[offset+2]<<16|this[offset+3]<<24;};Buffer$2.prototype.readInt32BE=function readInt32BE(offset,noAssert){if(!noAssert)pdfkit_browser_checkOffset(offset,4,this.length);return this[offset]<<24|this[offset+1]<<16|this[offset+2]<<8|this[offset+3];};Buffer$2.prototype.readFloatLE=function readFloatLE(offset,noAssert){if(!noAssert)pdfkit_browser_checkOffset(offset,4,this.length);return pdfkit_browser_read(this,offset,true,23,4);};Buffer$2.prototype.readFloatBE=function readFloatBE(offset,noAssert){if(!noAssert)pdfkit_browser_checkOffset(offset,4,this.length);return pdfkit_browser_read(this,offset,false,23,4);};Buffer$2.prototype.readDoubleLE=function readDoubleLE(offset,noAssert){if(!noAssert)pdfkit_browser_checkOffset(offset,8,this.length);return pdfkit_browser_read(this,offset,true,52,8);};Buffer$2.prototype.readDoubleBE=function readDoubleBE(offset,noAssert){if(!noAssert)pdfkit_browser_checkOffset(offset,8,this.length);return pdfkit_browser_read(this,offset,false,52,8);};function pdfkit_browser_checkInt(buf,value,offset,ext,max,min){if(!pdfkit_browser_internalIsBuffer(buf))throw new TypeError('"buffer" argument must be a Buffer instance');if(value>max||value<min)throw new RangeError('"value" argument is out of bounds');if(offset+ext>buf.length)throw new RangeError('Index out of range');}Buffer$2.prototype.writeUIntLE=function writeUIntLE(value,offset,byteLength,noAssert){value=+value;offset=offset|0;byteLength=byteLength|0;if(!noAssert){var maxBytes=Math.pow(2,8*byteLength)-1;pdfkit_browser_checkInt(this,value,offset,byteLength,maxBytes,0);}var mul=1;var i=0;this[offset]=value&0xFF;while(++i<byteLength&&(mul*=0x100)){this[offset+i]=value/mul&0xFF;}return offset+byteLength;};Buffer$2.prototype.writeUIntBE=function writeUIntBE(value,offset,byteLength,noAssert){value=+value;offset=offset|0;byteLength=byteLength|0;if(!noAssert){var maxBytes=Math.pow(2,8*byteLength)-1;pdfkit_browser_checkInt(this,value,offset,byteLength,maxBytes,0);}var i=byteLength-1;var mul=1;this[offset+i]=value&0xFF;while(--i>=0&&(mul*=0x100)){this[offset+i]=value/mul&0xFF;}return offset+byteLength;};Buffer$2.prototype.writeUInt8=function writeUInt8(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)pdfkit_browser_checkInt(this,value,offset,1,0xff,0);if(!Buffer$2.TYPED_ARRAY_SUPPORT)value=Math.floor(value);this[offset]=value&0xff;return offset+1;};function pdfkit_browser_objectWriteUInt16(buf,value,offset,littleEndian){if(value<0)value=0xffff+value+1;for(var i=0,j=Math.min(buf.length-offset,2);i<j;++i){buf[offset+i]=(value&0xff<<8*(littleEndian?i:1-i))>>>(littleEndian?i:1-i)*8;}}Buffer$2.prototype.writeUInt16LE=function writeUInt16LE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)pdfkit_browser_checkInt(this,value,offset,2,0xffff,0);if(Buffer$2.TYPED_ARRAY_SUPPORT){this[offset]=value&0xff;this[offset+1]=value>>>8;}else{pdfkit_browser_objectWriteUInt16(this,value,offset,true);}return offset+2;};Buffer$2.prototype.writeUInt16BE=function writeUInt16BE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)pdfkit_browser_checkInt(this,value,offset,2,0xffff,0);if(Buffer$2.TYPED_ARRAY_SUPPORT){this[offset]=value>>>8;this[offset+1]=value&0xff;}else{pdfkit_browser_objectWriteUInt16(this,value,offset,false);}return offset+2;};function pdfkit_browser_objectWriteUInt32(buf,value,offset,littleEndian){if(value<0)value=0xffffffff+value+1;for(var i=0,j=Math.min(buf.length-offset,4);i<j;++i){buf[offset+i]=value>>>(littleEndian?i:3-i)*8&0xff;}}Buffer$2.prototype.writeUInt32LE=function writeUInt32LE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)pdfkit_browser_checkInt(this,value,offset,4,0xffffffff,0);if(Buffer$2.TYPED_ARRAY_SUPPORT){this[offset+3]=value>>>24;this[offset+2]=value>>>16;this[offset+1]=value>>>8;this[offset]=value&0xff;}else{pdfkit_browser_objectWriteUInt32(this,value,offset,true);}return offset+4;};Buffer$2.prototype.writeUInt32BE=function writeUInt32BE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)pdfkit_browser_checkInt(this,value,offset,4,0xffffffff,0);if(Buffer$2.TYPED_ARRAY_SUPPORT){this[offset]=value>>>24;this[offset+1]=value>>>16;this[offset+2]=value>>>8;this[offset+3]=value&0xff;}else{pdfkit_browser_objectWriteUInt32(this,value,offset,false);}return offset+4;};Buffer$2.prototype.writeIntLE=function writeIntLE(value,offset,byteLength,noAssert){value=+value;offset=offset|0;if(!noAssert){var limit=Math.pow(2,8*byteLength-1);pdfkit_browser_checkInt(this,value,offset,byteLength,limit-1,-limit);}var i=0;var mul=1;var sub=0;this[offset]=value&0xFF;while(++i<byteLength&&(mul*=0x100)){if(value<0&&sub===0&&this[offset+i-1]!==0){sub=1;}this[offset+i]=(value/mul>>0)-sub&0xFF;}return offset+byteLength;};Buffer$2.prototype.writeIntBE=function writeIntBE(value,offset,byteLength,noAssert){value=+value;offset=offset|0;if(!noAssert){var limit=Math.pow(2,8*byteLength-1);pdfkit_browser_checkInt(this,value,offset,byteLength,limit-1,-limit);}var i=byteLength-1;var mul=1;var sub=0;this[offset+i]=value&0xFF;while(--i>=0&&(mul*=0x100)){if(value<0&&sub===0&&this[offset+i+1]!==0){sub=1;}this[offset+i]=(value/mul>>0)-sub&0xFF;}return offset+byteLength;};Buffer$2.prototype.writeInt8=function writeInt8(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)pdfkit_browser_checkInt(this,value,offset,1,0x7f,-0x80);if(!Buffer$2.TYPED_ARRAY_SUPPORT)value=Math.floor(value);if(value<0)value=0xff+value+1;this[offset]=value&0xff;return offset+1;};Buffer$2.prototype.writeInt16LE=function writeInt16LE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)pdfkit_browser_checkInt(this,value,offset,2,0x7fff,-0x8000);if(Buffer$2.TYPED_ARRAY_SUPPORT){this[offset]=value&0xff;this[offset+1]=value>>>8;}else{pdfkit_browser_objectWriteUInt16(this,value,offset,true);}return offset+2;};Buffer$2.prototype.writeInt16BE=function writeInt16BE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)pdfkit_browser_checkInt(this,value,offset,2,0x7fff,-0x8000);if(Buffer$2.TYPED_ARRAY_SUPPORT){this[offset]=value>>>8;this[offset+1]=value&0xff;}else{pdfkit_browser_objectWriteUInt16(this,value,offset,false);}return offset+2;};Buffer$2.prototype.writeInt32LE=function writeInt32LE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)pdfkit_browser_checkInt(this,value,offset,4,0x7fffffff,-0x80000000);if(Buffer$2.TYPED_ARRAY_SUPPORT){this[offset]=value&0xff;this[offset+1]=value>>>8;this[offset+2]=value>>>16;this[offset+3]=value>>>24;}else{pdfkit_browser_objectWriteUInt32(this,value,offset,true);}return offset+4;};Buffer$2.prototype.writeInt32BE=function writeInt32BE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)pdfkit_browser_checkInt(this,value,offset,4,0x7fffffff,-0x80000000);if(value<0)value=0xffffffff+value+1;if(Buffer$2.TYPED_ARRAY_SUPPORT){this[offset]=value>>>24;this[offset+1]=value>>>16;this[offset+2]=value>>>8;this[offset+3]=value&0xff;}else{pdfkit_browser_objectWriteUInt32(this,value,offset,false);}return offset+4;};function pdfkit_browser_checkIEEE754(buf,value,offset,ext,max,min){if(offset+ext>buf.length)throw new RangeError('Index out of range');if(offset<0)throw new RangeError('Index out of range');}function pdfkit_browser_writeFloat(buf,value,offset,littleEndian,noAssert){if(!noAssert){pdfkit_browser_checkIEEE754(buf,value,offset,4);}pdfkit_browser_write(buf,value,offset,littleEndian,23,4);return offset+4;}Buffer$2.prototype.writeFloatLE=function writeFloatLE(value,offset,noAssert){return pdfkit_browser_writeFloat(this,value,offset,true,noAssert);};Buffer$2.prototype.writeFloatBE=function writeFloatBE(value,offset,noAssert){return pdfkit_browser_writeFloat(this,value,offset,false,noAssert);};function pdfkit_browser_writeDouble(buf,value,offset,littleEndian,noAssert){if(!noAssert){pdfkit_browser_checkIEEE754(buf,value,offset,8);}pdfkit_browser_write(buf,value,offset,littleEndian,52,8);return offset+8;}Buffer$2.prototype.writeDoubleLE=function writeDoubleLE(value,offset,noAssert){return pdfkit_browser_writeDouble(this,value,offset,true,noAssert);};Buffer$2.prototype.writeDoubleBE=function writeDoubleBE(value,offset,noAssert){return pdfkit_browser_writeDouble(this,value,offset,false,noAssert);};// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer$2.prototype.copy=function copy(target,targetStart,start,end){if(!start)start=0;if(!end&&end!==0)end=this.length;if(targetStart>=target.length)targetStart=target.length;if(!targetStart)targetStart=0;if(end>0&&end<start)end=start;// Copy 0 bytes; we're done
if(end===start)return 0;if(target.length===0||this.length===0)return 0;// Fatal error conditions
if(targetStart<0){throw new RangeError('targetStart out of bounds');}if(start<0||start>=this.length)throw new RangeError('sourceStart out of bounds');if(end<0)throw new RangeError('sourceEnd out of bounds');// Are we oob?
if(end>this.length)end=this.length;if(target.length-targetStart<end-start){end=target.length-targetStart+start;}var len=end-start;var i;if(this===target&&start<targetStart&&targetStart<end){// descending copy from end
for(i=len-1;i>=0;--i){target[i+targetStart]=this[i+start];}}else if(len<1000||!Buffer$2.TYPED_ARRAY_SUPPORT){// ascending copy from start
for(i=0;i<len;++i){target[i+targetStart]=this[i+start];}}else{Uint8Array.prototype.set.call(target,this.subarray(start,start+len),targetStart);}return len;};// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer$2.prototype.fill=function fill(val,start,end,encoding){// Handle string cases:
if(typeof val==='string'){if(typeof start==='string'){encoding=start;start=0;end=this.length;}else if(typeof end==='string'){encoding=end;end=this.length;}if(val.length===1){var code=val.charCodeAt(0);if(code<256){val=code;}}if(encoding!==undefined&&typeof encoding!=='string'){throw new TypeError('encoding must be a string');}if(typeof encoding==='string'&&!Buffer$2.isEncoding(encoding)){throw new TypeError('Unknown encoding: '+encoding);}}else if(typeof val==='number'){val=val&255;}// Invalid ranges are not set to a default, so can range check early.
if(start<0||this.length<start||this.length<end){throw new RangeError('Out of range index');}if(end<=start){return this;}start=start>>>0;end=end===undefined?this.length:end>>>0;if(!val)val=0;var i;if(typeof val==='number'){for(i=start;i<end;++i){this[i]=val;}}else{var bytes=pdfkit_browser_internalIsBuffer(val)?val:pdfkit_browser_utf8ToBytes(new Buffer$2(val,encoding).toString());var len=bytes.length;for(i=0;i<end-start;++i){this[i+start]=bytes[i%len];}}return this;};// HELPER FUNCTIONS
// ================
var pdfkit_browser_INVALID_BASE64_RE=/[^+\/0-9A-Za-z-_]/g;function pdfkit_browser_base64clean(str){// Node strips out invalid characters like \n and \t from the string, base64-js does not
str=pdfkit_browser_stringtrim(str).replace(pdfkit_browser_INVALID_BASE64_RE,'');// Node converts strings with length < 2 to ''
if(str.length<2)return'';// Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
while(str.length%4!==0){str=str+'=';}return str;}function pdfkit_browser_stringtrim(str){if(str.trim)return str.trim();return str.replace(/^\s+|\s+$/g,'');}function toHex$1(n){if(n<16)return'0'+n.toString(16);return n.toString(16);}function pdfkit_browser_utf8ToBytes(string,units){units=units||Infinity;var codePoint;var length=string.length;var leadSurrogate=null;var bytes=[];for(var i=0;i<length;++i){codePoint=string.charCodeAt(i);// is surrogate component
if(codePoint>0xD7FF&&codePoint<0xE000){// last char was a lead
if(!leadSurrogate){// no lead yet
if(codePoint>0xDBFF){// unexpected trail
if((units-=3)>-1)bytes.push(0xEF,0xBF,0xBD);continue;}else if(i+1===length){// unpaired lead
if((units-=3)>-1)bytes.push(0xEF,0xBF,0xBD);continue;}// valid lead
leadSurrogate=codePoint;continue;}// 2 leads in a row
if(codePoint<0xDC00){if((units-=3)>-1)bytes.push(0xEF,0xBF,0xBD);leadSurrogate=codePoint;continue;}// valid surrogate pair
codePoint=(leadSurrogate-0xD800<<10|codePoint-0xDC00)+0x10000;}else if(leadSurrogate){// valid bmp char, but last char was a lead
if((units-=3)>-1)bytes.push(0xEF,0xBF,0xBD);}leadSurrogate=null;// encode utf8
if(codePoint<0x80){if((units-=1)<0)break;bytes.push(codePoint);}else if(codePoint<0x800){if((units-=2)<0)break;bytes.push(codePoint>>0x6|0xC0,codePoint&0x3F|0x80);}else if(codePoint<0x10000){if((units-=3)<0)break;bytes.push(codePoint>>0xC|0xE0,codePoint>>0x6&0x3F|0x80,codePoint&0x3F|0x80);}else if(codePoint<0x110000){if((units-=4)<0)break;bytes.push(codePoint>>0x12|0xF0,codePoint>>0xC&0x3F|0x80,codePoint>>0x6&0x3F|0x80,codePoint&0x3F|0x80);}else{throw new Error('Invalid code point');}}return bytes;}function pdfkit_browser_asciiToBytes(str){var byteArray=[];for(var i=0;i<str.length;++i){// Node's code seems to be doing this and not & 0x7F..
byteArray.push(str.charCodeAt(i)&0xFF);}return byteArray;}function pdfkit_browser_utf16leToBytes(str,units){var c,hi,lo;var byteArray=[];for(var i=0;i<str.length;++i){if((units-=2)<0)break;c=str.charCodeAt(i);hi=c>>8;lo=c%256;byteArray.push(lo);byteArray.push(hi);}return byteArray;}function pdfkit_browser_base64ToBytes(str){return pdfkit_browser_toByteArray(pdfkit_browser_base64clean(str));}function pdfkit_browser_blitBuffer(src,dst,offset,length){for(var i=0;i<length;++i){if(i+offset>=dst.length||i>=src.length)break;dst[i+offset]=src[i];}return i;}function pdfkit_browser_isnan(val){return val!==val;// eslint-disable-line no-self-compare
}// the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
function pdfkit_browser_isBuffer$1(obj){return obj!=null&&(!!obj._isBuffer||pdfkit_browser_isFastBuffer(obj)||pdfkit_browser_isSlowBuffer(obj));}function pdfkit_browser_isFastBuffer(obj){return!!obj.constructor&&typeof obj.constructor.isBuffer==='function'&&obj.constructor.isBuffer(obj);}// For Node v0.10 support. Remove this eventually.
function pdfkit_browser_isSlowBuffer(obj){return typeof obj.readFloatLE==='function'&&typeof obj.slice==='function'&&pdfkit_browser_isFastBuffer(obj.slice(0,0));}var pdfkit_browser_polyfillNode_buffer=/*#__PURE__*/Object.freeze({__proto__:null,Buffer:Buffer$2,INSPECT_MAX_BYTES:pdfkit_browser_INSPECT_MAX_BYTES,SlowBuffer:pdfkit_browser_SlowBuffer,isBuffer:pdfkit_browser_isBuffer$1,kMaxLength:pdfkit_browser_kMaxLength});var commonjsGlobal=typeof globalThis!=='undefined'?globalThis:typeof window!=='undefined'?window:typeof global!=='undefined'?global:typeof self!=='undefined'?self:{};function pdfkit_browser_getDefaultExportFromCjs(x){return x&&x.__esModule&&Object.prototype.hasOwnProperty.call(x,'default')?x['default']:x;}function pdfkit_browser_getAugmentedNamespace(n){if(n.__esModule)return n;var f=n.default;if(typeof f=="function"){var a=function a(){if(this instanceof a){return Reflect.construct(f,arguments,this.constructor);}return f.apply(this,arguments);};a.prototype=f.prototype;}else a={};Object.defineProperty(a,'__esModule',{value:true});Object.keys(n).forEach(function(k){var d=Object.getOwnPropertyDescriptor(n,k);Object.defineProperty(a,k,d.get?d:{enumerable:true,get:function(){return n[k];}});});return a;}var readableBrowser={exports:{}};var _registry={};// shim for using process in browser
// based off https://github.com/defunctzombie/node-process/blob/master/browser.js
function pdfkit_browser_defaultSetTimout(){throw new Error('setTimeout has not been defined');}function pdfkit_browser_defaultClearTimeout(){throw new Error('clearTimeout has not been defined');}var pdfkit_browser_cachedSetTimeout=pdfkit_browser_defaultSetTimout;var pdfkit_browser_cachedClearTimeout=pdfkit_browser_defaultClearTimeout;if(typeof pdfkit_browser_global$1.setTimeout==='function'){pdfkit_browser_cachedSetTimeout=setTimeout;}if(typeof pdfkit_browser_global$1.clearTimeout==='function'){pdfkit_browser_cachedClearTimeout=clearTimeout;}function pdfkit_browser_runTimeout(fun){if(pdfkit_browser_cachedSetTimeout===setTimeout){//normal enviroments in sane situations
return setTimeout(fun,0);}// if setTimeout wasn't available but was latter defined
if((pdfkit_browser_cachedSetTimeout===pdfkit_browser_defaultSetTimout||!pdfkit_browser_cachedSetTimeout)&&setTimeout){pdfkit_browser_cachedSetTimeout=setTimeout;return setTimeout(fun,0);}try{// when when somebody has screwed with setTimeout but no I.E. maddness
return pdfkit_browser_cachedSetTimeout(fun,0);}catch(e){try{// When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
return pdfkit_browser_cachedSetTimeout.call(null,fun,0);}catch(e){// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
return pdfkit_browser_cachedSetTimeout.call(this,fun,0);}}}function pdfkit_browser_runClearTimeout(marker){if(pdfkit_browser_cachedClearTimeout===clearTimeout){//normal enviroments in sane situations
return clearTimeout(marker);}// if clearTimeout wasn't available but was latter defined
if((pdfkit_browser_cachedClearTimeout===pdfkit_browser_defaultClearTimeout||!pdfkit_browser_cachedClearTimeout)&&clearTimeout){pdfkit_browser_cachedClearTimeout=clearTimeout;return clearTimeout(marker);}try{// when when somebody has screwed with setTimeout but no I.E. maddness
return pdfkit_browser_cachedClearTimeout(marker);}catch(e){try{// When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
return pdfkit_browser_cachedClearTimeout.call(null,marker);}catch(e){// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
// Some versions of I.E. have different rules for clearTimeout vs setTimeout
return pdfkit_browser_cachedClearTimeout.call(this,marker);}}}var pdfkit_browser_queue=[];var pdfkit_browser_draining=false;var pdfkit_browser_currentQueue;var pdfkit_browser_queueIndex=-1;function pdfkit_browser_cleanUpNextTick(){if(!pdfkit_browser_draining||!pdfkit_browser_currentQueue){return;}pdfkit_browser_draining=false;if(pdfkit_browser_currentQueue.length){pdfkit_browser_queue=pdfkit_browser_currentQueue.concat(pdfkit_browser_queue);}else{pdfkit_browser_queueIndex=-1;}if(pdfkit_browser_queue.length){pdfkit_browser_drainQueue();}}function pdfkit_browser_drainQueue(){if(pdfkit_browser_draining){return;}var timeout=pdfkit_browser_runTimeout(pdfkit_browser_cleanUpNextTick);pdfkit_browser_draining=true;var len=pdfkit_browser_queue.length;while(len){pdfkit_browser_currentQueue=pdfkit_browser_queue;pdfkit_browser_queue=[];while(++pdfkit_browser_queueIndex<len){if(pdfkit_browser_currentQueue){pdfkit_browser_currentQueue[pdfkit_browser_queueIndex].run();}}pdfkit_browser_queueIndex=-1;len=pdfkit_browser_queue.length;}pdfkit_browser_currentQueue=null;pdfkit_browser_draining=false;pdfkit_browser_runClearTimeout(timeout);}function pdfkit_browser_nextTick(fun){var args=new Array(arguments.length-1);if(arguments.length>1){for(var i=1;i<arguments.length;i++){args[i-1]=arguments[i];}}pdfkit_browser_queue.push(new pdfkit_browser_Item(fun,args));if(pdfkit_browser_queue.length===1&&!pdfkit_browser_draining){pdfkit_browser_runTimeout(pdfkit_browser_drainQueue);}}// v8 likes predictible objects
function pdfkit_browser_Item(fun,array){this.fun=fun;this.array=array;}pdfkit_browser_Item.prototype.run=function(){this.fun.apply(null,this.array);};var pdfkit_browser_title='browser';var pdfkit_browser_platform='browser';var pdfkit_browser_browser$1=true;var pdfkit_browser_env={};var pdfkit_browser_argv=[];var pdfkit_browser_version='';// empty string to avoid regexp issues
var pdfkit_browser_versions={};var pdfkit_browser_release={};var config$1={};function noop$2(){}var pdfkit_browser_on=noop$2;var pdfkit_browser_addListener=noop$2;var once$2=noop$2;var pdfkit_browser_off=noop$2;var pdfkit_browser_removeListener=noop$2;var pdfkit_browser_removeAllListeners=noop$2;var pdfkit_browser_emit=noop$2;function pdfkit_browser_binding$1(name){throw new Error('process.binding is not supported');}function pdfkit_browser_cwd(){return'/';}function pdfkit_browser_chdir(dir){throw new Error('process.chdir is not supported');}function pdfkit_browser_umask(){return 0;}// from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
var pdfkit_browser_performance=pdfkit_browser_global$1.performance||{};var pdfkit_browser_performanceNow=pdfkit_browser_performance.now||pdfkit_browser_performance.mozNow||pdfkit_browser_performance.msNow||pdfkit_browser_performance.oNow||pdfkit_browser_performance.webkitNow||function(){return new Date().getTime();};// generate timestamp or delta
// see http://nodejs.org/api/process.html#process_process_hrtime
function pdfkit_browser_hrtime(previousTimestamp){var clocktime=pdfkit_browser_performanceNow.call(pdfkit_browser_performance)*1e-3;var seconds=Math.floor(clocktime);var nanoseconds=Math.floor(clocktime%1*1e9);if(previousTimestamp){seconds=seconds-previousTimestamp[0];nanoseconds=nanoseconds-previousTimestamp[1];if(nanoseconds<0){seconds--;nanoseconds+=1e9;}}return[seconds,nanoseconds];}var pdfkit_browser_startTime=new Date();function pdfkit_browser_uptime(){var currentTime=new Date();var dif=currentTime-pdfkit_browser_startTime;return dif/1000;}var browser$1$1={nextTick:pdfkit_browser_nextTick,title:pdfkit_browser_title,browser:pdfkit_browser_browser$1,env:pdfkit_browser_env,argv:pdfkit_browser_argv,version:pdfkit_browser_version,versions:pdfkit_browser_versions,on:pdfkit_browser_on,addListener:pdfkit_browser_addListener,once:once$2,off:pdfkit_browser_off,removeListener:pdfkit_browser_removeListener,removeAllListeners:pdfkit_browser_removeAllListeners,emit:pdfkit_browser_emit,binding:pdfkit_browser_binding$1,cwd:pdfkit_browser_cwd,chdir:pdfkit_browser_chdir,umask:pdfkit_browser_umask,hrtime:pdfkit_browser_hrtime,platform:pdfkit_browser_platform,release:pdfkit_browser_release,config:config$1,uptime:pdfkit_browser_uptime};var pdfkit_browser_domain;// This constructor is used to store event handlers. Instantiating this is
// faster than explicitly calling `Object.create(null)` to get a "clean" empty
// object (tested with v8 v4.9).
function pdfkit_browser_EventHandlers(){}pdfkit_browser_EventHandlers.prototype=Object.create(null);function pdfkit_browser_EventEmitter(){pdfkit_browser_EventEmitter.init.call(this);}// nodejs oddity
// require('events') === require('events').EventEmitter
pdfkit_browser_EventEmitter.EventEmitter=pdfkit_browser_EventEmitter;pdfkit_browser_EventEmitter.usingDomains=false;pdfkit_browser_EventEmitter.prototype.domain=undefined;pdfkit_browser_EventEmitter.prototype._events=undefined;pdfkit_browser_EventEmitter.prototype._maxListeners=undefined;// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
pdfkit_browser_EventEmitter.defaultMaxListeners=10;pdfkit_browser_EventEmitter.init=function(){this.domain=null;if(pdfkit_browser_EventEmitter.usingDomains){// if there is an active domain, then attach to it.
if(pdfkit_browser_domain.active);}if(!this._events||this._events===Object.getPrototypeOf(this)._events){this._events=new pdfkit_browser_EventHandlers();this._eventsCount=0;}this._maxListeners=this._maxListeners||undefined;};// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
pdfkit_browser_EventEmitter.prototype.setMaxListeners=function setMaxListeners(n){if(typeof n!=='number'||n<0||isNaN(n))throw new TypeError('"n" argument must be a positive number');this._maxListeners=n;return this;};function pdfkit_browser_$getMaxListeners(that){if(that._maxListeners===undefined)return pdfkit_browser_EventEmitter.defaultMaxListeners;return that._maxListeners;}pdfkit_browser_EventEmitter.prototype.getMaxListeners=function getMaxListeners(){return pdfkit_browser_$getMaxListeners(this);};// These standalone emit* functions are used to optimize calling of event
// handlers for fast cases because emit() itself often has a variable number of
// arguments and can be deoptimized because of that. These functions always have
// the same number of arguments and thus do not get deoptimized, so the code
// inside them can execute faster.
function pdfkit_browser_emitNone(handler,isFn,self){if(isFn)handler.call(self);else{var len=handler.length;var listeners=pdfkit_browser_arrayClone(handler,len);for(var i=0;i<len;++i)listeners[i].call(self);}}function pdfkit_browser_emitOne(handler,isFn,self,arg1){if(isFn)handler.call(self,arg1);else{var len=handler.length;var listeners=pdfkit_browser_arrayClone(handler,len);for(var i=0;i<len;++i)listeners[i].call(self,arg1);}}function pdfkit_browser_emitTwo(handler,isFn,self,arg1,arg2){if(isFn)handler.call(self,arg1,arg2);else{var len=handler.length;var listeners=pdfkit_browser_arrayClone(handler,len);for(var i=0;i<len;++i)listeners[i].call(self,arg1,arg2);}}function pdfkit_browser_emitThree(handler,isFn,self,arg1,arg2,arg3){if(isFn)handler.call(self,arg1,arg2,arg3);else{var len=handler.length;var listeners=pdfkit_browser_arrayClone(handler,len);for(var i=0;i<len;++i)listeners[i].call(self,arg1,arg2,arg3);}}function pdfkit_browser_emitMany(handler,isFn,self,args){if(isFn)handler.apply(self,args);else{var len=handler.length;var listeners=pdfkit_browser_arrayClone(handler,len);for(var i=0;i<len;++i)listeners[i].apply(self,args);}}pdfkit_browser_EventEmitter.prototype.emit=function emit(type){var er,handler,len,args,i,events,domain;var doError=type==='error';events=this._events;if(events)doError=doError&&events.error==null;else if(!doError)return false;domain=this.domain;// If there is no 'error' event listener then throw.
if(doError){er=arguments[1];if(domain){if(!er)er=new Error('Uncaught, unspecified "error" event');er.domainEmitter=this;er.domain=domain;er.domainThrown=false;domain.emit('error',er);}else if(er instanceof Error){throw er;// Unhandled 'error' event
}else{// At least give some kind of context to the user
var err=new Error('Uncaught, unspecified "error" event. ('+er+')');err.context=er;throw err;}return false;}handler=events[type];if(!handler)return false;var isFn=typeof handler==='function';len=arguments.length;switch(len){// fast cases
case 1:pdfkit_browser_emitNone(handler,isFn,this);break;case 2:pdfkit_browser_emitOne(handler,isFn,this,arguments[1]);break;case 3:pdfkit_browser_emitTwo(handler,isFn,this,arguments[1],arguments[2]);break;case 4:pdfkit_browser_emitThree(handler,isFn,this,arguments[1],arguments[2],arguments[3]);break;// slower
default:args=new Array(len-1);for(i=1;i<len;i++)args[i-1]=arguments[i];pdfkit_browser_emitMany(handler,isFn,this,args);}return true;};function lib_pdfkit_browser_addListener(target,type,listener,prepend){var m;var events;var existing;if(typeof listener!=='function')throw new TypeError('"listener" argument must be a function');events=target._events;if(!events){events=target._events=new pdfkit_browser_EventHandlers();target._eventsCount=0;}else{// To avoid recursion in the case that type === "newListener"! Before
// adding it to the listeners, first emit "newListener".
if(events.newListener){target.emit('newListener',type,listener.listener?listener.listener:listener);// Re-assign `events` because a newListener handler could have caused the
// this._events to be assigned to a new object
events=target._events;}existing=events[type];}if(!existing){// Optimize the case of one listener. Don't need the extra array object.
existing=events[type]=listener;++target._eventsCount;}else{if(typeof existing==='function'){// Adding the second element, need to change to array.
existing=events[type]=prepend?[listener,existing]:[existing,listener];}else{// If we've already got an array, just append.
if(prepend){existing.unshift(listener);}else{existing.push(listener);}}// Check for listener leak
if(!existing.warned){m=pdfkit_browser_$getMaxListeners(target);if(m&&m>0&&existing.length>m){existing.warned=true;var w=new Error('Possible EventEmitter memory leak detected. '+existing.length+' '+type+' listeners added. '+'Use emitter.setMaxListeners() to increase limit');w.name='MaxListenersExceededWarning';w.emitter=target;w.type=type;w.count=existing.length;pdfkit_browser_emitWarning(w);}}}return target;}function pdfkit_browser_emitWarning(e){typeof console.warn==='function'?console.warn(e):console.log(e);}pdfkit_browser_EventEmitter.prototype.addListener=function addListener(type,listener){return lib_pdfkit_browser_addListener(this,type,listener,false);};pdfkit_browser_EventEmitter.prototype.on=pdfkit_browser_EventEmitter.prototype.addListener;pdfkit_browser_EventEmitter.prototype.prependListener=function prependListener(type,listener){return lib_pdfkit_browser_addListener(this,type,listener,true);};function pdfkit_browser_onceWrap(target,type,listener){var fired=false;function g(){target.removeListener(type,g);if(!fired){fired=true;listener.apply(target,arguments);}}g.listener=listener;return g;}pdfkit_browser_EventEmitter.prototype.once=function once(type,listener){if(typeof listener!=='function')throw new TypeError('"listener" argument must be a function');this.on(type,pdfkit_browser_onceWrap(this,type,listener));return this;};pdfkit_browser_EventEmitter.prototype.prependOnceListener=function prependOnceListener(type,listener){if(typeof listener!=='function')throw new TypeError('"listener" argument must be a function');this.prependListener(type,pdfkit_browser_onceWrap(this,type,listener));return this;};// emits a 'removeListener' event iff the listener was removed
pdfkit_browser_EventEmitter.prototype.removeListener=function removeListener(type,listener){var list,events,position,i,originalListener;if(typeof listener!=='function')throw new TypeError('"listener" argument must be a function');events=this._events;if(!events)return this;list=events[type];if(!list)return this;if(list===listener||list.listener&&list.listener===listener){if(--this._eventsCount===0)this._events=new pdfkit_browser_EventHandlers();else{delete events[type];if(events.removeListener)this.emit('removeListener',type,list.listener||listener);}}else if(typeof list!=='function'){position=-1;for(i=list.length;i-->0;){if(list[i]===listener||list[i].listener&&list[i].listener===listener){originalListener=list[i].listener;position=i;break;}}if(position<0)return this;if(list.length===1){list[0]=undefined;if(--this._eventsCount===0){this._events=new pdfkit_browser_EventHandlers();return this;}else{delete events[type];}}else{pdfkit_browser_spliceOne(list,position);}if(events.removeListener)this.emit('removeListener',type,originalListener||listener);}return this;};// Alias for removeListener added in NodeJS 10.0
// https://nodejs.org/api/events.html#events_emitter_off_eventname_listener
pdfkit_browser_EventEmitter.prototype.off=function(type,listener){return this.removeListener(type,listener);};pdfkit_browser_EventEmitter.prototype.removeAllListeners=function removeAllListeners(type){var listeners,events;events=this._events;if(!events)return this;// not listening for removeListener, no need to emit
if(!events.removeListener){if(arguments.length===0){this._events=new pdfkit_browser_EventHandlers();this._eventsCount=0;}else if(events[type]){if(--this._eventsCount===0)this._events=new pdfkit_browser_EventHandlers();else delete events[type];}return this;}// emit removeListener for all listeners on all events
if(arguments.length===0){var keys=Object.keys(events);for(var i=0,key;i<keys.length;++i){key=keys[i];if(key==='removeListener')continue;this.removeAllListeners(key);}this.removeAllListeners('removeListener');this._events=new pdfkit_browser_EventHandlers();this._eventsCount=0;return this;}listeners=events[type];if(typeof listeners==='function'){this.removeListener(type,listeners);}else if(listeners){// LIFO order
do{this.removeListener(type,listeners[listeners.length-1]);}while(listeners[0]);}return this;};pdfkit_browser_EventEmitter.prototype.listeners=function listeners(type){var evlistener;var ret;var events=this._events;if(!events)ret=[];else{evlistener=events[type];if(!evlistener)ret=[];else if(typeof evlistener==='function')ret=[evlistener.listener||evlistener];else ret=pdfkit_browser_unwrapListeners(evlistener);}return ret;};pdfkit_browser_EventEmitter.listenerCount=function(emitter,type){if(typeof emitter.listenerCount==='function'){return emitter.listenerCount(type);}else{return pdfkit_browser_listenerCount.call(emitter,type);}};pdfkit_browser_EventEmitter.prototype.listenerCount=pdfkit_browser_listenerCount;function pdfkit_browser_listenerCount(type){var events=this._events;if(events){var evlistener=events[type];if(typeof evlistener==='function'){return 1;}else if(evlistener){return evlistener.length;}}return 0;}pdfkit_browser_EventEmitter.prototype.eventNames=function eventNames(){return this._eventsCount>0?Reflect.ownKeys(this._events):[];};// About 1.5x faster than the two-arg version of Array#splice().
function pdfkit_browser_spliceOne(list,index){for(var i=index,k=i+1,n=list.length;k<n;i+=1,k+=1)list[i]=list[k];list.pop();}function pdfkit_browser_arrayClone(arr,i){var copy=new Array(i);while(i--)copy[i]=arr[i];return copy;}function pdfkit_browser_unwrapListeners(arr){var ret=new Array(arr.length);for(var i=0;i<ret.length;++i){ret[i]=arr[i].listener||arr[i];}return ret;}var _polyfillNode_events=/*#__PURE__*/Object.freeze({__proto__:null,EventEmitter:pdfkit_browser_EventEmitter,default:pdfkit_browser_EventEmitter});var require$$1$1=/*@__PURE__*/pdfkit_browser_getAugmentedNamespace(_polyfillNode_events);var streamBrowser=require$$1$1.EventEmitter;var pdfkit_browser_require$$0=/*@__PURE__*/pdfkit_browser_getAugmentedNamespace(pdfkit_browser_polyfillNode_buffer);var inherits$2;if(typeof Object.create==='function'){inherits$2=function inherits(ctor,superCtor){// implementation from standard node.js 'util' module
ctor.super_=superCtor;ctor.prototype=Object.create(superCtor.prototype,{constructor:{value:ctor,enumerable:false,writable:true,configurable:true}});};}else{inherits$2=function inherits(ctor,superCtor){ctor.super_=superCtor;var TempCtor=function(){};TempCtor.prototype=superCtor.prototype;ctor.prototype=new TempCtor();ctor.prototype.constructor=ctor;};}var inherits$3=inherits$2;var pdfkit_browser_getOwnPropertyDescriptors=Object.getOwnPropertyDescriptors||function getOwnPropertyDescriptors(obj){var keys=Object.keys(obj);var descriptors={};for(var i=0;i<keys.length;i++){descriptors[keys[i]]=Object.getOwnPropertyDescriptor(obj,keys[i]);}return descriptors;};var pdfkit_browser_formatRegExp=/%[sdj%]/g;function pdfkit_browser_format(f){if(!pdfkit_browser_isString(f)){var objects=[];for(var i=0;i<arguments.length;i++){objects.push(pdfkit_browser_inspect$1(arguments[i]));}return objects.join(' ');}var i=1;var args=arguments;var len=args.length;var str=String(f).replace(pdfkit_browser_formatRegExp,function(x){if(x==='%%')return'%';if(i>=len)return x;switch(x){case'%s':return String(args[i++]);case'%d':return Number(args[i++]);case'%j':try{return JSON.stringify(args[i++]);}catch(_){return'[Circular]';}default:return x;}});for(var x=args[i];i<len;x=args[++i]){if(pdfkit_browser_isNull(x)||!pdfkit_browser_isObject(x)){str+=' '+x;}else{str+=' '+pdfkit_browser_inspect$1(x);}}return str;}// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
function deprecate$1(fn,msg){// Allow for deprecating things in the process of starting up.
if(pdfkit_browser_isUndefined(pdfkit_browser_global$1.process)){return function(){return deprecate$1(fn,msg).apply(this,arguments);};}if(browser$1$1.noDeprecation===true){return fn;}var warned=false;function deprecated(){if(!warned){if(browser$1$1.throwDeprecation){throw new Error(msg);}else if(browser$1$1.traceDeprecation){console.trace(msg);}else{console.error(msg);}warned=true;}return fn.apply(this,arguments);}return deprecated;}var pdfkit_browser_debugs={};var pdfkit_browser_debugEnviron;function pdfkit_browser_debuglog(set){if(pdfkit_browser_isUndefined(pdfkit_browser_debugEnviron))pdfkit_browser_debugEnviron=browser$1$1.env.NODE_DEBUG||'';set=set.toUpperCase();if(!pdfkit_browser_debugs[set]){if(new RegExp('\\b'+set+'\\b','i').test(pdfkit_browser_debugEnviron)){var pid=0;pdfkit_browser_debugs[set]=function(){var msg=pdfkit_browser_format.apply(null,arguments);console.error('%s %d: %s',set,pid,msg);};}else{pdfkit_browser_debugs[set]=function(){};}}return pdfkit_browser_debugs[set];}/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 *//* legacy: obj, showHidden, depth, colors*/function pdfkit_browser_inspect$1(obj,opts){// default options
var ctx={seen:[],stylize:pdfkit_browser_stylizeNoColor};// legacy...
if(arguments.length>=3)ctx.depth=arguments[2];if(arguments.length>=4)ctx.colors=arguments[3];if(pdfkit_browser_isBoolean(opts)){// legacy...
ctx.showHidden=opts;}else if(opts){// got an "options" object
pdfkit_browser_extend(ctx,opts);}// set default options
if(pdfkit_browser_isUndefined(ctx.showHidden))ctx.showHidden=false;if(pdfkit_browser_isUndefined(ctx.depth))ctx.depth=2;if(pdfkit_browser_isUndefined(ctx.colors))ctx.colors=false;if(pdfkit_browser_isUndefined(ctx.customInspect))ctx.customInspect=true;if(ctx.colors)ctx.stylize=pdfkit_browser_stylizeWithColor;return pdfkit_browser_formatValue(ctx,obj,ctx.depth);}// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
pdfkit_browser_inspect$1.colors={'bold':[1,22],'italic':[3,23],'underline':[4,24],'inverse':[7,27],'white':[37,39],'grey':[90,39],'black':[30,39],'blue':[34,39],'cyan':[36,39],'green':[32,39],'magenta':[35,39],'red':[31,39],'yellow':[33,39]};// Don't use 'blue' not visible on cmd.exe
pdfkit_browser_inspect$1.styles={'special':'cyan','number':'yellow','boolean':'yellow','undefined':'grey','null':'bold','string':'green','date':'magenta',// "name": intentionally not styling
'regexp':'red'};function pdfkit_browser_stylizeWithColor(str,styleType){var style=pdfkit_browser_inspect$1.styles[styleType];if(style){return'\u001b['+pdfkit_browser_inspect$1.colors[style][0]+'m'+str+'\u001b['+pdfkit_browser_inspect$1.colors[style][1]+'m';}else{return str;}}function pdfkit_browser_stylizeNoColor(str,styleType){return str;}function pdfkit_browser_arrayToHash(array){var hash={};array.forEach(function(val,idx){hash[val]=true;});return hash;}function pdfkit_browser_formatValue(ctx,value,recurseTimes){// Provide a hook for user-specified inspect functions.
// Check that value is an object with an inspect function on it
if(ctx.customInspect&&value&&pdfkit_browser_isFunction(value.inspect)&&// Filter out the util module, it's inspect function is special
value.inspect!==pdfkit_browser_inspect$1&&// Also filter out any prototype objects using the circular check.
!(value.constructor&&value.constructor.prototype===value)){var ret=value.inspect(recurseTimes,ctx);if(!pdfkit_browser_isString(ret)){ret=pdfkit_browser_formatValue(ctx,ret,recurseTimes);}return ret;}// Primitive types cannot have properties
var primitive=pdfkit_browser_formatPrimitive(ctx,value);if(primitive){return primitive;}// Look up the keys of the object.
var keys=Object.keys(value);var visibleKeys=pdfkit_browser_arrayToHash(keys);if(ctx.showHidden){keys=Object.getOwnPropertyNames(value);}// IE doesn't make error fields non-enumerable
// http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
if(pdfkit_browser_isError(value)&&(keys.indexOf('message')>=0||keys.indexOf('description')>=0)){return pdfkit_browser_formatError(value);}// Some type of object without properties can be shortcutted.
if(keys.length===0){if(pdfkit_browser_isFunction(value)){var name=value.name?': '+value.name:'';return ctx.stylize('[Function'+name+']','special');}if(pdfkit_browser_isRegExp(value)){return ctx.stylize(RegExp.prototype.toString.call(value),'regexp');}if(pdfkit_browser_isDate(value)){return ctx.stylize(Date.prototype.toString.call(value),'date');}if(pdfkit_browser_isError(value)){return pdfkit_browser_formatError(value);}}var base='',array=false,braces=['{','}'];// Make Array say that they are Array
if(pdfkit_browser_isArray(value)){array=true;braces=['[',']'];}// Make functions say that they are functions
if(pdfkit_browser_isFunction(value)){var n=value.name?': '+value.name:'';base=' [Function'+n+']';}// Make RegExps say that they are RegExps
if(pdfkit_browser_isRegExp(value)){base=' '+RegExp.prototype.toString.call(value);}// Make dates with properties first say the date
if(pdfkit_browser_isDate(value)){base=' '+Date.prototype.toUTCString.call(value);}// Make error with message first say the error
if(pdfkit_browser_isError(value)){base=' '+pdfkit_browser_formatError(value);}if(keys.length===0&&(!array||value.length==0)){return braces[0]+base+braces[1];}if(recurseTimes<0){if(pdfkit_browser_isRegExp(value)){return ctx.stylize(RegExp.prototype.toString.call(value),'regexp');}else{return ctx.stylize('[Object]','special');}}ctx.seen.push(value);var output;if(array){output=pdfkit_browser_formatArray(ctx,value,recurseTimes,visibleKeys,keys);}else{output=keys.map(function(key){return pdfkit_browser_formatProperty(ctx,value,recurseTimes,visibleKeys,key,array);});}ctx.seen.pop();return pdfkit_browser_reduceToSingleString(output,base,braces);}function pdfkit_browser_formatPrimitive(ctx,value){if(pdfkit_browser_isUndefined(value))return ctx.stylize('undefined','undefined');if(pdfkit_browser_isString(value)){var simple='\''+JSON.stringify(value).replace(/^"|"$/g,'').replace(/'/g,"\\'").replace(/\\"/g,'"')+'\'';return ctx.stylize(simple,'string');}if(pdfkit_browser_isNumber(value))return ctx.stylize(''+value,'number');if(pdfkit_browser_isBoolean(value))return ctx.stylize(''+value,'boolean');// For some reason typeof null is "object", so special case here.
if(pdfkit_browser_isNull(value))return ctx.stylize('null','null');}function pdfkit_browser_formatError(value){return'['+Error.prototype.toString.call(value)+']';}function pdfkit_browser_formatArray(ctx,value,recurseTimes,visibleKeys,keys){var output=[];for(var i=0,l=value.length;i<l;++i){if(pdfkit_browser_hasOwnProperty(value,String(i))){output.push(pdfkit_browser_formatProperty(ctx,value,recurseTimes,visibleKeys,String(i),true));}else{output.push('');}}keys.forEach(function(key){if(!key.match(/^\d+$/)){output.push(pdfkit_browser_formatProperty(ctx,value,recurseTimes,visibleKeys,key,true));}});return output;}function pdfkit_browser_formatProperty(ctx,value,recurseTimes,visibleKeys,key,array){var name,str,desc;desc=Object.getOwnPropertyDescriptor(value,key)||{value:value[key]};if(desc.get){if(desc.set){str=ctx.stylize('[Getter/Setter]','special');}else{str=ctx.stylize('[Getter]','special');}}else{if(desc.set){str=ctx.stylize('[Setter]','special');}}if(!pdfkit_browser_hasOwnProperty(visibleKeys,key)){name='['+key+']';}if(!str){if(ctx.seen.indexOf(desc.value)<0){if(pdfkit_browser_isNull(recurseTimes)){str=pdfkit_browser_formatValue(ctx,desc.value,null);}else{str=pdfkit_browser_formatValue(ctx,desc.value,recurseTimes-1);}if(str.indexOf('\n')>-1){if(array){str=str.split('\n').map(function(line){return'  '+line;}).join('\n').substr(2);}else{str='\n'+str.split('\n').map(function(line){return'   '+line;}).join('\n');}}}else{str=ctx.stylize('[Circular]','special');}}if(pdfkit_browser_isUndefined(name)){if(array&&key.match(/^\d+$/)){return str;}name=JSON.stringify(''+key);if(name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)){name=name.substr(1,name.length-2);name=ctx.stylize(name,'name');}else{name=name.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'");name=ctx.stylize(name,'string');}}return name+': '+str;}function pdfkit_browser_reduceToSingleString(output,base,braces){var length=output.reduce(function(prev,cur){if(cur.indexOf('\n')>=0);return prev+cur.replace(/\u001b\[\d\d?m/g,'').length+1;},0);if(length>60){return braces[0]+(base===''?'':base+'\n ')+' '+output.join(',\n  ')+' '+braces[1];}return braces[0]+base+' '+output.join(', ')+' '+braces[1];}// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function pdfkit_browser_isArray(ar){return Array.isArray(ar);}function pdfkit_browser_isBoolean(arg){return typeof arg==='boolean';}function pdfkit_browser_isNull(arg){return arg===null;}function pdfkit_browser_isNullOrUndefined(arg){return arg==null;}function pdfkit_browser_isNumber(arg){return typeof arg==='number';}function pdfkit_browser_isString(arg){return typeof arg==='string';}function pdfkit_browser_isSymbol(arg){return typeof arg==='symbol';}function pdfkit_browser_isUndefined(arg){return arg===void 0;}function pdfkit_browser_isRegExp(re){return pdfkit_browser_isObject(re)&&pdfkit_browser_objectToString(re)==='[object RegExp]';}function pdfkit_browser_isObject(arg){return typeof arg==='object'&&arg!==null;}function pdfkit_browser_isDate(d){return pdfkit_browser_isObject(d)&&pdfkit_browser_objectToString(d)==='[object Date]';}function pdfkit_browser_isError(e){return pdfkit_browser_isObject(e)&&(pdfkit_browser_objectToString(e)==='[object Error]'||e instanceof Error);}function pdfkit_browser_isFunction(arg){return typeof arg==='function';}function pdfkit_browser_isPrimitive(arg){return arg===null||typeof arg==='boolean'||typeof arg==='number'||typeof arg==='string'||typeof arg==='symbol'||// ES6 symbol
typeof arg==='undefined';}function pdfkit_browser_isBuffer(maybeBuf){return Buffer$2.isBuffer(maybeBuf);}function pdfkit_browser_objectToString(o){return Object.prototype.toString.call(o);}function pad$1(n){return n<10?'0'+n.toString(10):n.toString(10);}var pdfkit_browser_months=['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];// 26 Feb 16:19:34
function pdfkit_browser_timestamp(){var d=new Date();var time=[pad$1(d.getHours()),pad$1(d.getMinutes()),pad$1(d.getSeconds())].join(':');return[d.getDate(),pdfkit_browser_months[d.getMonth()],time].join(' ');}// log is just a thin wrapper to console.log that prepends a timestamp
function pdfkit_browser_log(){console.log('%s - %s',pdfkit_browser_timestamp(),pdfkit_browser_format.apply(null,arguments));}function pdfkit_browser_extend(origin,add){// Don't do anything if add isn't an object
if(!add||!pdfkit_browser_isObject(add))return origin;var keys=Object.keys(add);var i=keys.length;while(i--){origin[keys[i]]=add[keys[i]];}return origin;}function pdfkit_browser_hasOwnProperty(obj,prop){return Object.prototype.hasOwnProperty.call(obj,prop);}var pdfkit_browser_kCustomPromisifiedSymbol=typeof Symbol!=='undefined'?Symbol('util.promisify.custom'):undefined;function pdfkit_browser_promisify(original){if(typeof original!=='function')throw new TypeError('The "original" argument must be of type Function');if(pdfkit_browser_kCustomPromisifiedSymbol&&original[pdfkit_browser_kCustomPromisifiedSymbol]){var fn=original[pdfkit_browser_kCustomPromisifiedSymbol];if(typeof fn!=='function'){throw new TypeError('The "util.promisify.custom" argument must be of type Function');}Object.defineProperty(fn,pdfkit_browser_kCustomPromisifiedSymbol,{value:fn,enumerable:false,writable:false,configurable:true});return fn;}function fn(){var promiseResolve,promiseReject;var promise=new Promise(function(resolve,reject){promiseResolve=resolve;promiseReject=reject;});var args=[];for(var i=0;i<arguments.length;i++){args.push(arguments[i]);}args.push(function(err,value){if(err){promiseReject(err);}else{promiseResolve(value);}});try{original.apply(this,args);}catch(err){promiseReject(err);}return promise;}Object.setPrototypeOf(fn,Object.getPrototypeOf(original));if(pdfkit_browser_kCustomPromisifiedSymbol)Object.defineProperty(fn,pdfkit_browser_kCustomPromisifiedSymbol,{value:fn,enumerable:false,writable:false,configurable:true});return Object.defineProperties(fn,pdfkit_browser_getOwnPropertyDescriptors(original));}pdfkit_browser_promisify.custom=pdfkit_browser_kCustomPromisifiedSymbol;function pdfkit_browser_callbackifyOnRejected(reason,cb){// `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
// Because `null` is a special error value in callbacks which means "no error
// occurred", we error-wrap so the callback consumer can distinguish between
// "the promise rejected with null" or "the promise fulfilled with undefined".
if(!reason){var newReason=new Error('Promise was rejected with a falsy value');newReason.reason=reason;reason=newReason;}return cb(reason);}function pdfkit_browser_callbackify(original){if(typeof original!=='function'){throw new TypeError('The "original" argument must be of type Function');}// We DO NOT return the promise as it gives the user a false sense that
// the promise is actually somehow related to the callback's execution
// and that the callback throwing will reject the promise.
function callbackified(){var args=[];for(var i=0;i<arguments.length;i++){args.push(arguments[i]);}var maybeCb=args.pop();if(typeof maybeCb!=='function'){throw new TypeError('The last argument must be of type Function');}var self=this;var cb=function(){return maybeCb.apply(self,arguments);};// In true node style we process the callback on `nextTick` with all the
// implications (stack, `uncaughtException`, `async_hooks`)
original.apply(this,args).then(function(ret){browser$1$1.nextTick(cb.bind(null,null,ret));},function(rej){browser$1$1.nextTick(pdfkit_browser_callbackifyOnRejected.bind(null,rej,cb));});}Object.setPrototypeOf(callbackified,Object.getPrototypeOf(original));Object.defineProperties(callbackified,pdfkit_browser_getOwnPropertyDescriptors(original));return callbackified;}var pdfkit_browser_polyfillNode_util={inherits:inherits$3,_extend:pdfkit_browser_extend,log:pdfkit_browser_log,isBuffer:pdfkit_browser_isBuffer,isPrimitive:pdfkit_browser_isPrimitive,isFunction:pdfkit_browser_isFunction,isError:pdfkit_browser_isError,isDate:pdfkit_browser_isDate,isObject:pdfkit_browser_isObject,isRegExp:pdfkit_browser_isRegExp,isUndefined:pdfkit_browser_isUndefined,isSymbol:pdfkit_browser_isSymbol,isString:pdfkit_browser_isString,isNumber:pdfkit_browser_isNumber,isNullOrUndefined:pdfkit_browser_isNullOrUndefined,isNull:pdfkit_browser_isNull,isBoolean:pdfkit_browser_isBoolean,isArray:pdfkit_browser_isArray,inspect:pdfkit_browser_inspect$1,deprecate:deprecate$1,format:pdfkit_browser_format,debuglog:pdfkit_browser_debuglog,promisify:pdfkit_browser_promisify,callbackify:pdfkit_browser_callbackify};var pdfkit_browser_polyfillNode_util$1=/*#__PURE__*/Object.freeze({__proto__:null,_extend:pdfkit_browser_extend,callbackify:pdfkit_browser_callbackify,debuglog:pdfkit_browser_debuglog,default:pdfkit_browser_polyfillNode_util,deprecate:deprecate$1,format:pdfkit_browser_format,inherits:inherits$3,inspect:pdfkit_browser_inspect$1,isArray:pdfkit_browser_isArray,isBoolean:pdfkit_browser_isBoolean,isBuffer:pdfkit_browser_isBuffer,isDate:pdfkit_browser_isDate,isError:pdfkit_browser_isError,isFunction:pdfkit_browser_isFunction,isNull:pdfkit_browser_isNull,isNullOrUndefined:pdfkit_browser_isNullOrUndefined,isNumber:pdfkit_browser_isNumber,isObject:pdfkit_browser_isObject,isPrimitive:pdfkit_browser_isPrimitive,isRegExp:pdfkit_browser_isRegExp,isString:pdfkit_browser_isString,isSymbol:pdfkit_browser_isSymbol,isUndefined:pdfkit_browser_isUndefined,log:pdfkit_browser_log,promisify:pdfkit_browser_promisify});var pdfkit_browser_require$$3=/*@__PURE__*/pdfkit_browser_getAugmentedNamespace(pdfkit_browser_polyfillNode_util$1);var buffer_list;var hasRequiredBuffer_list;function requireBuffer_list(){if(hasRequiredBuffer_list)return buffer_list;hasRequiredBuffer_list=1;function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);return Constructor;}var _require=pdfkit_browser_require$$0,Buffer=_require.Buffer;var _require2=pdfkit_browser_require$$3,inspect=_require2.inspect;var custom=inspect&&inspect.custom||'inspect';function copyBuffer(src,target,offset){Buffer.prototype.copy.call(src,target,offset);}buffer_list=/*#__PURE__*/function(){function BufferList(){_classCallCheck(this,BufferList);this.head=null;this.tail=null;this.length=0;}_createClass(BufferList,[{key:"push",value:function push(v){var entry={data:v,next:null};if(this.length>0)this.tail.next=entry;else this.head=entry;this.tail=entry;++this.length;}},{key:"unshift",value:function unshift(v){var entry={data:v,next:this.head};if(this.length===0)this.tail=entry;this.head=entry;++this.length;}},{key:"shift",value:function shift(){if(this.length===0)return;var ret=this.head.data;if(this.length===1)this.head=this.tail=null;else this.head=this.head.next;--this.length;return ret;}},{key:"clear",value:function clear(){this.head=this.tail=null;this.length=0;}},{key:"join",value:function join(s){if(this.length===0)return'';var p=this.head;var ret=''+p.data;while(p=p.next){ret+=s+p.data;}return ret;}},{key:"concat",value:function concat(n){if(this.length===0)return Buffer.alloc(0);var ret=Buffer.allocUnsafe(n>>>0);var p=this.head;var i=0;while(p){copyBuffer(p.data,ret,i);i+=p.data.length;p=p.next;}return ret;}// Consumes a specified amount of bytes or characters from the buffered data.
},{key:"consume",value:function consume(n,hasStrings){var ret;if(n<this.head.data.length){// `slice` is the same for buffers and strings.
ret=this.head.data.slice(0,n);this.head.data=this.head.data.slice(n);}else if(n===this.head.data.length){// First chunk is a perfect match.
ret=this.shift();}else{// Result spans more than one buffer.
ret=hasStrings?this._getString(n):this._getBuffer(n);}return ret;}},{key:"first",value:function first(){return this.head.data;}// Consumes a specified amount of characters from the buffered data.
},{key:"_getString",value:function _getString(n){var p=this.head;var c=1;var ret=p.data;n-=ret.length;while(p=p.next){var str=p.data;var nb=n>str.length?str.length:n;if(nb===str.length)ret+=str;else ret+=str.slice(0,n);n-=nb;if(n===0){if(nb===str.length){++c;if(p.next)this.head=p.next;else this.head=this.tail=null;}else{this.head=p;p.data=str.slice(nb);}break;}++c;}this.length-=c;return ret;}// Consumes a specified amount of bytes from the buffered data.
},{key:"_getBuffer",value:function _getBuffer(n){var ret=Buffer.allocUnsafe(n);var p=this.head;var c=1;p.data.copy(ret);n-=p.data.length;while(p=p.next){var buf=p.data;var nb=n>buf.length?buf.length:n;buf.copy(ret,ret.length-n,0,nb);n-=nb;if(n===0){if(nb===buf.length){++c;if(p.next)this.head=p.next;else this.head=this.tail=null;}else{this.head=p;p.data=buf.slice(nb);}break;}++c;}this.length-=c;return ret;}// Make sure the linked list only shows the minimal necessary information.
},{key:custom,value:function value(_,options){return inspect(this,_objectSpread({},options,{// Only inspect one level.
depth:0,// It should not recurse.
customInspect:false}));}}]);return BufferList;}();return buffer_list;}function destroy(err,cb){var _this=this;var readableDestroyed=this._readableState&&this._readableState.destroyed;var writableDestroyed=this._writableState&&this._writableState.destroyed;if(readableDestroyed||writableDestroyed){if(cb){cb(err);}else if(err){if(!this._writableState){browser$1$1.nextTick(emitErrorNT,this,err);}else if(!this._writableState.errorEmitted){this._writableState.errorEmitted=true;browser$1$1.nextTick(emitErrorNT,this,err);}}return this;}// we set destroyed to true before firing error callbacks in order
// to make it re-entrance safe in case destroy() is called within callbacks
if(this._readableState){this._readableState.destroyed=true;}// if this is a duplex stream mark the writable part as destroyed as well
if(this._writableState){this._writableState.destroyed=true;}this._destroy(err||null,function(err){if(!cb&&err){if(!_this._writableState){browser$1$1.nextTick(emitErrorAndCloseNT,_this,err);}else if(!_this._writableState.errorEmitted){_this._writableState.errorEmitted=true;browser$1$1.nextTick(emitErrorAndCloseNT,_this,err);}else{browser$1$1.nextTick(emitCloseNT,_this);}}else if(cb){browser$1$1.nextTick(emitCloseNT,_this);cb(err);}else{browser$1$1.nextTick(emitCloseNT,_this);}});return this;}function emitErrorAndCloseNT(self,err){emitErrorNT(self,err);emitCloseNT(self);}function emitCloseNT(self){if(self._writableState&&!self._writableState.emitClose)return;if(self._readableState&&!self._readableState.emitClose)return;self.emit('close');}function undestroy(){if(this._readableState){this._readableState.destroyed=false;this._readableState.reading=false;this._readableState.ended=false;this._readableState.endEmitted=false;}if(this._writableState){this._writableState.destroyed=false;this._writableState.ended=false;this._writableState.ending=false;this._writableState.finalCalled=false;this._writableState.prefinished=false;this._writableState.finished=false;this._writableState.errorEmitted=false;}}function emitErrorNT(self,err){self.emit('error',err);}function errorOrDestroy$2(stream,err){// We have tests that rely on errors being emitted
// in the same tick, so changing this is semver major.
// For now when you opt-in to autoDestroy we allow
// the error to be emitted nextTick. In a future
// semver major update we should change the default to this.
var rState=stream._readableState;var wState=stream._writableState;if(rState&&rState.autoDestroy||wState&&wState.autoDestroy)stream.destroy(err);else stream.emit('error',err);}var destroy_1={destroy:destroy,undestroy:undestroy,errorOrDestroy:errorOrDestroy$2};var errorsBrowser={};function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype);subClass.prototype.constructor=subClass;subClass.__proto__=superClass;}var codes={};function createErrorType(code,message,Base){if(!Base){Base=Error;}function getMessage(arg1,arg2,arg3){if(typeof message==='string'){return message;}else{return message(arg1,arg2,arg3);}}var NodeError=/*#__PURE__*/function(_Base){_inheritsLoose(NodeError,_Base);function NodeError(arg1,arg2,arg3){return _Base.call(this,getMessage(arg1,arg2,arg3))||this;}return NodeError;}(Base);NodeError.prototype.name=Base.name;NodeError.prototype.code=code;codes[code]=NodeError;}// https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
function oneOf(expected,thing){if(Array.isArray(expected)){var len=expected.length;expected=expected.map(function(i){return String(i);});if(len>2){return"one of ".concat(thing," ").concat(expected.slice(0,len-1).join(', '),", or ")+expected[len-1];}else if(len===2){return"one of ".concat(thing," ").concat(expected[0]," or ").concat(expected[1]);}else{return"of ".concat(thing," ").concat(expected[0]);}}else{return"of ".concat(thing," ").concat(String(expected));}}// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
function startsWith(str,search,pos){return str.substr(!pos||pos<0?0:+pos,search.length)===search;}// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
function endsWith(str,search,this_len){if(this_len===undefined||this_len>str.length){this_len=str.length;}return str.substring(this_len-search.length,this_len)===search;}// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
function includes(str,search,start){if(typeof start!=='number'){start=0;}if(start+search.length>str.length){return false;}else{return str.indexOf(search,start)!==-1;}}createErrorType('ERR_INVALID_OPT_VALUE',function(name,value){return'The value "'+value+'" is invalid for option "'+name+'"';},TypeError);createErrorType('ERR_INVALID_ARG_TYPE',function(name,expected,actual){// determiner: 'must be' or 'must not be'
var determiner;if(typeof expected==='string'&&startsWith(expected,'not ')){determiner='must not be';expected=expected.replace(/^not /,'');}else{determiner='must be';}var msg;if(endsWith(name,' argument')){// For cases like 'first argument'
msg="The ".concat(name," ").concat(determiner," ").concat(oneOf(expected,'type'));}else{var type=includes(name,'.')?'property':'argument';msg="The \"".concat(name,"\" ").concat(type," ").concat(determiner," ").concat(oneOf(expected,'type'));}msg+=". Received type ".concat(typeof actual);return msg;},TypeError);createErrorType('ERR_STREAM_PUSH_AFTER_EOF','stream.push() after EOF');createErrorType('ERR_METHOD_NOT_IMPLEMENTED',function(name){return'The '+name+' method is not implemented';});createErrorType('ERR_STREAM_PREMATURE_CLOSE','Premature close');createErrorType('ERR_STREAM_DESTROYED',function(name){return'Cannot call '+name+' after a stream was destroyed';});createErrorType('ERR_MULTIPLE_CALLBACK','Callback called multiple times');createErrorType('ERR_STREAM_CANNOT_PIPE','Cannot pipe, not readable');createErrorType('ERR_STREAM_WRITE_AFTER_END','write after end');createErrorType('ERR_STREAM_NULL_VALUES','May not write null values to stream',TypeError);createErrorType('ERR_UNKNOWN_ENCODING',function(arg){return'Unknown encoding: '+arg;},TypeError);createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT','stream.unshift() after end event');errorsBrowser.codes=codes;var ERR_INVALID_OPT_VALUE=errorsBrowser.codes.ERR_INVALID_OPT_VALUE;function highWaterMarkFrom(options,isDuplex,duplexKey){return options.highWaterMark!=null?options.highWaterMark:isDuplex?options[duplexKey]:null;}function getHighWaterMark$2(state,options,duplexKey,isDuplex){var hwm=highWaterMarkFrom(options,isDuplex,duplexKey);if(hwm!=null){if(!(isFinite(hwm)&&Math.floor(hwm)===hwm)||hwm<0){var name=isDuplex?duplexKey:'highWaterMark';throw new ERR_INVALID_OPT_VALUE(name,hwm);}return Math.floor(hwm);}// Default value
return state.objectMode?16:16*1024;}var state={getHighWaterMark:getHighWaterMark$2};var pdfkit_browser_inherits;if(typeof Object.create==='function'){pdfkit_browser_inherits=function inherits(ctor,superCtor){// implementation from standard node.js 'util' module
ctor.super_=superCtor;ctor.prototype=Object.create(superCtor.prototype,{constructor:{value:ctor,enumerable:false,writable:true,configurable:true}});};}else{pdfkit_browser_inherits=function inherits(ctor,superCtor){ctor.super_=superCtor;var TempCtor=function(){};TempCtor.prototype=superCtor.prototype;ctor.prototype=new TempCtor();ctor.prototype.constructor=ctor;};}var pdfkit_browser_inherits$1=pdfkit_browser_inherits;var _polyfillNode_inherits=/*#__PURE__*/Object.freeze({__proto__:null,default:pdfkit_browser_inherits$1});var pdfkit_browser_require$$1=/*@__PURE__*/pdfkit_browser_getAugmentedNamespace(_polyfillNode_inherits);// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
var pdfkit_browser_isBufferEncoding=Buffer$2.isEncoding||function(encoding){switch(encoding&&encoding.toLowerCase()){case'hex':case'utf8':case'utf-8':case'ascii':case'binary':case'base64':case'ucs2':case'ucs-2':case'utf16le':case'utf-16le':case'raw':return true;default:return false;}};function pdfkit_browser_assertEncoding(encoding){if(encoding&&!pdfkit_browser_isBufferEncoding(encoding)){throw new Error('Unknown encoding: '+encoding);}}// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters. CESU-8 is handled as part of the UTF-8 encoding.
//
// @TODO Handling all encodings inside a single object makes it very difficult
// to reason about this code, so it should be split up in the future.
// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
// points as used by CESU-8.
function StringDecoder$1(encoding){this.encoding=(encoding||'utf8').toLowerCase().replace(/[-_]/,'');pdfkit_browser_assertEncoding(encoding);switch(this.encoding){case'utf8':// CESU-8 represents each of Surrogate Pair by 3-bytes
this.surrogateSize=3;break;case'ucs2':case'utf16le':// UTF-16 represents each of Surrogate Pair by 2-bytes
this.surrogateSize=2;this.detectIncompleteChar=pdfkit_browser_utf16DetectIncompleteChar;break;case'base64':// Base-64 stores 3 bytes in 4 chars, and pads the remainder.
this.surrogateSize=3;this.detectIncompleteChar=pdfkit_browser_base64DetectIncompleteChar;break;default:this.write=pdfkit_browser_passThroughWrite;return;}// Enough space to store all bytes of a single character. UTF-8 needs 4
// bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
this.charBuffer=new Buffer$2(6);// Number of bytes received for the current incomplete multi-byte character.
this.charReceived=0;// Number of bytes expected for the current incomplete multi-byte character.
this.charLength=0;}// write decodes the given buffer and returns it as JS string that is
// guaranteed to not contain any partial multi-byte characters. Any partial
// character found at the end of the buffer is buffered up, and will be
// returned when calling write again with the remaining bytes.
//
// Note: Converting a Buffer containing an orphan surrogate to a String
// currently works, but converting a String to a Buffer (via `new Buffer`, or
// Buffer#write) will replace incomplete surrogates with the unicode
// replacement character. See https://codereview.chromium.org/121173009/ .
StringDecoder$1.prototype.write=function(buffer){var charStr='';// if our last write ended with an incomplete multibyte character
while(this.charLength){// determine how many remaining bytes this buffer has to offer for this char
var available=buffer.length>=this.charLength-this.charReceived?this.charLength-this.charReceived:buffer.length;// add the new bytes to the char buffer
buffer.copy(this.charBuffer,this.charReceived,0,available);this.charReceived+=available;if(this.charReceived<this.charLength){// still not enough chars in this buffer? wait for more ...
return'';}// remove bytes belonging to the current character from the buffer
buffer=buffer.slice(available,buffer.length);// get the character that was split
charStr=this.charBuffer.slice(0,this.charLength).toString(this.encoding);// CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
var charCode=charStr.charCodeAt(charStr.length-1);if(charCode>=0xD800&&charCode<=0xDBFF){this.charLength+=this.surrogateSize;charStr='';continue;}this.charReceived=this.charLength=0;// if there are no more bytes in this buffer, just emit our char
if(buffer.length===0){return charStr;}break;}// determine and set charLength / charReceived
this.detectIncompleteChar(buffer);var end=buffer.length;if(this.charLength){// buffer the incomplete character bytes we got
buffer.copy(this.charBuffer,0,buffer.length-this.charReceived,end);end-=this.charReceived;}charStr+=buffer.toString(this.encoding,0,end);var end=charStr.length-1;var charCode=charStr.charCodeAt(end);// CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
if(charCode>=0xD800&&charCode<=0xDBFF){var size=this.surrogateSize;this.charLength+=size;this.charReceived+=size;this.charBuffer.copy(this.charBuffer,size,0,size);buffer.copy(this.charBuffer,0,0,size);return charStr.substring(0,end);}// or just emit the charStr
return charStr;};// detectIncompleteChar determines if there is an incomplete UTF-8 character at
// the end of the given buffer. If so, it sets this.charLength to the byte
// length that character, and sets this.charReceived to the number of bytes
// that are available for this character.
StringDecoder$1.prototype.detectIncompleteChar=function(buffer){// determine how many bytes we have to check at the end of this buffer
var i=buffer.length>=3?3:buffer.length;// Figure out if one of the last i bytes of our buffer announces an
// incomplete char.
for(;i>0;i--){var c=buffer[buffer.length-i];// See http://en.wikipedia.org/wiki/UTF-8#Description
// 110XXXXX
if(i==1&&c>>5==0x06){this.charLength=2;break;}// 1110XXXX
if(i<=2&&c>>4==0x0E){this.charLength=3;break;}// 11110XXX
if(i<=3&&c>>3==0x1E){this.charLength=4;break;}}this.charReceived=i;};StringDecoder$1.prototype.end=function(buffer){var res='';if(buffer&&buffer.length)res=this.write(buffer);if(this.charReceived){var cr=this.charReceived;var buf=this.charBuffer;var enc=this.encoding;res+=buf.slice(0,cr).toString(enc);}return res;};function pdfkit_browser_passThroughWrite(buffer){return buffer.toString(this.encoding);}function pdfkit_browser_utf16DetectIncompleteChar(buffer){this.charReceived=buffer.length%2;this.charLength=this.charReceived?2:0;}function pdfkit_browser_base64DetectIncompleteChar(buffer){this.charReceived=buffer.length%3;this.charLength=this.charReceived?3:0;}var _polyfillNode_string_decoder=/*#__PURE__*/Object.freeze({__proto__:null,StringDecoder:StringDecoder$1});var require$$10=/*@__PURE__*/pdfkit_browser_getAugmentedNamespace(_polyfillNode_string_decoder);var ERR_STREAM_PREMATURE_CLOSE=errorsBrowser.codes.ERR_STREAM_PREMATURE_CLOSE;function once$1(callback){var called=false;return function(){if(called)return;called=true;for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}callback.apply(this,args);};}function noop$1(){}function isRequest$1(stream){return stream.setHeader&&typeof stream.abort==='function';}function eos$1(stream,opts,callback){if(typeof opts==='function')return eos$1(stream,null,opts);if(!opts)opts={};callback=once$1(callback||noop$1);var readable=opts.readable||opts.readable!==false&&stream.readable;var writable=opts.writable||opts.writable!==false&&stream.writable;var onlegacyfinish=function onlegacyfinish(){if(!stream.writable)onfinish();};var writableEnded=stream._writableState&&stream._writableState.finished;var onfinish=function onfinish(){writable=false;writableEnded=true;if(!readable)callback.call(stream);};var readableEnded=stream._readableState&&stream._readableState.endEmitted;var onend=function onend(){readable=false;readableEnded=true;if(!writable)callback.call(stream);};var onerror=function onerror(err){callback.call(stream,err);};var onclose=function onclose(){var err;if(readable&&!readableEnded){if(!stream._readableState||!stream._readableState.ended)err=new ERR_STREAM_PREMATURE_CLOSE();return callback.call(stream,err);}if(writable&&!writableEnded){if(!stream._writableState||!stream._writableState.ended)err=new ERR_STREAM_PREMATURE_CLOSE();return callback.call(stream,err);}};var onrequest=function onrequest(){stream.req.on('finish',onfinish);};if(isRequest$1(stream)){stream.on('complete',onfinish);stream.on('abort',onclose);if(stream.req)onrequest();else stream.on('request',onrequest);}else if(writable&&!stream._writableState){// legacy streams
stream.on('end',onlegacyfinish);stream.on('close',onlegacyfinish);}stream.on('end',onend);stream.on('finish',onfinish);if(opts.error!==false)stream.on('error',onerror);stream.on('close',onclose);return function(){stream.removeListener('complete',onfinish);stream.removeListener('abort',onclose);stream.removeListener('request',onrequest);if(stream.req)stream.req.removeListener('finish',onfinish);stream.removeListener('end',onlegacyfinish);stream.removeListener('close',onlegacyfinish);stream.removeListener('finish',onfinish);stream.removeListener('end',onend);stream.removeListener('error',onerror);stream.removeListener('close',onclose);};}var endOfStream=eos$1;var async_iterator;var hasRequiredAsync_iterator;function requireAsync_iterator(){if(hasRequiredAsync_iterator)return async_iterator;hasRequiredAsync_iterator=1;var _Object$setPrototypeO;function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}var finished=endOfStream;var kLastResolve=Symbol('lastResolve');var kLastReject=Symbol('lastReject');var kError=Symbol('error');var kEnded=Symbol('ended');var kLastPromise=Symbol('lastPromise');var kHandlePromise=Symbol('handlePromise');var kStream=Symbol('stream');function createIterResult(value,done){return{value:value,done:done};}function readAndResolve(iter){var resolve=iter[kLastResolve];if(resolve!==null){var data=iter[kStream].read();// we defer if data is null
// we can be expecting either 'end' or
// 'error'
if(data!==null){iter[kLastPromise]=null;iter[kLastResolve]=null;iter[kLastReject]=null;resolve(createIterResult(data,false));}}}function onReadable(iter){// we wait for the next tick, because it might
// emit an error with process.nextTick
browser$1$1.nextTick(readAndResolve,iter);}function wrapForNext(lastPromise,iter){return function(resolve,reject){lastPromise.then(function(){if(iter[kEnded]){resolve(createIterResult(undefined,true));return;}iter[kHandlePromise](resolve,reject);},reject);};}var AsyncIteratorPrototype=Object.getPrototypeOf(function(){});var ReadableStreamAsyncIteratorPrototype=Object.setPrototypeOf((_Object$setPrototypeO={get stream(){return this[kStream];},next:function next(){var _this=this;// if we have detected an error in the meanwhile
// reject straight away
var error=this[kError];if(error!==null){return Promise.reject(error);}if(this[kEnded]){return Promise.resolve(createIterResult(undefined,true));}if(this[kStream].destroyed){// We need to defer via nextTick because if .destroy(err) is
// called, the error will be emitted via nextTick, and
// we cannot guarantee that there is no error lingering around
// waiting to be emitted.
return new Promise(function(resolve,reject){browser$1$1.nextTick(function(){if(_this[kError]){reject(_this[kError]);}else{resolve(createIterResult(undefined,true));}});});}// if we have multiple next() calls
// we will wait for the previous Promise to finish
// this logic is optimized to support for await loops,
// where next() is only called once at a time
var lastPromise=this[kLastPromise];var promise;if(lastPromise){promise=new Promise(wrapForNext(lastPromise,this));}else{// fast path needed to support multiple this.push()
// without triggering the next() queue
var data=this[kStream].read();if(data!==null){return Promise.resolve(createIterResult(data,false));}promise=new Promise(this[kHandlePromise]);}this[kLastPromise]=promise;return promise;}},_defineProperty(_Object$setPrototypeO,Symbol.asyncIterator,function(){return this;}),_defineProperty(_Object$setPrototypeO,"return",function _return(){var _this2=this;// destroy(err, cb) is a private API
// we can guarantee we have that here, because we control the
// Readable class this is attached to
return new Promise(function(resolve,reject){_this2[kStream].destroy(null,function(err){if(err){reject(err);return;}resolve(createIterResult(undefined,true));});});}),_Object$setPrototypeO),AsyncIteratorPrototype);var createReadableStreamAsyncIterator=function createReadableStreamAsyncIterator(stream){var _Object$create;var iterator=Object.create(ReadableStreamAsyncIteratorPrototype,(_Object$create={},_defineProperty(_Object$create,kStream,{value:stream,writable:true}),_defineProperty(_Object$create,kLastResolve,{value:null,writable:true}),_defineProperty(_Object$create,kLastReject,{value:null,writable:true}),_defineProperty(_Object$create,kError,{value:null,writable:true}),_defineProperty(_Object$create,kEnded,{value:stream._readableState.endEmitted,writable:true}),_defineProperty(_Object$create,kHandlePromise,{value:function value(resolve,reject){var data=iterator[kStream].read();if(data){iterator[kLastPromise]=null;iterator[kLastResolve]=null;iterator[kLastReject]=null;resolve(createIterResult(data,false));}else{iterator[kLastResolve]=resolve;iterator[kLastReject]=reject;}},writable:true}),_Object$create));iterator[kLastPromise]=null;finished(stream,function(err){if(err&&err.code!=='ERR_STREAM_PREMATURE_CLOSE'){var reject=iterator[kLastReject];// reject if we are waiting for data in the Promise
// returned by next() and store the error
if(reject!==null){iterator[kLastPromise]=null;iterator[kLastResolve]=null;iterator[kLastReject]=null;reject(err);}iterator[kError]=err;return;}var resolve=iterator[kLastResolve];if(resolve!==null){iterator[kLastPromise]=null;iterator[kLastResolve]=null;iterator[kLastReject]=null;resolve(createIterResult(undefined,true));}iterator[kEnded]=true;});stream.on('readable',onReadable.bind(null,iterator));return iterator;};async_iterator=createReadableStreamAsyncIterator;return async_iterator;}var fromBrowser;var hasRequiredFromBrowser;function requireFromBrowser(){if(hasRequiredFromBrowser)return fromBrowser;hasRequiredFromBrowser=1;fromBrowser=function(){throw new Error('Readable.from is not available in the browser');};return fromBrowser;}const Registry$4=_registry;Registry$4.Readable=pdfkit_browser_Readable;pdfkit_browser_Readable.ReadableState=pdfkit_browser_ReadableState;/*<replacement>*/require$$1$1.EventEmitter;var EElistenerCount=function EElistenerCount(emitter,type){return emitter.listeners(type).length;};/*</replacement>*//*<replacement>*/var Stream$1=streamBrowser;/*</replacement>*/var Buffer$1=pdfkit_browser_require$$0.Buffer;var OurUint8Array$1=commonjsGlobal.Uint8Array||function(){};function _uint8ArrayToBuffer$1(chunk){return Buffer$1.from(chunk);}function _isUint8Array$1(obj){return Buffer$1.isBuffer(obj)||obj instanceof OurUint8Array$1;}/*<replacement>*/var debugUtil=pdfkit_browser_require$$3;var pdfkit_browser_debug;if(debugUtil&&debugUtil.debuglog){pdfkit_browser_debug=debugUtil.debuglog('stream');}else{pdfkit_browser_debug=function debug(){};}/*</replacement>*/var pdfkit_browser_BufferList=requireBuffer_list();var destroyImpl$1=destroy_1;var _require$1=state,getHighWaterMark$1=_require$1.getHighWaterMark;var _require$codes$3=errorsBrowser.codes,ERR_INVALID_ARG_TYPE$1=_require$codes$3.ERR_INVALID_ARG_TYPE,ERR_STREAM_PUSH_AFTER_EOF=_require$codes$3.ERR_STREAM_PUSH_AFTER_EOF,ERR_METHOD_NOT_IMPLEMENTED$2=_require$codes$3.ERR_METHOD_NOT_IMPLEMENTED,ERR_STREAM_UNSHIFT_AFTER_END_EVENT=_require$codes$3.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;// Lazy loaded to improve the startup performance.
var pdfkit_browser_StringDecoder;var createReadableStreamAsyncIterator;var pdfkit_browser_from;pdfkit_browser_require$$1(pdfkit_browser_Readable,Stream$1);var errorOrDestroy$1=destroyImpl$1.errorOrDestroy;var kProxyEvents=['error','close','destroy','pause','resume'];function pdfkit_browser_prependListener(emitter,event,fn){// Sadly this is not cacheable as some libraries bundle their own
// event emitter implementation with them.
if(typeof emitter.prependListener==='function')return emitter.prependListener(event,fn);// This is a hack to make sure that our error handler is attached before any
// userland ones.  NEVER DO THIS. This is here only because this code needs
// to continue to work with older versions of Node.js that do not include
// the prependListener() method. The goal is to eventually remove this hack.
if(!emitter._events||!emitter._events[event])emitter.on(event,fn);else if(Array.isArray(emitter._events[event]))emitter._events[event].unshift(fn);else emitter._events[event]=[fn,emitter._events[event]];}function pdfkit_browser_ReadableState(options,stream,isDuplex){options=options||{};// Duplex streams are both readable and writable, but share
// the same options object.
// However, some cases require setting options to different
// values for the readable and the writable sides of the duplex stream.
// These options can be provided separately as readableXXX and writableXXX.
if(typeof isDuplex!=='boolean')isDuplex=stream instanceof Registry$4.Duplex;// object stream flag. Used to make read(n) ignore n and to
// make all the buffer merging and length checks go away
this.objectMode=!!options.objectMode;if(isDuplex)this.objectMode=this.objectMode||!!options.readableObjectMode;// the point at which it stops calling _read() to fill the buffer
// Note: 0 is a valid value, means "don't call _read preemptively ever"
this.highWaterMark=getHighWaterMark$1(this,options,'readableHighWaterMark',isDuplex);// A linked list is used to store data chunks instead of an array because the
// linked list can remove elements from the beginning faster than
// array.shift()
this.buffer=new pdfkit_browser_BufferList();this.length=0;this.pipes=null;this.pipesCount=0;this.flowing=null;this.ended=false;this.endEmitted=false;this.reading=false;// a flag to be able to tell if the event 'readable'/'data' is emitted
// immediately, or on a later tick.  We set this to true at first, because
// any actions that shouldn't happen until "later" should generally also
// not happen before the first read call.
this.sync=true;// whenever we return null, then we set a flag to say
// that we're awaiting a 'readable' event emission.
this.needReadable=false;this.emittedReadable=false;this.readableListening=false;this.resumeScheduled=false;this.paused=true;// Should close be emitted on destroy. Defaults to true.
this.emitClose=options.emitClose!==false;// Should .destroy() be called after 'end' (and potentially 'finish')
this.autoDestroy=!!options.autoDestroy;// has it been destroyed
this.destroyed=false;// Crypto is kind of old and crusty.  Historically, its default string
// encoding is 'binary' so we have to make this configurable.
// Everything else in the universe uses 'utf8', though.
this.defaultEncoding=options.defaultEncoding||'utf8';// the number of writers that are awaiting a drain event in .pipe()s
this.awaitDrain=0;// if true, a maybeReadMore has been scheduled
this.readingMore=false;this.decoder=null;this.encoding=null;if(options.encoding){if(!pdfkit_browser_StringDecoder)pdfkit_browser_StringDecoder=require$$10.StringDecoder;this.decoder=new pdfkit_browser_StringDecoder(options.encoding);this.encoding=options.encoding;}}function pdfkit_browser_Readable(options){if(!(this instanceof pdfkit_browser_Readable))return new pdfkit_browser_Readable(options);// Checking for a Stream.Duplex instance is faster here instead of inside
// the ReadableState constructor, at least with V8 6.5
var isDuplex=this instanceof Registry$4.Duplex;this._readableState=new pdfkit_browser_ReadableState(options,this,isDuplex);// legacy
this.readable=true;if(options){if(typeof options.read==='function')this._read=options.read;if(typeof options.destroy==='function')this._destroy=options.destroy;}Stream$1.call(this);}Object.defineProperty(pdfkit_browser_Readable.prototype,'destroyed',{// making it explicit this property is not enumerable
// because otherwise some prototype manipulation in
// userland will fail
enumerable:false,get:function get(){if(this._readableState===undefined){return false;}return this._readableState.destroyed;},set:function set(value){// we ignore the value if the stream
// has not been initialized yet
if(!this._readableState){return;}// backward compatibility, the user is explicitly
// managing destroyed
this._readableState.destroyed=value;}});pdfkit_browser_Readable.prototype.destroy=destroyImpl$1.destroy;pdfkit_browser_Readable.prototype._undestroy=destroyImpl$1.undestroy;pdfkit_browser_Readable.prototype._destroy=function(err,cb){cb(err);};// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
pdfkit_browser_Readable.prototype.push=function(chunk,encoding){var state=this._readableState;var skipChunkCheck;if(!state.objectMode){if(typeof chunk==='string'){encoding=encoding||state.defaultEncoding;if(encoding!==state.encoding){chunk=Buffer$1.from(chunk,encoding);encoding='';}skipChunkCheck=true;}}else{skipChunkCheck=true;}return pdfkit_browser_readableAddChunk(this,chunk,encoding,false,skipChunkCheck);};// Unshift should *always* be something directly out of read()
pdfkit_browser_Readable.prototype.unshift=function(chunk){return pdfkit_browser_readableAddChunk(this,chunk,null,true,false);};function pdfkit_browser_readableAddChunk(stream,chunk,encoding,addToFront,skipChunkCheck){pdfkit_browser_debug('readableAddChunk',chunk);var state=stream._readableState;if(chunk===null){state.reading=false;pdfkit_browser_onEofChunk(stream,state);}else{var er;if(!skipChunkCheck)er=pdfkit_browser_chunkInvalid(state,chunk);if(er){errorOrDestroy$1(stream,er);}else if(state.objectMode||chunk&&chunk.length>0){if(typeof chunk!=='string'&&!state.objectMode&&Object.getPrototypeOf(chunk)!==Buffer$1.prototype){chunk=_uint8ArrayToBuffer$1(chunk);}if(addToFront){if(state.endEmitted)errorOrDestroy$1(stream,new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream,state,chunk,true);}else if(state.ended){errorOrDestroy$1(stream,new ERR_STREAM_PUSH_AFTER_EOF());}else if(state.destroyed){return false;}else{state.reading=false;if(state.decoder&&!encoding){chunk=state.decoder.write(chunk);if(state.objectMode||chunk.length!==0)addChunk(stream,state,chunk,false);else pdfkit_browser_maybeReadMore(stream,state);}else{addChunk(stream,state,chunk,false);}}}else if(!addToFront){state.reading=false;pdfkit_browser_maybeReadMore(stream,state);}}// We can push more data if we are below the highWaterMark.
// Also, if we have no data yet, we can stand some more bytes.
// This is to work around cases where hwm=0, such as the repl.
return!state.ended&&(state.length<state.highWaterMark||state.length===0);}function addChunk(stream,state,chunk,addToFront){if(state.flowing&&state.length===0&&!state.sync){state.awaitDrain=0;stream.emit('data',chunk);}else{// update the buffer info.
state.length+=state.objectMode?1:chunk.length;if(addToFront)state.buffer.unshift(chunk);else state.buffer.push(chunk);if(state.needReadable)pdfkit_browser_emitReadable(stream);}pdfkit_browser_maybeReadMore(stream,state);}function pdfkit_browser_chunkInvalid(state,chunk){var er;if(!_isUint8Array$1(chunk)&&typeof chunk!=='string'&&chunk!==undefined&&!state.objectMode){er=new ERR_INVALID_ARG_TYPE$1('chunk',['string','Buffer','Uint8Array'],chunk);}return er;}pdfkit_browser_Readable.prototype.isPaused=function(){return this._readableState.flowing===false;};// backwards compatibility.
pdfkit_browser_Readable.prototype.setEncoding=function(enc){if(!pdfkit_browser_StringDecoder)pdfkit_browser_StringDecoder=require$$10.StringDecoder;var decoder=new pdfkit_browser_StringDecoder(enc);this._readableState.decoder=decoder;// If setEncoding(null), decoder.encoding equals utf8
this._readableState.encoding=this._readableState.decoder.encoding;// Iterate over current buffer to convert already stored Buffers:
var p=this._readableState.buffer.head;var content='';while(p!==null){content+=decoder.write(p.data);p=p.next;}this._readableState.buffer.clear();if(content!=='')this._readableState.buffer.push(content);this._readableState.length=content.length;return this;};// Don't raise the hwm > 1GB
var pdfkit_browser_MAX_HWM=0x40000000;function pdfkit_browser_computeNewHighWaterMark(n){if(n>=pdfkit_browser_MAX_HWM){// TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
n=pdfkit_browser_MAX_HWM;}else{// Get the next highest power of 2 to prevent increasing hwm excessively in
// tiny amounts
n--;n|=n>>>1;n|=n>>>2;n|=n>>>4;n|=n>>>8;n|=n>>>16;n++;}return n;}// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function pdfkit_browser_howMuchToRead(n,state){if(n<=0||state.length===0&&state.ended)return 0;if(state.objectMode)return 1;if(n!==n){// Only flow one buffer at a time
if(state.flowing&&state.length)return state.buffer.head.data.length;else return state.length;}// If we're asking for more than the current hwm, then raise the hwm.
if(n>state.highWaterMark)state.highWaterMark=pdfkit_browser_computeNewHighWaterMark(n);if(n<=state.length)return n;// Don't have enough
if(!state.ended){state.needReadable=true;return 0;}return state.length;}// you can override either this method, or the async _read(n) below.
pdfkit_browser_Readable.prototype.read=function(n){pdfkit_browser_debug('read',n);n=parseInt(n,10);var state=this._readableState;var nOrig=n;if(n!==0)state.emittedReadable=false;// if we're doing read(0) to trigger a readable event, but we
// already have a bunch of data in the buffer, then just trigger
// the 'readable' event and move on.
if(n===0&&state.needReadable&&((state.highWaterMark!==0?state.length>=state.highWaterMark:state.length>0)||state.ended)){pdfkit_browser_debug('read: emitReadable',state.length,state.ended);if(state.length===0&&state.ended)pdfkit_browser_endReadable(this);else pdfkit_browser_emitReadable(this);return null;}n=pdfkit_browser_howMuchToRead(n,state);// if we've ended, and we're now clear, then finish it up.
if(n===0&&state.ended){if(state.length===0)pdfkit_browser_endReadable(this);return null;}// All the actual chunk generation logic needs to be
// *below* the call to _read.  The reason is that in certain
// synthetic stream cases, such as passthrough streams, _read
// may be a completely synchronous operation which may change
// the state of the read buffer, providing enough data when
// before there was *not* enough.
//
// So, the steps are:
// 1. Figure out what the state of things will be after we do
// a read from the buffer.
//
// 2. If that resulting state will trigger a _read, then call _read.
// Note that this may be asynchronous, or synchronous.  Yes, it is
// deeply ugly to write APIs this way, but that still doesn't mean
// that the Readable class should behave improperly, as streams are
// designed to be sync/async agnostic.
// Take note if the _read call is sync or async (ie, if the read call
// has returned yet), so that we know whether or not it's safe to emit
// 'readable' etc.
//
// 3. Actually pull the requested chunks out of the buffer and return.
// if we need a readable event, then we need to do some reading.
var doRead=state.needReadable;pdfkit_browser_debug('need readable',doRead);// if we currently have less than the highWaterMark, then also read some
if(state.length===0||state.length-n<state.highWaterMark){doRead=true;pdfkit_browser_debug('length less than watermark',doRead);}// however, if we've ended, then there's no point, and if we're already
// reading, then it's unnecessary.
if(state.ended||state.reading){doRead=false;pdfkit_browser_debug('reading or ended',doRead);}else if(doRead){pdfkit_browser_debug('do read');state.reading=true;state.sync=true;// if the length is currently zero, then we *need* a readable event.
if(state.length===0)state.needReadable=true;// call internal read method
this._read(state.highWaterMark);state.sync=false;// If _read pushed data synchronously, then `reading` will be false,
// and we need to re-evaluate how much data we can return to the user.
if(!state.reading)n=pdfkit_browser_howMuchToRead(nOrig,state);}var ret;if(n>0)ret=pdfkit_browser_fromList(n,state);else ret=null;if(ret===null){state.needReadable=state.length<=state.highWaterMark;n=0;}else{state.length-=n;state.awaitDrain=0;}if(state.length===0){// If we have nothing in the buffer, then we want to know
// as soon as we *do* get something into the buffer.
if(!state.ended)state.needReadable=true;// If we tried to read() past the EOF, then emit end on the next tick.
if(nOrig!==n&&state.ended)pdfkit_browser_endReadable(this);}if(ret!==null)this.emit('data',ret);return ret;};function pdfkit_browser_onEofChunk(stream,state){pdfkit_browser_debug('onEofChunk');if(state.ended)return;if(state.decoder){var chunk=state.decoder.end();if(chunk&&chunk.length){state.buffer.push(chunk);state.length+=state.objectMode?1:chunk.length;}}state.ended=true;if(state.sync){// if we are sync, wait until next tick to emit the data.
// Otherwise we risk emitting data in the flow()
// the readable code triggers during a read() call
pdfkit_browser_emitReadable(stream);}else{// emit 'readable' now to make sure it gets picked up.
state.needReadable=false;if(!state.emittedReadable){state.emittedReadable=true;pdfkit_browser_emitReadable_(stream);}}}// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function pdfkit_browser_emitReadable(stream){var state=stream._readableState;pdfkit_browser_debug('emitReadable',state.needReadable,state.emittedReadable);state.needReadable=false;if(!state.emittedReadable){pdfkit_browser_debug('emitReadable',state.flowing);state.emittedReadable=true;browser$1$1.nextTick(pdfkit_browser_emitReadable_,stream);}}function pdfkit_browser_emitReadable_(stream){var state=stream._readableState;pdfkit_browser_debug('emitReadable_',state.destroyed,state.length,state.ended);if(!state.destroyed&&(state.length||state.ended)){stream.emit('readable');state.emittedReadable=false;}// The stream needs another readable event if
// 1. It is not flowing, as the flow mechanism will take
//    care of it.
// 2. It is not ended.
// 3. It is below the highWaterMark, so we can schedule
//    another readable later.
state.needReadable=!state.flowing&&!state.ended&&state.length<=state.highWaterMark;pdfkit_browser_flow(stream);}// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function pdfkit_browser_maybeReadMore(stream,state){if(!state.readingMore){state.readingMore=true;browser$1$1.nextTick(pdfkit_browser_maybeReadMore_,stream,state);}}function pdfkit_browser_maybeReadMore_(stream,state){// Attempt to read more data if we should.
//
// The conditions for reading more data are (one of):
// - Not enough data buffered (state.length < state.highWaterMark). The loop
//   is responsible for filling the buffer with enough data if such data
//   is available. If highWaterMark is 0 and we are not in the flowing mode
//   we should _not_ attempt to buffer any extra data. We'll get more data
//   when the stream consumer calls read() instead.
// - No data in the buffer, and the stream is in flowing mode. In this mode
//   the loop below is responsible for ensuring read() is called. Failing to
//   call read here would abort the flow and there's no other mechanism for
//   continuing the flow if the stream consumer has just subscribed to the
//   'data' event.
//
// In addition to the above conditions to keep reading data, the following
// conditions prevent the data from being read:
// - The stream has ended (state.ended).
// - There is already a pending 'read' operation (state.reading). This is a
//   case where the the stream has called the implementation defined _read()
//   method, but they are processing the call asynchronously and have _not_
//   called push() with new data. In this case we skip performing more
//   read()s. The execution ends in this method again after the _read() ends
//   up calling push() with more data.
while(!state.reading&&!state.ended&&(state.length<state.highWaterMark||state.flowing&&state.length===0)){var len=state.length;pdfkit_browser_debug('maybeReadMore read 0');stream.read(0);if(len===state.length)// didn't get any data, stop spinning.
break;}state.readingMore=false;}// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
pdfkit_browser_Readable.prototype._read=function(n){errorOrDestroy$1(this,new ERR_METHOD_NOT_IMPLEMENTED$2('_read()'));};pdfkit_browser_Readable.prototype.pipe=function(dest,pipeOpts){var src=this;var state=this._readableState;switch(state.pipesCount){case 0:state.pipes=dest;break;case 1:state.pipes=[state.pipes,dest];break;default:state.pipes.push(dest);break;}state.pipesCount+=1;pdfkit_browser_debug('pipe count=%d opts=%j',state.pipesCount,pipeOpts);var doEnd=(!pipeOpts||pipeOpts.end!==false)&&dest!==browser$1$1.stdout&&dest!==browser$1$1.stderr;var endFn=doEnd?onend:unpipe;if(state.endEmitted)browser$1$1.nextTick(endFn);else src.once('end',endFn);dest.on('unpipe',onunpipe);function onunpipe(readable,unpipeInfo){pdfkit_browser_debug('onunpipe');if(readable===src){if(unpipeInfo&&unpipeInfo.hasUnpiped===false){unpipeInfo.hasUnpiped=true;cleanup();}}}function onend(){pdfkit_browser_debug('onend');dest.end();}// when the dest drains, it reduces the awaitDrain counter
// on the source.  This would be more elegant with a .once()
// handler in flow(), but adding and removing repeatedly is
// too slow.
var ondrain=pdfkit_browser_pipeOnDrain(src);dest.on('drain',ondrain);var cleanedUp=false;function cleanup(){pdfkit_browser_debug('cleanup');// cleanup event handlers once the pipe is broken
dest.removeListener('close',onclose);dest.removeListener('finish',onfinish);dest.removeListener('drain',ondrain);dest.removeListener('error',onerror);dest.removeListener('unpipe',onunpipe);src.removeListener('end',onend);src.removeListener('end',unpipe);src.removeListener('data',ondata);cleanedUp=true;// if the reader is waiting for a drain event from this
// specific writer, then it would cause it to never start
// flowing again.
// So, if this is awaiting a drain, then we just call it now.
// If we don't know, then assume that we are waiting for one.
if(state.awaitDrain&&(!dest._writableState||dest._writableState.needDrain))ondrain();}src.on('data',ondata);function ondata(chunk){pdfkit_browser_debug('ondata');var ret=dest.write(chunk);pdfkit_browser_debug('dest.write',ret);if(ret===false){// If the user unpiped during `dest.write()`, it is possible
// to get stuck in a permanently paused state if that write
// also returned false.
// => Check whether `dest` is still a piping destination.
if((state.pipesCount===1&&state.pipes===dest||state.pipesCount>1&&pdfkit_browser_indexOf(state.pipes,dest)!==-1)&&!cleanedUp){pdfkit_browser_debug('false write response, pause',state.awaitDrain);state.awaitDrain++;}src.pause();}}// if the dest has an error, then stop piping into it.
// however, don't suppress the throwing behavior for this.
function onerror(er){pdfkit_browser_debug('onerror',er);unpipe();dest.removeListener('error',onerror);if(EElistenerCount(dest,'error')===0)errorOrDestroy$1(dest,er);}// Make sure our error handler is attached before userland ones.
pdfkit_browser_prependListener(dest,'error',onerror);// Both close and finish should trigger unpipe, but only once.
function onclose(){dest.removeListener('finish',onfinish);unpipe();}dest.once('close',onclose);function onfinish(){pdfkit_browser_debug('onfinish');dest.removeListener('close',onclose);unpipe();}dest.once('finish',onfinish);function unpipe(){pdfkit_browser_debug('unpipe');src.unpipe(dest);}// tell the dest that it's being piped to
dest.emit('pipe',src);// start the flow if it hasn't been started already.
if(!state.flowing){pdfkit_browser_debug('pipe resume');src.resume();}return dest;};function pdfkit_browser_pipeOnDrain(src){return function pipeOnDrainFunctionResult(){var state=src._readableState;pdfkit_browser_debug('pipeOnDrain',state.awaitDrain);if(state.awaitDrain)state.awaitDrain--;if(state.awaitDrain===0&&EElistenerCount(src,'data')){state.flowing=true;pdfkit_browser_flow(src);}};}pdfkit_browser_Readable.prototype.unpipe=function(dest){var state=this._readableState;var unpipeInfo={hasUnpiped:false};// if we're not piping anywhere, then do nothing.
if(state.pipesCount===0)return this;// just one destination.  most common case.
if(state.pipesCount===1){// passed in one, but it's not the right one.
if(dest&&dest!==state.pipes)return this;if(!dest)dest=state.pipes;// got a match.
state.pipes=null;state.pipesCount=0;state.flowing=false;if(dest)dest.emit('unpipe',this,unpipeInfo);return this;}// slow case. multiple pipe destinations.
if(!dest){// remove all.
var dests=state.pipes;var len=state.pipesCount;state.pipes=null;state.pipesCount=0;state.flowing=false;for(var i=0;i<len;i++){dests[i].emit('unpipe',this,{hasUnpiped:false});}return this;}// try to find the right one.
var index=pdfkit_browser_indexOf(state.pipes,dest);if(index===-1)return this;state.pipes.splice(index,1);state.pipesCount-=1;if(state.pipesCount===1)state.pipes=state.pipes[0];dest.emit('unpipe',this,unpipeInfo);return this;};// set up data events if they are asked for
// Ensure readable listeners eventually get something
pdfkit_browser_Readable.prototype.on=function(ev,fn){var res=Stream$1.prototype.on.call(this,ev,fn);var state=this._readableState;if(ev==='data'){// update readableListening so that resume() may be a no-op
// a few lines down. This is needed to support once('readable').
state.readableListening=this.listenerCount('readable')>0;// Try start flowing on next tick if stream isn't explicitly paused
if(state.flowing!==false)this.resume();}else if(ev==='readable'){if(!state.endEmitted&&!state.readableListening){state.readableListening=state.needReadable=true;state.flowing=false;state.emittedReadable=false;pdfkit_browser_debug('on readable',state.length,state.reading);if(state.length){pdfkit_browser_emitReadable(this);}else if(!state.reading){browser$1$1.nextTick(pdfkit_browser_nReadingNextTick,this);}}}return res;};pdfkit_browser_Readable.prototype.addListener=pdfkit_browser_Readable.prototype.on;pdfkit_browser_Readable.prototype.removeListener=function(ev,fn){var res=Stream$1.prototype.removeListener.call(this,ev,fn);if(ev==='readable'){// We need to check if there is someone still listening to
// readable and reset the state. However this needs to happen
// after readable has been emitted but before I/O (nextTick) to
// support once('readable', fn) cycles. This means that calling
// resume within the same tick will have no
// effect.
browser$1$1.nextTick(updateReadableListening,this);}return res;};pdfkit_browser_Readable.prototype.removeAllListeners=function(ev){var res=Stream$1.prototype.removeAllListeners.apply(this,arguments);if(ev==='readable'||ev===undefined){// We need to check if there is someone still listening to
// readable and reset the state. However this needs to happen
// after readable has been emitted but before I/O (nextTick) to
// support once('readable', fn) cycles. This means that calling
// resume within the same tick will have no
// effect.
browser$1$1.nextTick(updateReadableListening,this);}return res;};function updateReadableListening(self){var state=self._readableState;state.readableListening=self.listenerCount('readable')>0;if(state.resumeScheduled&&!state.paused){// flowing needs to be set to true now, otherwise
// the upcoming resume will not flow.
state.flowing=true;// crude way to check if we should resume
}else if(self.listenerCount('data')>0){self.resume();}}function pdfkit_browser_nReadingNextTick(self){pdfkit_browser_debug('readable nexttick read 0');self.read(0);}// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
pdfkit_browser_Readable.prototype.resume=function(){var state=this._readableState;if(!state.flowing){pdfkit_browser_debug('resume');// we flow only if there is no one listening
// for readable, but we still have to call
// resume()
state.flowing=!state.readableListening;pdfkit_browser_resume(this,state);}state.paused=false;return this;};function pdfkit_browser_resume(stream,state){if(!state.resumeScheduled){state.resumeScheduled=true;browser$1$1.nextTick(pdfkit_browser_resume_,stream,state);}}function pdfkit_browser_resume_(stream,state){pdfkit_browser_debug('resume',state.reading);if(!state.reading){stream.read(0);}state.resumeScheduled=false;stream.emit('resume');pdfkit_browser_flow(stream);if(state.flowing&&!state.reading)stream.read(0);}pdfkit_browser_Readable.prototype.pause=function(){pdfkit_browser_debug('call pause flowing=%j',this._readableState.flowing);if(this._readableState.flowing!==false){pdfkit_browser_debug('pause');this._readableState.flowing=false;this.emit('pause');}this._readableState.paused=true;return this;};function pdfkit_browser_flow(stream){var state=stream._readableState;pdfkit_browser_debug('flow',state.flowing);while(state.flowing&&stream.read()!==null){}}// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
pdfkit_browser_Readable.prototype.wrap=function(stream){var _this=this;var state=this._readableState;var paused=false;stream.on('end',function(){pdfkit_browser_debug('wrapped end');if(state.decoder&&!state.ended){var chunk=state.decoder.end();if(chunk&&chunk.length)_this.push(chunk);}_this.push(null);});stream.on('data',function(chunk){pdfkit_browser_debug('wrapped data');if(state.decoder)chunk=state.decoder.write(chunk);// don't skip over falsy values in objectMode
if(state.objectMode&&(chunk===null||chunk===undefined))return;else if(!state.objectMode&&(!chunk||!chunk.length))return;var ret=_this.push(chunk);if(!ret){paused=true;stream.pause();}});// proxy all the other methods.
// important when wrapping filters and duplexes.
for(var i in stream){if(this[i]===undefined&&typeof stream[i]==='function'){this[i]=function methodWrap(method){return function methodWrapReturnFunction(){return stream[method].apply(stream,arguments);};}(i);}}// proxy certain important events.
for(var n=0;n<kProxyEvents.length;n++){stream.on(kProxyEvents[n],this.emit.bind(this,kProxyEvents[n]));}// when we try to consume some more bytes, simply unpause the
// underlying stream.
this._read=function(n){pdfkit_browser_debug('wrapped _read',n);if(paused){paused=false;stream.resume();}};return this;};if(typeof Symbol==='function'){pdfkit_browser_Readable.prototype[Symbol.asyncIterator]=function(){if(createReadableStreamAsyncIterator===undefined){createReadableStreamAsyncIterator=requireAsync_iterator();}return createReadableStreamAsyncIterator(this);};}Object.defineProperty(pdfkit_browser_Readable.prototype,'readableHighWaterMark',{// making it explicit this property is not enumerable
// because otherwise some prototype manipulation in
// userland will fail
enumerable:false,get:function get(){return this._readableState.highWaterMark;}});Object.defineProperty(pdfkit_browser_Readable.prototype,'readableBuffer',{// making it explicit this property is not enumerable
// because otherwise some prototype manipulation in
// userland will fail
enumerable:false,get:function get(){return this._readableState&&this._readableState.buffer;}});Object.defineProperty(pdfkit_browser_Readable.prototype,'readableFlowing',{// making it explicit this property is not enumerable
// because otherwise some prototype manipulation in
// userland will fail
enumerable:false,get:function get(){return this._readableState.flowing;},set:function set(state){if(this._readableState){this._readableState.flowing=state;}}});// exposed for testing purposes only.
pdfkit_browser_Readable._fromList=pdfkit_browser_fromList;Object.defineProperty(pdfkit_browser_Readable.prototype,'readableLength',{// making it explicit this property is not enumerable
// because otherwise some prototype manipulation in
// userland will fail
enumerable:false,get:function get(){return this._readableState.length;}});// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function pdfkit_browser_fromList(n,state){// nothing buffered
if(state.length===0)return null;var ret;if(state.objectMode)ret=state.buffer.shift();else if(!n||n>=state.length){// read it all, truncate the list
if(state.decoder)ret=state.buffer.join('');else if(state.buffer.length===1)ret=state.buffer.first();else ret=state.buffer.concat(state.length);state.buffer.clear();}else{// read part of list
ret=state.buffer.consume(n,state.decoder);}return ret;}function pdfkit_browser_endReadable(stream){var state=stream._readableState;pdfkit_browser_debug('endReadable',state.endEmitted);if(!state.endEmitted){state.ended=true;browser$1$1.nextTick(pdfkit_browser_endReadableNT,state,stream);}}function pdfkit_browser_endReadableNT(state,stream){pdfkit_browser_debug('endReadableNT',state.endEmitted,state.length);// Check that we didn't get one last unshift.
if(!state.endEmitted&&state.length===0){state.endEmitted=true;stream.readable=false;stream.emit('end');if(state.autoDestroy){// In case of duplex streams we need a way to detect
// if the writable side is ready for autoDestroy as well
var wState=stream._writableState;if(!wState||wState.autoDestroy&&wState.finished){stream.destroy();}}}}if(typeof Symbol==='function'){pdfkit_browser_Readable.from=function(iterable,opts){if(pdfkit_browser_from===undefined){pdfkit_browser_from=requireFromBrowser();}return pdfkit_browser_from(pdfkit_browser_Readable,iterable,opts);};}function pdfkit_browser_indexOf(xs,x){for(var i=0,l=xs.length;i<l;i++){if(xs[i]===x)return i;}return-1;}/**
 * Module exports.
 */var pdfkit_browser_browser=pdfkit_browser_deprecate;/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */function pdfkit_browser_deprecate(fn,msg){if(pdfkit_browser_config('noDeprecation')){return fn;}var warned=false;function deprecated(){if(!warned){if(pdfkit_browser_config('throwDeprecation')){throw new Error(msg);}else if(pdfkit_browser_config('traceDeprecation')){console.trace(msg);}else{console.warn(msg);}warned=true;}return fn.apply(this,arguments);}return deprecated;}/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */function pdfkit_browser_config(name){// accessing global.localStorage can trigger a DOMException in sandboxed iframes
try{if(!commonjsGlobal.localStorage)return false;}catch(_){return false;}var val=commonjsGlobal.localStorage[name];if(null==val)return false;return String(val).toLowerCase()==='true';}const Registry$3=_registry;Registry$3.Writable=pdfkit_browser_Writable;// there will be only 2 of these for each stream
function pdfkit_browser_CorkedRequest(state){var _this=this;this.next=null;this.entry=null;this.finish=function(){onCorkedFinish(_this,state);};}/* </replacement> *//*<replacement>*//*</replacement>*/pdfkit_browser_Writable.WritableState=pdfkit_browser_WritableState;/*<replacement>*/var internalUtil={deprecate:pdfkit_browser_browser};/*</replacement>*//*<replacement>*/var pdfkit_browser_Stream=streamBrowser;/*</replacement>*/var pdfkit_browser_Buffer=pdfkit_browser_require$$0.Buffer;var OurUint8Array=commonjsGlobal.Uint8Array||function(){};function _uint8ArrayToBuffer(chunk){return pdfkit_browser_Buffer.from(chunk);}function _isUint8Array(obj){return pdfkit_browser_Buffer.isBuffer(obj)||obj instanceof OurUint8Array;}var destroyImpl=destroy_1;var _require=state,getHighWaterMark=_require.getHighWaterMark;var _require$codes$2=errorsBrowser.codes,ERR_INVALID_ARG_TYPE=_require$codes$2.ERR_INVALID_ARG_TYPE,ERR_METHOD_NOT_IMPLEMENTED$1=_require$codes$2.ERR_METHOD_NOT_IMPLEMENTED,ERR_MULTIPLE_CALLBACK$1=_require$codes$2.ERR_MULTIPLE_CALLBACK,ERR_STREAM_CANNOT_PIPE=_require$codes$2.ERR_STREAM_CANNOT_PIPE,ERR_STREAM_DESTROYED$1=_require$codes$2.ERR_STREAM_DESTROYED,ERR_STREAM_NULL_VALUES=_require$codes$2.ERR_STREAM_NULL_VALUES,ERR_STREAM_WRITE_AFTER_END=_require$codes$2.ERR_STREAM_WRITE_AFTER_END,ERR_UNKNOWN_ENCODING=_require$codes$2.ERR_UNKNOWN_ENCODING;var errorOrDestroy=destroyImpl.errorOrDestroy;pdfkit_browser_require$$1(pdfkit_browser_Writable,pdfkit_browser_Stream);function pdfkit_browser_nop(){}function pdfkit_browser_WritableState(options,stream,isDuplex){options=options||{};// Duplex streams are both readable and writable, but share
// the same options object.
// However, some cases require setting options to different
// values for the readable and the writable sides of the duplex stream,
// e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
if(typeof isDuplex!=='boolean')isDuplex=stream instanceof Registry$3.Duplex;// object stream flag to indicate whether or not this stream
// contains buffers or objects.
this.objectMode=!!options.objectMode;if(isDuplex)this.objectMode=this.objectMode||!!options.writableObjectMode;// the point at which write() starts returning false
// Note: 0 is a valid value, means that we always return false if
// the entire buffer is not flushed immediately on write()
this.highWaterMark=getHighWaterMark(this,options,'writableHighWaterMark',isDuplex);// if _final has been called
this.finalCalled=false;// drain event flag.
this.needDrain=false;// at the start of calling end()
this.ending=false;// when end() has been called, and returned
this.ended=false;// when 'finish' is emitted
this.finished=false;// has it been destroyed
this.destroyed=false;// should we decode strings into buffers before passing to _write?
// this is here so that some node-core streams can optimize string
// handling at a lower level.
var noDecode=options.decodeStrings===false;this.decodeStrings=!noDecode;// Crypto is kind of old and crusty.  Historically, its default string
// encoding is 'binary' so we have to make this configurable.
// Everything else in the universe uses 'utf8', though.
this.defaultEncoding=options.defaultEncoding||'utf8';// not an actual buffer we keep track of, but a measurement
// of how much we're waiting to get pushed to some underlying
// socket or file.
this.length=0;// a flag to see when we're in the middle of a write.
this.writing=false;// when true all writes will be buffered until .uncork() call
this.corked=0;// a flag to be able to tell if the onwrite cb is called immediately,
// or on a later tick.  We set this to true at first, because any
// actions that shouldn't happen until "later" should generally also
// not happen before the first write call.
this.sync=true;// a flag to know if we're processing previously buffered items, which
// may call the _write() callback in the same tick, so that we don't
// end up in an overlapped onwrite situation.
this.bufferProcessing=false;// the callback that's passed to _write(chunk,cb)
this.onwrite=function(er){pdfkit_browser_onwrite(stream,er);};// the callback that the user supplies to write(chunk,encoding,cb)
this.writecb=null;// the amount that is being written when _write is called.
this.writelen=0;this.bufferedRequest=null;this.lastBufferedRequest=null;// number of pending user-supplied write callbacks
// this must be 0 before 'finish' can be emitted
this.pendingcb=0;// emit prefinish if the only thing we're waiting for is _write cbs
// This is relevant for synchronous Transform streams
this.prefinished=false;// True if the error was already emitted and should not be thrown again
this.errorEmitted=false;// Should close be emitted on destroy. Defaults to true.
this.emitClose=options.emitClose!==false;// Should .destroy() be called after 'finish' (and potentially 'end')
this.autoDestroy=!!options.autoDestroy;// count buffered requests
this.bufferedRequestCount=0;// allocate the first CorkedRequest, there is always
// one allocated and free to use, and we maintain at most two
this.corkedRequestsFree=new pdfkit_browser_CorkedRequest(this);}pdfkit_browser_WritableState.prototype.getBuffer=function getBuffer(){var current=this.bufferedRequest;var out=[];while(current){out.push(current);current=current.next;}return out;};(function(){try{Object.defineProperty(pdfkit_browser_WritableState.prototype,'buffer',{get:internalUtil.deprecate(function writableStateBufferGetter(){return this.getBuffer();},'_writableState.buffer is deprecated. Use _writableState.getBuffer '+'instead.','DEP0003')});}catch(_){}})();// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;if(typeof Symbol==='function'&&Symbol.hasInstance&&typeof Function.prototype[Symbol.hasInstance]==='function'){realHasInstance=Function.prototype[Symbol.hasInstance];Object.defineProperty(pdfkit_browser_Writable,Symbol.hasInstance,{value:function value(object){if(realHasInstance.call(this,object))return true;if(this!==pdfkit_browser_Writable)return false;return object&&object._writableState instanceof pdfkit_browser_WritableState;}});}else{realHasInstance=function realHasInstance(object){return object instanceof this;};}function pdfkit_browser_Writable(options){// Writable ctor is applied to Duplexes, too.
// `realHasInstance` is necessary because using plain `instanceof`
// would return false, as no `_writableState` property is attached.
// Trying to use the custom `instanceof` for Writable here will also break the
// Node.js LazyTransform implementation, which has a non-trivial getter for
// `_writableState` that would lead to infinite recursion.
// Checking for a Stream.Duplex instance is faster here instead of inside
// the WritableState constructor, at least with V8 6.5
var isDuplex=this instanceof Registry$3.Duplex;if(!isDuplex&&!realHasInstance.call(pdfkit_browser_Writable,this))return new pdfkit_browser_Writable(options);this._writableState=new pdfkit_browser_WritableState(options,this,isDuplex);// legacy.
this.writable=true;if(options){if(typeof options.write==='function')this._write=options.write;if(typeof options.writev==='function')this._writev=options.writev;if(typeof options.destroy==='function')this._destroy=options.destroy;if(typeof options.final==='function')this._final=options.final;}pdfkit_browser_Stream.call(this);}// Otherwise people can pipe Writable streams, which is just wrong.
pdfkit_browser_Writable.prototype.pipe=function(){errorOrDestroy(this,new ERR_STREAM_CANNOT_PIPE());};function pdfkit_browser_writeAfterEnd(stream,cb){var er=new ERR_STREAM_WRITE_AFTER_END();// TODO: defer error events consistently everywhere, not just the cb
errorOrDestroy(stream,er);browser$1$1.nextTick(cb,er);}// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function pdfkit_browser_validChunk(stream,state,chunk,cb){var er;if(chunk===null){er=new ERR_STREAM_NULL_VALUES();}else if(typeof chunk!=='string'&&!state.objectMode){er=new ERR_INVALID_ARG_TYPE('chunk',['string','Buffer'],chunk);}if(er){errorOrDestroy(stream,er);browser$1$1.nextTick(cb,er);return false;}return true;}pdfkit_browser_Writable.prototype.write=function(chunk,encoding,cb){var state=this._writableState;var ret=false;var isBuf=!state.objectMode&&_isUint8Array(chunk);if(isBuf&&!pdfkit_browser_Buffer.isBuffer(chunk)){chunk=_uint8ArrayToBuffer(chunk);}if(typeof encoding==='function'){cb=encoding;encoding=null;}if(isBuf)encoding='buffer';else if(!encoding)encoding=state.defaultEncoding;if(typeof cb!=='function')cb=pdfkit_browser_nop;if(state.ending)pdfkit_browser_writeAfterEnd(this,cb);else if(isBuf||pdfkit_browser_validChunk(this,state,chunk,cb)){state.pendingcb++;ret=pdfkit_browser_writeOrBuffer(this,state,isBuf,chunk,encoding,cb);}return ret;};pdfkit_browser_Writable.prototype.cork=function(){this._writableState.corked++;};pdfkit_browser_Writable.prototype.uncork=function(){var state=this._writableState;if(state.corked){state.corked--;if(!state.writing&&!state.corked&&!state.bufferProcessing&&state.bufferedRequest)pdfkit_browser_clearBuffer(this,state);}};pdfkit_browser_Writable.prototype.setDefaultEncoding=function setDefaultEncoding(encoding){// node::ParseEncoding() requires lower case.
if(typeof encoding==='string')encoding=encoding.toLowerCase();if(!(['hex','utf8','utf-8','ascii','binary','base64','ucs2','ucs-2','utf16le','utf-16le','raw'].indexOf((encoding+'').toLowerCase())>-1))throw new ERR_UNKNOWN_ENCODING(encoding);this._writableState.defaultEncoding=encoding;return this;};Object.defineProperty(pdfkit_browser_Writable.prototype,'writableBuffer',{// making it explicit this property is not enumerable
// because otherwise some prototype manipulation in
// userland will fail
enumerable:false,get:function get(){return this._writableState&&this._writableState.getBuffer();}});function pdfkit_browser_decodeChunk(state,chunk,encoding){if(!state.objectMode&&state.decodeStrings!==false&&typeof chunk==='string'){chunk=pdfkit_browser_Buffer.from(chunk,encoding);}return chunk;}Object.defineProperty(pdfkit_browser_Writable.prototype,'writableHighWaterMark',{// making it explicit this property is not enumerable
// because otherwise some prototype manipulation in
// userland will fail
enumerable:false,get:function get(){return this._writableState.highWaterMark;}});// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function pdfkit_browser_writeOrBuffer(stream,state,isBuf,chunk,encoding,cb){if(!isBuf){var newChunk=pdfkit_browser_decodeChunk(state,chunk,encoding);if(chunk!==newChunk){isBuf=true;encoding='buffer';chunk=newChunk;}}var len=state.objectMode?1:chunk.length;state.length+=len;var ret=state.length<state.highWaterMark;// we must ensure that previous needDrain will not be reset to false.
if(!ret)state.needDrain=true;if(state.writing||state.corked){var last=state.lastBufferedRequest;state.lastBufferedRequest={chunk:chunk,encoding:encoding,isBuf:isBuf,callback:cb,next:null};if(last){last.next=state.lastBufferedRequest;}else{state.bufferedRequest=state.lastBufferedRequest;}state.bufferedRequestCount+=1;}else{pdfkit_browser_doWrite(stream,state,false,len,chunk,encoding,cb);}return ret;}function pdfkit_browser_doWrite(stream,state,writev,len,chunk,encoding,cb){state.writelen=len;state.writecb=cb;state.writing=true;state.sync=true;if(state.destroyed)state.onwrite(new ERR_STREAM_DESTROYED$1('write'));else if(writev)stream._writev(chunk,state.onwrite);else stream._write(chunk,encoding,state.onwrite);state.sync=false;}function pdfkit_browser_onwriteError(stream,state,sync,er,cb){--state.pendingcb;if(sync){// defer the callback if we are being called synchronously
// to avoid piling up things on the stack
browser$1$1.nextTick(cb,er);// this can emit finish, and it will always happen
// after error
browser$1$1.nextTick(pdfkit_browser_finishMaybe,stream,state);stream._writableState.errorEmitted=true;errorOrDestroy(stream,er);}else{// the caller expect this to happen before if
// it is async
cb(er);stream._writableState.errorEmitted=true;errorOrDestroy(stream,er);// this can emit finish, but finish must
// always follow error
pdfkit_browser_finishMaybe(stream,state);}}function pdfkit_browser_onwriteStateUpdate(state){state.writing=false;state.writecb=null;state.length-=state.writelen;state.writelen=0;}function pdfkit_browser_onwrite(stream,er){var state=stream._writableState;var sync=state.sync;var cb=state.writecb;if(typeof cb!=='function')throw new ERR_MULTIPLE_CALLBACK$1();pdfkit_browser_onwriteStateUpdate(state);if(er)pdfkit_browser_onwriteError(stream,state,sync,er,cb);else{// Check if we're actually ready to finish, but don't emit yet
var finished=pdfkit_browser_needFinish(state)||stream.destroyed;if(!finished&&!state.corked&&!state.bufferProcessing&&state.bufferedRequest){pdfkit_browser_clearBuffer(stream,state);}if(sync){browser$1$1.nextTick(pdfkit_browser_afterWrite,stream,state,finished,cb);}else{pdfkit_browser_afterWrite(stream,state,finished,cb);}}}function pdfkit_browser_afterWrite(stream,state,finished,cb){if(!finished)pdfkit_browser_onwriteDrain(stream,state);state.pendingcb--;cb();pdfkit_browser_finishMaybe(stream,state);}// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function pdfkit_browser_onwriteDrain(stream,state){if(state.length===0&&state.needDrain){state.needDrain=false;stream.emit('drain');}}// if there's something in the buffer waiting, then process it
function pdfkit_browser_clearBuffer(stream,state){state.bufferProcessing=true;var entry=state.bufferedRequest;if(stream._writev&&entry&&entry.next){// Fast case, write everything using _writev()
var l=state.bufferedRequestCount;var buffer=new Array(l);var holder=state.corkedRequestsFree;holder.entry=entry;var count=0;var allBuffers=true;while(entry){buffer[count]=entry;if(!entry.isBuf)allBuffers=false;entry=entry.next;count+=1;}buffer.allBuffers=allBuffers;pdfkit_browser_doWrite(stream,state,true,state.length,buffer,'',holder.finish);// doWrite is almost always async, defer these to save a bit of time
// as the hot path ends with doWrite
state.pendingcb++;state.lastBufferedRequest=null;if(holder.next){state.corkedRequestsFree=holder.next;holder.next=null;}else{state.corkedRequestsFree=new pdfkit_browser_CorkedRequest(state);}state.bufferedRequestCount=0;}else{// Slow case, write chunks one-by-one
while(entry){var chunk=entry.chunk;var encoding=entry.encoding;var cb=entry.callback;var len=state.objectMode?1:chunk.length;pdfkit_browser_doWrite(stream,state,false,len,chunk,encoding,cb);entry=entry.next;state.bufferedRequestCount--;// if we didn't call the onwrite immediately, then
// it means that we need to wait until it does.
// also, that means that the chunk and cb are currently
// being processed, so move the buffer counter past them.
if(state.writing){break;}}if(entry===null)state.lastBufferedRequest=null;}state.bufferedRequest=entry;state.bufferProcessing=false;}pdfkit_browser_Writable.prototype._write=function(chunk,encoding,cb){cb(new ERR_METHOD_NOT_IMPLEMENTED$1('_write()'));};pdfkit_browser_Writable.prototype._writev=null;pdfkit_browser_Writable.prototype.end=function(chunk,encoding,cb){var state=this._writableState;if(typeof chunk==='function'){cb=chunk;chunk=null;encoding=null;}else if(typeof encoding==='function'){cb=encoding;encoding=null;}if(chunk!==null&&chunk!==undefined)this.write(chunk,encoding);// .end() fully uncorks
if(state.corked){state.corked=1;this.uncork();}// ignore unnecessary end() calls.
if(!state.ending)pdfkit_browser_endWritable(this,state,cb);return this;};Object.defineProperty(pdfkit_browser_Writable.prototype,'writableLength',{// making it explicit this property is not enumerable
// because otherwise some prototype manipulation in
// userland will fail
enumerable:false,get:function get(){return this._writableState.length;}});function pdfkit_browser_needFinish(state){return state.ending&&state.length===0&&state.bufferedRequest===null&&!state.finished&&!state.writing;}function callFinal(stream,state){stream._final(function(err){state.pendingcb--;if(err){errorOrDestroy(stream,err);}state.prefinished=true;stream.emit('prefinish');pdfkit_browser_finishMaybe(stream,state);});}function prefinish$1(stream,state){if(!state.prefinished&&!state.finalCalled){if(typeof stream._final==='function'&&!state.destroyed){state.pendingcb++;state.finalCalled=true;browser$1$1.nextTick(callFinal,stream,state);}else{state.prefinished=true;stream.emit('prefinish');}}}function pdfkit_browser_finishMaybe(stream,state){var need=pdfkit_browser_needFinish(state);if(need){prefinish$1(stream,state);if(state.pendingcb===0){state.finished=true;stream.emit('finish');if(state.autoDestroy){// In case of duplex streams we need a way to detect
// if the readable side is ready for autoDestroy as well
var rState=stream._readableState;if(!rState||rState.autoDestroy&&rState.endEmitted){stream.destroy();}}}}return need;}function pdfkit_browser_endWritable(stream,state,cb){state.ending=true;pdfkit_browser_finishMaybe(stream,state);if(cb){if(state.finished)browser$1$1.nextTick(cb);else stream.once('finish',cb);}state.ended=true;stream.writable=false;}function onCorkedFinish(corkReq,state,err){var entry=corkReq.entry;corkReq.entry=null;while(entry){var cb=entry.callback;state.pendingcb--;cb(err);entry=entry.next;}// reuse the free corkReq.
state.corkedRequestsFree.next=corkReq;}Object.defineProperty(pdfkit_browser_Writable.prototype,'destroyed',{// making it explicit this property is not enumerable
// because otherwise some prototype manipulation in
// userland will fail
enumerable:false,get:function get(){if(this._writableState===undefined){return false;}return this._writableState.destroyed;},set:function set(value){// we ignore the value if the stream
// has not been initialized yet
if(!this._writableState){return;}// backward compatibility, the user is explicitly
// managing destroyed
this._writableState.destroyed=value;}});pdfkit_browser_Writable.prototype.destroy=destroyImpl.destroy;pdfkit_browser_Writable.prototype._undestroy=destroyImpl.undestroy;pdfkit_browser_Writable.prototype._destroy=function(err,cb){cb(err);};/*<replacement>*/var objectKeys$1=Object.keys||function(obj){var keys=[];for(var key in obj){keys.push(key);}return keys;};/*</replacement>*/const Registry$2=_registry;Registry$2.Duplex=pdfkit_browser_Duplex;pdfkit_browser_require$$1(pdfkit_browser_Duplex,Registry$2.Readable);{// Allow the keys array to be GC'ed.
var pdfkit_browser_keys=objectKeys$1(Registry$2.Writable.prototype);for(var pdfkit_browser_v=0;pdfkit_browser_v<pdfkit_browser_keys.length;pdfkit_browser_v++){var pdfkit_browser_method=pdfkit_browser_keys[pdfkit_browser_v];if(!pdfkit_browser_Duplex.prototype[pdfkit_browser_method])pdfkit_browser_Duplex.prototype[pdfkit_browser_method]=Registry$2.Writable.prototype[pdfkit_browser_method];}}function pdfkit_browser_Duplex(options){if(!(this instanceof pdfkit_browser_Duplex))return new pdfkit_browser_Duplex(options);Registry$2.Readable.call(this,options);Registry$2.Writable.call(this,options);this.allowHalfOpen=true;if(options){if(options.readable===false)this.readable=false;if(options.writable===false)this.writable=false;if(options.allowHalfOpen===false){this.allowHalfOpen=false;this.once('end',pdfkit_browser_onend);}}}Object.defineProperty(pdfkit_browser_Duplex.prototype,'writableHighWaterMark',{// making it explicit this property is not enumerable
// because otherwise some prototype manipulation in
// userland will fail
enumerable:false,get:function get(){return this._writableState.highWaterMark;}});Object.defineProperty(pdfkit_browser_Duplex.prototype,'writableBuffer',{// making it explicit this property is not enumerable
// because otherwise some prototype manipulation in
// userland will fail
enumerable:false,get:function get(){return this._writableState&&this._writableState.getBuffer();}});Object.defineProperty(pdfkit_browser_Duplex.prototype,'writableLength',{// making it explicit this property is not enumerable
// because otherwise some prototype manipulation in
// userland will fail
enumerable:false,get:function get(){return this._writableState.length;}});// the no-half-open enforcer
function pdfkit_browser_onend(){// If the writable side ended, then we're ok.
if(this._writableState.ended)return;// no more data can be written.
// But allow more writes to happen in this tick.
browser$1$1.nextTick(pdfkit_browser_onEndNT,this);}function pdfkit_browser_onEndNT(self){self.end();}Object.defineProperty(pdfkit_browser_Duplex.prototype,'destroyed',{// making it explicit this property is not enumerable
// because otherwise some prototype manipulation in
// userland will fail
enumerable:false,get:function get(){if(this._readableState===undefined||this._writableState===undefined){return false;}return this._readableState.destroyed&&this._writableState.destroyed;},set:function set(value){// we ignore the value if the stream
// has not been initialized yet
if(this._readableState===undefined||this._writableState===undefined){return;}// backward compatibility, the user is explicitly
// managing destroyed
this._readableState.destroyed=value;this._writableState.destroyed=value;}});const Registry$1=_registry;Registry$1.Transform=Transform$1;var _require$codes$1=errorsBrowser.codes,ERR_METHOD_NOT_IMPLEMENTED=_require$codes$1.ERR_METHOD_NOT_IMPLEMENTED,ERR_MULTIPLE_CALLBACK=_require$codes$1.ERR_MULTIPLE_CALLBACK,ERR_TRANSFORM_ALREADY_TRANSFORMING=_require$codes$1.ERR_TRANSFORM_ALREADY_TRANSFORMING,ERR_TRANSFORM_WITH_LENGTH_0=_require$codes$1.ERR_TRANSFORM_WITH_LENGTH_0;pdfkit_browser_require$$1(Transform$1,Registry$1.Duplex);function pdfkit_browser_afterTransform(er,data){var ts=this._transformState;ts.transforming=false;var cb=ts.writecb;if(cb===null){return this.emit('error',new ERR_MULTIPLE_CALLBACK());}ts.writechunk=null;ts.writecb=null;if(data!=null)// single equals check for both `null` and `undefined`
this.push(data);cb(er);var rs=this._readableState;rs.reading=false;if(rs.needReadable||rs.length<rs.highWaterMark){this._read(rs.highWaterMark);}}function Transform$1(options){if(!(this instanceof Transform$1))return new Transform$1(options);Registry$1.Duplex.call(this,options);this._transformState={afterTransform:pdfkit_browser_afterTransform.bind(this),needTransform:false,transforming:false,writecb:null,writechunk:null,writeencoding:null};// start out asking for a readable event once data is transformed.
this._readableState.needReadable=true;// we have implemented the _read method, and done the other things
// that Readable wants before the first _read call, so unset the
// sync guard flag.
this._readableState.sync=false;if(options){if(typeof options.transform==='function')this._transform=options.transform;if(typeof options.flush==='function')this._flush=options.flush;}// When the writable side finishes, then flush out anything remaining.
this.on('prefinish',pdfkit_browser_prefinish);}function pdfkit_browser_prefinish(){var _this=this;if(typeof this._flush==='function'&&!this._readableState.destroyed){this._flush(function(er,data){pdfkit_browser_done(_this,er,data);});}else{pdfkit_browser_done(this,null,null);}}Transform$1.prototype.push=function(chunk,encoding){this._transformState.needTransform=false;return Registry$1.Duplex.prototype.push.call(this,chunk,encoding);};// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform$1.prototype._transform=function(chunk,encoding,cb){cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));};Transform$1.prototype._write=function(chunk,encoding,cb){var ts=this._transformState;ts.writecb=cb;ts.writechunk=chunk;ts.writeencoding=encoding;if(!ts.transforming){var rs=this._readableState;if(ts.needTransform||rs.needReadable||rs.length<rs.highWaterMark)this._read(rs.highWaterMark);}};// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform$1.prototype._read=function(n){var ts=this._transformState;if(ts.writechunk!==null&&!ts.transforming){ts.transforming=true;this._transform(ts.writechunk,ts.writeencoding,ts.afterTransform);}else{// mark that we need a transform, so that any data that comes in
// will get processed, now that we've asked for it.
ts.needTransform=true;}};Transform$1.prototype._destroy=function(err,cb){Registry$1.Duplex.prototype._destroy.call(this,err,function(err2){cb(err2);});};function pdfkit_browser_done(stream,er,data){if(er)return stream.emit('error',er);if(data!=null)// single equals check for both `null` and `undefined`
stream.push(data);// TODO(BridgeAR): Write a test for these two error cases
// if there's nothing in the write buffer, then that means
// that nothing more will ever be provided
if(stream._writableState.length)throw new ERR_TRANSFORM_WITH_LENGTH_0();if(stream._transformState.transforming)throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();return stream.push(null);}const Registry=_registry;Registry.PassThrough=pdfkit_browser_PassThrough;pdfkit_browser_require$$1(pdfkit_browser_PassThrough,Registry.Transform);function pdfkit_browser_PassThrough(options){if(!(this instanceof pdfkit_browser_PassThrough))return new pdfkit_browser_PassThrough(options);Transform.call(this,options);}pdfkit_browser_PassThrough.prototype._transform=function(chunk,encoding,cb){cb(null,chunk);};var eos;function pdfkit_browser_once(callback){var called=false;return function(){if(called)return;called=true;callback.apply(void 0,arguments);};}var _require$codes=errorsBrowser.codes,ERR_MISSING_ARGS=_require$codes.ERR_MISSING_ARGS,ERR_STREAM_DESTROYED=_require$codes.ERR_STREAM_DESTROYED;function pdfkit_browser_noop(err){// Rethrow the error if it exists to avoid swallowing it
if(err)throw err;}function isRequest(stream){return stream.setHeader&&typeof stream.abort==='function';}function destroyer(stream,reading,writing,callback){callback=pdfkit_browser_once(callback);var closed=false;stream.on('close',function(){closed=true;});if(eos===undefined)eos=endOfStream;eos(stream,{readable:reading,writable:writing},function(err){if(err)return callback(err);closed=true;callback();});var destroyed=false;return function(err){if(closed)return;if(destroyed)return;destroyed=true;// request.destroy just do .end - .abort is what we want
if(isRequest(stream))return stream.abort();if(typeof stream.destroy==='function')return stream.destroy();callback(err||new ERR_STREAM_DESTROYED('pipe'));};}function call(fn){fn();}function pipe(from,to){return from.pipe(to);}function popCallback(streams){if(!streams.length)return pdfkit_browser_noop;if(typeof streams[streams.length-1]!=='function')return pdfkit_browser_noop;return streams.pop();}function pipeline(){for(var _len=arguments.length,streams=new Array(_len),_key=0;_key<_len;_key++){streams[_key]=arguments[_key];}var callback=popCallback(streams);if(Array.isArray(streams[0]))streams=streams[0];if(streams.length<2){throw new ERR_MISSING_ARGS('streams');}var error;var destroys=streams.map(function(stream,i){var reading=i<streams.length-1;var writing=i>0;return destroyer(stream,reading,writing,function(err){if(!error)error=err;if(err)destroys.forEach(call);if(reading)return;destroys.forEach(call);callback(error);});});return streams.reduce(pipe);}var pipeline_1=pipeline;(function(module,exports){const Registry=_registry;exports=module.exports=Registry.Readable;exports.Stream=Registry.Readable;exports.Readable=Registry.Readable;exports.Writable=Registry.Writable;exports.Duplex=Registry.Duplex;exports.Transform=Registry.Transform;exports.PassThrough=Registry.PassThrough;exports.finished=endOfStream;exports.pipeline=pipeline_1;})(readableBrowser,readableBrowser.exports);var readableBrowserExports=readableBrowser.exports;var stream=/*@__PURE__*/pdfkit_browser_getDefaultExportFromCjs(readableBrowserExports);var pdfkit_browser_lib={};var pdfkit_browser_binding={};function pdfkit_browser_compare(a,b){if(a===b){return 0;}var x=a.length;var y=b.length;for(var i=0,len=Math.min(x,y);i<len;++i){if(a[i]!==b[i]){x=a[i];y=b[i];break;}}if(x<y){return-1;}if(y<x){return 1;}return 0;}var pdfkit_browser_hasOwn=Object.prototype.hasOwnProperty;var pdfkit_browser_objectKeys=Object.keys||function(obj){var keys=[];for(var key in obj){if(pdfkit_browser_hasOwn.call(obj,key))keys.push(key);}return keys;};var pdfkit_browser_pSlice=Array.prototype.slice;var pdfkit_browser_functionsHaveNames;function lib_pdfkit_browser_functionsHaveNames(){if(typeof pdfkit_browser_functionsHaveNames!=='undefined'){return pdfkit_browser_functionsHaveNames;}return pdfkit_browser_functionsHaveNames=function(){return function foo(){}.name==='foo';}();}function pdfkit_browser_pToString(obj){return Object.prototype.toString.call(obj);}function pdfkit_browser_isView(arrbuf){if(pdfkit_browser_isBuffer$1(arrbuf)){return false;}if(typeof pdfkit_browser_global$1.ArrayBuffer!=='function'){return false;}if(typeof ArrayBuffer.isView==='function'){return ArrayBuffer.isView(arrbuf);}if(!arrbuf){return false;}if(arrbuf instanceof DataView){return true;}if(arrbuf.buffer&&arrbuf.buffer instanceof ArrayBuffer){return true;}return false;}// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.
function pdfkit_browser_assert(value,message){if(!value)pdfkit_browser_fail(value,true,message,'==',pdfkit_browser_ok);}// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })
var pdfkit_browser_regex=/\s*function\s+([^\(\s]*)\s*/;// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
function pdfkit_browser_getName(func){if(!pdfkit_browser_isFunction(func)){return;}if(lib_pdfkit_browser_functionsHaveNames()){return func.name;}var str=func.toString();var match=str.match(pdfkit_browser_regex);return match&&match[1];}pdfkit_browser_assert.AssertionError=pdfkit_browser_AssertionError;function pdfkit_browser_AssertionError(options){this.name='AssertionError';this.actual=options.actual;this.expected=options.expected;this.operator=options.operator;if(options.message){this.message=options.message;this.generatedMessage=false;}else{this.message=pdfkit_browser_getMessage(this);this.generatedMessage=true;}var stackStartFunction=options.stackStartFunction||pdfkit_browser_fail;if(Error.captureStackTrace){Error.captureStackTrace(this,stackStartFunction);}else{// non v8 browsers so we can have a stacktrace
var err=new Error();if(err.stack){var out=err.stack;// try to strip useless frames
var fn_name=pdfkit_browser_getName(stackStartFunction);var idx=out.indexOf('\n'+fn_name);if(idx>=0){// once we have located the function frame
// we need to strip out everything before it (and its line)
var next_line=out.indexOf('\n',idx+1);out=out.substring(next_line+1);}this.stack=out;}}}// assert.AssertionError instanceof Error
inherits$3(pdfkit_browser_AssertionError,Error);function pdfkit_browser_truncate(s,n){if(typeof s==='string'){return s.length<n?s:s.slice(0,n);}else{return s;}}function pdfkit_browser_inspect(something){if(lib_pdfkit_browser_functionsHaveNames()||!pdfkit_browser_isFunction(something)){return pdfkit_browser_inspect$1(something);}var rawname=pdfkit_browser_getName(something);var name=rawname?': '+rawname:'';return'[Function'+name+']';}function pdfkit_browser_getMessage(self){return pdfkit_browser_truncate(pdfkit_browser_inspect(self.actual),128)+' '+self.operator+' '+pdfkit_browser_truncate(pdfkit_browser_inspect(self.expected),128);}// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.
// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.
function pdfkit_browser_fail(actual,expected,message,operator,stackStartFunction){throw new pdfkit_browser_AssertionError({message:message,actual:actual,expected:expected,operator:operator,stackStartFunction:stackStartFunction});}// EXTENSION! allows for well behaved errors defined elsewhere.
pdfkit_browser_assert.fail=pdfkit_browser_fail;// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.
function pdfkit_browser_ok(value,message){if(!value)pdfkit_browser_fail(value,true,message,'==',pdfkit_browser_ok);}pdfkit_browser_assert.ok=pdfkit_browser_ok;// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);
pdfkit_browser_assert.equal=pdfkit_browser_equal;function pdfkit_browser_equal(actual,expected,message){if(actual!=expected)pdfkit_browser_fail(actual,expected,message,'==',pdfkit_browser_equal);}// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);
pdfkit_browser_assert.notEqual=pdfkit_browser_notEqual;function pdfkit_browser_notEqual(actual,expected,message){if(actual==expected){pdfkit_browser_fail(actual,expected,message,'!=',pdfkit_browser_notEqual);}}// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);
pdfkit_browser_assert.deepEqual=pdfkit_browser_deepEqual;function pdfkit_browser_deepEqual(actual,expected,message){if(!lib_pdfkit_browser_deepEqual(actual,expected,false)){pdfkit_browser_fail(actual,expected,message,'deepEqual',pdfkit_browser_deepEqual);}}pdfkit_browser_assert.deepStrictEqual=pdfkit_browser_deepStrictEqual;function pdfkit_browser_deepStrictEqual(actual,expected,message){if(!lib_pdfkit_browser_deepEqual(actual,expected,true)){pdfkit_browser_fail(actual,expected,message,'deepStrictEqual',pdfkit_browser_deepStrictEqual);}}function lib_pdfkit_browser_deepEqual(actual,expected,strict,memos){// 7.1. All identical values are equivalent, as determined by ===.
if(actual===expected){return true;}else if(pdfkit_browser_isBuffer$1(actual)&&pdfkit_browser_isBuffer$1(expected)){return pdfkit_browser_compare(actual,expected)===0;// 7.2. If the expected value is a Date object, the actual value is
// equivalent if it is also a Date object that refers to the same time.
}else if(pdfkit_browser_isDate(actual)&&pdfkit_browser_isDate(expected)){return actual.getTime()===expected.getTime();// 7.3 If the expected value is a RegExp object, the actual value is
// equivalent if it is also a RegExp object with the same source and
// properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
}else if(pdfkit_browser_isRegExp(actual)&&pdfkit_browser_isRegExp(expected)){return actual.source===expected.source&&actual.global===expected.global&&actual.multiline===expected.multiline&&actual.lastIndex===expected.lastIndex&&actual.ignoreCase===expected.ignoreCase;// 7.4. Other pairs that do not both pass typeof value == 'object',
// equivalence is determined by ==.
}else if((actual===null||typeof actual!=='object')&&(expected===null||typeof expected!=='object')){return strict?actual===expected:actual==expected;// If both values are instances of typed arrays, wrap their underlying
// ArrayBuffers in a Buffer each to increase performance
// This optimization requires the arrays to have the same type as checked by
// Object.prototype.toString (aka pToString). Never perform binary
// comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
// bit patterns are not identical.
}else if(pdfkit_browser_isView(actual)&&pdfkit_browser_isView(expected)&&pdfkit_browser_pToString(actual)===pdfkit_browser_pToString(expected)&&!(actual instanceof Float32Array||actual instanceof Float64Array)){return pdfkit_browser_compare(new Uint8Array(actual.buffer),new Uint8Array(expected.buffer))===0;// 7.5 For all other Object pairs, including Array objects, equivalence is
// determined by having the same number of owned properties (as verified
// with Object.prototype.hasOwnProperty.call), the same set of keys
// (although not necessarily the same order), equivalent values for every
// corresponding key, and an identical 'prototype' property. Note: this
// accounts for both named and indexed properties on Arrays.
}else if(pdfkit_browser_isBuffer$1(actual)!==pdfkit_browser_isBuffer$1(expected)){return false;}else{memos=memos||{actual:[],expected:[]};var actualIndex=memos.actual.indexOf(actual);if(actualIndex!==-1){if(actualIndex===memos.expected.indexOf(expected)){return true;}}memos.actual.push(actual);memos.expected.push(expected);return pdfkit_browser_objEquiv(actual,expected,strict,memos);}}function pdfkit_browser_isArguments(object){return Object.prototype.toString.call(object)=='[object Arguments]';}function pdfkit_browser_objEquiv(a,b,strict,actualVisitedObjects){if(a===null||a===undefined||b===null||b===undefined)return false;// if one is a primitive, the other must be same
if(pdfkit_browser_isPrimitive(a)||pdfkit_browser_isPrimitive(b))return a===b;if(strict&&Object.getPrototypeOf(a)!==Object.getPrototypeOf(b))return false;var aIsArgs=pdfkit_browser_isArguments(a);var bIsArgs=pdfkit_browser_isArguments(b);if(aIsArgs&&!bIsArgs||!aIsArgs&&bIsArgs)return false;if(aIsArgs){a=pdfkit_browser_pSlice.call(a);b=pdfkit_browser_pSlice.call(b);return lib_pdfkit_browser_deepEqual(a,b,strict);}var ka=pdfkit_browser_objectKeys(a);var kb=pdfkit_browser_objectKeys(b);var key,i;// having the same number of owned properties (keys incorporates
// hasOwnProperty)
if(ka.length!==kb.length)return false;//the same set of keys (although not necessarily the same order),
ka.sort();kb.sort();//~~~cheap key test
for(i=ka.length-1;i>=0;i--){if(ka[i]!==kb[i])return false;}//equivalent values for every corresponding key, and
//~~~possibly expensive deep test
for(i=ka.length-1;i>=0;i--){key=ka[i];if(!lib_pdfkit_browser_deepEqual(a[key],b[key],strict,actualVisitedObjects))return false;}return true;}// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);
pdfkit_browser_assert.notDeepEqual=pdfkit_browser_notDeepEqual;function pdfkit_browser_notDeepEqual(actual,expected,message){if(lib_pdfkit_browser_deepEqual(actual,expected,false)){pdfkit_browser_fail(actual,expected,message,'notDeepEqual',pdfkit_browser_notDeepEqual);}}pdfkit_browser_assert.notDeepStrictEqual=pdfkit_browser_notDeepStrictEqual;function pdfkit_browser_notDeepStrictEqual(actual,expected,message){if(lib_pdfkit_browser_deepEqual(actual,expected,true)){pdfkit_browser_fail(actual,expected,message,'notDeepStrictEqual',pdfkit_browser_notDeepStrictEqual);}}// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);
pdfkit_browser_assert.strictEqual=pdfkit_browser_strictEqual;function pdfkit_browser_strictEqual(actual,expected,message){if(actual!==expected){pdfkit_browser_fail(actual,expected,message,'===',pdfkit_browser_strictEqual);}}// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);
pdfkit_browser_assert.notStrictEqual=pdfkit_browser_notStrictEqual;function pdfkit_browser_notStrictEqual(actual,expected,message){if(actual===expected){pdfkit_browser_fail(actual,expected,message,'!==',pdfkit_browser_notStrictEqual);}}function pdfkit_browser_expectedException(actual,expected){if(!actual||!expected){return false;}if(Object.prototype.toString.call(expected)=='[object RegExp]'){return expected.test(actual);}try{if(actual instanceof expected){return true;}}catch(e){// Ignore.  The instanceof check doesn't work for arrow functions.
}if(Error.isPrototypeOf(expected)){return false;}return expected.call({},actual)===true;}function pdfkit_browser_tryBlock(block){var error;try{block();}catch(e){error=e;}return error;}function pdfkit_browser_throws(shouldThrow,block,expected,message){var actual;if(typeof block!=='function'){throw new TypeError('"block" argument must be a function');}if(typeof expected==='string'){message=expected;expected=null;}actual=pdfkit_browser_tryBlock(block);message=(expected&&expected.name?' ('+expected.name+').':'.')+(message?' '+message:'.');if(shouldThrow&&!actual){pdfkit_browser_fail(actual,expected,'Missing expected exception'+message);}var userProvidedMessage=typeof message==='string';var isUnwantedException=!shouldThrow&&pdfkit_browser_isError(actual);var isUnexpectedException=!shouldThrow&&actual&&!expected;if(isUnwantedException&&userProvidedMessage&&pdfkit_browser_expectedException(actual,expected)||isUnexpectedException){pdfkit_browser_fail(actual,expected,'Got unwanted exception'+message);}if(shouldThrow&&actual&&expected&&!pdfkit_browser_expectedException(actual,expected)||!shouldThrow&&actual){throw actual;}}// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);
pdfkit_browser_assert.throws=lib_pdfkit_browser_throws;function lib_pdfkit_browser_throws(block,/*optional*/error,/*optional*/message){pdfkit_browser_throws(true,block,error,message);}// EXTENSION! This is annoying to write outside this module.
pdfkit_browser_assert.doesNotThrow=pdfkit_browser_doesNotThrow;function pdfkit_browser_doesNotThrow(block,/*optional*/error,/*optional*/message){pdfkit_browser_throws(false,block,error,message);}pdfkit_browser_assert.ifError=pdfkit_browser_ifError;function pdfkit_browser_ifError(err){if(err)throw err;}var pdfkit_browser_polyfillNode_assert=/*#__PURE__*/Object.freeze({__proto__:null,AssertionError:pdfkit_browser_AssertionError,assert:pdfkit_browser_ok,deepEqual:pdfkit_browser_deepEqual,deepStrictEqual:pdfkit_browser_deepStrictEqual,default:pdfkit_browser_assert,doesNotThrow:pdfkit_browser_doesNotThrow,equal:pdfkit_browser_equal,fail:pdfkit_browser_fail,ifError:pdfkit_browser_ifError,notDeepEqual:pdfkit_browser_notDeepEqual,notDeepStrictEqual:pdfkit_browser_notDeepStrictEqual,notEqual:pdfkit_browser_notEqual,notStrictEqual:pdfkit_browser_notStrictEqual,ok:pdfkit_browser_ok,strictEqual:pdfkit_browser_strictEqual,throws:lib_pdfkit_browser_throws});var pdfkit_browser_require$$4=/*@__PURE__*/pdfkit_browser_getAugmentedNamespace(pdfkit_browser_polyfillNode_assert);(function(exports){/* eslint camelcase: "off" */var assert=pdfkit_browser_require$$4;var Zstream=zstream;var zlib_deflate=deflate;var zlib_inflate=inflate;var constants=zlib_constants;for(var key in constants){exports[key]=constants[key];}// zlib modes
exports.NONE=0;exports.DEFLATE=1;exports.INFLATE=2;exports.GZIP=3;exports.GUNZIP=4;exports.DEFLATERAW=5;exports.INFLATERAW=6;exports.UNZIP=7;var GZIP_HEADER_ID1=0x1f;var GZIP_HEADER_ID2=0x8b;/**
   * Emulate Node's zlib C++ layer for use by the JS layer in index.js
   */function Zlib(mode){if(typeof mode!=='number'||mode<exports.DEFLATE||mode>exports.UNZIP){throw new TypeError('Bad argument');}this.dictionary=null;this.err=0;this.flush=0;this.init_done=false;this.level=0;this.memLevel=0;this.mode=mode;this.strategy=0;this.windowBits=0;this.write_in_progress=false;this.pending_close=false;this.gzip_id_bytes_read=0;}Zlib.prototype.close=function(){if(this.write_in_progress){this.pending_close=true;return;}this.pending_close=false;assert(this.init_done,'close before init');assert(this.mode<=exports.UNZIP);if(this.mode===exports.DEFLATE||this.mode===exports.GZIP||this.mode===exports.DEFLATERAW){zlib_deflate.deflateEnd(this.strm);}else if(this.mode===exports.INFLATE||this.mode===exports.GUNZIP||this.mode===exports.INFLATERAW||this.mode===exports.UNZIP){zlib_inflate.inflateEnd(this.strm);}this.mode=exports.NONE;this.dictionary=null;};Zlib.prototype.write=function(flush,input,in_off,in_len,out,out_off,out_len){return this._write(true,flush,input,in_off,in_len,out,out_off,out_len);};Zlib.prototype.writeSync=function(flush,input,in_off,in_len,out,out_off,out_len){return this._write(false,flush,input,in_off,in_len,out,out_off,out_len);};Zlib.prototype._write=function(async,flush,input,in_off,in_len,out,out_off,out_len){assert.equal(arguments.length,8);assert(this.init_done,'write before init');assert(this.mode!==exports.NONE,'already finalized');assert.equal(false,this.write_in_progress,'write already in progress');assert.equal(false,this.pending_close,'close is pending');this.write_in_progress=true;assert.equal(false,flush===undefined,'must provide flush value');this.write_in_progress=true;if(flush!==exports.Z_NO_FLUSH&&flush!==exports.Z_PARTIAL_FLUSH&&flush!==exports.Z_SYNC_FLUSH&&flush!==exports.Z_FULL_FLUSH&&flush!==exports.Z_FINISH&&flush!==exports.Z_BLOCK){throw new Error('Invalid flush value');}if(input==null){input=Buffer$2.alloc(0);in_len=0;in_off=0;}this.strm.avail_in=in_len;this.strm.input=input;this.strm.next_in=in_off;this.strm.avail_out=out_len;this.strm.output=out;this.strm.next_out=out_off;this.flush=flush;if(!async){// sync version
this._process();if(this._checkError()){return this._afterSync();}return;}// async version
var self=this;browser$1$1.nextTick(function(){self._process();self._after();});return this;};Zlib.prototype._afterSync=function(){var avail_out=this.strm.avail_out;var avail_in=this.strm.avail_in;this.write_in_progress=false;return[avail_in,avail_out];};Zlib.prototype._process=function(){var next_expected_header_byte=null;// If the avail_out is left at 0, then it means that it ran out
// of room.  If there was avail_out left over, then it means
// that all of the input was consumed.
switch(this.mode){case exports.DEFLATE:case exports.GZIP:case exports.DEFLATERAW:this.err=zlib_deflate.deflate(this.strm,this.flush);break;case exports.UNZIP:if(this.strm.avail_in>0){next_expected_header_byte=this.strm.next_in;}switch(this.gzip_id_bytes_read){case 0:if(next_expected_header_byte===null){break;}if(this.strm.input[next_expected_header_byte]===GZIP_HEADER_ID1){this.gzip_id_bytes_read=1;next_expected_header_byte++;if(this.strm.avail_in===1){// The only available byte was already read.
break;}}else{this.mode=exports.INFLATE;break;}// fallthrough
case 1:if(next_expected_header_byte===null){break;}if(this.strm.input[next_expected_header_byte]===GZIP_HEADER_ID2){this.gzip_id_bytes_read=2;this.mode=exports.GUNZIP;}else{// There is no actual difference between INFLATE and INFLATERAW
// (after initialization).
this.mode=exports.INFLATE;}break;default:throw new Error('invalid number of gzip magic number bytes read');}// fallthrough
case exports.INFLATE:case exports.GUNZIP:case exports.INFLATERAW:this.err=zlib_inflate.inflate(this.strm,this.flush// If data was encoded with dictionary
);if(this.err===exports.Z_NEED_DICT&&this.dictionary){// Load it
this.err=zlib_inflate.inflateSetDictionary(this.strm,this.dictionary);if(this.err===exports.Z_OK){// And try to decode again
this.err=zlib_inflate.inflate(this.strm,this.flush);}else if(this.err===exports.Z_DATA_ERROR){// Both inflateSetDictionary() and inflate() return Z_DATA_ERROR.
// Make it possible for After() to tell a bad dictionary from bad
// input.
this.err=exports.Z_NEED_DICT;}}while(this.strm.avail_in>0&&this.mode===exports.GUNZIP&&this.err===exports.Z_STREAM_END&&this.strm.next_in[0]!==0x00){// Bytes remain in input buffer. Perhaps this is another compressed
// member in the same archive, or just trailing garbage.
// Trailing zero bytes are okay, though, since they are frequently
// used for padding.
this.reset();this.err=zlib_inflate.inflate(this.strm,this.flush);}break;default:throw new Error('Unknown mode '+this.mode);}};Zlib.prototype._checkError=function(){// Acceptable error states depend on the type of zlib stream.
switch(this.err){case exports.Z_OK:case exports.Z_BUF_ERROR:if(this.strm.avail_out!==0&&this.flush===exports.Z_FINISH){this._error('unexpected end of file');return false;}break;case exports.Z_STREAM_END:// normal statuses, not fatal
break;case exports.Z_NEED_DICT:if(this.dictionary==null){this._error('Missing dictionary');}else{this._error('Bad dictionary');}return false;default:// something else.
this._error('Zlib error');return false;}return true;};Zlib.prototype._after=function(){if(!this._checkError()){return;}var avail_out=this.strm.avail_out;var avail_in=this.strm.avail_in;this.write_in_progress=false;// call the write() cb
this.callback(avail_in,avail_out);if(this.pending_close){this.close();}};Zlib.prototype._error=function(message){if(this.strm.msg){message=this.strm.msg;}this.onerror(message,this.err// no hope of rescue.
);this.write_in_progress=false;if(this.pending_close){this.close();}};Zlib.prototype.init=function(windowBits,level,memLevel,strategy,dictionary){assert(arguments.length===4||arguments.length===5,'init(windowBits, level, memLevel, strategy, [dictionary])');assert(windowBits>=8&&windowBits<=15,'invalid windowBits');assert(level>=-1&&level<=9,'invalid compression level');assert(memLevel>=1&&memLevel<=9,'invalid memlevel');assert(strategy===exports.Z_FILTERED||strategy===exports.Z_HUFFMAN_ONLY||strategy===exports.Z_RLE||strategy===exports.Z_FIXED||strategy===exports.Z_DEFAULT_STRATEGY,'invalid strategy');this._init(level,windowBits,memLevel,strategy,dictionary);this._setDictionary();};Zlib.prototype.params=function(){throw new Error('deflateParams Not supported');};Zlib.prototype.reset=function(){this._reset();this._setDictionary();};Zlib.prototype._init=function(level,windowBits,memLevel,strategy,dictionary){this.level=level;this.windowBits=windowBits;this.memLevel=memLevel;this.strategy=strategy;this.flush=exports.Z_NO_FLUSH;this.err=exports.Z_OK;if(this.mode===exports.GZIP||this.mode===exports.GUNZIP){this.windowBits+=16;}if(this.mode===exports.UNZIP){this.windowBits+=32;}if(this.mode===exports.DEFLATERAW||this.mode===exports.INFLATERAW){this.windowBits=-1*this.windowBits;}this.strm=new Zstream();switch(this.mode){case exports.DEFLATE:case exports.GZIP:case exports.DEFLATERAW:this.err=zlib_deflate.deflateInit2(this.strm,this.level,exports.Z_DEFLATED,this.windowBits,this.memLevel,this.strategy);break;case exports.INFLATE:case exports.GUNZIP:case exports.INFLATERAW:case exports.UNZIP:this.err=zlib_inflate.inflateInit2(this.strm,this.windowBits);break;default:throw new Error('Unknown mode '+this.mode);}if(this.err!==exports.Z_OK){this._error('Init error');}this.dictionary=dictionary;this.write_in_progress=false;this.init_done=true;};Zlib.prototype._setDictionary=function(){if(this.dictionary==null){return;}this.err=exports.Z_OK;switch(this.mode){case exports.DEFLATE:case exports.DEFLATERAW:this.err=zlib_deflate.deflateSetDictionary(this.strm,this.dictionary);break;}if(this.err!==exports.Z_OK){this._error('Failed to set dictionary');}};Zlib.prototype._reset=function(){this.err=exports.Z_OK;switch(this.mode){case exports.DEFLATE:case exports.DEFLATERAW:case exports.GZIP:this.err=zlib_deflate.deflateReset(this.strm);break;case exports.INFLATE:case exports.INFLATERAW:case exports.GUNZIP:this.err=zlib_inflate.inflateReset(this.strm);break;}if(this.err!==exports.Z_OK){this._error('Failed to reset stream');}};exports.Zlib=Zlib;})(pdfkit_browser_binding);(function(exports){var Buffer=pdfkit_browser_require$$0.Buffer;var Transform=readableBrowserExports.Transform;var binding$1=pdfkit_browser_binding;var util=pdfkit_browser_require$$3;var assert=pdfkit_browser_require$$4.ok;var kMaxLength=pdfkit_browser_require$$0.kMaxLength;var kRangeErrorMessage='Cannot create final Buffer. It would be larger '+'than 0x'+kMaxLength.toString(16)+' bytes';// zlib doesn't provide these, so kludge them in following the same
// const naming scheme zlib uses.
binding$1.Z_MIN_WINDOWBITS=8;binding$1.Z_MAX_WINDOWBITS=15;binding$1.Z_DEFAULT_WINDOWBITS=15;// fewer than 64 bytes per chunk is stupid.
// technically it could work with as few as 8, but even 64 bytes
// is absurdly low.  Usually a MB or more is best.
binding$1.Z_MIN_CHUNK=64;binding$1.Z_MAX_CHUNK=Infinity;binding$1.Z_DEFAULT_CHUNK=16*1024;binding$1.Z_MIN_MEMLEVEL=1;binding$1.Z_MAX_MEMLEVEL=9;binding$1.Z_DEFAULT_MEMLEVEL=8;binding$1.Z_MIN_LEVEL=-1;binding$1.Z_MAX_LEVEL=9;binding$1.Z_DEFAULT_LEVEL=binding$1.Z_DEFAULT_COMPRESSION;// expose all the zlib constants
var bkeys=Object.keys(binding$1);for(var bk=0;bk<bkeys.length;bk++){var bkey=bkeys[bk];if(bkey.match(/^Z/)){Object.defineProperty(exports,bkey,{enumerable:true,value:binding$1[bkey],writable:false});}}// translation table for return codes.
var codes={Z_OK:binding$1.Z_OK,Z_STREAM_END:binding$1.Z_STREAM_END,Z_NEED_DICT:binding$1.Z_NEED_DICT,Z_ERRNO:binding$1.Z_ERRNO,Z_STREAM_ERROR:binding$1.Z_STREAM_ERROR,Z_DATA_ERROR:binding$1.Z_DATA_ERROR,Z_MEM_ERROR:binding$1.Z_MEM_ERROR,Z_BUF_ERROR:binding$1.Z_BUF_ERROR,Z_VERSION_ERROR:binding$1.Z_VERSION_ERROR};var ckeys=Object.keys(codes);for(var ck=0;ck<ckeys.length;ck++){var ckey=ckeys[ck];codes[codes[ckey]]=ckey;}Object.defineProperty(exports,'codes',{enumerable:true,value:Object.freeze(codes),writable:false});exports.Deflate=Deflate;exports.Inflate=Inflate;exports.Gzip=Gzip;exports.Gunzip=Gunzip;exports.DeflateRaw=DeflateRaw;exports.InflateRaw=InflateRaw;exports.Unzip=Unzip;exports.createDeflate=function(o){return new Deflate(o);};exports.createInflate=function(o){return new Inflate(o);};exports.createDeflateRaw=function(o){return new DeflateRaw(o);};exports.createInflateRaw=function(o){return new InflateRaw(o);};exports.createGzip=function(o){return new Gzip(o);};exports.createGunzip=function(o){return new Gunzip(o);};exports.createUnzip=function(o){return new Unzip(o);};// Convenience methods.
// compress/decompress a string or buffer in one step.
exports.deflate=function(buffer,opts,callback){if(typeof opts==='function'){callback=opts;opts={};}return zlibBuffer(new Deflate(opts),buffer,callback);};exports.deflateSync=function(buffer,opts){return zlibBufferSync(new Deflate(opts),buffer);};exports.gzip=function(buffer,opts,callback){if(typeof opts==='function'){callback=opts;opts={};}return zlibBuffer(new Gzip(opts),buffer,callback);};exports.gzipSync=function(buffer,opts){return zlibBufferSync(new Gzip(opts),buffer);};exports.deflateRaw=function(buffer,opts,callback){if(typeof opts==='function'){callback=opts;opts={};}return zlibBuffer(new DeflateRaw(opts),buffer,callback);};exports.deflateRawSync=function(buffer,opts){return zlibBufferSync(new DeflateRaw(opts),buffer);};exports.unzip=function(buffer,opts,callback){if(typeof opts==='function'){callback=opts;opts={};}return zlibBuffer(new Unzip(opts),buffer,callback);};exports.unzipSync=function(buffer,opts){return zlibBufferSync(new Unzip(opts),buffer);};exports.inflate=function(buffer,opts,callback){if(typeof opts==='function'){callback=opts;opts={};}return zlibBuffer(new Inflate(opts),buffer,callback);};exports.inflateSync=function(buffer,opts){return zlibBufferSync(new Inflate(opts),buffer);};exports.gunzip=function(buffer,opts,callback){if(typeof opts==='function'){callback=opts;opts={};}return zlibBuffer(new Gunzip(opts),buffer,callback);};exports.gunzipSync=function(buffer,opts){return zlibBufferSync(new Gunzip(opts),buffer);};exports.inflateRaw=function(buffer,opts,callback){if(typeof opts==='function'){callback=opts;opts={};}return zlibBuffer(new InflateRaw(opts),buffer,callback);};exports.inflateRawSync=function(buffer,opts){return zlibBufferSync(new InflateRaw(opts),buffer);};function zlibBuffer(engine,buffer,callback){var buffers=[];var nread=0;engine.on('error',onError);engine.on('end',onEnd);engine.end(buffer);flow();function flow(){var chunk;while(null!==(chunk=engine.read())){buffers.push(chunk);nread+=chunk.length;}engine.once('readable',flow);}function onError(err){engine.removeListener('end',onEnd);engine.removeListener('readable',flow);callback(err);}function onEnd(){var buf;var err=null;if(nread>=kMaxLength){err=new RangeError(kRangeErrorMessage);}else{buf=Buffer.concat(buffers,nread);}buffers=[];engine.close();callback(err,buf);}}function zlibBufferSync(engine,buffer){if(typeof buffer==='string')buffer=Buffer.from(buffer);if(!Buffer.isBuffer(buffer))throw new TypeError('Not a string or buffer');var flushFlag=engine._finishFlushFlag;return engine._processChunk(buffer,flushFlag);}// generic zlib
// minimal 2-byte header
function Deflate(opts){if(!(this instanceof Deflate))return new Deflate(opts);Zlib.call(this,opts,binding$1.DEFLATE);}function Inflate(opts){if(!(this instanceof Inflate))return new Inflate(opts);Zlib.call(this,opts,binding$1.INFLATE);}// gzip - bigger header, same deflate compression
function Gzip(opts){if(!(this instanceof Gzip))return new Gzip(opts);Zlib.call(this,opts,binding$1.GZIP);}function Gunzip(opts){if(!(this instanceof Gunzip))return new Gunzip(opts);Zlib.call(this,opts,binding$1.GUNZIP);}// raw - no header
function DeflateRaw(opts){if(!(this instanceof DeflateRaw))return new DeflateRaw(opts);Zlib.call(this,opts,binding$1.DEFLATERAW);}function InflateRaw(opts){if(!(this instanceof InflateRaw))return new InflateRaw(opts);Zlib.call(this,opts,binding$1.INFLATERAW);}// auto-detect header.
function Unzip(opts){if(!(this instanceof Unzip))return new Unzip(opts);Zlib.call(this,opts,binding$1.UNZIP);}function isValidFlushFlag(flag){return flag===binding$1.Z_NO_FLUSH||flag===binding$1.Z_PARTIAL_FLUSH||flag===binding$1.Z_SYNC_FLUSH||flag===binding$1.Z_FULL_FLUSH||flag===binding$1.Z_FINISH||flag===binding$1.Z_BLOCK;}// the Zlib class they all inherit from
// This thing manages the queue of requests, and returns
// true or false if there is anything in the queue when
// you call the .write() method.
function Zlib(opts,mode){var _this=this;this._opts=opts=opts||{};this._chunkSize=opts.chunkSize||exports.Z_DEFAULT_CHUNK;Transform.call(this,opts);if(opts.flush&&!isValidFlushFlag(opts.flush)){throw new Error('Invalid flush flag: '+opts.flush);}if(opts.finishFlush&&!isValidFlushFlag(opts.finishFlush)){throw new Error('Invalid flush flag: '+opts.finishFlush);}this._flushFlag=opts.flush||binding$1.Z_NO_FLUSH;this._finishFlushFlag=typeof opts.finishFlush!=='undefined'?opts.finishFlush:binding$1.Z_FINISH;if(opts.chunkSize){if(opts.chunkSize<exports.Z_MIN_CHUNK||opts.chunkSize>exports.Z_MAX_CHUNK){throw new Error('Invalid chunk size: '+opts.chunkSize);}}if(opts.windowBits){if(opts.windowBits<exports.Z_MIN_WINDOWBITS||opts.windowBits>exports.Z_MAX_WINDOWBITS){throw new Error('Invalid windowBits: '+opts.windowBits);}}if(opts.level){if(opts.level<exports.Z_MIN_LEVEL||opts.level>exports.Z_MAX_LEVEL){throw new Error('Invalid compression level: '+opts.level);}}if(opts.memLevel){if(opts.memLevel<exports.Z_MIN_MEMLEVEL||opts.memLevel>exports.Z_MAX_MEMLEVEL){throw new Error('Invalid memLevel: '+opts.memLevel);}}if(opts.strategy){if(opts.strategy!=exports.Z_FILTERED&&opts.strategy!=exports.Z_HUFFMAN_ONLY&&opts.strategy!=exports.Z_RLE&&opts.strategy!=exports.Z_FIXED&&opts.strategy!=exports.Z_DEFAULT_STRATEGY){throw new Error('Invalid strategy: '+opts.strategy);}}if(opts.dictionary){if(!Buffer.isBuffer(opts.dictionary)){throw new Error('Invalid dictionary: it should be a Buffer instance');}}this._handle=new binding$1.Zlib(mode);var self=this;this._hadError=false;this._handle.onerror=function(message,errno){// there is no way to cleanly recover.
// continuing only obscures problems.
_close(self);self._hadError=true;var error=new Error(message);error.errno=errno;error.code=exports.codes[errno];self.emit('error',error);};var level=exports.Z_DEFAULT_COMPRESSION;if(typeof opts.level==='number')level=opts.level;var strategy=exports.Z_DEFAULT_STRATEGY;if(typeof opts.strategy==='number')strategy=opts.strategy;this._handle.init(opts.windowBits||exports.Z_DEFAULT_WINDOWBITS,level,opts.memLevel||exports.Z_DEFAULT_MEMLEVEL,strategy,opts.dictionary);this._buffer=Buffer.allocUnsafe(this._chunkSize);this._offset=0;this._level=level;this._strategy=strategy;this.once('end',this.close);Object.defineProperty(this,'_closed',{get:function(){return!_this._handle;},configurable:true,enumerable:true});}util.inherits(Zlib,Transform);Zlib.prototype.params=function(level,strategy,callback){if(level<exports.Z_MIN_LEVEL||level>exports.Z_MAX_LEVEL){throw new RangeError('Invalid compression level: '+level);}if(strategy!=exports.Z_FILTERED&&strategy!=exports.Z_HUFFMAN_ONLY&&strategy!=exports.Z_RLE&&strategy!=exports.Z_FIXED&&strategy!=exports.Z_DEFAULT_STRATEGY){throw new TypeError('Invalid strategy: '+strategy);}if(this._level!==level||this._strategy!==strategy){var self=this;this.flush(binding$1.Z_SYNC_FLUSH,function(){assert(self._handle,'zlib binding closed');self._handle.params(level,strategy);if(!self._hadError){self._level=level;self._strategy=strategy;if(callback)callback();}});}else{browser$1$1.nextTick(callback);}};Zlib.prototype.reset=function(){assert(this._handle,'zlib binding closed');return this._handle.reset();};// This is the _flush function called by the transform class,
// internally, when the last chunk has been written.
Zlib.prototype._flush=function(callback){this._transform(Buffer.alloc(0),'',callback);};Zlib.prototype.flush=function(kind,callback){var _this2=this;var ws=this._writableState;if(typeof kind==='function'||kind===undefined&&!callback){callback=kind;kind=binding$1.Z_FULL_FLUSH;}if(ws.ended){if(callback)browser$1$1.nextTick(callback);}else if(ws.ending){if(callback)this.once('end',callback);}else if(ws.needDrain){if(callback){this.once('drain',function(){return _this2.flush(kind,callback);});}}else{this._flushFlag=kind;this.write(Buffer.alloc(0),'',callback);}};Zlib.prototype.close=function(callback){_close(this,callback);browser$1$1.nextTick(emitCloseNT,this);};function _close(engine,callback){if(callback)browser$1$1.nextTick(callback);// Caller may invoke .close after a zlib error (which will null _handle).
if(!engine._handle)return;engine._handle.close();engine._handle=null;}function emitCloseNT(self){self.emit('close');}Zlib.prototype._transform=function(chunk,encoding,cb){var flushFlag;var ws=this._writableState;var ending=ws.ending||ws.ended;var last=ending&&(!chunk||ws.length===chunk.length);if(chunk!==null&&!Buffer.isBuffer(chunk))return cb(new Error('invalid input'));if(!this._handle)return cb(new Error('zlib binding closed'));// If it's the last chunk, or a final flush, we use the Z_FINISH flush flag
// (or whatever flag was provided using opts.finishFlush).
// If it's explicitly flushing at some other time, then we use
// Z_FULL_FLUSH. Otherwise, use Z_NO_FLUSH for maximum compression
// goodness.
if(last)flushFlag=this._finishFlushFlag;else{flushFlag=this._flushFlag;// once we've flushed the last of the queue, stop flushing and
// go back to the normal behavior.
if(chunk.length>=ws.length){this._flushFlag=this._opts.flush||binding$1.Z_NO_FLUSH;}}this._processChunk(chunk,flushFlag,cb);};Zlib.prototype._processChunk=function(chunk,flushFlag,cb){var availInBefore=chunk&&chunk.length;var availOutBefore=this._chunkSize-this._offset;var inOff=0;var self=this;var async=typeof cb==='function';if(!async){var buffers=[];var nread=0;var error;this.on('error',function(er){error=er;});assert(this._handle,'zlib binding closed');do{var res=this._handle.writeSync(flushFlag,chunk,// in
inOff,// in_off
availInBefore,// in_len
this._buffer,// out
this._offset,//out_off
availOutBefore);// out_len
}while(!this._hadError&&callback(res[0],res[1]));if(this._hadError){throw error;}if(nread>=kMaxLength){_close(this);throw new RangeError(kRangeErrorMessage);}var buf=Buffer.concat(buffers,nread);_close(this);return buf;}assert(this._handle,'zlib binding closed');var req=this._handle.write(flushFlag,chunk,// in
inOff,// in_off
availInBefore,// in_len
this._buffer,// out
this._offset,//out_off
availOutBefore);// out_len
req.buffer=chunk;req.callback=callback;function callback(availInAfter,availOutAfter){// When the callback is used in an async write, the callback's
// context is the `req` object that was created. The req object
// is === this._handle, and that's why it's important to null
// out the values after they are done being used. `this._handle`
// can stay in memory longer than the callback and buffer are needed.
if(this){this.buffer=null;this.callback=null;}if(self._hadError)return;var have=availOutBefore-availOutAfter;assert(have>=0,'have should not go down');if(have>0){var out=self._buffer.slice(self._offset,self._offset+have);self._offset+=have;// serve some output to the consumer.
if(async){self.push(out);}else{buffers.push(out);nread+=out.length;}}// exhausted the output buffer, or used all the input create a new one.
if(availOutAfter===0||self._offset>=self._chunkSize){availOutBefore=self._chunkSize;self._offset=0;self._buffer=Buffer.allocUnsafe(self._chunkSize);}if(availOutAfter===0){// Not actually done.  Need to reprocess.
// Also, update the availInBefore to the availInAfter value,
// so that if we have to hit it a third (fourth, etc.) time,
// it'll have the correct byte counts.
inOff+=availInBefore-availInAfter;availInBefore=availInAfter;if(!async)return true;var newReq=self._handle.write(flushFlag,chunk,inOff,availInBefore,self._buffer,self._offset,self._chunkSize);newReq.callback=callback;// this same function
newReq.buffer=chunk;return;}if(!async)return false;// finished with the chunk.
cb();}};util.inherits(Deflate,Zlib);util.inherits(Inflate,Zlib);util.inherits(Gzip,Zlib);util.inherits(Gunzip,Zlib);util.inherits(DeflateRaw,Zlib);util.inherits(InflateRaw,Zlib);util.inherits(Unzip,Zlib);})(pdfkit_browser_lib);var pdfkit_browser_zlib=/*@__PURE__*/pdfkit_browser_getDefaultExportFromCjs(pdfkit_browser_lib);class PDFReference extends stream.Writable{constructor(document,id,data){super({decodeStrings:false});this.finalize=this.finalize.bind(this);this.document=document;this.id=id;if(data==null){data={};}this.data=data;this.gen=0;this.deflate=null;this.compress=this.document.compress&&!this.data.Filter;this.uncompressedLength=0;this.chunks=[];}initDeflate(){this.data.Filter='FlateDecode';this.deflate=pdfkit_browser_zlib.createDeflate();this.deflate.on('data',chunk=>{this.chunks.push(chunk);return this.data.Length+=chunk.length;});return this.deflate.on('end',this.finalize);}_write(chunk,encoding,callback){if(!(chunk instanceof Uint8Array)){chunk=Buffer$2.from(chunk+'\n','binary');}this.uncompressedLength+=chunk.length;if(this.data.Length==null){this.data.Length=0;}if(this.compress){if(!this.deflate){this.initDeflate();}this.deflate.write(chunk);}else{this.chunks.push(chunk);this.data.Length+=chunk.length;}return callback();}end(){super.end(...arguments);if(this.deflate){return this.deflate.end();}return this.finalize();}finalize(){this.offset=this.document._offset;this.document._write(`${this.id} ${this.gen} obj`);this.document._write(PDFObject$1.convert(this.data));if(this.chunks.length){this.document._write('stream');for(let chunk of Array.from(this.chunks)){this.document._write(chunk);}this.chunks.length=0;// free up memory
this.document._write('\nendstream');}this.document._write('endobj');return this.document._refEnd(this);}toString(){return`${this.id} ${this.gen} R`;}}/*
PDFTree - abstract base class for name and number tree objects
*/class PDFTree{constructor(options){if(options===void 0){options={};}this._items={};// disable /Limits output for this tree
this.limits=typeof options.limits==='boolean'?options.limits:true;}add(key,val){return this._items[key]=val;}get(key){return this._items[key];}toString(){// Needs to be sorted by key
const sortedKeys=Object.keys(this._items).sort((a,b)=>this._compareKeys(a,b));const out=['<<'];if(this.limits&&sortedKeys.length>1){const first=sortedKeys[0],last=sortedKeys[sortedKeys.length-1];out.push(`  /Limits ${PDFObject$1.convert([this._dataForKey(first),this._dataForKey(last)])}`);}out.push(`  /${this._keysName()} [`);for(let key of sortedKeys){out.push(`    ${PDFObject$1.convert(this._dataForKey(key))} ${PDFObject$1.convert(this._items[key])}`);}out.push(']');out.push('>>');return out.join('\n');}_compareKeys(/*a, b*/){throw new Error('Must be implemented by subclasses');}_keysName(){throw new Error('Must be implemented by subclasses');}_dataForKey(/*k*/){throw new Error('Must be implemented by subclasses');}}/*
PDFNameTree - represents a name tree object
*/class PDFNameTree extends PDFTree{_compareKeys(a,b){return a.localeCompare(b);}_keysName(){return'Names';}_dataForKey(k){return new String(k);}}const escapableRe=/[\n\r\t\b\f\(\)\\]/g;const escapable={'\n':'\\n','\r':'\\r','\t':'\\t','\b':'\\b','\f':'\\f','\\':'\\\\','(':'\\(',')':'\\)'};const pdfkit_browser_pad=(str,length)=>(Array(length+1).join('0')+str).slice(-length);// Convert little endian UTF-16 to big endian
const swapBytes=function(buff){const l=buff.length;if(l&0x01){throw new Error('Buffer length must be even');}else{for(let i=0,end=l-1;i<end;i+=2){const a=buff[i];buff[i]=buff[i+1];buff[i+1]=a;}}return buff;};class PDFObject{static convert(object){// String literals are converted to the PDF name type
if(typeof object==='string'){return`/${object}`;}// String objects are converted to PDF strings (UTF-16)
if(object instanceof String){let string=object;// Detect if this is a unicode string
let isUnicode=false;for(let i=0,end=string.length;i<end;i++){if(string.charCodeAt(i)>0x7f){isUnicode=true;break;}}// If so, encode it as big endian UTF-16
if(isUnicode){string=swapBytes(Buffer$2.from(`\ufeff${string}`,'utf16le')).toString('binary');}// Escape characters as required by the spec
string=string.replace(escapableRe,c=>escapable[c]);return`(${string})`;// Buffers are converted to PDF hex strings
}if(Buffer$2.isBuffer(object)){return`<${object.toString('hex')}>`;}if(object instanceof PDFReference||object instanceof PDFNameTree){return object.toString();}if(object instanceof Date){return`(D:${pdfkit_browser_pad(object.getUTCFullYear(),4)}`+pdfkit_browser_pad(object.getUTCMonth()+1,2)+pdfkit_browser_pad(object.getUTCDate(),2)+pdfkit_browser_pad(object.getUTCHours(),2)+pdfkit_browser_pad(object.getUTCMinutes(),2)+pdfkit_browser_pad(object.getUTCSeconds(),2)+'Z)';}if(Array.isArray(object)){const items=Array.from(object).map(e=>PDFObject.convert(e)).join(' ');return`[${items}]`;}if({}.toString.call(object)==='[object Object]'){const out=['<<'];for(let key in object){const val=object[key];out.push(`/${key} ${PDFObject.convert(val)}`);}out.push('>>');return out.join('\n');}if(typeof object==='number'){return PDFObject.number(object);}return`${object}`;}static number(n){if(n>-1e21&&n<1e21){return Math.round(n*1e6)/1e6;}throw new Error(`unsupported number: ${n}`);}}var PDFObject$1=PDFObject;/*
PDFPage - represents a single page in the PDF document
By Devon Govett
*/const DEFAULT_MARGINS={top:72,left:72,bottom:72,right:72};const SIZES={'4A0':[4767.87,6740.79],'2A0':[3370.39,4767.87],A0:[2383.94,3370.39],A1:[1683.78,2383.94],A2:[1190.55,1683.78],A3:[841.89,1190.55],A4:[595.28,841.89],A5:[419.53,595.28],A6:[297.64,419.53],A7:[209.76,297.64],A8:[147.4,209.76],A9:[104.88,147.4],A10:[73.7,104.88],B0:[2834.65,4008.19],B1:[2004.09,2834.65],B2:[1417.32,2004.09],B3:[1000.63,1417.32],B4:[708.66,1000.63],B5:[498.9,708.66],B6:[354.33,498.9],B7:[249.45,354.33],B8:[175.75,249.45],B9:[124.72,175.75],B10:[87.87,124.72],C0:[2599.37,3676.54],C1:[1836.85,2599.37],C2:[1298.27,1836.85],C3:[918.43,1298.27],C4:[649.13,918.43],C5:[459.21,649.13],C6:[323.15,459.21],C7:[229.61,323.15],C8:[161.57,229.61],C9:[113.39,161.57],C10:[79.37,113.39],RA0:[2437.8,3458.27],RA1:[1729.13,2437.8],RA2:[1218.9,1729.13],RA3:[864.57,1218.9],RA4:[609.45,864.57],SRA0:[2551.18,3628.35],SRA1:[1814.17,2551.18],SRA2:[1275.59,1814.17],SRA3:[907.09,1275.59],SRA4:[637.8,907.09],EXECUTIVE:[521.86,756.0],FOLIO:[612.0,936.0],LEGAL:[612.0,1008.0],LETTER:[612.0,792.0],TABLOID:[792.0,1224.0]};class PDFPage{constructor(document,options){if(options===void 0){options={};}this.document=document;this.size=options.size||'letter';this.layout=options.layout||'portrait';this.userUnit=options.userUnit||1.0;// process margins
if(typeof options.margin==='number'){this.margins={top:options.margin,left:options.margin,bottom:options.margin,right:options.margin};// default to 1 inch margins
}else{this.margins=options.margins||DEFAULT_MARGINS;}// calculate page dimensions
const dimensions=Array.isArray(this.size)?this.size:SIZES[this.size.toUpperCase()];this.width=dimensions[this.layout==='portrait'?0:1];this.height=dimensions[this.layout==='portrait'?1:0];this.content=this.document.ref();// Initialize the Font, XObject, and ExtGState dictionaries
this.resources=this.document.ref({ProcSet:['PDF','Text','ImageB','ImageC','ImageI']});// The page dictionary
this.dictionary=this.document.ref({Type:'Page',Parent:this.document._root.data.Pages,MediaBox:[0,0,this.width,this.height],Contents:this.content,Resources:this.resources,UserUnit:this.userUnit});this.markings=[];}// Lazily create these objects
get fonts(){const data=this.resources.data;return data.Font!=null?data.Font:data.Font={};}get xobjects(){const data=this.resources.data;return data.XObject!=null?data.XObject:data.XObject={};}get ext_gstates(){const data=this.resources.data;return data.ExtGState!=null?data.ExtGState:data.ExtGState={};}get patterns(){const data=this.resources.data;return data.Pattern!=null?data.Pattern:data.Pattern={};}get colorSpaces(){const data=this.resources.data;return data.ColorSpace||(data.ColorSpace={});}get annotations(){const data=this.dictionary.data;return data.Annots!=null?data.Annots:data.Annots=[];}get structParentTreeKey(){const data=this.dictionary.data;return data.StructParents!=null?data.StructParents:data.StructParents=this.document.createStructParentTreeNextKey();}maxY(){return this.height-this.margins.bottom;}write(chunk){return this.content.write(chunk);}end(){this.dictionary.end();this.resources.end();return this.content.end();}}const wordArrayToBuffer=wordArray=>{const byteArray=[];for(let i=0;i<wordArray.sigBytes;i++){byteArray.push(wordArray.words[Math.floor(i/4)]>>8*(3-i%4)&0xff);}return Buffer$2.from(byteArray);};class PDFSecurity{static generateFileID(info){if(info===void 0){info={};}let infoStr=`${info.CreationDate.getTime()}\n`;for(let key in info){if(!info.hasOwnProperty(key))continue;infoStr+=`${key}: ${info[key].valueOf()}\n`;}return wordArrayToBuffer(md5(infoStr));}}const{number:number$2}=PDFObject$1;let PDFGradient$1=class PDFGradient{constructor(doc){this.doc=doc;this.stops=[];this.embedded=false;this.transform=[1,0,0,1,0,0];}stop(pos,color,opacity){if(opacity==null){opacity=1;}color=this.doc._normalizeColor(color);if(this.stops.length===0){if(color.length===3){this._colorSpace='DeviceRGB';}else if(color.length===4){this._colorSpace='DeviceCMYK';}else if(color.length===1){this._colorSpace='DeviceGray';}else{throw new Error('Unknown color space');}}else if(this._colorSpace==='DeviceRGB'&&color.length!==3||this._colorSpace==='DeviceCMYK'&&color.length!==4||this._colorSpace==='DeviceGray'&&color.length!==1){throw new Error('All gradient stops must use the same color space');}opacity=Math.max(0,Math.min(1,opacity));this.stops.push([pos,color,opacity]);return this;}setTransform(m11,m12,m21,m22,dx,dy){this.transform=[m11,m12,m21,m22,dx,dy];return this;}embed(m){let fn;const stopsLength=this.stops.length;if(stopsLength===0){return;}this.embedded=true;this.matrix=m;// if the last stop comes before 100%, add a copy at 100%
const last=this.stops[stopsLength-1];if(last[0]<1){this.stops.push([1,last[1],last[2]]);}const bounds=[];const encode=[];const stops=[];for(let i=0;i<stopsLength-1;i++){encode.push(0,1);if(i+2!==stopsLength){bounds.push(this.stops[i+1][0]);}fn=this.doc.ref({FunctionType:2,Domain:[0,1],C0:this.stops[i+0][1],C1:this.stops[i+1][1],N:1});stops.push(fn);fn.end();}// if there are only two stops, we don't need a stitching function
if(stopsLength===1){fn=stops[0];}else{fn=this.doc.ref({FunctionType:3,// stitching function
Domain:[0,1],Functions:stops,Bounds:bounds,Encode:encode});fn.end();}this.id=`Sh${++this.doc._gradCount}`;const shader=this.shader(fn);shader.end();const pattern=this.doc.ref({Type:'Pattern',PatternType:2,Shading:shader,Matrix:this.matrix.map(number$2)});pattern.end();if(this.stops.some(stop=>stop[2]<1)){let grad=this.opacityGradient();grad._colorSpace='DeviceGray';for(let stop of this.stops){grad.stop(stop[0],[stop[2]]);}grad=grad.embed(this.matrix);const pageBBox=[0,0,this.doc.page.width,this.doc.page.height];const form=this.doc.ref({Type:'XObject',Subtype:'Form',FormType:1,BBox:pageBBox,Group:{Type:'Group',S:'Transparency',CS:'DeviceGray'},Resources:{ProcSet:['PDF','Text','ImageB','ImageC','ImageI'],Pattern:{Sh1:grad}}});form.write('/Pattern cs /Sh1 scn');form.end(`${pageBBox.join(' ')} re f`);const gstate=this.doc.ref({Type:'ExtGState',SMask:{Type:'Mask',S:'Luminosity',G:form}});gstate.end();const opacityPattern=this.doc.ref({Type:'Pattern',PatternType:1,PaintType:1,TilingType:2,BBox:pageBBox,XStep:pageBBox[2],YStep:pageBBox[3],Resources:{ProcSet:['PDF','Text','ImageB','ImageC','ImageI'],Pattern:{Sh1:pattern},ExtGState:{Gs1:gstate}}});opacityPattern.write('/Gs1 gs /Pattern cs /Sh1 scn');opacityPattern.end(`${pageBBox.join(' ')} re f`);this.doc.page.patterns[this.id]=opacityPattern;}else{this.doc.page.patterns[this.id]=pattern;}return pattern;}apply(stroke){// apply gradient transform to existing document ctm
const[m0,m1,m2,m3,m4,m5]=this.doc._ctm;const[m11,m12,m21,m22,dx,dy]=this.transform;const m=[m0*m11+m2*m12,m1*m11+m3*m12,m0*m21+m2*m22,m1*m21+m3*m22,m0*dx+m2*dy+m4,m1*dx+m3*dy+m5];if(!this.embedded||m.join(' ')!==this.matrix.join(' ')){this.embed(m);}this.doc._setColorSpace('Pattern',stroke);const op=stroke?'SCN':'scn';return this.doc.addContent(`/${this.id} ${op}`);}};let PDFLinearGradient$1=class PDFLinearGradient extends PDFGradient$1{constructor(doc,x1,y1,x2,y2){super(doc);this.x1=x1;this.y1=y1;this.x2=x2;this.y2=y2;}shader(fn){return this.doc.ref({ShadingType:2,ColorSpace:this._colorSpace,Coords:[this.x1,this.y1,this.x2,this.y2],Function:fn,Extend:[true,true]});}opacityGradient(){return new PDFLinearGradient(this.doc,this.x1,this.y1,this.x2,this.y2);}};let PDFRadialGradient$1=class PDFRadialGradient extends PDFGradient$1{constructor(doc,x1,y1,r1,x2,y2,r2){super(doc);this.doc=doc;this.x1=x1;this.y1=y1;this.r1=r1;this.x2=x2;this.y2=y2;this.r2=r2;}shader(fn){return this.doc.ref({ShadingType:3,ColorSpace:this._colorSpace,Coords:[this.x1,this.y1,this.r1,this.x2,this.y2,this.r2],Function:fn,Extend:[true,true]});}opacityGradient(){return new PDFRadialGradient(this.doc,this.x1,this.y1,this.r1,this.x2,this.y2,this.r2);}};var Gradient={PDFGradient:PDFGradient$1,PDFLinearGradient:PDFLinearGradient$1,PDFRadialGradient:PDFRadialGradient$1};/*
PDF tiling pattern support. Uncolored only.
 */const underlyingColorSpaces=['DeviceCMYK','DeviceRGB'];let PDFTilingPattern$1=class PDFTilingPattern{constructor(doc,bBox,xStep,yStep,stream){this.doc=doc;this.bBox=bBox;this.xStep=xStep;this.yStep=yStep;this.stream=stream;}createPattern(){// no resources needed for our current usage
// required entry
const resources=this.doc.ref();resources.end();// apply default transform matrix (flipped in the default doc._ctm)
// see document.js & gradient.js
const[m0,m1,m2,m3,m4,m5]=this.doc._ctm;const[m11,m12,m21,m22,dx,dy]=[1,0,0,1,0,0];const m=[m0*m11+m2*m12,m1*m11+m3*m12,m0*m21+m2*m22,m1*m21+m3*m22,m0*dx+m2*dy+m4,m1*dx+m3*dy+m5];const pattern=this.doc.ref({Type:'Pattern',PatternType:1,// tiling
PaintType:2,// 1-colored, 2-uncolored
TilingType:2,// 2-no distortion
BBox:this.bBox,XStep:this.xStep,YStep:this.yStep,Matrix:m.map(v=>+v.toFixed(5)),Resources:resources});pattern.end(this.stream);return pattern;}embedPatternColorSpaces(){// map each pattern to an underlying color space
// and embed on each page
underlyingColorSpaces.forEach(csName=>{const csId=this.getPatternColorSpaceId(csName);if(this.doc.page.colorSpaces[csId])return;const cs=this.doc.ref(['Pattern',csName]);cs.end();this.doc.page.colorSpaces[csId]=cs;});}getPatternColorSpaceId(underlyingColorspace){return`CsP${underlyingColorspace}`;}embed(){if(!this.id){this.doc._patternCount=this.doc._patternCount+1;this.id='P'+this.doc._patternCount;this.pattern=this.createPattern();}// patterns are embedded in each page
if(!this.doc.page.patterns[this.id]){this.doc.page.patterns[this.id]=this.pattern;}}apply(stroke,patternColor){// do any embedding/creating that might be needed
this.embedPatternColorSpaces();this.embed();const normalizedColor=this.doc._normalizeColor(patternColor);if(!normalizedColor)throw Error(`invalid pattern color. (value: ${patternColor})`);// select one of the pattern color spaces
const csId=this.getPatternColorSpaceId(this.doc._getColorSpace(normalizedColor));this.doc._setColorSpace(csId,stroke);// stroke/fill using the pattern and color (in the above underlying color space)
const op=stroke?'SCN':'scn';return this.doc.addContent(`${normalizedColor.join(' ')} /${this.id} ${op}`);}};var pattern={PDFTilingPattern:PDFTilingPattern$1};const{PDFGradient,PDFLinearGradient,PDFRadialGradient}=Gradient;const{PDFTilingPattern}=pattern;var ColorMixin={initColor(){// The opacity dictionaries
this._opacityRegistry={};this._opacityCount=0;this._patternCount=0;return this._gradCount=0;},_normalizeColor(color){if(typeof color==='string'){if(color.charAt(0)==='#'){if(color.length===4){color=color.replace(/#([0-9A-F])([0-9A-F])([0-9A-F])/i,'#$1$1$2$2$3$3');}const hex=parseInt(color.slice(1),16);color=[hex>>16,hex>>8&0xff,hex&0xff];}else if(namedColors[color]){color=namedColors[color];}}if(Array.isArray(color)){// RGB
if(color.length===3){color=color.map(part=>part/255);// CMYK
}else if(color.length===4){color=color.map(part=>part/100);}return color;}return null;},_setColor(color,stroke){if(color instanceof PDFGradient){color.apply(stroke);return true;// see if tiling pattern, decode & apply it it
}else if(Array.isArray(color)&&color[0]instanceof PDFTilingPattern){color[0].apply(stroke,color[1]);return true;}// any other case should be a normal color and not a pattern
return this._setColorCore(color,stroke);},_setColorCore(color,stroke){color=this._normalizeColor(color);if(!color){return false;}const op=stroke?'SCN':'scn';const space=this._getColorSpace(color);this._setColorSpace(space,stroke);color=color.join(' ');this.addContent(`${color} ${op}`);return true;},_setColorSpace(space,stroke){const op=stroke?'CS':'cs';return this.addContent(`/${space} ${op}`);},_getColorSpace(color){return color.length===4?'DeviceCMYK':'DeviceRGB';},fillColor(color,opacity){const set=this._setColor(color,false);if(set){this.fillOpacity(opacity);}// save this for text wrapper, which needs to reset
// the fill color on new pages
this._fillColor=[color,opacity];return this;},strokeColor(color,opacity){const set=this._setColor(color,true);if(set){this.strokeOpacity(opacity);}return this;},opacity(opacity){this._doOpacity(opacity,opacity);return this;},fillOpacity(opacity){this._doOpacity(opacity,null);return this;},strokeOpacity(opacity){this._doOpacity(null,opacity);return this;},_doOpacity(fillOpacity,strokeOpacity){let dictionary,name;if(fillOpacity==null&&strokeOpacity==null){return;}if(fillOpacity!=null){fillOpacity=Math.max(0,Math.min(1,fillOpacity));}if(strokeOpacity!=null){strokeOpacity=Math.max(0,Math.min(1,strokeOpacity));}const key=`${fillOpacity}_${strokeOpacity}`;if(this._opacityRegistry[key]){[dictionary,name]=this._opacityRegistry[key];}else{dictionary={Type:'ExtGState'};if(fillOpacity!=null){dictionary.ca=fillOpacity;}if(strokeOpacity!=null){dictionary.CA=strokeOpacity;}dictionary=this.ref(dictionary);dictionary.end();const id=++this._opacityCount;name=`Gs${id}`;this._opacityRegistry[key]=[dictionary,name];}this.page.ext_gstates[name]=dictionary;return this.addContent(`/${name} gs`);},linearGradient(x1,y1,x2,y2){return new PDFLinearGradient(this,x1,y1,x2,y2);},radialGradient(x1,y1,r1,x2,y2,r2){return new PDFRadialGradient(this,x1,y1,r1,x2,y2,r2);},pattern(bbox,xStep,yStep,stream){return new PDFTilingPattern(this,bbox,xStep,yStep,stream);}};var namedColors={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],grey:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]};/* eslint-disable no-lonely-if */let cx;let cy;let px;let py;let sx;let sy;cx=cy=px=py=sx=sy=0;// parseDataPath copy pasted from svgo
// https://github.com/svg/svgo/blob/e4918ccdd1a2b5831defe0f00c1286744b479448/lib/path.js
/**
 * @typedef {'M' | 'm' | 'Z' | 'z' | 'L' | 'l' | 'H' | 'h' | 'V' | 'v' | 'C' | 'c' | 'S' | 's' | 'Q' | 'q' | 'T' | 't' | 'A' | 'a'} PathDataCommand
 *//**
 * @typedef {Object} PathDataItem
 * @property {PathDataCommand} command
 * @property {number[]} args
 */const argsCountPerCommand={M:2,m:2,Z:0,z:0,L:2,l:2,H:1,h:1,V:1,v:1,C:6,c:6,S:4,s:4,Q:4,q:4,T:2,t:2,A:7,a:7};/**
 * @type {(c: string) => c is PathDataCommand}
 */const isCommand=c=>{return c in argsCountPerCommand;};/**
 * @type {(c: string) => boolean}
 */const isWsp=c=>{const codePoint=c.codePointAt(0);return codePoint===0x20||codePoint===0x9||codePoint===0xd||codePoint===0xa;};/**
 * @type {(c: string) => boolean}
 */const isDigit=c=>{const codePoint=c.codePointAt(0);if(codePoint==null){return false;}return 48<=codePoint&&codePoint<=57;};/**
 * @typedef {'none' | 'sign' | 'whole' | 'decimal_point' | 'decimal' | 'e' | 'exponent_sign' | 'exponent'} ReadNumberState
 *//**
 * @type {(string: string, cursor: number) => [number, number | null]}
 */const readNumber=(string,cursor)=>{let i=cursor;let value='';let state=/** @type {ReadNumberState} */'none';for(;i<string.length;i+=1){const c=string[i];if(c==='+'||c==='-'){if(state==='none'){state='sign';value+=c;continue;}if(state==='e'){state='exponent_sign';value+=c;continue;}}if(isDigit(c)){if(state==='none'||state==='sign'||state==='whole'){state='whole';value+=c;continue;}if(state==='decimal_point'||state==='decimal'){state='decimal';value+=c;continue;}if(state==='e'||state==='exponent_sign'||state==='exponent'){state='exponent';value+=c;continue;}}if(c==='.'){if(state==='none'||state==='sign'||state==='whole'){state='decimal_point';value+=c;continue;}}if(c==='E'||c==='e'){if(state==='whole'||state==='decimal_point'||state==='decimal'){state='e';value+=c;continue;}}break;}const number=Number.parseFloat(value);if(Number.isNaN(number)){return[cursor,null];}// step back to delegate iteration to parent loop
return[i-1,number];};/**
 * @type {(string: string) => Array<PathDataItem>}
 */const parsePathData=string=>{/**
   * @type {Array<PathDataItem>}
   */const pathData=[];/**
   * @type {null | PathDataCommand}
   */let command=null;let args=/** @type {number[]} */[];let argsCount=0;let canHaveComma=false;let hadComma=false;for(let i=0;i<string.length;i+=1){const c=string.charAt(i);if(isWsp(c)){continue;}// allow comma only between arguments
if(canHaveComma&&c===','){if(hadComma){break;}hadComma=true;continue;}if(isCommand(c)){if(hadComma){return pathData;}if(command==null){// moveto should be leading command
if(c!=='M'&&c!=='m'){return pathData;}}else{// stop if previous command arguments are not flushed
if(args.length!==0){return pathData;}}command=c;args=[];argsCount=argsCountPerCommand[command];canHaveComma=false;// flush command without arguments
if(argsCount===0){pathData.push({command,args});}continue;}// avoid parsing arguments if no command detected
if(command==null){return pathData;}// read next argument
let newCursor=i;let number=null;if(command==='A'||command==='a'){const position=args.length;if(position===0||position===1){// allow only positive number without sign as first two arguments
if(c!=='+'&&c!=='-'){[newCursor,number]=readNumber(string,i);}}if(position===2||position===5||position===6){[newCursor,number]=readNumber(string,i);}if(position===3||position===4){// read flags
if(c==='0'){number=0;}if(c==='1'){number=1;}}}else{[newCursor,number]=readNumber(string,i);}if(number==null){return pathData;}args.push(number);canHaveComma=true;hadComma=false;i=newCursor;// flush arguments when necessary count is reached
if(args.length===argsCount){pathData.push({command,args});// subsequent moveto coordinates are threated as implicit lineto commands
if(command==='M'){command='L';}if(command==='m'){command='l';}args=[];}}return pathData;};const apply=function(commands,doc){// current point, control point, and subpath starting point
cx=cy=px=py=sx=sy=0;// run the commands
for(let i=0;i<commands.length;i++){const{command,args}=commands[i];if(typeof runners[command]==='function'){runners[command](doc,args);}}};const runners={M(doc,a){cx=a[0];cy=a[1];px=py=null;sx=cx;sy=cy;return doc.moveTo(cx,cy);},m(doc,a){cx+=a[0];cy+=a[1];px=py=null;sx=cx;sy=cy;return doc.moveTo(cx,cy);},C(doc,a){cx=a[4];cy=a[5];px=a[2];py=a[3];return doc.bezierCurveTo(...a);},c(doc,a){doc.bezierCurveTo(a[0]+cx,a[1]+cy,a[2]+cx,a[3]+cy,a[4]+cx,a[5]+cy);px=cx+a[2];py=cy+a[3];cx+=a[4];return cy+=a[5];},S(doc,a){if(px===null){px=cx;py=cy;}doc.bezierCurveTo(cx-(px-cx),cy-(py-cy),a[0],a[1],a[2],a[3]);px=a[0];py=a[1];cx=a[2];return cy=a[3];},s(doc,a){if(px===null){px=cx;py=cy;}doc.bezierCurveTo(cx-(px-cx),cy-(py-cy),cx+a[0],cy+a[1],cx+a[2],cy+a[3]);px=cx+a[0];py=cy+a[1];cx+=a[2];return cy+=a[3];},Q(doc,a){px=a[0];py=a[1];cx=a[2];cy=a[3];return doc.quadraticCurveTo(a[0],a[1],cx,cy);},q(doc,a){doc.quadraticCurveTo(a[0]+cx,a[1]+cy,a[2]+cx,a[3]+cy);px=cx+a[0];py=cy+a[1];cx+=a[2];return cy+=a[3];},T(doc,a){if(px===null){px=cx;py=cy;}else{px=cx-(px-cx);py=cy-(py-cy);}doc.quadraticCurveTo(px,py,a[0],a[1]);px=cx-(px-cx);py=cy-(py-cy);cx=a[0];return cy=a[1];},t(doc,a){if(px===null){px=cx;py=cy;}else{px=cx-(px-cx);py=cy-(py-cy);}doc.quadraticCurveTo(px,py,cx+a[0],cy+a[1]);cx+=a[0];return cy+=a[1];},A(doc,a){solveArc(doc,cx,cy,a);cx=a[5];return cy=a[6];},a(doc,a){a[5]+=cx;a[6]+=cy;solveArc(doc,cx,cy,a);cx=a[5];return cy=a[6];},L(doc,a){cx=a[0];cy=a[1];px=py=null;return doc.lineTo(cx,cy);},l(doc,a){cx+=a[0];cy+=a[1];px=py=null;return doc.lineTo(cx,cy);},H(doc,a){cx=a[0];px=py=null;return doc.lineTo(cx,cy);},h(doc,a){cx+=a[0];px=py=null;return doc.lineTo(cx,cy);},V(doc,a){cy=a[0];px=py=null;return doc.lineTo(cx,cy);},v(doc,a){cy+=a[0];px=py=null;return doc.lineTo(cx,cy);},Z(doc){doc.closePath();cx=sx;return cy=sy;},z(doc){doc.closePath();cx=sx;return cy=sy;}};const solveArc=function(doc,x,y,coords){const[rx,ry,rot,large,sweep,ex,ey]=coords;const segs=arcToSegments(ex,ey,rx,ry,large,sweep,rot,x,y);for(let seg of segs){const bez=segmentToBezier(...seg);doc.bezierCurveTo(...bez);}};// from Inkscape svgtopdf, thanks!
const arcToSegments=function(x,y,rx,ry,large,sweep,rotateX,ox,oy){const th=rotateX*(Math.PI/180);const sin_th=Math.sin(th);const cos_th=Math.cos(th);rx=Math.abs(rx);ry=Math.abs(ry);px=cos_th*(ox-x)*0.5+sin_th*(oy-y)*0.5;py=cos_th*(oy-y)*0.5-sin_th*(ox-x)*0.5;let pl=px*px/(rx*rx)+py*py/(ry*ry);if(pl>1){pl=Math.sqrt(pl);rx*=pl;ry*=pl;}const a00=cos_th/rx;const a01=sin_th/rx;const a10=-sin_th/ry;const a11=cos_th/ry;const x0=a00*ox+a01*oy;const y0=a10*ox+a11*oy;const x1=a00*x+a01*y;const y1=a10*x+a11*y;const d=(x1-x0)*(x1-x0)+(y1-y0)*(y1-y0);let sfactor_sq=1/d-0.25;if(sfactor_sq<0){sfactor_sq=0;}let sfactor=Math.sqrt(sfactor_sq);if(sweep===large){sfactor=-sfactor;}const xc=0.5*(x0+x1)-sfactor*(y1-y0);const yc=0.5*(y0+y1)+sfactor*(x1-x0);const th0=Math.atan2(y0-yc,x0-xc);const th1=Math.atan2(y1-yc,x1-xc);let th_arc=th1-th0;if(th_arc<0&&sweep===1){th_arc+=2*Math.PI;}else if(th_arc>0&&sweep===0){th_arc-=2*Math.PI;}const segments=Math.ceil(Math.abs(th_arc/(Math.PI*0.5+0.001)));const result=[];for(let i=0;i<segments;i++){const th2=th0+i*th_arc/segments;const th3=th0+(i+1)*th_arc/segments;result[i]=[xc,yc,th2,th3,rx,ry,sin_th,cos_th];}return result;};const segmentToBezier=function(cx,cy,th0,th1,rx,ry,sin_th,cos_th){const a00=cos_th*rx;const a01=-sin_th*ry;const a10=sin_th*rx;const a11=cos_th*ry;const th_half=0.5*(th1-th0);const t=8/3*Math.sin(th_half*0.5)*Math.sin(th_half*0.5)/Math.sin(th_half);const x1=cx+Math.cos(th0)-t*Math.sin(th0);const y1=cy+Math.sin(th0)+t*Math.cos(th0);const x3=cx+Math.cos(th1);const y3=cy+Math.sin(th1);const x2=x3+t*Math.sin(th1);const y2=y3-t*Math.cos(th1);return[a00*x1+a01*y1,a10*x1+a11*y1,a00*x2+a01*y2,a10*x2+a11*y2,a00*x3+a01*y3,a10*x3+a11*y3];};class SVGPath{static apply(doc,path){const commands=parsePathData(path);apply(commands,doc);}}const{number:number$1}=PDFObject$1;// This constant is used to approximate a symmetrical arc using a cubic
// Bezier curve.
const pdfkit_browser_KAPPA=4.0*((Math.sqrt(2)-1.0)/3.0);var VectorMixin={initVector(){this._ctm=[1,0,0,1,0,0];// current transformation matrix
return this._ctmStack=[];},save(){this._ctmStack.push(this._ctm.slice());// TODO: save/restore colorspace and styles so not setting it unnessesarily all the time?
return this.addContent('q');},restore(){this._ctm=this._ctmStack.pop()||[1,0,0,1,0,0];return this.addContent('Q');},closePath(){return this.addContent('h');},lineWidth(w){return this.addContent(`${number$1(w)} w`);},_CAP_STYLES:{BUTT:0,ROUND:1,SQUARE:2},lineCap(c){if(typeof c==='string'){c=this._CAP_STYLES[c.toUpperCase()];}return this.addContent(`${c} J`);},_JOIN_STYLES:{MITER:0,ROUND:1,BEVEL:2},lineJoin(j){if(typeof j==='string'){j=this._JOIN_STYLES[j.toUpperCase()];}return this.addContent(`${j} j`);},miterLimit(m){return this.addContent(`${number$1(m)} M`);},dash(length,options){if(options===void 0){options={};}const originalLength=length;if(!Array.isArray(length)){length=[length,options.space||length];}const valid=length.every(x=>Number.isFinite(x)&&x>=0);if(!valid){throw new Error(`dash(${JSON.stringify(originalLength)}, ${JSON.stringify(options)}) invalid, lengths must be numeric and greater than or equal to zero`);}length=length.map(number$1).join(' ');return this.addContent(`[${length}] ${number$1(options.phase||0)} d`);},undash(){return this.addContent('[] 0 d');},moveTo(x,y){return this.addContent(`${number$1(x)} ${number$1(y)} m`);},lineTo(x,y){return this.addContent(`${number$1(x)} ${number$1(y)} l`);},bezierCurveTo(cp1x,cp1y,cp2x,cp2y,x,y){return this.addContent(`${number$1(cp1x)} ${number$1(cp1y)} ${number$1(cp2x)} ${number$1(cp2y)} ${number$1(x)} ${number$1(y)} c`);},quadraticCurveTo(cpx,cpy,x,y){return this.addContent(`${number$1(cpx)} ${number$1(cpy)} ${number$1(x)} ${number$1(y)} v`);},rect(x,y,w,h){return this.addContent(`${number$1(x)} ${number$1(y)} ${number$1(w)} ${number$1(h)} re`);},roundedRect(x,y,w,h,r){if(r==null){r=0;}r=Math.min(r,0.5*w,0.5*h);// amount to inset control points from corners (see `ellipse`)
const c=r*(1.0-pdfkit_browser_KAPPA);this.moveTo(x+r,y);this.lineTo(x+w-r,y);this.bezierCurveTo(x+w-c,y,x+w,y+c,x+w,y+r);this.lineTo(x+w,y+h-r);this.bezierCurveTo(x+w,y+h-c,x+w-c,y+h,x+w-r,y+h);this.lineTo(x+r,y+h);this.bezierCurveTo(x+c,y+h,x,y+h-c,x,y+h-r);this.lineTo(x,y+r);this.bezierCurveTo(x,y+c,x+c,y,x+r,y);return this.closePath();},ellipse(x,y,r1,r2){// based on http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas/2173084#2173084
if(r2==null){r2=r1;}x-=r1;y-=r2;const ox=r1*pdfkit_browser_KAPPA;const oy=r2*pdfkit_browser_KAPPA;const xe=x+r1*2;const ye=y+r2*2;const xm=x+r1;const ym=y+r2;this.moveTo(x,ym);this.bezierCurveTo(x,ym-oy,xm-ox,y,xm,y);this.bezierCurveTo(xm+ox,y,xe,ym-oy,xe,ym);this.bezierCurveTo(xe,ym+oy,xm+ox,ye,xm,ye);this.bezierCurveTo(xm-ox,ye,x,ym+oy,x,ym);return this.closePath();},circle(x,y,radius){return this.ellipse(x,y,radius);},arc(x,y,radius,startAngle,endAngle,anticlockwise){if(anticlockwise==null){anticlockwise=false;}const TWO_PI=2.0*Math.PI;const HALF_PI=0.5*Math.PI;let deltaAng=endAngle-startAngle;if(Math.abs(deltaAng)>TWO_PI){// draw only full circle if more than that is specified
deltaAng=TWO_PI;}else if(deltaAng!==0&&anticlockwise!==deltaAng<0){// necessary to flip direction of rendering
const dir=anticlockwise?-1:1;deltaAng=dir*TWO_PI+deltaAng;}const numSegs=Math.ceil(Math.abs(deltaAng)/HALF_PI);const segAng=deltaAng/numSegs;const handleLen=segAng/HALF_PI*pdfkit_browser_KAPPA*radius;let curAng=startAngle;// component distances between anchor point and control point
let deltaCx=-Math.sin(curAng)*handleLen;let deltaCy=Math.cos(curAng)*handleLen;// anchor point
let ax=x+Math.cos(curAng)*radius;let ay=y+Math.sin(curAng)*radius;// calculate and render segments
this.moveTo(ax,ay);for(let segIdx=0;segIdx<numSegs;segIdx++){// starting control point
const cp1x=ax+deltaCx;const cp1y=ay+deltaCy;// step angle
curAng+=segAng;// next anchor point
ax=x+Math.cos(curAng)*radius;ay=y+Math.sin(curAng)*radius;// next control point delta
deltaCx=-Math.sin(curAng)*handleLen;deltaCy=Math.cos(curAng)*handleLen;// ending control point
const cp2x=ax-deltaCx;const cp2y=ay-deltaCy;// render segment
this.bezierCurveTo(cp1x,cp1y,cp2x,cp2y,ax,ay);}return this;},polygon(){for(var _len=arguments.length,points=new Array(_len),_key=0;_key<_len;_key++){points[_key]=arguments[_key];}this.moveTo(...(points.shift()||[]));for(let point of points){this.lineTo(...(point||[]));}return this.closePath();},path(path){SVGPath.apply(this,path);return this;},_windingRule(rule){if(/even-?odd/.test(rule)){return'*';}return'';},fill(color,rule){if(/(even-?odd)|(non-?zero)/.test(color)){rule=color;color=null;}if(color){this.fillColor(color);}return this.addContent(`f${this._windingRule(rule)}`);},stroke(color){if(color){this.strokeColor(color);}return this.addContent('S');},fillAndStroke(fillColor,strokeColor,rule){if(strokeColor==null){strokeColor=fillColor;}const isFillRule=/(even-?odd)|(non-?zero)/;if(isFillRule.test(fillColor)){rule=fillColor;fillColor=null;}if(isFillRule.test(strokeColor)){rule=strokeColor;strokeColor=fillColor;}if(fillColor){this.fillColor(fillColor);this.strokeColor(strokeColor);}return this.addContent(`B${this._windingRule(rule)}`);},clip(rule){return this.addContent(`W${this._windingRule(rule)} n`);},transform(m11,m12,m21,m22,dx,dy){// keep track of the current transformation matrix
if(m11===1&&m12===0&&m21===0&&m22===1&&dx===0&&dy===0){// Ignore identity transforms
return this;}const m=this._ctm;const[m0,m1,m2,m3,m4,m5]=m;m[0]=m0*m11+m2*m12;m[1]=m1*m11+m3*m12;m[2]=m0*m21+m2*m22;m[3]=m1*m21+m3*m22;m[4]=m0*dx+m2*dy+m4;m[5]=m1*dx+m3*dy+m5;const values=[m11,m12,m21,m22,dx,dy].map(v=>number$1(v)).join(' ');return this.addContent(`${values} cm`);},translate(x,y){return this.transform(1,0,0,1,x,y);},rotate(angle,options){if(options===void 0){options={};}let y;const rad=angle*Math.PI/180;const cos=Math.cos(rad);const sin=Math.sin(rad);let x=y=0;if(options.origin!=null){[x,y]=options.origin;const x1=x*cos-y*sin;const y1=x*sin+y*cos;x-=x1;y-=y1;}return this.transform(cos,sin,-sin,cos,x,y);},scale(xFactor,yFactor,options){if(options===void 0){options={};}let y;if(yFactor==null){yFactor=xFactor;}if(typeof yFactor==='object'){options=yFactor;yFactor=xFactor;}let x=y=0;if(options.origin!=null){[x,y]=options.origin;x-=xFactor*x;y-=yFactor*y;}return this.transform(xFactor,0,0,yFactor,x,y);}};var fs={};const range=(left,right,inclusive)=>{let range=[];let ascending=left<right;let end=!inclusive?right:ascending?right+1:right-1;for(let i=left;ascending?i<end:i>end;ascending?i++:i--){range.push(i);}return range;};/* eslint-disable no-var *//* eslint-disable no-cond-assign */const WIN_ANSI_MAP={402:131,8211:150,8212:151,8216:145,8217:146,8218:130,8220:147,8221:148,8222:132,8224:134,8225:135,8226:149,8230:133,8364:128,8240:137,8249:139,8250:155,710:136,8482:153,338:140,339:156,732:152,352:138,353:154,376:159,381:142,382:158};const characters=`\
.notdef       .notdef        .notdef        .notdef
.notdef       .notdef        .notdef        .notdef
.notdef       .notdef        .notdef        .notdef
.notdef       .notdef        .notdef        .notdef
.notdef       .notdef        .notdef        .notdef
.notdef       .notdef        .notdef        .notdef
.notdef       .notdef        .notdef        .notdef
.notdef       .notdef        .notdef        .notdef

space         exclam         quotedbl       numbersign
dollar        percent        ampersand      quotesingle
parenleft     parenright     asterisk       plus
comma         hyphen         period         slash
zero          one            two            three
four          five           six            seven
eight         nine           colon          semicolon
less          equal          greater        question

at            A              B              C
D             E              F              G
H             I              J              K
L             M              N              O
P             Q              R              S
T             U              V              W
X             Y              Z              bracketleft
backslash     bracketright   asciicircum    underscore

grave         a              b              c
d             e              f              g
h             i              j              k
l             m              n              o
p             q              r              s
t             u              v              w
x             y              z              braceleft
bar           braceright     asciitilde     .notdef

Euro          .notdef        quotesinglbase florin
quotedblbase  ellipsis       dagger         daggerdbl
circumflex    perthousand    Scaron         guilsinglleft
OE            .notdef        Zcaron         .notdef
.notdef       quoteleft      quoteright     quotedblleft
quotedblright bullet         endash         emdash
tilde         trademark      scaron         guilsinglright
oe            .notdef        zcaron         ydieresis

space         exclamdown     cent           sterling
currency      yen            brokenbar      section
dieresis      copyright      ordfeminine    guillemotleft
logicalnot    hyphen         registered     macron
degree        plusminus      twosuperior    threesuperior
acute         mu             paragraph      periodcentered
cedilla       onesuperior    ordmasculine   guillemotright
onequarter    onehalf        threequarters  questiondown

Agrave        Aacute         Acircumflex    Atilde
Adieresis     Aring          AE             Ccedilla
Egrave        Eacute         Ecircumflex    Edieresis
Igrave        Iacute         Icircumflex    Idieresis
Eth           Ntilde         Ograve         Oacute
Ocircumflex   Otilde         Odieresis      multiply
Oslash        Ugrave         Uacute         Ucircumflex
Udieresis     Yacute         Thorn          germandbls

agrave        aacute         acircumflex    atilde
adieresis     aring          ae             ccedilla
egrave        eacute         ecircumflex    edieresis
igrave        iacute         icircumflex    idieresis
eth           ntilde         ograve         oacute
ocircumflex   otilde         odieresis      divide
oslash        ugrave         uacute         ucircumflex
udieresis     yacute         thorn          ydieresis\
`.split(/\s+/);function parse(contents){const obj={attributes:{},glyphWidths:{},kernPairs:{}};let section='';for(let line of contents.split('\n')){var match;var a;if(match=line.match(/^Start(\w+)/)){section=match[1];continue;}else if(match=line.match(/^End(\w+)/)){section='';continue;}switch(section){case'FontMetrics':match=line.match(/(^\w+)\s+(.*)/);var key=match[1];var value=match[2];if(a=obj.attributes[key]){if(!Array.isArray(a)){a=obj.attributes[key]=[a];}a.push(value);}else{obj.attributes[key]=value;}break;case'CharMetrics':if(!/^CH?\s/.test(line)){continue;}var name=line.match(/\bN\s+(\.?\w+)\s*;/)[1];obj.glyphWidths[name]=+line.match(/\bWX\s+(\d+)\s*;/)[1];break;case'KernPairs':match=line.match(/^KPX\s+(\.?\w+)\s+(\.?\w+)\s+(-?\d+)/);if(match){obj.kernPairs[match[1]+match[2]]=parseInt(match[3]);}break;}}return obj;}class AFMFont{static open(filename){{throw new Error('AFMFont.open not available on browser build');}}static fromJson(json){return new AFMFont(json);}constructor(contents){if(typeof contents==='string'){this.contents=contents;this.parse();}else{this.attributes=contents.attributes;this.glyphWidths=contents.glyphWidths;this.kernPairs=contents.kernPairs;}this.charWidths=range(0,255,true).map(i=>this.glyphWidths[characters[i]]);this.bbox=Array.from(this.attributes.FontBBox.split(/\s+/)).map(e=>+e);this.ascender=+(this.attributes.Ascender||0);this.descender=+(this.attributes.Descender||0);this.xHeight=+(this.attributes.XHeight||0);this.capHeight=+(this.attributes.CapHeight||0);this.lineGap=this.bbox[3]-this.bbox[1]-(this.ascender-this.descender);}parse(){const parsed=parse(this.contents);this.attributes=parsed.attributes;this.glyphWidths=parsed.glyphWidths;this.kernPairs=parsed.kernPairs;}encodeText(text){const res=[];for(let i=0,end=text.length,asc=0<=end;asc?i<end:i>end;asc?i++:i--){let char=text.charCodeAt(i);char=WIN_ANSI_MAP[char]||char;res.push(char.toString(16));}return res;}glyphsForString(string){const glyphs=[];for(let i=0,end=string.length,asc=0<=end;asc?i<end:i>end;asc?i++:i--){const charCode=string.charCodeAt(i);glyphs.push(this.characterToGlyph(charCode));}return glyphs;}characterToGlyph(character){return characters[WIN_ANSI_MAP[character]||character]||'.notdef';}widthOfGlyph(glyph){return this.glyphWidths[glyph]||0;}getKernPair(left,right){return this.kernPairs[left+right]||0;}advancesForGlyphs(glyphs){const advances=[];for(let index=0;index<glyphs.length;index++){const left=glyphs[index];const right=glyphs[index+1];advances.push(this.widthOfGlyph(left)+this.getKernPair(left,right));}return advances;}}var attributes=[{Comment:["Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.","Creation Date: Thu May  1 12:43:52 1997","UniqueID 43052","VMusage 37169 48194"],FontName:"Helvetica-Bold",FullName:"Helvetica Bold",FamilyName:"Helvetica",Weight:"Bold",ItalicAngle:"0",IsFixedPitch:"false",CharacterSet:"ExtendedRoman",FontBBox:"-170 -228 1003 962 ",UnderlinePosition:"-100",UnderlineThickness:"50",Version:"002.000",Notice:"Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.Helvetica is a trademark of Linotype-Hell AG and/or its subsidiaries.",EncodingScheme:"AdobeStandardEncoding",CapHeight:"718",XHeight:"532",Ascender:"718",Descender:"-207",StdHW:"118",StdVW:"140"},{Comment:["Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.","Creation Date: Thu May  1 12:45:12 1997","UniqueID 43053","VMusage 14482 68586"],FontName:"Helvetica-BoldOblique",FullName:"Helvetica Bold Oblique",FamilyName:"Helvetica",Weight:"Bold",ItalicAngle:"-12",IsFixedPitch:"false",CharacterSet:"ExtendedRoman",FontBBox:"-174 -228 1114 962",UnderlinePosition:"-100",UnderlineThickness:"50",Version:"002.000",Notice:"Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.Helvetica is a trademark of Linotype-Hell AG and/or its subsidiaries.",EncodingScheme:"AdobeStandardEncoding",CapHeight:"718",XHeight:"532",Ascender:"718",Descender:"-207",StdHW:"118",StdVW:"140"},{Comment:["Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.","Creation Date: Thu May  1 12:44:31 1997","UniqueID 43055","VMusage 14960 69346"],FontName:"Helvetica-Oblique",FullName:"Helvetica Oblique",FamilyName:"Helvetica",Weight:"Medium",ItalicAngle:"-12",IsFixedPitch:"false",CharacterSet:"ExtendedRoman",FontBBox:"-170 -225 1116 931 ",UnderlinePosition:"-100",UnderlineThickness:"50",Version:"002.000",Notice:"Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.Helvetica is a trademark of Linotype-Hell AG and/or its subsidiaries.",EncodingScheme:"AdobeStandardEncoding",CapHeight:"718",XHeight:"523",Ascender:"718",Descender:"-207",StdHW:"76",StdVW:"88"},{Comment:["Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.","Creation Date: Thu May  1 12:38:23 1997","UniqueID 43054","VMusage 37069 48094"],FontName:"Helvetica",FullName:"Helvetica",FamilyName:"Helvetica",Weight:"Medium",ItalicAngle:"0",IsFixedPitch:"false",CharacterSet:"ExtendedRoman",FontBBox:"-166 -225 1000 931 ",UnderlinePosition:"-100",UnderlineThickness:"50",Version:"002.000",Notice:"Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.Helvetica is a trademark of Linotype-Hell AG and/or its subsidiaries.",EncodingScheme:"AdobeStandardEncoding",CapHeight:"718",XHeight:"523",Ascender:"718",Descender:"-207",StdHW:"76",StdVW:"88"},{Comment:["Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.","Creation Date: Thu May  1 12:52:56 1997","UniqueID 43065","VMusage 41636 52661"],FontName:"Times-Bold",FullName:"Times Bold",FamilyName:"Times",Weight:"Bold",ItalicAngle:"0",IsFixedPitch:"false",CharacterSet:"ExtendedRoman",FontBBox:"-168 -218 1000 935 ",UnderlinePosition:"-100",UnderlineThickness:"50",Version:"002.000",Notice:"Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.Times is a trademark of Linotype-Hell AG and/or its subsidiaries.",EncodingScheme:"AdobeStandardEncoding",CapHeight:"676",XHeight:"461",Ascender:"683",Descender:"-217",StdHW:"44",StdVW:"139"},{Comment:["Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.","Creation Date: Thu May  1 13:04:06 1997","UniqueID 43066","VMusage 45874 56899"],FontName:"Times-BoldItalic",FullName:"Times Bold Italic",FamilyName:"Times",Weight:"Bold",ItalicAngle:"-15",IsFixedPitch:"false",CharacterSet:"ExtendedRoman",FontBBox:"-200 -218 996 921",UnderlinePosition:"-100",UnderlineThickness:"50",Version:"002.000",Notice:"Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.Times is a trademark of Linotype-Hell AG and/or its subsidiaries.",EncodingScheme:"AdobeStandardEncoding",CapHeight:"669",XHeight:"462",Ascender:"683",Descender:"-217",StdHW:"42",StdVW:"121"},{Comment:["Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.","Creation Date: Thu May  1 12:56:55 1997","UniqueID 43067","VMusage 47727 58752"],FontName:"Times-Italic",FullName:"Times Italic",FamilyName:"Times",Weight:"Medium",ItalicAngle:"-15.5",IsFixedPitch:"false",CharacterSet:"ExtendedRoman",FontBBox:"-169 -217 1010 883 ",UnderlinePosition:"-100",UnderlineThickness:"50",Version:"002.000",Notice:"Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.Times is a trademark of Linotype-Hell AG and/or its subsidiaries.",EncodingScheme:"AdobeStandardEncoding",CapHeight:"653",XHeight:"441",Ascender:"683",Descender:"-217",StdHW:"32",StdVW:"76"},{Comment:["Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.","Creation Date: Thu May  1 12:49:17 1997","UniqueID 43068","VMusage 43909 54934"],FontName:"Times-Roman",FullName:"Times Roman",FamilyName:"Times",Weight:"Roman",ItalicAngle:"0",IsFixedPitch:"false",CharacterSet:"ExtendedRoman",FontBBox:"-168 -218 1000 898 ",UnderlinePosition:"-100",UnderlineThickness:"50",Version:"002.000",Notice:"Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.Times is a trademark of Linotype-Hell AG and/or its subsidiaries.",EncodingScheme:"AdobeStandardEncoding",CapHeight:"662",XHeight:"450",Ascender:"683",Descender:"-217",StdHW:"28",StdVW:"84"},{Comment:["Copyright (c) 1989, 1990, 1991, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.","Creation Date: Mon Jun 23 16:28:00 1997","UniqueID 43048","VMusage 41139 52164"],FontName:"Courier-Bold",FullName:"Courier Bold",FamilyName:"Courier",Weight:"Bold",ItalicAngle:"0",IsFixedPitch:"true",CharacterSet:"ExtendedRoman",FontBBox:"-113 -250 749 801 ",UnderlinePosition:"-100",UnderlineThickness:"50",Version:"003.000",Notice:"Copyright (c) 1989, 1990, 1991, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",EncodingScheme:"AdobeStandardEncoding",CapHeight:"562",XHeight:"439",Ascender:"629",Descender:"-157",StdHW:"84",StdVW:"106"},{Comment:["Copyright (c) 1989, 1990, 1991, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.","Creation Date: Mon Jun 23 16:28:46 1997","UniqueID 43049","VMusage 17529 79244"],FontName:"Courier-BoldOblique",FullName:"Courier Bold Oblique",FamilyName:"Courier",Weight:"Bold",ItalicAngle:"-12",IsFixedPitch:"true",CharacterSet:"ExtendedRoman",FontBBox:"-57 -250 869 801",UnderlinePosition:"-100",UnderlineThickness:"50",Version:"003.000",Notice:"Copyright (c) 1989, 1990, 1991, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",EncodingScheme:"AdobeStandardEncoding",CapHeight:"562",XHeight:"439",Ascender:"629",Descender:"-157",StdHW:"84",StdVW:"106"},{Comment:["Copyright (c) 1989, 1990, 1991, 1992, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.","Creation Date: Thu May  1 17:37:52 1997","UniqueID 43051","VMusage 16248 75829"],FontName:"Courier-Oblique",FullName:"Courier Oblique",FamilyName:"Courier",Weight:"Medium",ItalicAngle:"-12",IsFixedPitch:"true",CharacterSet:"ExtendedRoman",FontBBox:"-27 -250 849 805 ",UnderlinePosition:"-100",UnderlineThickness:"50",Version:"003.000",Notice:"Copyright (c) 1989, 1990, 1991, 1992, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",EncodingScheme:"AdobeStandardEncoding",CapHeight:"562",XHeight:"426",Ascender:"629",Descender:"-157",StdHW:"51",StdVW:"51"},{Comment:["Copyright (c) 1989, 1990, 1991, 1992, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.","Creation Date: Thu May  1 17:27:09 1997","UniqueID 43050","VMusage 39754 50779"],FontName:"Courier",FullName:"Courier",FamilyName:"Courier",Weight:"Medium",ItalicAngle:"0",IsFixedPitch:"true",CharacterSet:"ExtendedRoman",FontBBox:"-23 -250 715 805 ",UnderlinePosition:"-100",UnderlineThickness:"50",Version:"003.000",Notice:"Copyright (c) 1989, 1990, 1991, 1992, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",EncodingScheme:"AdobeStandardEncoding",CapHeight:"562",XHeight:"426",Ascender:"629",Descender:"-157",StdHW:"51",StdVW:"51"}];var glyphWidths={space:[278,278,278,278,250,250,250,250,600,600,600,600],exclam:[333,333,278,278,333,389,333,333,600,600,600,600],quotedbl:[474,474,355,355,555,555,420,408,600,600,600,600],numbersign:[556,556,556,556,500,500,500,500,600,600,600,600],dollar:[556,556,556,556,500,500,500,500,600,600,600,600],percent:[889,889,889,889,1000,833,833,833,600,600,600,600],ampersand:[722,722,667,667,833,778,778,778,600,600,600,600],quoteright:[278,278,222,222,333,333,333,333,600,600,600,600],parenleft:[333,333,333,333,333,333,333,333,600,600,600,600],parenright:[333,333,333,333,333,333,333,333,600,600,600,600],asterisk:[389,389,389,389,500,500,500,500,600,600,600,600],plus:[584,584,584,584,570,570,675,564,600,600,600,600],comma:[278,278,278,278,250,250,250,250,600,600,600,600],hyphen:[333,333,333,333,333,333,333,333,600,600,600,600],period:[278,278,278,278,250,250,250,250,600,600,600,600],slash:[278,278,278,278,278,278,278,278,600,600,600,600],zero:[556,556,556,556,500,500,500,500,600,600,600,600],one:[556,556,556,556,500,500,500,500,600,600,600,600],two:[556,556,556,556,500,500,500,500,600,600,600,600],three:[556,556,556,556,500,500,500,500,600,600,600,600],four:[556,556,556,556,500,500,500,500,600,600,600,600],five:[556,556,556,556,500,500,500,500,600,600,600,600],six:[556,556,556,556,500,500,500,500,600,600,600,600],seven:[556,556,556,556,500,500,500,500,600,600,600,600],eight:[556,556,556,556,500,500,500,500,600,600,600,600],nine:[556,556,556,556,500,500,500,500,600,600,600,600],colon:[333,333,278,278,333,333,333,278,600,600,600,600],semicolon:[333,333,278,278,333,333,333,278,600,600,600,600],less:[584,584,584,584,570,570,675,564,600,600,600,600],equal:[584,584,584,584,570,570,675,564,600,600,600,600],greater:[584,584,584,584,570,570,675,564,600,600,600,600],question:[611,611,556,556,500,500,500,444,600,600,600,600],at:[975,975,1015,1015,930,832,920,921,600,600,600,600],A:[722,722,667,667,722,667,611,722,600,600,600,600],B:[722,722,667,667,667,667,611,667,600,600,600,600],C:[722,722,722,722,722,667,667,667,600,600,600,600],D:[722,722,722,722,722,722,722,722,600,600,600,600],E:[667,667,667,667,667,667,611,611,600,600,600,600],F:[611,611,611,611,611,667,611,556,600,600,600,600],G:[778,778,778,778,778,722,722,722,600,600,600,600],H:[722,722,722,722,778,778,722,722,600,600,600,600],I:[278,278,278,278,389,389,333,333,600,600,600,600],J:[556,556,500,500,500,500,444,389,600,600,600,600],K:[722,722,667,667,778,667,667,722,600,600,600,600],L:[611,611,556,556,667,611,556,611,600,600,600,600],M:[833,833,833,833,944,889,833,889,600,600,600,600],N:[722,722,722,722,722,722,667,722,600,600,600,600],O:[778,778,778,778,778,722,722,722,600,600,600,600],P:[667,667,667,667,611,611,611,556,600,600,600,600],Q:[778,778,778,778,778,722,722,722,600,600,600,600],R:[722,722,722,722,722,667,611,667,600,600,600,600],S:[667,667,667,667,556,556,500,556,600,600,600,600],T:[611,611,611,611,667,611,556,611,600,600,600,600],U:[722,722,722,722,722,722,722,722,600,600,600,600],V:[667,667,667,667,722,667,611,722,600,600,600,600],W:[944,944,944,944,1000,889,833,944,600,600,600,600],X:[667,667,667,667,722,667,611,722,600,600,600,600],Y:[667,667,667,667,722,611,556,722,600,600,600,600],Z:[611,611,611,611,667,611,556,611,600,600,600,600],bracketleft:[333,333,278,278,333,333,389,333,600,600,600,600],backslash:[278,278,278,278,278,278,278,278,600,600,600,600],bracketright:[333,333,278,278,333,333,389,333,600,600,600,600],asciicircum:[584,584,469,469,581,570,422,469,600,600,600,600],underscore:[556,556,556,556,500,500,500,500,600,600,600,600],quoteleft:[278,278,222,222,333,333,333,333,600,600,600,600],a:[556,556,556,556,500,500,500,444,600,600,600,600],b:[611,611,556,556,556,500,500,500,600,600,600,600],c:[556,556,500,500,444,444,444,444,600,600,600,600],d:[611,611,556,556,556,500,500,500,600,600,600,600],e:[556,556,556,556,444,444,444,444,600,600,600,600],f:[333,333,278,278,333,333,278,333,600,600,600,600],g:[611,611,556,556,500,500,500,500,600,600,600,600],h:[611,611,556,556,556,556,500,500,600,600,600,600],i:[278,278,222,222,278,278,278,278,600,600,600,600],j:[278,278,222,222,333,278,278,278,600,600,600,600],k:[556,556,500,500,556,500,444,500,600,600,600,600],l:[278,278,222,222,278,278,278,278,600,600,600,600],m:[889,889,833,833,833,778,722,778,600,600,600,600],n:[611,611,556,556,556,556,500,500,600,600,600,600],o:[611,611,556,556,500,500,500,500,600,600,600,600],p:[611,611,556,556,556,500,500,500,600,600,600,600],q:[611,611,556,556,556,500,500,500,600,600,600,600],r:[389,389,333,333,444,389,389,333,600,600,600,600],s:[556,556,500,500,389,389,389,389,600,600,600,600],t:[333,333,278,278,333,278,278,278,600,600,600,600],u:[611,611,556,556,556,556,500,500,600,600,600,600],v:[556,556,500,500,500,444,444,500,600,600,600,600],w:[778,778,722,722,722,667,667,722,600,600,600,600],x:[556,556,500,500,500,500,444,500,600,600,600,600],y:[556,556,500,500,500,444,444,500,600,600,600,600],z:[500,500,500,500,444,389,389,444,600,600,600,600],braceleft:[389,389,334,334,394,348,400,480,600,600,600,600],bar:[280,280,260,260,220,220,275,200,600,600,600,600],braceright:[389,389,334,334,394,348,400,480,600,600,600,600],asciitilde:[584,584,584,584,520,570,541,541,600,600,600,600],exclamdown:[333,333,333,333,333,389,389,333,600,600,600,600],cent:[556,556,556,556,500,500,500,500,600,600,600,600],sterling:[556,556,556,556,500,500,500,500,600,600,600,600],fraction:[167,167,167,167,167,167,167,167,600,600,600,600],yen:[556,556,556,556,500,500,500,500,600,600,600,600],florin:[556,556,556,556,500,500,500,500,600,600,600,600],section:[556,556,556,556,500,500,500,500,600,600,600,600],currency:[556,556,556,556,500,500,500,500,600,600,600,600],quotesingle:[238,238,191,191,278,278,214,180,600,600,600,600],quotedblleft:[500,500,333,333,500,500,556,444,600,600,600,600],guillemotleft:[556,556,556,556,500,500,500,500,600,600,600,600],guilsinglleft:[333,333,333,333,333,333,333,333,600,600,600,600],guilsinglright:[333,333,333,333,333,333,333,333,600,600,600,600],fi:[611,611,500,500,556,556,500,556,600,600,600,600],fl:[611,611,500,500,556,556,500,556,600,600,600,600],endash:[556,556,556,556,500,500,500,500,600,600,600,600],dagger:[556,556,556,556,500,500,500,500,600,600,600,600],daggerdbl:[556,556,556,556,500,500,500,500,600,600,600,600],periodcentered:[278,278,278,278,250,250,250,250,600,600,600,600],paragraph:[556,556,537,537,540,500,523,453,600,600,600,600],bullet:[350,350,350,350,350,350,350,350,600,600,600,600],quotesinglbase:[278,278,222,222,333,333,333,333,600,600,600,600],quotedblbase:[500,500,333,333,500,500,556,444,600,600,600,600],quotedblright:[500,500,333,333,500,500,556,444,600,600,600,600],guillemotright:[556,556,556,556,500,500,500,500,600,600,600,600],ellipsis:[1000,1000,1000,1000,1000,1000,889,1000,600,600,600,600],perthousand:[1000,1000,1000,1000,1000,1000,1000,1000,600,600,600,600],questiondown:[611,611,611,611,500,500,500,444,600,600,600,600],grave:[333,333,333,333,333,333,333,333,600,600,600,600],acute:[333,333,333,333,333,333,333,333,600,600,600,600],circumflex:[333,333,333,333,333,333,333,333,600,600,600,600],tilde:[333,333,333,333,333,333,333,333,600,600,600,600],macron:[333,333,333,333,333,333,333,333,600,600,600,600],breve:[333,333,333,333,333,333,333,333,600,600,600,600],dotaccent:[333,333,333,333,333,333,333,333,600,600,600,600],dieresis:[333,333,333,333,333,333,333,333,600,600,600,600],ring:[333,333,333,333,333,333,333,333,600,600,600,600],cedilla:[333,333,333,333,333,333,333,333,600,600,600,600],hungarumlaut:[333,333,333,333,333,333,333,333,600,600,600,600],ogonek:[333,333,333,333,333,333,333,333,600,600,600,600],caron:[333,333,333,333,333,333,333,333,600,600,600,600],emdash:[1000,1000,1000,1000,1000,1000,889,1000,600,600,600,600],AE:[1000,1000,1000,1000,1000,944,889,889,600,600,600,600],ordfeminine:[370,370,370,370,300,266,276,276,600,600,600,600],Lslash:[611,611,556,556,667,611,556,611,600,600,600,600],Oslash:[778,778,778,778,778,722,722,722,600,600,600,600],OE:[1000,1000,1000,1000,1000,944,944,889,600,600,600,600],ordmasculine:[365,365,365,365,330,300,310,310,600,600,600,600],ae:[889,889,889,889,722,722,667,667,600,600,600,600],dotlessi:[278,278,278,278,278,278,278,278,600,600,600,600],lslash:[278,278,222,222,278,278,278,278,600,600,600,600],oslash:[611,611,611,611,500,500,500,500,600,600,600,600],oe:[944,944,944,944,722,722,667,722,600,600,600,600],germandbls:[611,611,611,611,556,500,500,500,600,600,600,600],Idieresis:[278,278,278,278,389,389,333,333,600,600,600,600],eacute:[556,556,556,556,444,444,444,444,600,600,600,600],abreve:[556,556,556,556,500,500,500,444,600,600,600,600],uhungarumlaut:[611,611,556,556,556,556,500,500,600,600,600,600],ecaron:[556,556,556,556,444,444,444,444,600,600,600,600],Ydieresis:[667,667,667,667,722,611,556,722,600,600,600,600],divide:[584,584,584,584,570,570,675,564,600,600,600,600],Yacute:[667,667,667,667,722,611,556,722,600,600,600,600],Acircumflex:[722,722,667,667,722,667,611,722,600,600,600,600],aacute:[556,556,556,556,500,500,500,444,600,600,600,600],Ucircumflex:[722,722,722,722,722,722,722,722,600,600,600,600],yacute:[556,556,500,500,500,444,444,500,600,600,600,600],scommaaccent:[556,556,500,500,389,389,389,389,600,600,600,600],ecircumflex:[556,556,556,556,444,444,444,444,600,600,600,600],Uring:[722,722,722,722,722,722,722,722,600,600,600,600],Udieresis:[722,722,722,722,722,722,722,722,600,600,600,600],aogonek:[556,556,556,556,500,500,500,444,600,600,600,600],Uacute:[722,722,722,722,722,722,722,722,600,600,600,600],uogonek:[611,611,556,556,556,556,500,500,600,600,600,600],Edieresis:[667,667,667,667,667,667,611,611,600,600,600,600],Dcroat:[722,722,722,722,722,722,722,722,600,600,600,600],commaaccent:[250,250,250,250,250,250,250,250,600,600,600,600],copyright:[737,737,737,737,747,747,760,760,600,600,600,600],Emacron:[667,667,667,667,667,667,611,611,600,600,600,600],ccaron:[556,556,500,500,444,444,444,444,600,600,600,600],aring:[556,556,556,556,500,500,500,444,600,600,600,600],Ncommaaccent:[722,722,722,722,722,722,667,722,600,600,600,600],lacute:[278,278,222,222,278,278,278,278,600,600,600,600],agrave:[556,556,556,556,500,500,500,444,600,600,600,600],Tcommaaccent:[611,611,611,611,667,611,556,611,600,600,600,600],Cacute:[722,722,722,722,722,667,667,667,600,600,600,600],atilde:[556,556,556,556,500,500,500,444,600,600,600,600],Edotaccent:[667,667,667,667,667,667,611,611,600,600,600,600],scaron:[556,556,500,500,389,389,389,389,600,600,600,600],scedilla:[556,556,500,500,389,389,389,389,600,600,600,600],iacute:[278,278,278,278,278,278,278,278,600,600,600,600],lozenge:[494,494,471,471,494,494,471,471,600,600,600,600],Rcaron:[722,722,722,722,722,667,611,667,600,600,600,600],Gcommaaccent:[778,778,778,778,778,722,722,722,600,600,600,600],ucircumflex:[611,611,556,556,556,556,500,500,600,600,600,600],acircumflex:[556,556,556,556,500,500,500,444,600,600,600,600],Amacron:[722,722,667,667,722,667,611,722,600,600,600,600],rcaron:[389,389,333,333,444,389,389,333,600,600,600,600],ccedilla:[556,556,500,500,444,444,444,444,600,600,600,600],Zdotaccent:[611,611,611,611,667,611,556,611,600,600,600,600],Thorn:[667,667,667,667,611,611,611,556,600,600,600,600],Omacron:[778,778,778,778,778,722,722,722,600,600,600,600],Racute:[722,722,722,722,722,667,611,667,600,600,600,600],Sacute:[667,667,667,667,556,556,500,556,600,600,600,600],dcaron:[743,743,643,643,672,608,544,588,600,600,600,600],Umacron:[722,722,722,722,722,722,722,722,600,600,600,600],uring:[611,611,556,556,556,556,500,500,600,600,600,600],threesuperior:[333,333,333,333,300,300,300,300,600,600,600,600],Ograve:[778,778,778,778,778,722,722,722,600,600,600,600],Agrave:[722,722,667,667,722,667,611,722,600,600,600,600],Abreve:[722,722,667,667,722,667,611,722,600,600,600,600],multiply:[584,584,584,584,570,570,675,564,600,600,600,600],uacute:[611,611,556,556,556,556,500,500,600,600,600,600],Tcaron:[611,611,611,611,667,611,556,611,600,600,600,600],partialdiff:[494,494,476,476,494,494,476,476,600,600,600,600],ydieresis:[556,556,500,500,500,444,444,500,600,600,600,600],Nacute:[722,722,722,722,722,722,667,722,600,600,600,600],icircumflex:[278,278,278,278,278,278,278,278,600,600,600,600],Ecircumflex:[667,667,667,667,667,667,611,611,600,600,600,600],adieresis:[556,556,556,556,500,500,500,444,600,600,600,600],edieresis:[556,556,556,556,444,444,444,444,600,600,600,600],cacute:[556,556,500,500,444,444,444,444,600,600,600,600],nacute:[611,611,556,556,556,556,500,500,600,600,600,600],umacron:[611,611,556,556,556,556,500,500,600,600,600,600],Ncaron:[722,722,722,722,722,722,667,722,600,600,600,600],Iacute:[278,278,278,278,389,389,333,333,600,600,600,600],plusminus:[584,584,584,584,570,570,675,564,600,600,600,600],brokenbar:[280,280,260,260,220,220,275,200,600,600,600,600],registered:[737,737,737,737,747,747,760,760,600,600,600,600],Gbreve:[778,778,778,778,778,722,722,722,600,600,600,600],Idotaccent:[278,278,278,278,389,389,333,333,600,600,600,600],summation:[600,600,600,600,600,600,600,600,600,600,600,600],Egrave:[667,667,667,667,667,667,611,611,600,600,600,600],racute:[389,389,333,333,444,389,389,333,600,600,600,600],omacron:[611,611,556,556,500,500,500,500,600,600,600,600],Zacute:[611,611,611,611,667,611,556,611,600,600,600,600],Zcaron:[611,611,611,611,667,611,556,611,600,600,600,600],greaterequal:[549,549,549,549,549,549,549,549,600,600,600,600],Eth:[722,722,722,722,722,722,722,722,600,600,600,600],Ccedilla:[722,722,722,722,722,667,667,667,600,600,600,600],lcommaaccent:[278,278,222,222,278,278,278,278,600,600,600,600],tcaron:[389,389,317,317,416,366,300,326,600,600,600,600],eogonek:[556,556,556,556,444,444,444,444,600,600,600,600],Uogonek:[722,722,722,722,722,722,722,722,600,600,600,600],Aacute:[722,722,667,667,722,667,611,722,600,600,600,600],Adieresis:[722,722,667,667,722,667,611,722,600,600,600,600],egrave:[556,556,556,556,444,444,444,444,600,600,600,600],zacute:[500,500,500,500,444,389,389,444,600,600,600,600],iogonek:[278,278,222,222,278,278,278,278,600,600,600,600],Oacute:[778,778,778,778,778,722,722,722,600,600,600,600],oacute:[611,611,556,556,500,500,500,500,600,600,600,600],amacron:[556,556,556,556,500,500,500,444,600,600,600,600],sacute:[556,556,500,500,389,389,389,389,600,600,600,600],idieresis:[278,278,278,278,278,278,278,278,600,600,600,600],Ocircumflex:[778,778,778,778,778,722,722,722,600,600,600,600],Ugrave:[722,722,722,722,722,722,722,722,600,600,600,600],Delta:[612,612,612,612,612,612,612,612,600,600,600,600],thorn:[611,611,556,556,556,500,500,500,600,600,600,600],twosuperior:[333,333,333,333,300,300,300,300,600,600,600,600],Odieresis:[778,778,778,778,778,722,722,722,600,600,600,600],mu:[611,611,556,556,556,576,500,500,600,600,600,600],igrave:[278,278,278,278,278,278,278,278,600,600,600,600],ohungarumlaut:[611,611,556,556,500,500,500,500,600,600,600,600],Eogonek:[667,667,667,667,667,667,611,611,600,600,600,600],dcroat:[611,611,556,556,556,500,500,500,600,600,600,600],threequarters:[834,834,834,834,750,750,750,750,600,600,600,600],Scedilla:[667,667,667,667,556,556,500,556,600,600,600,600],lcaron:[400,400,299,299,394,382,300,344,600,600,600,600],Kcommaaccent:[722,722,667,667,778,667,667,722,600,600,600,600],Lacute:[611,611,556,556,667,611,556,611,600,600,600,600],trademark:[1000,1000,1000,1000,1000,1000,980,980,600,600,600,600],edotaccent:[556,556,556,556,444,444,444,444,600,600,600,600],Igrave:[278,278,278,278,389,389,333,333,600,600,600,600],Imacron:[278,278,278,278,389,389,333,333,600,600,600,600],Lcaron:[611,611,556,556,667,611,611,611,600,600,600,600],onehalf:[834,834,834,834,750,750,750,750,600,600,600,600],lessequal:[549,549,549,549,549,549,549,549,600,600,600,600],ocircumflex:[611,611,556,556,500,500,500,500,600,600,600,600],ntilde:[611,611,556,556,556,556,500,500,600,600,600,600],Uhungarumlaut:[722,722,722,722,722,722,722,722,600,600,600,600],Eacute:[667,667,667,667,667,667,611,611,600,600,600,600],emacron:[556,556,556,556,444,444,444,444,600,600,600,600],gbreve:[611,611,556,556,500,500,500,500,600,600,600,600],onequarter:[834,834,834,834,750,750,750,750,600,600,600,600],Scaron:[667,667,667,667,556,556,500,556,600,600,600,600],Scommaaccent:[667,667,667,667,556,556,500,556,600,600,600,600],Ohungarumlaut:[778,778,778,778,778,722,722,722,600,600,600,600],degree:[400,400,400,400,400,400,400,400,600,600,600,600],ograve:[611,611,556,556,500,500,500,500,600,600,600,600],Ccaron:[722,722,722,722,722,667,667,667,600,600,600,600],ugrave:[611,611,556,556,556,556,500,500,600,600,600,600],radical:[549,549,453,453,549,549,453,453,600,600,600,600],Dcaron:[722,722,722,722,722,722,722,722,600,600,600,600],rcommaaccent:[389,389,333,333,444,389,389,333,600,600,600,600],Ntilde:[722,722,722,722,722,722,667,722,600,600,600,600],otilde:[611,611,556,556,500,500,500,500,600,600,600,600],Rcommaaccent:[722,722,722,722,722,667,611,667,600,600,600,600],Lcommaaccent:[611,611,556,556,667,611,556,611,600,600,600,600],Atilde:[722,722,667,667,722,667,611,722,600,600,600,600],Aogonek:[722,722,667,667,722,667,611,722,600,600,600,600],Aring:[722,722,667,667,722,667,611,722,600,600,600,600],Otilde:[778,778,778,778,778,722,722,722,600,600,600,600],zdotaccent:[500,500,500,500,444,389,389,444,600,600,600,600],Ecaron:[667,667,667,667,667,667,611,611,600,600,600,600],Iogonek:[278,278,278,278,389,389,333,333,600,600,600,600],kcommaaccent:[556,556,500,500,556,500,444,500,600,600,600,600],minus:[584,584,584,584,570,606,675,564,600,600,600,600],Icircumflex:[278,278,278,278,389,389,333,333,600,600,600,600],ncaron:[611,611,556,556,556,556,500,500,600,600,600,600],tcommaaccent:[333,333,278,278,333,278,278,278,600,600,600,600],logicalnot:[584,584,584,584,570,606,675,564,600,600,600,600],odieresis:[611,611,556,556,500,500,500,500,600,600,600,600],udieresis:[611,611,556,556,556,556,500,500,600,600,600,600],notequal:[549,549,549,549,549,549,549,549,600,600,600,600],gcommaaccent:[611,611,556,556,500,500,500,500,600,600,600,600],eth:[611,611,556,556,500,500,500,500,600,600,600,600],zcaron:[500,500,500,500,444,389,389,444,600,600,600,600],ncommaaccent:[611,611,556,556,556,556,500,500,600,600,600,600],onesuperior:[333,333,333,333,300,300,300,300,600,600,600,600],imacron:[278,278,278,278,278,278,278,278,600,600,600,600],Euro:[556,556,556,556,500,500,500,500,600,600,600,600]};var kernPairs={AC:[-40,-40,-30,-30,-55,-65,-30,-40],ACacute:[-40,-40,-30,-30,-55,-65,-30,-40],ACcaron:[-40,-40,-30,-30,-55,-65,-30,-40],ACcedilla:[-40,-40,-30,-30,-55,-65,-30,-40],AG:[-50,-50,-30,-30,-55,-60,-35,-40],AGbreve:[-50,-50,-30,-30,-55,-60,-35,-40],AGcommaaccent:[-50,-50,-30,-30,-55,-60,-35,-40],AO:[-40,-40,-30,-30,-45,-50,-40,-55],AOacute:[-40,-40,-30,-30,-45,-50,-40,-55],AOcircumflex:[-40,-40,-30,-30,-45,-50,-40,-55],AOdieresis:[-40,-40,-30,-30,-45,-50,-40,-55],AOgrave:[-40,-40,-30,-30,-45,-50,-40,-55],AOhungarumlaut:[-40,-40,-30,-30,-45,-50,-40,-55],AOmacron:[-40,-40,-30,-30,-45,-50,-40,-55],AOslash:[-40,-40,-30,-30,-45,-50,-40,-55],AOtilde:[-40,-40,-30,-30,-45,-50,-40,-55],AQ:[-40,-40,-30,-30,-45,-55,-40,-55],AT:[-90,-90,-120,-120,-95,-55,-37,-111],ATcaron:[-90,-90,-120,-120,-95,-55,-37,-111],ATcommaaccent:[-90,-90,-120,-120,-95,-55,-37,-111],AU:[-50,-50,-50,-50,-50,-50,-50,-55],AUacute:[-50,-50,-50,-50,-50,-50,-50,-55],AUcircumflex:[-50,-50,-50,-50,-50,-50,-50,-55],AUdieresis:[-50,-50,-50,-50,-50,-50,-50,-55],AUgrave:[-50,-50,-50,-50,-50,-50,-50,-55],AUhungarumlaut:[-50,-50,-50,-50,-50,-50,-50,-55],AUmacron:[-50,-50,-50,-50,-50,-50,-50,-55],AUogonek:[-50,-50,-50,-50,-50,-50,-50,-55],AUring:[-50,-50,-50,-50,-50,-50,-50,-55],AV:[-80,-80,-70,-70,-145,-95,-105,-135],AW:[-60,-60,-50,-50,-130,-100,-95,-90],AY:[-110,-110,-100,-100,-100,-70,-55,-105],AYacute:[-110,-110,-100,-100,-100,-70,-55,-105],AYdieresis:[-110,-110,-100,-100,-100,-70,-55,-105],Au:[-30,-30,-30,-30,-50,-30,-20],Auacute:[-30,-30,-30,-30,-50,-30,-20],Aucircumflex:[-30,-30,-30,-30,-50,-30,-20],Audieresis:[-30,-30,-30,-30,-50,-30,-20],Augrave:[-30,-30,-30,-30,-50,-30,-20],Auhungarumlaut:[-30,-30,-30,-30,-50,-30,-20],Aumacron:[-30,-30,-30,-30,-50,-30,-20],Auogonek:[-30,-30,-30,-30,-50,-30,-20],Auring:[-30,-30,-30,-30,-50,-30,-20],Av:[-40,-40,-40,-40,-100,-74,-55,-74],Aw:[-30,-30,-40,-40,-90,-74,-55,-92],Ay:[-30,-30,-40,-40,-74,-74,-55,-92],Ayacute:[-30,-30,-40,-40,-74,-74,-55,-92],Aydieresis:[-30,-30,-40,-40,-74,-74,-55,-92],AacuteC:[-40,-40,-30,-30,-55,-65,-30,-40],AacuteCacute:[-40,-40,-30,-30,-55,-65,-30,-40],AacuteCcaron:[-40,-40,-30,-30,-55,-65,-30,-40],AacuteCcedilla:[-40,-40,-30,-30,-55,-65,-30,-40],AacuteG:[-50,-50,-30,-30,-55,-60,-35,-40],AacuteGbreve:[-50,-50,-30,-30,-55,-60,-35,-40],AacuteGcommaaccent:[-50,-50,-30,-30,-55,-60,-35,-40],AacuteO:[-40,-40,-30,-30,-45,-50,-40,-55],AacuteOacute:[-40,-40,-30,-30,-45,-50,-40,-55],AacuteOcircumflex:[-40,-40,-30,-30,-45,-50,-40,-55],AacuteOdieresis:[-40,-40,-30,-30,-45,-50,-40,-55],AacuteOgrave:[-40,-40,-30,-30,-45,-50,-40,-55],AacuteOhungarumlaut:[-40,-40,-30,-30,-45,-50,-40,-55],AacuteOmacron:[-40,-40,-30,-30,-45,-50,-40,-55],AacuteOslash:[-40,-40,-30,-30,-45,-50,-40,-55],AacuteOtilde:[-40,-40,-30,-30,-45,-50,-40,-55],AacuteQ:[-40,-40,-30,-30,-45,-55,-40,-55],AacuteT:[-90,-90,-120,-120,-95,-55,-37,-111],AacuteTcaron:[-90,-90,-120,-120,-95,-55,-37,-111],AacuteTcommaaccent:[-90,-90,-120,-120,-95,-55,-37,-111],AacuteU:[-50,-50,-50,-50,-50,-50,-50,-55],AacuteUacute:[-50,-50,-50,-50,-50,-50,-50,-55],AacuteUcircumflex:[-50,-50,-50,-50,-50,-50,-50,-55],AacuteUdieresis:[-50,-50,-50,-50,-50,-50,-50,-55],AacuteUgrave:[-50,-50,-50,-50,-50,-50,-50,-55],AacuteUhungarumlaut:[-50,-50,-50,-50,-50,-50,-50,-55],AacuteUmacron:[-50,-50,-50,-50,-50,-50,-50,-55],AacuteUogonek:[-50,-50,-50,-50,-50,-50,-50,-55],AacuteUring:[-50,-50,-50,-50,-50,-50,-50,-55],AacuteV:[-80,-80,-70,-70,-145,-95,-105,-135],AacuteW:[-60,-60,-50,-50,-130,-100,-95,-90],AacuteY:[-110,-110,-100,-100,-100,-70,-55,-105],AacuteYacute:[-110,-110,-100,-100,-100,-70,-55,-105],AacuteYdieresis:[-110,-110,-100,-100,-100,-70,-55,-105],Aacuteu:[-30,-30,-30,-30,-50,-30,-20],Aacuteuacute:[-30,-30,-30,-30,-50,-30,-20],Aacuteucircumflex:[-30,-30,-30,-30,-50,-30,-20],Aacuteudieresis:[-30,-30,-30,-30,-50,-30,-20],Aacuteugrave:[-30,-30,-30,-30,-50,-30,-20],Aacuteuhungarumlaut:[-30,-30,-30,-30,-50,-30,-20],Aacuteumacron:[-30,-30,-30,-30,-50,-30,-20],Aacuteuogonek:[-30,-30,-30,-30,-50,-30,-20],Aacuteuring:[-30,-30,-30,-30,-50,-30,-20],Aacutev:[-40,-40,-40,-40,-100,-74,-55,-74],Aacutew:[-30,-30,-40,-40,-90,-74,-55,-92],Aacutey:[-30,-30,-40,-40,-74,-74,-55,-92],Aacuteyacute:[-30,-30,-40,-40,-74,-74,-55,-92],Aacuteydieresis:[-30,-30,-40,-40,-74,-74,-55,-92],AbreveC:[-40,-40,-30,-30,-55,-65,-30,-40],AbreveCacute:[-40,-40,-30,-30,-55,-65,-30,-40],AbreveCcaron:[-40,-40,-30,-30,-55,-65,-30,-40],AbreveCcedilla:[-40,-40,-30,-30,-55,-65,-30,-40],AbreveG:[-50,-50,-30,-30,-55,-60,-35,-40],AbreveGbreve:[-50,-50,-30,-30,-55,-60,-35,-40],AbreveGcommaaccent:[-50,-50,-30,-30,-55,-60,-35,-40],AbreveO:[-40,-40,-30,-30,-45,-50,-40,-55],AbreveOacute:[-40,-40,-30,-30,-45,-50,-40,-55],AbreveOcircumflex:[-40,-40,-30,-30,-45,-50,-40,-55],AbreveOdieresis:[-40,-40,-30,-30,-45,-50,-40,-55],AbreveOgrave:[-40,-40,-30,-30,-45,-50,-40,-55],AbreveOhungarumlaut:[-40,-40,-30,-30,-45,-50,-40,-55],AbreveOmacron:[-40,-40,-30,-30,-45,-50,-40,-55],AbreveOslash:[-40,-40,-30,-30,-45,-50,-40,-55],AbreveOtilde:[-40,-40,-30,-30,-45,-50,-40,-55],AbreveQ:[-40,-40,-30,-30,-45,-55,-40,-55],AbreveT:[-90,-90,-120,-120,-95,-55,-37,-111],AbreveTcaron:[-90,-90,-120,-120,-95,-55,-37,-111],AbreveTcommaaccent:[-90,-90,-120,-120,-95,-55,-37,-111],AbreveU:[-50,-50,-50,-50,-50,-50,-50,-55],AbreveUacute:[-50,-50,-50,-50,-50,-50,-50,-55],AbreveUcircumflex:[-50,-50,-50,-50,-50,-50,-50,-55],AbreveUdieresis:[-50,-50,-50,-50,-50,-50,-50,-55],AbreveUgrave:[-50,-50,-50,-50,-50,-50,-50,-55],AbreveUhungarumlaut:[-50,-50,-50,-50,-50,-50,-50,-55],AbreveUmacron:[-50,-50,-50,-50,-50,-50,-50,-55],AbreveUogonek:[-50,-50,-50,-50,-50,-50,-50,-55],AbreveUring:[-50,-50,-50,-50,-50,-50,-50,-55],AbreveV:[-80,-80,-70,-70,-145,-95,-105,-135],AbreveW:[-60,-60,-50,-50,-130,-100,-95,-90],AbreveY:[-110,-110,-100,-100,-100,-70,-55,-105],AbreveYacute:[-110,-110,-100,-100,-100,-70,-55,-105],AbreveYdieresis:[-110,-110,-100,-100,-100,-70,-55,-105],Abreveu:[-30,-30,-30,-30,-50,-30,-20],Abreveuacute:[-30,-30,-30,-30,-50,-30,-20],Abreveucircumflex:[-30,-30,-30,-30,-50,-30,-20],Abreveudieresis:[-30,-30,-30,-30,-50,-30,-20],Abreveugrave:[-30,-30,-30,-30,-50,-30,-20],Abreveuhungarumlaut:[-30,-30,-30,-30,-50,-30,-20],Abreveumacron:[-30,-30,-30,-30,-50,-30,-20],Abreveuogonek:[-30,-30,-30,-30,-50,-30,-20],Abreveuring:[-30,-30,-30,-30,-50,-30,-20],Abrevev:[-40,-40,-40,-40,-100,-74,-55,-74],Abrevew:[-30,-30,-40,-40,-90,-74,-55,-92],Abrevey:[-30,-30,-40,-40,-74,-74,-55,-92],Abreveyacute:[-30,-30,-40,-40,-74,-74,-55,-92],Abreveydieresis:[-30,-30,-40,-40,-74,-74,-55,-92],AcircumflexC:[-40,-40,-30,-30,-55,-65,-30,-40],AcircumflexCacute:[-40,-40,-30,-30,-55,-65,-30,-40],AcircumflexCcaron:[-40,-40,-30,-30,-55,-65,-30,-40],AcircumflexCcedilla:[-40,-40,-30,-30,-55,-65,-30,-40],AcircumflexG:[-50,-50,-30,-30,-55,-60,-35,-40],AcircumflexGbreve:[-50,-50,-30,-30,-55,-60,-35,-40],AcircumflexGcommaaccent:[-50,-50,-30,-30,-55,-60,-35,-40],AcircumflexO:[-40,-40,-30,-30,-45,-50,-40,-55],AcircumflexOacute:[-40,-40,-30,-30,-45,-50,-40,-55],AcircumflexOcircumflex:[-40,-40,-30,-30,-45,-50,-40,-55],AcircumflexOdieresis:[-40,-40,-30,-30,-45,-50,-40,-55],AcircumflexOgrave:[-40,-40,-30,-30,-45,-50,-40,-55],AcircumflexOhungarumlaut:[-40,-40,-30,-30,-45,-50,-40,-55],AcircumflexOmacron:[-40,-40,-30,-30,-45,-50,-40,-55],AcircumflexOslash:[-40,-40,-30,-30,-45,-50,-40,-55],AcircumflexOtilde:[-40,-40,-30,-30,-45,-50,-40,-55],AcircumflexQ:[-40,-40,-30,-30,-45,-55,-40,-55],AcircumflexT:[-90,-90,-120,-120,-95,-55,-37,-111],AcircumflexTcaron:[-90,-90,-120,-120,-95,-55,-37,-111],AcircumflexTcommaaccent:[-90,-90,-120,-120,-95,-55,-37,-111],AcircumflexU:[-50,-50,-50,-50,-50,-50,-50,-55],AcircumflexUacute:[-50,-50,-50,-50,-50,-50,-50,-55],AcircumflexUcircumflex:[-50,-50,-50,-50,-50,-50,-50,-55],AcircumflexUdieresis:[-50,-50,-50,-50,-50,-50,-50,-55],AcircumflexUgrave:[-50,-50,-50,-50,-50,-50,-50,-55],AcircumflexUhungarumlaut:[-50,-50,-50,-50,-50,-50,-50,-55],AcircumflexUmacron:[-50,-50,-50,-50,-50,-50,-50,-55],AcircumflexUogonek:[-50,-50,-50,-50,-50,-50,-50,-55],AcircumflexUring:[-50,-50,-50,-50,-50,-50,-50,-55],AcircumflexV:[-80,-80,-70,-70,-145,-95,-105,-135],AcircumflexW:[-60,-60,-50,-50,-130,-100,-95,-90],AcircumflexY:[-110,-110,-100,-100,-100,-70,-55,-105],AcircumflexYacute:[-110,-110,-100,-100,-100,-70,-55,-105],AcircumflexYdieresis:[-110,-110,-100,-100,-100,-70,-55,-105],Acircumflexu:[-30,-30,-30,-30,-50,-30,-20],Acircumflexuacute:[-30,-30,-30,-30,-50,-30,-20],Acircumflexucircumflex:[-30,-30,-30,-30,-50,-30,-20],Acircumflexudieresis:[-30,-30,-30,-30,-50,-30,-20],Acircumflexugrave:[-30,-30,-30,-30,-50,-30,-20],Acircumflexuhungarumlaut:[-30,-30,-30,-30,-50,-30,-20],Acircumflexumacron:[-30,-30,-30,-30,-50,-30,-20],Acircumflexuogonek:[-30,-30,-30,-30,-50,-30,-20],Acircumflexuring:[-30,-30,-30,-30,-50,-30,-20],Acircumflexv:[-40,-40,-40,-40,-100,-74,-55,-74],Acircumflexw:[-30,-30,-40,-40,-90,-74,-55,-92],Acircumflexy:[-30,-30,-40,-40,-74,-74,-55,-92],Acircumflexyacute:[-30,-30,-40,-40,-74,-74,-55,-92],Acircumflexydieresis:[-30,-30,-40,-40,-74,-74,-55,-92],AdieresisC:[-40,-40,-30,-30,-55,-65,-30,-40],AdieresisCacute:[-40,-40,-30,-30,-55,-65,-30,-40],AdieresisCcaron:[-40,-40,-30,-30,-55,-65,-30,-40],AdieresisCcedilla:[-40,-40,-30,-30,-55,-65,-30,-40],AdieresisG:[-50,-50,-30,-30,-55,-60,-35,-40],AdieresisGbreve:[-50,-50,-30,-30,-55,-60,-35,-40],AdieresisGcommaaccent:[-50,-50,-30,-30,-55,-60,-35,-40],AdieresisO:[-40,-40,-30,-30,-45,-50,-40,-55],AdieresisOacute:[-40,-40,-30,-30,-45,-50,-40,-55],AdieresisOcircumflex:[-40,-40,-30,-30,-45,-50,-40,-55],AdieresisOdieresis:[-40,-40,-30,-30,-45,-50,-40,-55],AdieresisOgrave:[-40,-40,-30,-30,-45,-50,-40,-55],AdieresisOhungarumlaut:[-40,-40,-30,-30,-45,-50,-40,-55],AdieresisOmacron:[-40,-40,-30,-30,-45,-50,-40,-55],AdieresisOslash:[-40,-40,-30,-30,-45,-50,-40,-55],AdieresisOtilde:[-40,-40,-30,-30,-45,-50,-40,-55],AdieresisQ:[-40,-40,-30,-30,-45,-55,-40,-55],AdieresisT:[-90,-90,-120,-120,-95,-55,-37,-111],AdieresisTcaron:[-90,-90,-120,-120,-95,-55,-37,-111],AdieresisTcommaaccent:[-90,-90,-120,-120,-95,-55,-37,-111],AdieresisU:[-50,-50,-50,-50,-50,-50,-50,-55],AdieresisUacute:[-50,-50,-50,-50,-50,-50,-50,-55],AdieresisUcircumflex:[-50,-50,-50,-50,-50,-50,-50,-55],AdieresisUdieresis:[-50,-50,-50,-50,-50,-50,-50,-55],AdieresisUgrave:[-50,-50,-50,-50,-50,-50,-50,-55],AdieresisUhungarumlaut:[-50,-50,-50,-50,-50,-50,-50,-55],AdieresisUmacron:[-50,-50,-50,-50,-50,-50,-50,-55],AdieresisUogonek:[-50,-50,-50,-50,-50,-50,-50,-55],AdieresisUring:[-50,-50,-50,-50,-50,-50,-50,-55],AdieresisV:[-80,-80,-70,-70,-145,-95,-105,-135],AdieresisW:[-60,-60,-50,-50,-130,-100,-95,-90],AdieresisY:[-110,-110,-100,-100,-100,-70,-55,-105],AdieresisYacute:[-110,-110,-100,-100,-100,-70,-55,-105],AdieresisYdieresis:[-110,-110,-100,-100,-100,-70,-55,-105],Adieresisu:[-30,-30,-30,-30,-50,-30,-20],Adieresisuacute:[-30,-30,-30,-30,-50,-30,-20],Adieresisucircumflex:[-30,-30,-30,-30,-50,-30,-20],Adieresisudieresis:[-30,-30,-30,-30,-50,-30,-20],Adieresisugrave:[-30,-30,-30,-30,-50,-30,-20],Adieresisuhungarumlaut:[-30,-30,-30,-30,-50,-30,-20],Adieresisumacron:[-30,-30,-30,-30,-50,-30,-20],Adieresisuogonek:[-30,-30,-30,-30,-50,-30,-20],Adieresisuring:[-30,-30,-30,-30,-50,-30,-20],Adieresisv:[-40,-40,-40,-40,-100,-74,-55,-74],Adieresisw:[-30,-30,-40,-40,-90,-74,-55,-92],Adieresisy:[-30,-30,-40,-40,-74,-74,-55,-92],Adieresisyacute:[-30,-30,-40,-40,-74,-74,-55,-92],Adieresisydieresis:[-30,-30,-40,-40,-74,-74,-55,-92],AgraveC:[-40,-40,-30,-30,-55,-65,-30,-40],AgraveCacute:[-40,-40,-30,-30,-55,-65,-30,-40],AgraveCcaron:[-40,-40,-30,-30,-55,-65,-30,-40],AgraveCcedilla:[-40,-40,-30,-30,-55,-65,-30,-40],AgraveG:[-50,-50,-30,-30,-55,-60,-35,-40],AgraveGbreve:[-50,-50,-30,-30,-55,-60,-35,-40],AgraveGcommaaccent:[-50,-50,-30,-30,-55,-60,-35,-40],AgraveO:[-40,-40,-30,-30,-45,-50,-40,-55],AgraveOacute:[-40,-40,-30,-30,-45,-50,-40,-55],AgraveOcircumflex:[-40,-40,-30,-30,-45,-50,-40,-55],AgraveOdieresis:[-40,-40,-30,-30,-45,-50,-40,-55],AgraveOgrave:[-40,-40,-30,-30,-45,-50,-40,-55],AgraveOhungarumlaut:[-40,-40,-30,-30,-45,-50,-40,-55],AgraveOmacron:[-40,-40,-30,-30,-45,-50,-40,-55],AgraveOslash:[-40,-40,-30,-30,-45,-50,-40,-55],AgraveOtilde:[-40,-40,-30,-30,-45,-50,-40,-55],AgraveQ:[-40,-40,-30,-30,-45,-55,-40,-55],AgraveT:[-90,-90,-120,-120,-95,-55,-37,-111],AgraveTcaron:[-90,-90,-120,-120,-95,-55,-37,-111],AgraveTcommaaccent:[-90,-90,-120,-120,-95,-55,-37,-111],AgraveU:[-50,-50,-50,-50,-50,-50,-50,-55],AgraveUacute:[-50,-50,-50,-50,-50,-50,-50,-55],AgraveUcircumflex:[-50,-50,-50,-50,-50,-50,-50,-55],AgraveUdieresis:[-50,-50,-50,-50,-50,-50,-50,-55],AgraveUgrave:[-50,-50,-50,-50,-50,-50,-50,-55],AgraveUhungarumlaut:[-50,-50,-50,-50,-50,-50,-50,-55],AgraveUmacron:[-50,-50,-50,-50,-50,-50,-50,-55],AgraveUogonek:[-50,-50,-50,-50,-50,-50,-50,-55],AgraveUring:[-50,-50,-50,-50,-50,-50,-50,-55],AgraveV:[-80,-80,-70,-70,-145,-95,-105,-135],AgraveW:[-60,-60,-50,-50,-130,-100,-95,-90],AgraveY:[-110,-110,-100,-100,-100,-70,-55,-105],AgraveYacute:[-110,-110,-100,-100,-100,-70,-55,-105],AgraveYdieresis:[-110,-110,-100,-100,-100,-70,-55,-105],Agraveu:[-30,-30,-30,-30,-50,-30,-20],Agraveuacute:[-30,-30,-30,-30,-50,-30,-20],Agraveucircumflex:[-30,-30,-30,-30,-50,-30,-20],Agraveudieresis:[-30,-30,-30,-30,-50,-30,-20],Agraveugrave:[-30,-30,-30,-30,-50,-30,-20],Agraveuhungarumlaut:[-30,-30,-30,-30,-50,-30,-20],Agraveumacron:[-30,-30,-30,-30,-50,-30,-20],Agraveuogonek:[-30,-30,-30,-30,-50,-30,-20],Agraveuring:[-30,-30,-30,-30,-50,-30,-20],Agravev:[-40,-40,-40,-40,-100,-74,-55,-74],Agravew:[-30,-30,-40,-40,-90,-74,-55,-92],Agravey:[-30,-30,-40,-40,-74,-74,-55,-92],Agraveyacute:[-30,-30,-40,-40,-74,-74,-55,-92],Agraveydieresis:[-30,-30,-40,-40,-74,-74,-55,-92],AmacronC:[-40,-40,-30,-30,-55,-65,-30,-40],AmacronCacute:[-40,-40,-30,-30,-55,-65,-30,-40],AmacronCcaron:[-40,-40,-30,-30,-55,-65,-30,-40],AmacronCcedilla:[-40,-40,-30,-30,-55,-65,-30,-40],AmacronG:[-50,-50,-30,-30,-55,-60,-35,-40],AmacronGbreve:[-50,-50,-30,-30,-55,-60,-35,-40],AmacronGcommaaccent:[-50,-50,-30,-30,-55,-60,-35,-40],AmacronO:[-40,-40,-30,-30,-45,-50,-40,-55],AmacronOacute:[-40,-40,-30,-30,-45,-50,-40,-55],AmacronOcircumflex:[-40,-40,-30,-30,-45,-50,-40,-55],AmacronOdieresis:[-40,-40,-30,-30,-45,-50,-40,-55],AmacronOgrave:[-40,-40,-30,-30,-45,-50,-40,-55],AmacronOhungarumlaut:[-40,-40,-30,-30,-45,-50,-40,-55],AmacronOmacron:[-40,-40,-30,-30,-45,-50,-40,-55],AmacronOslash:[-40,-40,-30,-30,-45,-50,-40,-55],AmacronOtilde:[-40,-40,-30,-30,-45,-50,-40,-55],AmacronQ:[-40,-40,-30,-30,-45,-55,-40,-55],AmacronT:[-90,-90,-120,-120,-95,-55,-37,-111],AmacronTcaron:[-90,-90,-120,-120,-95,-55,-37,-111],AmacronTcommaaccent:[-90,-90,-120,-120,-95,-55,-37,-111],AmacronU:[-50,-50,-50,-50,-50,-50,-50,-55],AmacronUacute:[-50,-50,-50,-50,-50,-50,-50,-55],AmacronUcircumflex:[-50,-50,-50,-50,-50,-50,-50,-55],AmacronUdieresis:[-50,-50,-50,-50,-50,-50,-50,-55],AmacronUgrave:[-50,-50,-50,-50,-50,-50,-50,-55],AmacronUhungarumlaut:[-50,-50,-50,-50,-50,-50,-50,-55],AmacronUmacron:[-50,-50,-50,-50,-50,-50,-50,-55],AmacronUogonek:[-50,-50,-50,-50,-50,-50,-50,-55],AmacronUring:[-50,-50,-50,-50,-50,-50,-50,-55],AmacronV:[-80,-80,-70,-70,-145,-95,-105,-135],AmacronW:[-60,-60,-50,-50,-130,-100,-95,-90],AmacronY:[-110,-110,-100,-100,-100,-70,-55,-105],AmacronYacute:[-110,-110,-100,-100,-100,-70,-55,-105],AmacronYdieresis:[-110,-110,-100,-100,-100,-70,-55,-105],Amacronu:[-30,-30,-30,-30,-50,-30,-20],Amacronuacute:[-30,-30,-30,-30,-50,-30,-20],Amacronucircumflex:[-30,-30,-30,-30,-50,-30,-20],Amacronudieresis:[-30,-30,-30,-30,-50,-30,-20],Amacronugrave:[-30,-30,-30,-30,-50,-30,-20],Amacronuhungarumlaut:[-30,-30,-30,-30,-50,-30,-20],Amacronumacron:[-30,-30,-30,-30,-50,-30,-20],Amacronuogonek:[-30,-30,-30,-30,-50,-30,-20],Amacronuring:[-30,-30,-30,-30,-50,-30,-20],Amacronv:[-40,-40,-40,-40,-100,-74,-55,-74],Amacronw:[-30,-30,-40,-40,-90,-74,-55,-92],Amacrony:[-30,-30,-40,-40,-74,-74,-55,-92],Amacronyacute:[-30,-30,-40,-40,-74,-74,-55,-92],Amacronydieresis:[-30,-30,-40,-40,-74,-74,-55,-92],AogonekC:[-40,-40,-30,-30,-55,-65,-30,-40],AogonekCacute:[-40,-40,-30,-30,-55,-65,-30,-40],AogonekCcaron:[-40,-40,-30,-30,-55,-65,-30,-40],AogonekCcedilla:[-40,-40,-30,-30,-55,-65,-30,-40],AogonekG:[-50,-50,-30,-30,-55,-60,-35,-40],AogonekGbreve:[-50,-50,-30,-30,-55,-60,-35,-40],AogonekGcommaaccent:[-50,-50,-30,-30,-55,-60,-35,-40],AogonekO:[-40,-40,-30,-30,-45,-50,-40,-55],AogonekOacute:[-40,-40,-30,-30,-45,-50,-40,-55],AogonekOcircumflex:[-40,-40,-30,-30,-45,-50,-40,-55],AogonekOdieresis:[-40,-40,-30,-30,-45,-50,-40,-55],AogonekOgrave:[-40,-40,-30,-30,-45,-50,-40,-55],AogonekOhungarumlaut:[-40,-40,-30,-30,-45,-50,-40,-55],AogonekOmacron:[-40,-40,-30,-30,-45,-50,-40,-55],AogonekOslash:[-40,-40,-30,-30,-45,-50,-40,-55],AogonekOtilde:[-40,-40,-30,-30,-45,-50,-40,-55],AogonekQ:[-40,-40,-30,-30,-45,-55,-40,-55],AogonekT:[-90,-90,-120,-120,-95,-55,-37,-111],AogonekTcaron:[-90,-90,-120,-120,-95,-55,-37,-111],AogonekTcommaaccent:[-90,-90,-120,-120,-95,-55,-37,-111],AogonekU:[-50,-50,-50,-50,-50,-50,-50,-55],AogonekUacute:[-50,-50,-50,-50,-50,-50,-50,-55],AogonekUcircumflex:[-50,-50,-50,-50,-50,-50,-50,-55],AogonekUdieresis:[-50,-50,-50,-50,-50,-50,-50,-55],AogonekUgrave:[-50,-50,-50,-50,-50,-50,-50,-55],AogonekUhungarumlaut:[-50,-50,-50,-50,-50,-50,-50,-55],AogonekUmacron:[-50,-50,-50,-50,-50,-50,-50,-55],AogonekUogonek:[-50,-50,-50,-50,-50,-50,-50,-55],AogonekUring:[-50,-50,-50,-50,-50,-50,-50,-55],AogonekV:[-80,-80,-70,-70,-145,-95,-105,-135],AogonekW:[-60,-60,-50,-50,-130,-100,-95,-90],AogonekY:[-110,-110,-100,-100,-100,-70,-55,-105],AogonekYacute:[-110,-110,-100,-100,-100,-70,-55,-105],AogonekYdieresis:[-110,-110,-100,-100,-100,-70,-55,-105],Aogoneku:[-30,-30,-30,-30,-50,-30,-20],Aogonekuacute:[-30,-30,-30,-30,-50,-30,-20],Aogonekucircumflex:[-30,-30,-30,-30,-50,-30,-20],Aogonekudieresis:[-30,-30,-30,-30,-50,-30,-20],Aogonekugrave:[-30,-30,-30,-30,-50,-30,-20],Aogonekuhungarumlaut:[-30,-30,-30,-30,-50,-30,-20],Aogonekumacron:[-30,-30,-30,-30,-50,-30,-20],Aogonekuogonek:[-30,-30,-30,-30,-50,-30,-20],Aogonekuring:[-30,-30,-30,-30,-50,-30,-20],Aogonekv:[-40,-40,-40,-40,-100,-74,-55,-74],Aogonekw:[-30,-30,-40,-40,-90,-74,-55,-52],Aogoneky:[-30,-30,-40,-40,-34,-34,-55,-52],Aogonekyacute:[-30,-30,-40,-40,-34,-34,-55,-52],Aogonekydieresis:[-30,-30,-40,-40,-34,-34,-55,-52],AringC:[-40,-40,-30,-30,-55,-65,-30,-40],AringCacute:[-40,-40,-30,-30,-55,-65,-30,-40],AringCcaron:[-40,-40,-30,-30,-55,-65,-30,-40],AringCcedilla:[-40,-40,-30,-30,-55,-65,-30,-40],AringG:[-50,-50,-30,-30,-55,-60,-35,-40],AringGbreve:[-50,-50,-30,-30,-55,-60,-35,-40],AringGcommaaccent:[-50,-50,-30,-30,-55,-60,-35,-40],AringO:[-40,-40,-30,-30,-45,-50,-40,-55],AringOacute:[-40,-40,-30,-30,-45,-50,-40,-55],AringOcircumflex:[-40,-40,-30,-30,-45,-50,-40,-55],AringOdieresis:[-40,-40,-30,-30,-45,-50,-40,-55],AringOgrave:[-40,-40,-30,-30,-45,-50,-40,-55],AringOhungarumlaut:[-40,-40,-30,-30,-45,-50,-40,-55],AringOmacron:[-40,-40,-30,-30,-45,-50,-40,-55],AringOslash:[-40,-40,-30,-30,-45,-50,-40,-55],AringOtilde:[-40,-40,-30,-30,-45,-50,-40,-55],AringQ:[-40,-40,-30,-30,-45,-55,-40,-55],AringT:[-90,-90,-120,-120,-95,-55,-37,-111],AringTcaron:[-90,-90,-120,-120,-95,-55,-37,-111],AringTcommaaccent:[-90,-90,-120,-120,-95,-55,-37,-111],AringU:[-50,-50,-50,-50,-50,-50,-50,-55],AringUacute:[-50,-50,-50,-50,-50,-50,-50,-55],AringUcircumflex:[-50,-50,-50,-50,-50,-50,-50,-55],AringUdieresis:[-50,-50,-50,-50,-50,-50,-50,-55],AringUgrave:[-50,-50,-50,-50,-50,-50,-50,-55],AringUhungarumlaut:[-50,-50,-50,-50,-50,-50,-50,-55],AringUmacron:[-50,-50,-50,-50,-50,-50,-50,-55],AringUogonek:[-50,-50,-50,-50,-50,-50,-50,-55],AringUring:[-50,-50,-50,-50,-50,-50,-50,-55],AringV:[-80,-80,-70,-70,-145,-95,-105,-135],AringW:[-60,-60,-50,-50,-130,-100,-95,-90],AringY:[-110,-110,-100,-100,-100,-70,-55,-105],AringYacute:[-110,-110,-100,-100,-100,-70,-55,-105],AringYdieresis:[-110,-110,-100,-100,-100,-70,-55,-105],Aringu:[-30,-30,-30,-30,-50,-30,-20],Aringuacute:[-30,-30,-30,-30,-50,-30,-20],Aringucircumflex:[-30,-30,-30,-30,-50,-30,-20],Aringudieresis:[-30,-30,-30,-30,-50,-30,-20],Aringugrave:[-30,-30,-30,-30,-50,-30,-20],Aringuhungarumlaut:[-30,-30,-30,-30,-50,-30,-20],Aringumacron:[-30,-30,-30,-30,-50,-30,-20],Aringuogonek:[-30,-30,-30,-30,-50,-30,-20],Aringuring:[-30,-30,-30,-30,-50,-30,-20],Aringv:[-40,-40,-40,-40,-100,-74,-55,-74],Aringw:[-30,-30,-40,-40,-90,-74,-55,-92],Aringy:[-30,-30,-40,-40,-74,-74,-55,-92],Aringyacute:[-30,-30,-40,-40,-74,-74,-55,-92],Aringydieresis:[-30,-30,-40,-40,-74,-74,-55,-92],AtildeC:[-40,-40,-30,-30,-55,-65,-30,-40],AtildeCacute:[-40,-40,-30,-30,-55,-65,-30,-40],AtildeCcaron:[-40,-40,-30,-30,-55,-65,-30,-40],AtildeCcedilla:[-40,-40,-30,-30,-55,-65,-30,-40],AtildeG:[-50,-50,-30,-30,-55,-60,-35,-40],AtildeGbreve:[-50,-50,-30,-30,-55,-60,-35,-40],AtildeGcommaaccent:[-50,-50,-30,-30,-55,-60,-35,-40],AtildeO:[-40,-40,-30,-30,-45,-50,-40,-55],AtildeOacute:[-40,-40,-30,-30,-45,-50,-40,-55],AtildeOcircumflex:[-40,-40,-30,-30,-45,-50,-40,-55],AtildeOdieresis:[-40,-40,-30,-30,-45,-50,-40,-55],AtildeOgrave:[-40,-40,-30,-30,-45,-50,-40,-55],AtildeOhungarumlaut:[-40,-40,-30,-30,-45,-50,-40,-55],AtildeOmacron:[-40,-40,-30,-30,-45,-50,-40,-55],AtildeOslash:[-40,-40,-30,-30,-45,-50,-40,-55],AtildeOtilde:[-40,-40,-30,-30,-45,-50,-40,-55],AtildeQ:[-40,-40,-30,-30,-45,-55,-40,-55],AtildeT:[-90,-90,-120,-120,-95,-55,-37,-111],AtildeTcaron:[-90,-90,-120,-120,-95,-55,-37,-111],AtildeTcommaaccent:[-90,-90,-120,-120,-95,-55,-37,-111],AtildeU:[-50,-50,-50,-50,-50,-50,-50,-55],AtildeUacute:[-50,-50,-50,-50,-50,-50,-50,-55],AtildeUcircumflex:[-50,-50,-50,-50,-50,-50,-50,-55],AtildeUdieresis:[-50,-50,-50,-50,-50,-50,-50,-55],AtildeUgrave:[-50,-50,-50,-50,-50,-50,-50,-55],AtildeUhungarumlaut:[-50,-50,-50,-50,-50,-50,-50,-55],AtildeUmacron:[-50,-50,-50,-50,-50,-50,-50,-55],AtildeUogonek:[-50,-50,-50,-50,-50,-50,-50,-55],AtildeUring:[-50,-50,-50,-50,-50,-50,-50,-55],AtildeV:[-80,-80,-70,-70,-145,-95,-105,-135],AtildeW:[-60,-60,-50,-50,-130,-100,-95,-90],AtildeY:[-110,-110,-100,-100,-100,-70,-55,-105],AtildeYacute:[-110,-110,-100,-100,-100,-70,-55,-105],AtildeYdieresis:[-110,-110,-100,-100,-100,-70,-55,-105],Atildeu:[-30,-30,-30,-30,-50,-30,-20],Atildeuacute:[-30,-30,-30,-30,-50,-30,-20],Atildeucircumflex:[-30,-30,-30,-30,-50,-30,-20],Atildeudieresis:[-30,-30,-30,-30,-50,-30,-20],Atildeugrave:[-30,-30,-30,-30,-50,-30,-20],Atildeuhungarumlaut:[-30,-30,-30,-30,-50,-30,-20],Atildeumacron:[-30,-30,-30,-30,-50,-30,-20],Atildeuogonek:[-30,-30,-30,-30,-50,-30,-20],Atildeuring:[-30,-30,-30,-30,-50,-30,-20],Atildev:[-40,-40,-40,-40,-100,-74,-55,-74],Atildew:[-30,-30,-40,-40,-90,-74,-55,-92],Atildey:[-30,-30,-40,-40,-74,-74,-55,-92],Atildeyacute:[-30,-30,-40,-40,-74,-74,-55,-92],Atildeydieresis:[-30,-30,-40,-40,-74,-74,-55,-92],BA:[-30,-30,0,0,-30,-25,-25,-35],BAacute:[-30,-30,0,0,-30,-25,-25,-35],BAbreve:[-30,-30,0,0,-30,-25,-25,-35],BAcircumflex:[-30,-30,0,0,-30,-25,-25,-35],BAdieresis:[-30,-30,0,0,-30,-25,-25,-35],BAgrave:[-30,-30,0,0,-30,-25,-25,-35],BAmacron:[-30,-30,0,0,-30,-25,-25,-35],BAogonek:[-30,-30,0,0,-30,-25,-25,-35],BAring:[-30,-30,0,0,-30,-25,-25,-35],BAtilde:[-30,-30,0,0,-30,-25,-25,-35],BU:[-10,-10,-10,-10,-10,-10,-10,-10],BUacute:[-10,-10,-10,-10,-10,-10,-10,-10],BUcircumflex:[-10,-10,-10,-10,-10,-10,-10,-10],BUdieresis:[-10,-10,-10,-10,-10,-10,-10,-10],BUgrave:[-10,-10,-10,-10,-10,-10,-10,-10],BUhungarumlaut:[-10,-10,-10,-10,-10,-10,-10,-10],BUmacron:[-10,-10,-10,-10,-10,-10,-10,-10],BUogonek:[-10,-10,-10,-10,-10,-10,-10,-10],BUring:[-10,-10,-10,-10,-10,-10,-10,-10],DA:[-40,-40,-40,-40,-35,-25,-35,-40],DAacute:[-40,-40,-40,-40,-35,-25,-35,-40],DAbreve:[-40,-40,-40,-40,-35,-25,-35,-40],DAcircumflex:[-40,-40,-40,-40,-35,-25,-35,-40],DAdieresis:[-40,-40,-40,-40,-35,-25,-35,-40],DAgrave:[-40,-40,-40,-40,-35,-25,-35,-40],DAmacron:[-40,-40,-40,-40,-35,-25,-35,-40],DAogonek:[-40,-40,-40,-40,-35,-25,-35,-40],DAring:[-40,-40,-40,-40,-35,-25,-35,-40],DAtilde:[-40,-40,-40,-40,-35,-25,-35,-40],DV:[-40,-40,-70,-70,-40,-50,-40,-40],DW:[-40,-40,-40,-40,-40,-40,-40,-30],DY:[-70,-70,-90,-90,-40,-50,-40,-55],DYacute:[-70,-70,-90,-90,-40,-50,-40,-55],DYdieresis:[-70,-70,-90,-90,-40,-50,-40,-55],Dcomma:[-30,-30,-70,-70],Dperiod:[-30,-30,-70,-70,-20],DcaronA:[-40,-40,-40,-40,-35,-25,-35,-40],DcaronAacute:[-40,-40,-40,-40,-35,-25,-35,-40],DcaronAbreve:[-40,-40,-40,-40,-35,-25,-35,-40],DcaronAcircumflex:[-40,-40,-40,-40,-35,-25,-35,-40],DcaronAdieresis:[-40,-40,-40,-40,-35,-25,-35,-40],DcaronAgrave:[-40,-40,-40,-40,-35,-25,-35,-40],DcaronAmacron:[-40,-40,-40,-40,-35,-25,-35,-40],DcaronAogonek:[-40,-40,-40,-40,-35,-25,-35,-40],DcaronAring:[-40,-40,-40,-40,-35,-25,-35,-40],DcaronAtilde:[-40,-40,-40,-40,-35,-25,-35,-40],DcaronV:[-40,-40,-70,-70,-40,-50,-40,-40],DcaronW:[-40,-40,-40,-40,-40,-40,-40,-30],DcaronY:[-70,-70,-90,-90,-40,-50,-40,-55],DcaronYacute:[-70,-70,-90,-90,-40,-50,-40,-55],DcaronYdieresis:[-70,-70,-90,-90,-40,-50,-40,-55],Dcaroncomma:[-30,-30,-70,-70],Dcaronperiod:[-30,-30,-70,-70,-20],DcroatA:[-40,-40,-40,-40,-35,-25,-35,-40],DcroatAacute:[-40,-40,-40,-40,-35,-25,-35,-40],DcroatAbreve:[-40,-40,-40,-40,-35,-25,-35,-40],DcroatAcircumflex:[-40,-40,-40,-40,-35,-25,-35,-40],DcroatAdieresis:[-40,-40,-40,-40,-35,-25,-35,-40],DcroatAgrave:[-40,-40,-40,-40,-35,-25,-35,-40],DcroatAmacron:[-40,-40,-40,-40,-35,-25,-35,-40],DcroatAogonek:[-40,-40,-40,-40,-35,-25,-35,-40],DcroatAring:[-40,-40,-40,-40,-35,-25,-35,-40],DcroatAtilde:[-40,-40,-40,-40,-35,-25,-35,-40],DcroatV:[-40,-40,-70,-70,-40,-50,-40,-40],DcroatW:[-40,-40,-40,-40,-40,-40,-40,-30],DcroatY:[-70,-70,-90,-90,-40,-50,-40,-55],DcroatYacute:[-70,-70,-90,-90,-40,-50,-40,-55],DcroatYdieresis:[-70,-70,-90,-90,-40,-50,-40,-55],Dcroatcomma:[-30,-30,-70,-70],Dcroatperiod:[-30,-30,-70,-70,-20],FA:[-80,-80,-80,-80,-90,-100,-115,-74],FAacute:[-80,-80,-80,-80,-90,-100,-115,-74],FAbreve:[-80,-80,-80,-80,-90,-100,-115,-74],FAcircumflex:[-80,-80,-80,-80,-90,-100,-115,-74],FAdieresis:[-80,-80,-80,-80,-90,-100,-115,-74],FAgrave:[-80,-80,-80,-80,-90,-100,-115,-74],FAmacron:[-80,-80,-80,-80,-90,-100,-115,-74],FAogonek:[-80,-80,-80,-80,-90,-100,-115,-74],FAring:[-80,-80,-80,-80,-90,-100,-115,-74],FAtilde:[-80,-80,-80,-80,-90,-100,-115,-74],Fa:[-20,-20,-50,-50,-25,-95,-75,-15],Faacute:[-20,-20,-50,-50,-25,-95,-75,-15],Fabreve:[-20,-20,-50,-50,-25,-95,-75,-15],Facircumflex:[-20,-20,-50,-50,-25,-95,-75,-15],Fadieresis:[-20,-20,-50,-50,-25,-95,-75,-15],Fagrave:[-20,-20,-50,-50,-25,-95,-75,-15],Famacron:[-20,-20,-50,-50,-25,-95,-75,-15],Faogonek:[-20,-20,-50,-50,-25,-95,-75,-15],Faring:[-20,-20,-50,-50,-25,-95,-75,-15],Fatilde:[-20,-20,-50,-50,-25,-95,-75,-15],Fcomma:[-100,-100,-150,-150,-92,-129,-135,-80],Fperiod:[-100,-100,-150,-150,-110,-129,-135,-80],JA:[-20,-20,-20,-20,-30,-25,-40,-60],JAacute:[-20,-20,-20,-20,-30,-25,-40,-60],JAbreve:[-20,-20,-20,-20,-30,-25,-40,-60],JAcircumflex:[-20,-20,-20,-20,-30,-25,-40,-60],JAdieresis:[-20,-20,-20,-20,-30,-25,-40,-60],JAgrave:[-20,-20,-20,-20,-30,-25,-40,-60],JAmacron:[-20,-20,-20,-20,-30,-25,-40,-60],JAogonek:[-20,-20,-20,-20,-30,-25,-40,-60],JAring:[-20,-20,-20,-20,-30,-25,-40,-60],JAtilde:[-20,-20,-20,-20,-30,-25,-40,-60],Jcomma:[-20,-20,-30,-30,0,-10,-25],Jperiod:[-20,-20,-30,-30,-20,-10,-25],Ju:[-20,-20,-20,-20,-15,-40,-35],Juacute:[-20,-20,-20,-20,-15,-40,-35],Jucircumflex:[-20,-20,-20,-20,-15,-40,-35],Judieresis:[-20,-20,-20,-20,-15,-40,-35],Jugrave:[-20,-20,-20,-20,-15,-40,-35],Juhungarumlaut:[-20,-20,-20,-20,-15,-40,-35],Jumacron:[-20,-20,-20,-20,-15,-40,-35],Juogonek:[-20,-20,-20,-20,-15,-40,-35],Juring:[-20,-20,-20,-20,-15,-40,-35],KO:[-30,-30,-50,-50,-30,-30,-50,-30],KOacute:[-30,-30,-50,-50,-30,-30,-50,-30],KOcircumflex:[-30,-30,-50,-50,-30,-30,-50,-30],KOdieresis:[-30,-30,-50,-50,-30,-30,-50,-30],KOgrave:[-30,-30,-50,-50,-30,-30,-50,-30],KOhungarumlaut:[-30,-30,-50,-50,-30,-30,-50,-30],KOmacron:[-30,-30,-50,-50,-30,-30,-50,-30],KOslash:[-30,-30,-50,-50,-30,-30,-50,-30],KOtilde:[-30,-30,-50,-50,-30,-30,-50,-30],Ke:[-15,-15,-40,-40,-25,-25,-35,-25],Keacute:[-15,-15,-40,-40,-25,-25,-35,-25],Kecaron:[-15,-15,-40,-40,-25,-25,-35,-25],Kecircumflex:[-15,-15,-40,-40,-25,-25,-35,-25],Kedieresis:[-15,-15,-40,-40,-25,-25,-35,-25],Kedotaccent:[-15,-15,-40,-40,-25,-25,-35,-25],Kegrave:[-15,-15,-40,-40,-25,-25,-35,-25],Kemacron:[-15,-15,-40,-40,-25,-25,-35,-25],Keogonek:[-15,-15,-40,-40,-25,-25,-35,-25],Ko:[-35,-35,-40,-40,-25,-25,-40,-35],Koacute:[-35,-35,-40,-40,-25,-25,-40,-35],Kocircumflex:[-35,-35,-40,-40,-25,-25,-40,-35],Kodieresis:[-35,-35,-40,-40,-25,-25,-40,-35],Kograve:[-35,-35,-40,-40,-25,-25,-40,-35],Kohungarumlaut:[-35,-35,-40,-40,-25,-25,-40,-35],Komacron:[-35,-35,-40,-40,-25,-25,-40,-35],Koslash:[-35,-35,-40,-40,-25,-25,-40,-35],Kotilde:[-35,-35,-40,-40,-25,-25,-40,-35],Ku:[-30,-30,-30,-30,-15,-20,-40,-15],Kuacute:[-30,-30,-30,-30,-15,-20,-40,-15],Kucircumflex:[-30,-30,-30,-30,-15,-20,-40,-15],Kudieresis:[-30,-30,-30,-30,-15,-20,-40,-15],Kugrave:[-30,-30,-30,-30,-15,-20,-40,-15],Kuhungarumlaut:[-30,-30,-30,-30,-15,-20,-40,-15],Kumacron:[-30,-30,-30,-30,-15,-20,-40,-15],Kuogonek:[-30,-30,-30,-30,-15,-20,-40,-15],Kuring:[-30,-30,-30,-30,-15,-20,-40,-15],Ky:[-40,-40,-50,-50,-45,-20,-40,-25],Kyacute:[-40,-40,-50,-50,-45,-20,-40,-25],Kydieresis:[-40,-40,-50,-50,-45,-20,-40,-25],KcommaaccentO:[-30,-30,-50,-50,-30,-30,-50,-30],KcommaaccentOacute:[-30,-30,-50,-50,-30,-30,-50,-30],KcommaaccentOcircumflex:[-30,-30,-50,-50,-30,-30,-50,-30],KcommaaccentOdieresis:[-30,-30,-50,-50,-30,-30,-50,-30],KcommaaccentOgrave:[-30,-30,-50,-50,-30,-30,-50,-30],KcommaaccentOhungarumlaut:[-30,-30,-50,-50,-30,-30,-50,-30],KcommaaccentOmacron:[-30,-30,-50,-50,-30,-30,-50,-30],KcommaaccentOslash:[-30,-30,-50,-50,-30,-30,-50,-30],KcommaaccentOtilde:[-30,-30,-50,-50,-30,-30,-50,-30],Kcommaaccente:[-15,-15,-40,-40,-25,-25,-35,-25],Kcommaaccenteacute:[-15,-15,-40,-40,-25,-25,-35,-25],Kcommaaccentecaron:[-15,-15,-40,-40,-25,-25,-35,-25],Kcommaaccentecircumflex:[-15,-15,-40,-40,-25,-25,-35,-25],Kcommaaccentedieresis:[-15,-15,-40,-40,-25,-25,-35,-25],Kcommaaccentedotaccent:[-15,-15,-40,-40,-25,-25,-35,-25],Kcommaaccentegrave:[-15,-15,-40,-40,-25,-25,-35,-25],Kcommaaccentemacron:[-15,-15,-40,-40,-25,-25,-35,-25],Kcommaaccenteogonek:[-15,-15,-40,-40,-25,-25,-35,-25],Kcommaaccento:[-35,-35,-40,-40,-25,-25,-40,-35],Kcommaaccentoacute:[-35,-35,-40,-40,-25,-25,-40,-35],Kcommaaccentocircumflex:[-35,-35,-40,-40,-25,-25,-40,-35],Kcommaaccentodieresis:[-35,-35,-40,-40,-25,-25,-40,-35],Kcommaaccentograve:[-35,-35,-40,-40,-25,-25,-40,-35],Kcommaaccentohungarumlaut:[-35,-35,-40,-40,-25,-25,-40,-35],Kcommaaccentomacron:[-35,-35,-40,-40,-25,-25,-40,-35],Kcommaaccentoslash:[-35,-35,-40,-40,-25,-25,-40,-35],Kcommaaccentotilde:[-35,-35,-40,-40,-25,-25,-40,-35],Kcommaaccentu:[-30,-30,-30,-30,-15,-20,-40,-15],Kcommaaccentuacute:[-30,-30,-30,-30,-15,-20,-40,-15],Kcommaaccentucircumflex:[-30,-30,-30,-30,-15,-20,-40,-15],Kcommaaccentudieresis:[-30,-30,-30,-30,-15,-20,-40,-15],Kcommaaccentugrave:[-30,-30,-30,-30,-15,-20,-40,-15],Kcommaaccentuhungarumlaut:[-30,-30,-30,-30,-15,-20,-40,-15],Kcommaaccentumacron:[-30,-30,-30,-30,-15,-20,-40,-15],Kcommaaccentuogonek:[-30,-30,-30,-30,-15,-20,-40,-15],Kcommaaccenturing:[-30,-30,-30,-30,-15,-20,-40,-15],Kcommaaccenty:[-40,-40,-50,-50,-45,-20,-40,-25],Kcommaaccentyacute:[-40,-40,-50,-50,-45,-20,-40,-25],Kcommaaccentydieresis:[-40,-40,-50,-50,-45,-20,-40,-25],LT:[-90,-90,-110,-110,-92,-18,-20,-92],LTcaron:[-90,-90,-110,-110,-92,-18,-20,-92],LTcommaaccent:[-90,-90,-110,-110,-92,-18,-20,-92],LV:[-110,-110,-110,-110,-92,-37,-55,-100],LW:[-80,-80,-70,-70,-92,-37,-55,-74],LY:[-120,-120,-140,-140,-92,-37,-20,-100],LYacute:[-120,-120,-140,-140,-92,-37,-20,-100],LYdieresis:[-120,-120,-140,-140,-92,-37,-20,-100],Lquotedblright:[-140,-140,-140,-140,-20],Lquoteright:[-140,-140,-160,-160,-110,-55,-37,-92],Ly:[-30,-30,-30,-30,-55,-37,-30,-55],Lyacute:[-30,-30,-30,-30,-55,-37,-30,-55],Lydieresis:[-30,-30,-30,-30,-55,-37,-30,-55],LacuteT:[-90,-90,-110,-110,-92,-18,-20,-92],LacuteTcaron:[-90,-90,-110,-110,-92,-18,-20,-92],LacuteTcommaaccent:[-90,-90,-110,-110,-92,-18,-20,-92],LacuteV:[-110,-110,-110,-110,-92,-37,-55,-100],LacuteW:[-80,-80,-70,-70,-92,-37,-55,-74],LacuteY:[-120,-120,-140,-140,-92,-37,-20,-100],LacuteYacute:[-120,-120,-140,-140,-92,-37,-20,-100],LacuteYdieresis:[-120,-120,-140,-140,-92,-37,-20,-100],Lacutequotedblright:[-140,-140,-140,-140,-20],Lacutequoteright:[-140,-140,-160,-160,-110,-55,-37,-92],Lacutey:[-30,-30,-30,-30,-55,-37,-30,-55],Lacuteyacute:[-30,-30,-30,-30,-55,-37,-30,-55],Lacuteydieresis:[-30,-30,-30,-30,-55,-37,-30,-55],LcommaaccentT:[-90,-90,-110,-110,-92,-18,-20,-92],LcommaaccentTcaron:[-90,-90,-110,-110,-92,-18,-20,-92],LcommaaccentTcommaaccent:[-90,-90,-110,-110,-92,-18,-20,-92],LcommaaccentV:[-110,-110,-110,-110,-92,-37,-55,-100],LcommaaccentW:[-80,-80,-70,-70,-92,-37,-55,-74],LcommaaccentY:[-120,-120,-140,-140,-92,-37,-20,-100],LcommaaccentYacute:[-120,-120,-140,-140,-92,-37,-20,-100],LcommaaccentYdieresis:[-120,-120,-140,-140,-92,-37,-20,-100],Lcommaaccentquotedblright:[-140,-140,-140,-140,-20],Lcommaaccentquoteright:[-140,-140,-160,-160,-110,-55,-37,-92],Lcommaaccenty:[-30,-30,-30,-30,-55,-37,-30,-55],Lcommaaccentyacute:[-30,-30,-30,-30,-55,-37,-30,-55],Lcommaaccentydieresis:[-30,-30,-30,-30,-55,-37,-30,-55],LslashT:[-90,-90,-110,-110,-92,-18,-20,-92],LslashTcaron:[-90,-90,-110,-110,-92,-18,-20,-92],LslashTcommaaccent:[-90,-90,-110,-110,-92,-18,-20,-92],LslashV:[-110,-110,-110,-110,-92,-37,-55,-100],LslashW:[-80,-80,-70,-70,-92,-37,-55,-74],LslashY:[-120,-120,-140,-140,-92,-37,-20,-100],LslashYacute:[-120,-120,-140,-140,-92,-37,-20,-100],LslashYdieresis:[-120,-120,-140,-140,-92,-37,-20,-100],Lslashquotedblright:[-140,-140,-140,-140,-20],Lslashquoteright:[-140,-140,-160,-160,-110,-55,-37,-92],Lslashy:[-30,-30,-30,-30,-55,-37,-30,-55],Lslashyacute:[-30,-30,-30,-30,-55,-37,-30,-55],Lslashydieresis:[-30,-30,-30,-30,-55,-37,-30,-55],OA:[-50,-50,-20,-20,-40,-40,-55,-35],OAacute:[-50,-50,-20,-20,-40,-40,-55,-35],OAbreve:[-50,-50,-20,-20,-40,-40,-55,-35],OAcircumflex:[-50,-50,-20,-20,-40,-40,-55,-35],OAdieresis:[-50,-50,-20,-20,-40,-40,-55,-35],OAgrave:[-50,-50,-20,-20,-40,-40,-55,-35],OAmacron:[-50,-50,-20,-20,-40,-40,-55,-35],OAogonek:[-50,-50,-20,-20,-40,-40,-55,-35],OAring:[-50,-50,-20,-20,-40,-40,-55,-35],OAtilde:[-50,-50,-20,-20,-40,-40,-55,-35],OT:[-40,-40,-40,-40,-40,-40,-40,-40],OTcaron:[-40,-40,-40,-40,-40,-40,-40,-40],OTcommaaccent:[-40,-40,-40,-40,-40,-40,-40,-40],OV:[-50,-50,-50,-50,-50,-50,-50,-50],OW:[-50,-50,-30,-30,-50,-50,-50,-35],OX:[-50,-50,-60,-60,-40,-40,-40,-40],OY:[-70,-70,-70,-70,-50,-50,-50,-50],OYacute:[-70,-70,-70,-70,-50,-50,-50,-50],OYdieresis:[-70,-70,-70,-70,-50,-50,-50,-50],Ocomma:[-40,-40,-40,-40],Operiod:[-40,-40,-40,-40],OacuteA:[-50,-50,-20,-20,-40,-40,-55,-35],OacuteAacute:[-50,-50,-20,-20,-40,-40,-55,-35],OacuteAbreve:[-50,-50,-20,-20,-40,-40,-55,-35],OacuteAcircumflex:[-50,-50,-20,-20,-40,-40,-55,-35],OacuteAdieresis:[-50,-50,-20,-20,-40,-40,-55,-35],OacuteAgrave:[-50,-50,-20,-20,-40,-40,-55,-35],OacuteAmacron:[-50,-50,-20,-20,-40,-40,-55,-35],OacuteAogonek:[-50,-50,-20,-20,-40,-40,-55,-35],OacuteAring:[-50,-50,-20,-20,-40,-40,-55,-35],OacuteAtilde:[-50,-50,-20,-20,-40,-40,-55,-35],OacuteT:[-40,-40,-40,-40,-40,-40,-40,-40],OacuteTcaron:[-40,-40,-40,-40,-40,-40,-40,-40],OacuteTcommaaccent:[-40,-40,-40,-40,-40,-40,-40,-40],OacuteV:[-50,-50,-50,-50,-50,-50,-50,-50],OacuteW:[-50,-50,-30,-30,-50,-50,-50,-35],OacuteX:[-50,-50,-60,-60,-40,-40,-40,-40],OacuteY:[-70,-70,-70,-70,-50,-50,-50,-50],OacuteYacute:[-70,-70,-70,-70,-50,-50,-50,-50],OacuteYdieresis:[-70,-70,-70,-70,-50,-50,-50,-50],Oacutecomma:[-40,-40,-40,-40],Oacuteperiod:[-40,-40,-40,-40],OcircumflexA:[-50,-50,-20,-20,-40,-40,-55,-35],OcircumflexAacute:[-50,-50,-20,-20,-40,-40,-55,-35],OcircumflexAbreve:[-50,-50,-20,-20,-40,-40,-55,-35],OcircumflexAcircumflex:[-50,-50,-20,-20,-40,-40,-55,-35],OcircumflexAdieresis:[-50,-50,-20,-20,-40,-40,-55,-35],OcircumflexAgrave:[-50,-50,-20,-20,-40,-40,-55,-35],OcircumflexAmacron:[-50,-50,-20,-20,-40,-40,-55,-35],OcircumflexAogonek:[-50,-50,-20,-20,-40,-40,-55,-35],OcircumflexAring:[-50,-50,-20,-20,-40,-40,-55,-35],OcircumflexAtilde:[-50,-50,-20,-20,-40,-40,-55,-35],OcircumflexT:[-40,-40,-40,-40,-40,-40,-40,-40],OcircumflexTcaron:[-40,-40,-40,-40,-40,-40,-40,-40],OcircumflexTcommaaccent:[-40,-40,-40,-40,-40,-40,-40,-40],OcircumflexV:[-50,-50,-50,-50,-50,-50,-50,-50],OcircumflexW:[-50,-50,-30,-30,-50,-50,-50,-35],OcircumflexX:[-50,-50,-60,-60,-40,-40,-40,-40],OcircumflexY:[-70,-70,-70,-70,-50,-50,-50,-50],OcircumflexYacute:[-70,-70,-70,-70,-50,-50,-50,-50],OcircumflexYdieresis:[-70,-70,-70,-70,-50,-50,-50,-50],Ocircumflexcomma:[-40,-40,-40,-40],Ocircumflexperiod:[-40,-40,-40,-40],OdieresisA:[-50,-50,-20,-20,-40,-40,-55,-35],OdieresisAacute:[-50,-50,-20,-20,-40,-40,-55,-35],OdieresisAbreve:[-50,-50,-20,-20,-40,-40,-55,-35],OdieresisAcircumflex:[-50,-50,-20,-20,-40,-40,-55,-35],OdieresisAdieresis:[-50,-50,-20,-20,-40,-40,-55,-35],OdieresisAgrave:[-50,-50,-20,-20,-40,-40,-55,-35],OdieresisAmacron:[-50,-50,-20,-20,-40,-40,-55,-35],OdieresisAogonek:[-50,-50,-20,-20,-40,-40,-55,-35],OdieresisAring:[-50,-50,-20,-20,-40,-40,-55,-35],OdieresisAtilde:[-50,-50,-20,-20,-40,-40,-55,-35],OdieresisT:[-40,-40,-40,-40,-40,-40,-40,-40],OdieresisTcaron:[-40,-40,-40,-40,-40,-40,-40,-40],OdieresisTcommaaccent:[-40,-40,-40,-40,-40,-40,-40,-40],OdieresisV:[-50,-50,-50,-50,-50,-50,-50,-50],OdieresisW:[-50,-50,-30,-30,-50,-50,-50,-35],OdieresisX:[-50,-50,-60,-60,-40,-40,-40,-40],OdieresisY:[-70,-70,-70,-70,-50,-50,-50,-50],OdieresisYacute:[-70,-70,-70,-70,-50,-50,-50,-50],OdieresisYdieresis:[-70,-70,-70,-70,-50,-50,-50,-50],Odieresiscomma:[-40,-40,-40,-40],Odieresisperiod:[-40,-40,-40,-40],OgraveA:[-50,-50,-20,-20,-40,-40,-55,-35],OgraveAacute:[-50,-50,-20,-20,-40,-40,-55,-35],OgraveAbreve:[-50,-50,-20,-20,-40,-40,-55,-35],OgraveAcircumflex:[-50,-50,-20,-20,-40,-40,-55,-35],OgraveAdieresis:[-50,-50,-20,-20,-40,-40,-55,-35],OgraveAgrave:[-50,-50,-20,-20,-40,-40,-55,-35],OgraveAmacron:[-50,-50,-20,-20,-40,-40,-55,-35],OgraveAogonek:[-50,-50,-20,-20,-40,-40,-55,-35],OgraveAring:[-50,-50,-20,-20,-40,-40,-55,-35],OgraveAtilde:[-50,-50,-20,-20,-40,-40,-55,-35],OgraveT:[-40,-40,-40,-40,-40,-40,-40,-40],OgraveTcaron:[-40,-40,-40,-40,-40,-40,-40,-40],OgraveTcommaaccent:[-40,-40,-40,-40,-40,-40,-40,-40],OgraveV:[-50,-50,-50,-50,-50,-50,-50,-50],OgraveW:[-50,-50,-30,-30,-50,-50,-50,-35],OgraveX:[-50,-50,-60,-60,-40,-40,-40,-40],OgraveY:[-70,-70,-70,-70,-50,-50,-50,-50],OgraveYacute:[-70,-70,-70,-70,-50,-50,-50,-50],OgraveYdieresis:[-70,-70,-70,-70,-50,-50,-50,-50],Ogravecomma:[-40,-40,-40,-40],Ograveperiod:[-40,-40,-40,-40],OhungarumlautA:[-50,-50,-20,-20,-40,-40,-55,-35],OhungarumlautAacute:[-50,-50,-20,-20,-40,-40,-55,-35],OhungarumlautAbreve:[-50,-50,-20,-20,-40,-40,-55,-35],OhungarumlautAcircumflex:[-50,-50,-20,-20,-40,-40,-55,-35],OhungarumlautAdieresis:[-50,-50,-20,-20,-40,-40,-55,-35],OhungarumlautAgrave:[-50,-50,-20,-20,-40,-40,-55,-35],OhungarumlautAmacron:[-50,-50,-20,-20,-40,-40,-55,-35],OhungarumlautAogonek:[-50,-50,-20,-20,-40,-40,-55,-35],OhungarumlautAring:[-50,-50,-20,-20,-40,-40,-55,-35],OhungarumlautAtilde:[-50,-50,-20,-20,-40,-40,-55,-35],OhungarumlautT:[-40,-40,-40,-40,-40,-40,-40,-40],OhungarumlautTcaron:[-40,-40,-40,-40,-40,-40,-40,-40],OhungarumlautTcommaaccent:[-40,-40,-40,-40,-40,-40,-40,-40],OhungarumlautV:[-50,-50,-50,-50,-50,-50,-50,-50],OhungarumlautW:[-50,-50,-30,-30,-50,-50,-50,-35],OhungarumlautX:[-50,-50,-60,-60,-40,-40,-40,-40],OhungarumlautY:[-70,-70,-70,-70,-50,-50,-50,-50],OhungarumlautYacute:[-70,-70,-70,-70,-50,-50,-50,-50],OhungarumlautYdieresis:[-70,-70,-70,-70,-50,-50,-50,-50],Ohungarumlautcomma:[-40,-40,-40,-40],Ohungarumlautperiod:[-40,-40,-40,-40],OmacronA:[-50,-50,-20,-20,-40,-40,-55,-35],OmacronAacute:[-50,-50,-20,-20,-40,-40,-55,-35],OmacronAbreve:[-50,-50,-20,-20,-40,-40,-55,-35],OmacronAcircumflex:[-50,-50,-20,-20,-40,-40,-55,-35],OmacronAdieresis:[-50,-50,-20,-20,-40,-40,-55,-35],OmacronAgrave:[-50,-50,-20,-20,-40,-40,-55,-35],OmacronAmacron:[-50,-50,-20,-20,-40,-40,-55,-35],OmacronAogonek:[-50,-50,-20,-20,-40,-40,-55,-35],OmacronAring:[-50,-50,-20,-20,-40,-40,-55,-35],OmacronAtilde:[-50,-50,-20,-20,-40,-40,-55,-35],OmacronT:[-40,-40,-40,-40,-40,-40,-40,-40],OmacronTcaron:[-40,-40,-40,-40,-40,-40,-40,-40],OmacronTcommaaccent:[-40,-40,-40,-40,-40,-40,-40,-40],OmacronV:[-50,-50,-50,-50,-50,-50,-50,-50],OmacronW:[-50,-50,-30,-30,-50,-50,-50,-35],OmacronX:[-50,-50,-60,-60,-40,-40,-40,-40],OmacronY:[-70,-70,-70,-70,-50,-50,-50,-50],OmacronYacute:[-70,-70,-70,-70,-50,-50,-50,-50],OmacronYdieresis:[-70,-70,-70,-70,-50,-50,-50,-50],Omacroncomma:[-40,-40,-40,-40],Omacronperiod:[-40,-40,-40,-40],OslashA:[-50,-50,-20,-20,-40,-40,-55,-35],OslashAacute:[-50,-50,-20,-20,-40,-40,-55,-35],OslashAbreve:[-50,-50,-20,-20,-40,-40,-55,-35],OslashAcircumflex:[-50,-50,-20,-20,-40,-40,-55,-35],OslashAdieresis:[-50,-50,-20,-20,-40,-40,-55,-35],OslashAgrave:[-50,-50,-20,-20,-40,-40,-55,-35],OslashAmacron:[-50,-50,-20,-20,-40,-40,-55,-35],OslashAogonek:[-50,-50,-20,-20,-40,-40,-55,-35],OslashAring:[-50,-50,-20,-20,-40,-40,-55,-35],OslashAtilde:[-50,-50,-20,-20,-40,-40,-55,-35],OslashT:[-40,-40,-40,-40,-40,-40,-40,-40],OslashTcaron:[-40,-40,-40,-40,-40,-40,-40,-40],OslashTcommaaccent:[-40,-40,-40,-40,-40,-40,-40,-40],OslashV:[-50,-50,-50,-50,-50,-50,-50,-50],OslashW:[-50,-50,-30,-30,-50,-50,-50,-35],OslashX:[-50,-50,-60,-60,-40,-40,-40,-40],OslashY:[-70,-70,-70,-70,-50,-50,-50,-50],OslashYacute:[-70,-70,-70,-70,-50,-50,-50,-50],OslashYdieresis:[-70,-70,-70,-70,-50,-50,-50,-50],Oslashcomma:[-40,-40,-40,-40],Oslashperiod:[-40,-40,-40,-40],OtildeA:[-50,-50,-20,-20,-40,-40,-55,-35],OtildeAacute:[-50,-50,-20,-20,-40,-40,-55,-35],OtildeAbreve:[-50,-50,-20,-20,-40,-40,-55,-35],OtildeAcircumflex:[-50,-50,-20,-20,-40,-40,-55,-35],OtildeAdieresis:[-50,-50,-20,-20,-40,-40,-55,-35],OtildeAgrave:[-50,-50,-20,-20,-40,-40,-55,-35],OtildeAmacron:[-50,-50,-20,-20,-40,-40,-55,-35],OtildeAogonek:[-50,-50,-20,-20,-40,-40,-55,-35],OtildeAring:[-50,-50,-20,-20,-40,-40,-55,-35],OtildeAtilde:[-50,-50,-20,-20,-40,-40,-55,-35],OtildeT:[-40,-40,-40,-40,-40,-40,-40,-40],OtildeTcaron:[-40,-40,-40,-40,-40,-40,-40,-40],OtildeTcommaaccent:[-40,-40,-40,-40,-40,-40,-40,-40],OtildeV:[-50,-50,-50,-50,-50,-50,-50,-50],OtildeW:[-50,-50,-30,-30,-50,-50,-50,-35],OtildeX:[-50,-50,-60,-60,-40,-40,-40,-40],OtildeY:[-70,-70,-70,-70,-50,-50,-50,-50],OtildeYacute:[-70,-70,-70,-70,-50,-50,-50,-50],OtildeYdieresis:[-70,-70,-70,-70,-50,-50,-50,-50],Otildecomma:[-40,-40,-40,-40],Otildeperiod:[-40,-40,-40,-40],PA:[-100,-100,-120,-120,-74,-85,-90,-92],PAacute:[-100,-100,-120,-120,-74,-85,-90,-92],PAbreve:[-100,-100,-120,-120,-74,-85,-90,-92],PAcircumflex:[-100,-100,-120,-120,-74,-85,-90,-92],PAdieresis:[-100,-100,-120,-120,-74,-85,-90,-92],PAgrave:[-100,-100,-120,-120,-74,-85,-90,-92],PAmacron:[-100,-100,-120,-120,-74,-85,-90,-92],PAogonek:[-100,-100,-120,-120,-74,-85,-90,-92],PAring:[-100,-100,-120,-120,-74,-85,-90,-92],PAtilde:[-100,-100,-120,-120,-74,-85,-90,-92],Pa:[-30,-30,-40,-40,-10,-40,-80,-15],Paacute:[-30,-30,-40,-40,-10,-40,-80,-15],Pabreve:[-30,-30,-40,-40,-10,-40,-80,-15],Pacircumflex:[-30,-30,-40,-40,-10,-40,-80,-15],Padieresis:[-30,-30,-40,-40,-10,-40,-80,-15],Pagrave:[-30,-30,-40,-40,-10,-40,-80,-15],Pamacron:[-30,-30,-40,-40,-10,-40,-80,-15],Paogonek:[-30,-30,-40,-40,-10,-40,-80,-15],Paring:[-30,-30,-40,-40,-10,-40,-80,-15],Patilde:[-30,-30,-40,-40,-10,-40,-80,-15],Pcomma:[-120,-120,-180,-180,-92,-129,-135,-111],Pe:[-30,-30,-50,-50,-20,-50,-80],Peacute:[-30,-30,-50,-50,-20,-50,-80],Pecaron:[-30,-30,-50,-50,-20,-50,-80],Pecircumflex:[-30,-30,-50,-50,-20,-50,-80],Pedieresis:[-30,-30,-50,-50,-20,-50,-80],Pedotaccent:[-30,-30,-50,-50,-20,-50,-80],Pegrave:[-30,-30,-50,-50,-20,-50,-80],Pemacron:[-30,-30,-50,-50,-20,-50,-80],Peogonek:[-30,-30,-50,-50,-20,-50,-80],Po:[-40,-40,-50,-50,-20,-55,-80],Poacute:[-40,-40,-50,-50,-20,-55,-80],Pocircumflex:[-40,-40,-50,-50,-20,-55,-80],Podieresis:[-40,-40,-50,-50,-20,-55,-80],Pograve:[-40,-40,-50,-50,-20,-55,-80],Pohungarumlaut:[-40,-40,-50,-50,-20,-55,-80],Pomacron:[-40,-40,-50,-50,-20,-55,-80],Poslash:[-40,-40,-50,-50,-20,-55,-80],Potilde:[-40,-40,-50,-50,-20,-55,-80],Pperiod:[-120,-120,-180,-180,-110,-129,-135,-111],QU:[-10,-10,-10,-10,-10,-10,-10,-10],QUacute:[-10,-10,-10,-10,-10,-10,-10,-10],QUcircumflex:[-10,-10,-10,-10,-10,-10,-10,-10],QUdieresis:[-10,-10,-10,-10,-10,-10,-10,-10],QUgrave:[-10,-10,-10,-10,-10,-10,-10,-10],QUhungarumlaut:[-10,-10,-10,-10,-10,-10,-10,-10],QUmacron:[-10,-10,-10,-10,-10,-10,-10,-10],QUogonek:[-10,-10,-10,-10,-10,-10,-10,-10],QUring:[-10,-10,-10,-10,-10,-10,-10,-10],Qcomma:[20,20],Qperiod:[20,20,0,0,-20],RO:[-20,-20,-20,-20,-30,-40,-40,-40],ROacute:[-20,-20,-20,-20,-30,-40,-40,-40],ROcircumflex:[-20,-20,-20,-20,-30,-40,-40,-40],ROdieresis:[-20,-20,-20,-20,-30,-40,-40,-40],ROgrave:[-20,-20,-20,-20,-30,-40,-40,-40],ROhungarumlaut:[-20,-20,-20,-20,-30,-40,-40,-40],ROmacron:[-20,-20,-20,-20,-30,-40,-40,-40],ROslash:[-20,-20,-20,-20,-30,-40,-40,-40],ROtilde:[-20,-20,-20,-20,-30,-40,-40,-40],RT:[-20,-20,-30,-30,-40,-30,0,-60],RTcaron:[-20,-20,-30,-30,-40,-30,0,-60],RTcommaaccent:[-20,-20,-30,-30,-40,-30,0,-60],RU:[-20,-20,-40,-40,-30,-40,-40,-40],RUacute:[-20,-20,-40,-40,-30,-40,-40,-40],RUcircumflex:[-20,-20,-40,-40,-30,-40,-40,-40],RUdieresis:[-20,-20,-40,-40,-30,-40,-40,-40],RUgrave:[-20,-20,-40,-40,-30,-40,-40,-40],RUhungarumlaut:[-20,-20,-40,-40,-30,-40,-40,-40],RUmacron:[-20,-20,-40,-40,-30,-40,-40,-40],RUogonek:[-20,-20,-40,-40,-30,-40,-40,-40],RUring:[-20,-20,-40,-40,-30,-40,-40,-40],RV:[-50,-50,-50,-50,-55,-18,-18,-80],RW:[-40,-40,-30,-30,-35,-18,-18,-55],RY:[-50,-50,-50,-50,-35,-18,-18,-65],RYacute:[-50,-50,-50,-50,-35,-18,-18,-65],RYdieresis:[-50,-50,-50,-50,-35,-18,-18,-65],RacuteO:[-20,-20,-20,-20,-30,-40,-40,-40],RacuteOacute:[-20,-20,-20,-20,-30,-40,-40,-40],RacuteOcircumflex:[-20,-20,-20,-20,-30,-40,-40,-40],RacuteOdieresis:[-20,-20,-20,-20,-30,-40,-40,-40],RacuteOgrave:[-20,-20,-20,-20,-30,-40,-40,-40],RacuteOhungarumlaut:[-20,-20,-20,-20,-30,-40,-40,-40],RacuteOmacron:[-20,-20,-20,-20,-30,-40,-40,-40],RacuteOslash:[-20,-20,-20,-20,-30,-40,-40,-40],RacuteOtilde:[-20,-20,-20,-20,-30,-40,-40,-40],RacuteT:[-20,-20,-30,-30,-40,-30,0,-60],RacuteTcaron:[-20,-20,-30,-30,-40,-30,0,-60],RacuteTcommaaccent:[-20,-20,-30,-30,-40,-30,0,-60],RacuteU:[-20,-20,-40,-40,-30,-40,-40,-40],RacuteUacute:[-20,-20,-40,-40,-30,-40,-40,-40],RacuteUcircumflex:[-20,-20,-40,-40,-30,-40,-40,-40],RacuteUdieresis:[-20,-20,-40,-40,-30,-40,-40,-40],RacuteUgrave:[-20,-20,-40,-40,-30,-40,-40,-40],RacuteUhungarumlaut:[-20,-20,-40,-40,-30,-40,-40,-40],RacuteUmacron:[-20,-20,-40,-40,-30,-40,-40,-40],RacuteUogonek:[-20,-20,-40,-40,-30,-40,-40,-40],RacuteUring:[-20,-20,-40,-40,-30,-40,-40,-40],RacuteV:[-50,-50,-50,-50,-55,-18,-18,-80],RacuteW:[-40,-40,-30,-30,-35,-18,-18,-55],RacuteY:[-50,-50,-50,-50,-35,-18,-18,-65],RacuteYacute:[-50,-50,-50,-50,-35,-18,-18,-65],RacuteYdieresis:[-50,-50,-50,-50,-35,-18,-18,-65],RcaronO:[-20,-20,-20,-20,-30,-40,-40,-40],RcaronOacute:[-20,-20,-20,-20,-30,-40,-40,-40],RcaronOcircumflex:[-20,-20,-20,-20,-30,-40,-40,-40],RcaronOdieresis:[-20,-20,-20,-20,-30,-40,-40,-40],RcaronOgrave:[-20,-20,-20,-20,-30,-40,-40,-40],RcaronOhungarumlaut:[-20,-20,-20,-20,-30,-40,-40,-40],RcaronOmacron:[-20,-20,-20,-20,-30,-40,-40,-40],RcaronOslash:[-20,-20,-20,-20,-30,-40,-40,-40],RcaronOtilde:[-20,-20,-20,-20,-30,-40,-40,-40],RcaronT:[-20,-20,-30,-30,-40,-30,0,-60],RcaronTcaron:[-20,-20,-30,-30,-40,-30,0,-60],RcaronTcommaaccent:[-20,-20,-30,-30,-40,-30,0,-60],RcaronU:[-20,-20,-40,-40,-30,-40,-40,-40],RcaronUacute:[-20,-20,-40,-40,-30,-40,-40,-40],RcaronUcircumflex:[-20,-20,-40,-40,-30,-40,-40,-40],RcaronUdieresis:[-20,-20,-40,-40,-30,-40,-40,-40],RcaronUgrave:[-20,-20,-40,-40,-30,-40,-40,-40],RcaronUhungarumlaut:[-20,-20,-40,-40,-30,-40,-40,-40],RcaronUmacron:[-20,-20,-40,-40,-30,-40,-40,-40],RcaronUogonek:[-20,-20,-40,-40,-30,-40,-40,-40],RcaronUring:[-20,-20,-40,-40,-30,-40,-40,-40],RcaronV:[-50,-50,-50,-50,-55,-18,-18,-80],RcaronW:[-40,-40,-30,-30,-35,-18,-18,-55],RcaronY:[-50,-50,-50,-50,-35,-18,-18,-65],RcaronYacute:[-50,-50,-50,-50,-35,-18,-18,-65],RcaronYdieresis:[-50,-50,-50,-50,-35,-18,-18,-65],RcommaaccentO:[-20,-20,-20,-20,-30,-40,-40,-40],RcommaaccentOacute:[-20,-20,-20,-20,-30,-40,-40,-40],RcommaaccentOcircumflex:[-20,-20,-20,-20,-30,-40,-40,-40],RcommaaccentOdieresis:[-20,-20,-20,-20,-30,-40,-40,-40],RcommaaccentOgrave:[-20,-20,-20,-20,-30,-40,-40,-40],RcommaaccentOhungarumlaut:[-20,-20,-20,-20,-30,-40,-40,-40],RcommaaccentOmacron:[-20,-20,-20,-20,-30,-40,-40,-40],RcommaaccentOslash:[-20,-20,-20,-20,-30,-40,-40,-40],RcommaaccentOtilde:[-20,-20,-20,-20,-30,-40,-40,-40],RcommaaccentT:[-20,-20,-30,-30,-40,-30,0,-60],RcommaaccentTcaron:[-20,-20,-30,-30,-40,-30,0,-60],RcommaaccentTcommaaccent:[-20,-20,-30,-30,-40,-30,0,-60],RcommaaccentU:[-20,-20,-40,-40,-30,-40,-40,-40],RcommaaccentUacute:[-20,-20,-40,-40,-30,-40,-40,-40],RcommaaccentUcircumflex:[-20,-20,-40,-40,-30,-40,-40,-40],RcommaaccentUdieresis:[-20,-20,-40,-40,-30,-40,-40,-40],RcommaaccentUgrave:[-20,-20,-40,-40,-30,-40,-40,-40],RcommaaccentUhungarumlaut:[-20,-20,-40,-40,-30,-40,-40,-40],RcommaaccentUmacron:[-20,-20,-40,-40,-30,-40,-40,-40],RcommaaccentUogonek:[-20,-20,-40,-40,-30,-40,-40,-40],RcommaaccentUring:[-20,-20,-40,-40,-30,-40,-40,-40],RcommaaccentV:[-50,-50,-50,-50,-55,-18,-18,-80],RcommaaccentW:[-40,-40,-30,-30,-35,-18,-18,-55],RcommaaccentY:[-50,-50,-50,-50,-35,-18,-18,-65],RcommaaccentYacute:[-50,-50,-50,-50,-35,-18,-18,-65],RcommaaccentYdieresis:[-50,-50,-50,-50,-35,-18,-18,-65],TA:[-90,-90,-120,-120,-90,-55,-50,-93],TAacute:[-90,-90,-120,-120,-90,-55,-50,-93],TAbreve:[-90,-90,-120,-120,-90,-55,-50,-93],TAcircumflex:[-90,-90,-120,-120,-90,-55,-50,-93],TAdieresis:[-90,-90,-120,-120,-90,-55,-50,-93],TAgrave:[-90,-90,-120,-120,-90,-55,-50,-93],TAmacron:[-90,-90,-120,-120,-90,-55,-50,-93],TAogonek:[-90,-90,-120,-120,-90,-55,-50,-93],TAring:[-90,-90,-120,-120,-90,-55,-50,-93],TAtilde:[-90,-90,-120,-120,-90,-55,-50,-93],TO:[-40,-40,-40,-40,-18,-18,-18,-18],TOacute:[-40,-40,-40,-40,-18,-18,-18,-18],TOcircumflex:[-40,-40,-40,-40,-18,-18,-18,-18],TOdieresis:[-40,-40,-40,-40,-18,-18,-18,-18],TOgrave:[-40,-40,-40,-40,-18,-18,-18,-18],TOhungarumlaut:[-40,-40,-40,-40,-18,-18,-18,-18],TOmacron:[-40,-40,-40,-40,-18,-18,-18,-18],TOslash:[-40,-40,-40,-40,-18,-18,-18,-18],TOtilde:[-40,-40,-40,-40,-18,-18,-18,-18],Ta:[-80,-80,-120,-120,-92,-92,-92,-80],Taacute:[-80,-80,-120,-120,-92,-92,-92,-80],Tabreve:[-80,-80,-60,-60,-52,-92,-92,-80],Tacircumflex:[-80,-80,-120,-120,-52,-92,-92,-80],Tadieresis:[-80,-80,-120,-120,-52,-92,-92,-40],Tagrave:[-80,-80,-120,-120,-52,-92,-92,-40],Tamacron:[-80,-80,-60,-60,-52,-92,-92,-40],Taogonek:[-80,-80,-120,-120,-92,-92,-92,-80],Taring:[-80,-80,-120,-120,-92,-92,-92,-80],Tatilde:[-80,-80,-60,-60,-52,-92,-92,-40],Tcolon:[-40,-40,-20,-20,-74,-74,-55,-50],Tcomma:[-80,-80,-120,-120,-74,-92,-74,-74],Te:[-60,-60,-120,-120,-92,-92,-92,-70],Teacute:[-60,-60,-120,-120,-92,-92,-92,-70],Tecaron:[-60,-60,-120,-120,-92,-92,-92,-70],Tecircumflex:[-60,-60,-120,-120,-92,-92,-52,-70],Tedieresis:[-60,-60,-120,-120,-52,-52,-52,-30],Tedotaccent:[-60,-60,-120,-120,-92,-92,-92,-70],Tegrave:[-60,-60,-60,-60,-52,-52,-52,-70],Temacron:[-60,-60,-60,-60,-52,-52,-52,-30],Teogonek:[-60,-60,-120,-120,-92,-92,-92,-70],Thyphen:[-120,-120,-140,-140,-92,-92,-74,-92],To:[-80,-80,-120,-120,-92,-95,-92,-80],Toacute:[-80,-80,-120,-120,-92,-95,-92,-80],Tocircumflex:[-80,-80,-120,-120,-92,-95,-92,-80],Todieresis:[-80,-80,-120,-120,-92,-95,-92,-80],Tograve:[-80,-80,-120,-120,-92,-95,-92,-80],Tohungarumlaut:[-80,-80,-120,-120,-92,-95,-92,-80],Tomacron:[-80,-80,-60,-60,-92,-95,-92,-80],Toslash:[-80,-80,-120,-120,-92,-95,-92,-80],Totilde:[-80,-80,-60,-60,-92,-95,-92,-80],Tperiod:[-80,-80,-120,-120,-90,-92,-74,-74],Tr:[-80,-80,-120,-120,-74,-37,-55,-35],Tracute:[-80,-80,-120,-120,-74,-37,-55,-35],Trcommaaccent:[-80,-80,-120,-120,-74,-37,-55,-35],Tsemicolon:[-40,-40,-20,-20,-74,-74,-65,-55],Tu:[-90,-90,-120,-120,-92,-37,-55,-45],Tuacute:[-90,-90,-120,-120,-92,-37,-55,-45],Tucircumflex:[-90,-90,-120,-120,-92,-37,-55,-45],Tudieresis:[-90,-90,-120,-120,-92,-37,-55,-45],Tugrave:[-90,-90,-120,-120,-92,-37,-55,-45],Tuhungarumlaut:[-90,-90,-120,-120,-92,-37,-55,-45],Tumacron:[-90,-90,-60,-60,-92,-37,-55,-45],Tuogonek:[-90,-90,-120,-120,-92,-37,-55,-45],Turing:[-90,-90,-120,-120,-92,-37,-55,-45],Tw:[-60,-60,-120,-120,-74,-37,-74,-80],Ty:[-60,-60,-120,-120,-34,-37,-74,-80],Tyacute:[-60,-60,-120,-120,-34,-37,-74,-80],Tydieresis:[-60,-60,-60,-60,-34,-37,-34,-80],TcaronA:[-90,-90,-120,-120,-90,-55,-50,-93],TcaronAacute:[-90,-90,-120,-120,-90,-55,-50,-93],TcaronAbreve:[-90,-90,-120,-120,-90,-55,-50,-93],TcaronAcircumflex:[-90,-90,-120,-120,-90,-55,-50,-93],TcaronAdieresis:[-90,-90,-120,-120,-90,-55,-50,-93],TcaronAgrave:[-90,-90,-120,-120,-90,-55,-50,-93],TcaronAmacron:[-90,-90,-120,-120,-90,-55,-50,-93],TcaronAogonek:[-90,-90,-120,-120,-90,-55,-50,-93],TcaronAring:[-90,-90,-120,-120,-90,-55,-50,-93],TcaronAtilde:[-90,-90,-120,-120,-90,-55,-50,-93],TcaronO:[-40,-40,-40,-40,-18,-18,-18,-18],TcaronOacute:[-40,-40,-40,-40,-18,-18,-18,-18],TcaronOcircumflex:[-40,-40,-40,-40,-18,-18,-18,-18],TcaronOdieresis:[-40,-40,-40,-40,-18,-18,-18,-18],TcaronOgrave:[-40,-40,-40,-40,-18,-18,-18,-18],TcaronOhungarumlaut:[-40,-40,-40,-40,-18,-18,-18,-18],TcaronOmacron:[-40,-40,-40,-40,-18,-18,-18,-18],TcaronOslash:[-40,-40,-40,-40,-18,-18,-18,-18],TcaronOtilde:[-40,-40,-40,-40,-18,-18,-18,-18],Tcarona:[-80,-80,-120,-120,-92,-92,-92,-80],Tcaronaacute:[-80,-80,-120,-120,-92,-92,-92,-80],Tcaronabreve:[-80,-80,-60,-60,-52,-92,-92,-80],Tcaronacircumflex:[-80,-80,-120,-120,-52,-92,-92,-80],Tcaronadieresis:[-80,-80,-120,-120,-52,-92,-92,-40],Tcaronagrave:[-80,-80,-120,-120,-52,-92,-92,-40],Tcaronamacron:[-80,-80,-60,-60,-52,-92,-92,-40],Tcaronaogonek:[-80,-80,-120,-120,-92,-92,-92,-80],Tcaronaring:[-80,-80,-120,-120,-92,-92,-92,-80],Tcaronatilde:[-80,-80,-60,-60,-52,-92,-92,-40],Tcaroncolon:[-40,-40,-20,-20,-74,-74,-55,-50],Tcaroncomma:[-80,-80,-120,-120,-74,-92,-74,-74],Tcarone:[-60,-60,-120,-120,-92,-92,-92,-70],Tcaroneacute:[-60,-60,-120,-120,-92,-92,-92,-70],Tcaronecaron:[-60,-60,-120,-120,-92,-92,-92,-70],Tcaronecircumflex:[-60,-60,-120,-120,-92,-92,-52,-30],Tcaronedieresis:[-60,-60,-120,-120,-52,-52,-52,-30],Tcaronedotaccent:[-60,-60,-120,-120,-92,-92,-92,-70],Tcaronegrave:[-60,-60,-60,-60,-52,-52,-52,-70],Tcaronemacron:[-60,-60,-60,-60,-52,-52,-52,-30],Tcaroneogonek:[-60,-60,-120,-120,-92,-92,-92,-70],Tcaronhyphen:[-120,-120,-140,-140,-92,-92,-74,-92],Tcarono:[-80,-80,-120,-120,-92,-95,-92,-80],Tcaronoacute:[-80,-80,-120,-120,-92,-95,-92,-80],Tcaronocircumflex:[-80,-80,-120,-120,-92,-95,-92,-80],Tcaronodieresis:[-80,-80,-120,-120,-92,-95,-92,-80],Tcaronograve:[-80,-80,-120,-120,-92,-95,-92,-80],Tcaronohungarumlaut:[-80,-80,-120,-120,-92,-95,-92,-80],Tcaronomacron:[-80,-80,-60,-60,-92,-95,-92,-80],Tcaronoslash:[-80,-80,-120,-120,-92,-95,-92,-80],Tcaronotilde:[-80,-80,-60,-60,-92,-95,-92,-80],Tcaronperiod:[-80,-80,-120,-120,-90,-92,-74,-74],Tcaronr:[-80,-80,-120,-120,-74,-37,-55,-35],Tcaronracute:[-80,-80,-120,-120,-74,-37,-55,-35],Tcaronrcommaaccent:[-80,-80,-120,-120,-74,-37,-55,-35],Tcaronsemicolon:[-40,-40,-20,-20,-74,-74,-65,-55],Tcaronu:[-90,-90,-120,-120,-92,-37,-55,-45],Tcaronuacute:[-90,-90,-120,-120,-92,-37,-55,-45],Tcaronucircumflex:[-90,-90,-120,-120,-92,-37,-55,-45],Tcaronudieresis:[-90,-90,-120,-120,-92,-37,-55,-45],Tcaronugrave:[-90,-90,-120,-120,-92,-37,-55,-45],Tcaronuhungarumlaut:[-90,-90,-120,-120,-92,-37,-55,-45],Tcaronumacron:[-90,-90,-60,-60,-92,-37,-55,-45],Tcaronuogonek:[-90,-90,-120,-120,-92,-37,-55,-45],Tcaronuring:[-90,-90,-120,-120,-92,-37,-55,-45],Tcaronw:[-60,-60,-120,-120,-74,-37,-74,-80],Tcarony:[-60,-60,-120,-120,-34,-37,-74,-80],Tcaronyacute:[-60,-60,-120,-120,-34,-37,-74,-80],Tcaronydieresis:[-60,-60,-60,-60,-34,-37,-34,-80],TcommaaccentA:[-90,-90,-120,-120,-90,-55,-50,-93],TcommaaccentAacute:[-90,-90,-120,-120,-90,-55,-50,-93],TcommaaccentAbreve:[-90,-90,-120,-120,-90,-55,-50,-93],TcommaaccentAcircumflex:[-90,-90,-120,-120,-90,-55,-50,-93],TcommaaccentAdieresis:[-90,-90,-120,-120,-90,-55,-50,-93],TcommaaccentAgrave:[-90,-90,-120,-120,-90,-55,-50,-93],TcommaaccentAmacron:[-90,-90,-120,-120,-90,-55,-50,-93],TcommaaccentAogonek:[-90,-90,-120,-120,-90,-55,-50,-93],TcommaaccentAring:[-90,-90,-120,-120,-90,-55,-50,-93],TcommaaccentAtilde:[-90,-90,-120,-120,-90,-55,-50,-93],TcommaaccentO:[-40,-40,-40,-40,-18,-18,-18,-18],TcommaaccentOacute:[-40,-40,-40,-40,-18,-18,-18,-18],TcommaaccentOcircumflex:[-40,-40,-40,-40,-18,-18,-18,-18],TcommaaccentOdieresis:[-40,-40,-40,-40,-18,-18,-18,-18],TcommaaccentOgrave:[-40,-40,-40,-40,-18,-18,-18,-18],TcommaaccentOhungarumlaut:[-40,-40,-40,-40,-18,-18,-18,-18],TcommaaccentOmacron:[-40,-40,-40,-40,-18,-18,-18,-18],TcommaaccentOslash:[-40,-40,-40,-40,-18,-18,-18,-18],TcommaaccentOtilde:[-40,-40,-40,-40,-18,-18,-18,-18],Tcommaaccenta:[-80,-80,-120,-120,-92,-92,-92,-80],Tcommaaccentaacute:[-80,-80,-120,-120,-92,-92,-92,-80],Tcommaaccentabreve:[-80,-80,-60,-60,-52,-92,-92,-80],Tcommaaccentacircumflex:[-80,-80,-120,-120,-52,-92,-92,-80],Tcommaaccentadieresis:[-80,-80,-120,-120,-52,-92,-92,-40],Tcommaaccentagrave:[-80,-80,-120,-120,-52,-92,-92,-40],Tcommaaccentamacron:[-80,-80,-60,-60,-52,-92,-92,-40],Tcommaaccentaogonek:[-80,-80,-120,-120,-92,-92,-92,-80],Tcommaaccentaring:[-80,-80,-120,-120,-92,-92,-92,-80],Tcommaaccentatilde:[-80,-80,-60,-60,-52,-92,-92,-40],Tcommaaccentcolon:[-40,-40,-20,-20,-74,-74,-55,-50],Tcommaaccentcomma:[-80,-80,-120,-120,-74,-92,-74,-74],Tcommaaccente:[-60,-60,-120,-120,-92,-92,-92,-70],Tcommaaccenteacute:[-60,-60,-120,-120,-92,-92,-92,-70],Tcommaaccentecaron:[-60,-60,-120,-120,-92,-92,-92,-70],Tcommaaccentecircumflex:[-60,-60,-120,-120,-92,-92,-52,-30],Tcommaaccentedieresis:[-60,-60,-120,-120,-52,-52,-52,-30],Tcommaaccentedotaccent:[-60,-60,-120,-120,-92,-92,-92,-70],Tcommaaccentegrave:[-60,-60,-60,-60,-52,-52,-52,-30],Tcommaaccentemacron:[-60,-60,-60,-60,-52,-52,-52,-70],Tcommaaccenteogonek:[-60,-60,-120,-120,-92,-92,-92,-70],Tcommaaccenthyphen:[-120,-120,-140,-140,-92,-92,-74,-92],Tcommaaccento:[-80,-80,-120,-120,-92,-95,-92,-80],Tcommaaccentoacute:[-80,-80,-120,-120,-92,-95,-92,-80],Tcommaaccentocircumflex:[-80,-80,-120,-120,-92,-95,-92,-80],Tcommaaccentodieresis:[-80,-80,-120,-120,-92,-95,-92,-80],Tcommaaccentograve:[-80,-80,-120,-120,-92,-95,-92,-80],Tcommaaccentohungarumlaut:[-80,-80,-120,-120,-92,-95,-92,-80],Tcommaaccentomacron:[-80,-80,-60,-60,-92,-95,-92,-80],Tcommaaccentoslash:[-80,-80,-120,-120,-92,-95,-92,-80],Tcommaaccentotilde:[-80,-80,-60,-60,-92,-95,-92,-80],Tcommaaccentperiod:[-80,-80,-120,-120,-90,-92,-74,-74],Tcommaaccentr:[-80,-80,-120,-120,-74,-37,-55,-35],Tcommaaccentracute:[-80,-80,-120,-120,-74,-37,-55,-35],Tcommaaccentrcommaaccent:[-80,-80,-120,-120,-74,-37,-55,-35],Tcommaaccentsemicolon:[-40,-40,-20,-20,-74,-74,-65,-55],Tcommaaccentu:[-90,-90,-120,-120,-92,-37,-55,-45],Tcommaaccentuacute:[-90,-90,-120,-120,-92,-37,-55,-45],Tcommaaccentucircumflex:[-90,-90,-120,-120,-92,-37,-55,-45],Tcommaaccentudieresis:[-90,-90,-120,-120,-92,-37,-55,-45],Tcommaaccentugrave:[-90,-90,-120,-120,-92,-37,-55,-45],Tcommaaccentuhungarumlaut:[-90,-90,-120,-120,-92,-37,-55,-45],Tcommaaccentumacron:[-90,-90,-60,-60,-92,-37,-55,-45],Tcommaaccentuogonek:[-90,-90,-120,-120,-92,-37,-55,-45],Tcommaaccenturing:[-90,-90,-120,-120,-92,-37,-55,-45],Tcommaaccentw:[-60,-60,-120,-120,-74,-37,-74,-80],Tcommaaccenty:[-60,-60,-120,-120,-34,-37,-74,-80],Tcommaaccentyacute:[-60,-60,-120,-120,-34,-37,-74,-80],Tcommaaccentydieresis:[-60,-60,-60,-60,-34,-37,-34,-80],UA:[-50,-50,-40,-40,-60,-45,-40,-40],UAacute:[-50,-50,-40,-40,-60,-45,-40,-40],UAbreve:[-50,-50,-40,-40,-60,-45,-40,-40],UAcircumflex:[-50,-50,-40,-40,-60,-45,-40,-40],UAdieresis:[-50,-50,-40,-40,-60,-45,-40,-40],UAgrave:[-50,-50,-40,-40,-60,-45,-40,-40],UAmacron:[-50,-50,-40,-40,-60,-45,-40,-40],UAogonek:[-50,-50,-40,-40,-60,-45,-40,-40],UAring:[-50,-50,-40,-40,-60,-45,-40,-40],UAtilde:[-50,-50,-40,-40,-60,-45,-40,-40],Ucomma:[-30,-30,-40,-40,-50,0,-25],Uperiod:[-30,-30,-40,-40,-50,0,-25],UacuteA:[-50,-50,-40,-40,-60,-45,-40,-40],UacuteAacute:[-50,-50,-40,-40,-60,-45,-40,-40],UacuteAbreve:[-50,-50,-40,-40,-60,-45,-40,-40],UacuteAcircumflex:[-50,-50,-40,-40,-60,-45,-40,-40],UacuteAdieresis:[-50,-50,-40,-40,-60,-45,-40,-40],UacuteAgrave:[-50,-50,-40,-40,-60,-45,-40,-40],UacuteAmacron:[-50,-50,-40,-40,-60,-45,-40,-40],UacuteAogonek:[-50,-50,-40,-40,-60,-45,-40,-40],UacuteAring:[-50,-50,-40,-40,-60,-45,-40,-40],UacuteAtilde:[-50,-50,-40,-40,-60,-45,-40,-40],Uacutecomma:[-30,-30,-40,-40,-50,0,-25],Uacuteperiod:[-30,-30,-40,-40,-50,0,-25],UcircumflexA:[-50,-50,-40,-40,-60,-45,-40,-40],UcircumflexAacute:[-50,-50,-40,-40,-60,-45,-40,-40],UcircumflexAbreve:[-50,-50,-40,-40,-60,-45,-40,-40],UcircumflexAcircumflex:[-50,-50,-40,-40,-60,-45,-40,-40],UcircumflexAdieresis:[-50,-50,-40,-40,-60,-45,-40,-40],UcircumflexAgrave:[-50,-50,-40,-40,-60,-45,-40,-40],UcircumflexAmacron:[-50,-50,-40,-40,-60,-45,-40,-40],UcircumflexAogonek:[-50,-50,-40,-40,-60,-45,-40,-40],UcircumflexAring:[-50,-50,-40,-40,-60,-45,-40,-40],UcircumflexAtilde:[-50,-50,-40,-40,-60,-45,-40,-40],Ucircumflexcomma:[-30,-30,-40,-40,-50,0,-25],Ucircumflexperiod:[-30,-30,-40,-40,-50,0,-25],UdieresisA:[-50,-50,-40,-40,-60,-45,-40,-40],UdieresisAacute:[-50,-50,-40,-40,-60,-45,-40,-40],UdieresisAbreve:[-50,-50,-40,-40,-60,-45,-40,-40],UdieresisAcircumflex:[-50,-50,-40,-40,-60,-45,-40,-40],UdieresisAdieresis:[-50,-50,-40,-40,-60,-45,-40,-40],UdieresisAgrave:[-50,-50,-40,-40,-60,-45,-40,-40],UdieresisAmacron:[-50,-50,-40,-40,-60,-45,-40,-40],UdieresisAogonek:[-50,-50,-40,-40,-60,-45,-40,-40],UdieresisAring:[-50,-50,-40,-40,-60,-45,-40,-40],UdieresisAtilde:[-50,-50,-40,-40,-60,-45,-40,-40],Udieresiscomma:[-30,-30,-40,-40,-50,0,-25],Udieresisperiod:[-30,-30,-40,-40,-50,0,-25],UgraveA:[-50,-50,-40,-40,-60,-45,-40,-40],UgraveAacute:[-50,-50,-40,-40,-60,-45,-40,-40],UgraveAbreve:[-50,-50,-40,-40,-60,-45,-40,-40],UgraveAcircumflex:[-50,-50,-40,-40,-60,-45,-40,-40],UgraveAdieresis:[-50,-50,-40,-40,-60,-45,-40,-40],UgraveAgrave:[-50,-50,-40,-40,-60,-45,-40,-40],UgraveAmacron:[-50,-50,-40,-40,-60,-45,-40,-40],UgraveAogonek:[-50,-50,-40,-40,-60,-45,-40,-40],UgraveAring:[-50,-50,-40,-40,-60,-45,-40,-40],UgraveAtilde:[-50,-50,-40,-40,-60,-45,-40,-40],Ugravecomma:[-30,-30,-40,-40,-50,0,-25],Ugraveperiod:[-30,-30,-40,-40,-50,0,-25],UhungarumlautA:[-50,-50,-40,-40,-60,-45,-40,-40],UhungarumlautAacute:[-50,-50,-40,-40,-60,-45,-40,-40],UhungarumlautAbreve:[-50,-50,-40,-40,-60,-45,-40,-40],UhungarumlautAcircumflex:[-50,-50,-40,-40,-60,-45,-40,-40],UhungarumlautAdieresis:[-50,-50,-40,-40,-60,-45,-40,-40],UhungarumlautAgrave:[-50,-50,-40,-40,-60,-45,-40,-40],UhungarumlautAmacron:[-50,-50,-40,-40,-60,-45,-40,-40],UhungarumlautAogonek:[-50,-50,-40,-40,-60,-45,-40,-40],UhungarumlautAring:[-50,-50,-40,-40,-60,-45,-40,-40],UhungarumlautAtilde:[-50,-50,-40,-40,-60,-45,-40,-40],Uhungarumlautcomma:[-30,-30,-40,-40,-50,0,-25],Uhungarumlautperiod:[-30,-30,-40,-40,-50,0,-25],UmacronA:[-50,-50,-40,-40,-60,-45,-40,-40],UmacronAacute:[-50,-50,-40,-40,-60,-45,-40,-40],UmacronAbreve:[-50,-50,-40,-40,-60,-45,-40,-40],UmacronAcircumflex:[-50,-50,-40,-40,-60,-45,-40,-40],UmacronAdieresis:[-50,-50,-40,-40,-60,-45,-40,-40],UmacronAgrave:[-50,-50,-40,-40,-60,-45,-40,-40],UmacronAmacron:[-50,-50,-40,-40,-60,-45,-40,-40],UmacronAogonek:[-50,-50,-40,-40,-60,-45,-40,-40],UmacronAring:[-50,-50,-40,-40,-60,-45,-40,-40],UmacronAtilde:[-50,-50,-40,-40,-60,-45,-40,-40],Umacroncomma:[-30,-30,-40,-40,-50,0,-25],Umacronperiod:[-30,-30,-40,-40,-50,0,-25],UogonekA:[-50,-50,-40,-40,-60,-45,-40,-40],UogonekAacute:[-50,-50,-40,-40,-60,-45,-40,-40],UogonekAbreve:[-50,-50,-40,-40,-60,-45,-40,-40],UogonekAcircumflex:[-50,-50,-40,-40,-60,-45,-40,-40],UogonekAdieresis:[-50,-50,-40,-40,-60,-45,-40,-40],UogonekAgrave:[-50,-50,-40,-40,-60,-45,-40,-40],UogonekAmacron:[-50,-50,-40,-40,-60,-45,-40,-40],UogonekAogonek:[-50,-50,-40,-40,-60,-45,-40,-40],UogonekAring:[-50,-50,-40,-40,-60,-45,-40,-40],UogonekAtilde:[-50,-50,-40,-40,-60,-45,-40,-40],Uogonekcomma:[-30,-30,-40,-40,-50,0,-25],Uogonekperiod:[-30,-30,-40,-40,-50,0,-25],UringA:[-50,-50,-40,-40,-60,-45,-40,-40],UringAacute:[-50,-50,-40,-40,-60,-45,-40,-40],UringAbreve:[-50,-50,-40,-40,-60,-45,-40,-40],UringAcircumflex:[-50,-50,-40,-40,-60,-45,-40,-40],UringAdieresis:[-50,-50,-40,-40,-60,-45,-40,-40],UringAgrave:[-50,-50,-40,-40,-60,-45,-40,-40],UringAmacron:[-50,-50,-40,-40,-60,-45,-40,-40],UringAogonek:[-50,-50,-40,-40,-60,-45,-40,-40],UringAring:[-50,-50,-40,-40,-60,-45,-40,-40],UringAtilde:[-50,-50,-40,-40,-60,-45,-40,-40],Uringcomma:[-30,-30,-40,-40,-50,0,-25],Uringperiod:[-30,-30,-40,-40,-50,0,-25],VA:[-80,-80,-80,-80,-135,-85,-60,-135],VAacute:[-80,-80,-80,-80,-135,-85,-60,-135],VAbreve:[-80,-80,-80,-80,-135,-85,-60,-135],VAcircumflex:[-80,-80,-80,-80,-135,-85,-60,-135],VAdieresis:[-80,-80,-80,-80,-135,-85,-60,-135],VAgrave:[-80,-80,-80,-80,-135,-85,-60,-135],VAmacron:[-80,-80,-80,-80,-135,-85,-60,-135],VAogonek:[-80,-80,-80,-80,-135,-85,-60,-135],VAring:[-80,-80,-80,-80,-135,-85,-60,-135],VAtilde:[-80,-80,-80,-80,-135,-85,-60,-135],VG:[-50,-50,-40,-40,-30,-10,0,-15],VGbreve:[-50,-50,-40,-40,-30,-10,0,-15],VGcommaaccent:[-50,-50,-40,-40,-30,-10,0,-15],VO:[-50,-50,-40,-40,-45,-30,-30,-40],VOacute:[-50,-50,-40,-40,-45,-30,-30,-40],VOcircumflex:[-50,-50,-40,-40,-45,-30,-30,-40],VOdieresis:[-50,-50,-40,-40,-45,-30,-30,-40],VOgrave:[-50,-50,-40,-40,-45,-30,-30,-40],VOhungarumlaut:[-50,-50,-40,-40,-45,-30,-30,-40],VOmacron:[-50,-50,-40,-40,-45,-30,-30,-40],VOslash:[-50,-50,-40,-40,-45,-30,-30,-40],VOtilde:[-50,-50,-40,-40,-45,-30,-30,-40],Va:[-60,-60,-70,-70,-92,-111,-111,-111],Vaacute:[-60,-60,-70,-70,-92,-111,-111,-111],Vabreve:[-60,-60,-70,-70,-92,-111,-111,-111],Vacircumflex:[-60,-60,-70,-70,-92,-111,-111,-71],Vadieresis:[-60,-60,-70,-70,-92,-111,-111,-71],Vagrave:[-60,-60,-70,-70,-92,-111,-111,-71],Vamacron:[-60,-60,-70,-70,-92,-111,-111,-71],Vaogonek:[-60,-60,-70,-70,-92,-111,-111,-111],Varing:[-60,-60,-70,-70,-92,-111,-111,-111],Vatilde:[-60,-60,-70,-70,-92,-111,-111,-71],Vcolon:[-40,-40,-40,-40,-92,-74,-65,-74],Vcomma:[-120,-120,-125,-125,-129,-129,-129,-129],Ve:[-50,-50,-80,-80,-100,-111,-111,-111],Veacute:[-50,-50,-80,-80,-100,-111,-111,-111],Vecaron:[-50,-50,-80,-80,-100,-111,-111,-71],Vecircumflex:[-50,-50,-80,-80,-100,-111,-111,-71],Vedieresis:[-50,-50,-80,-80,-100,-71,-71,-71],Vedotaccent:[-50,-50,-80,-80,-100,-111,-111,-111],Vegrave:[-50,-50,-80,-80,-100,-71,-71,-71],Vemacron:[-50,-50,-80,-80,-100,-71,-71,-71],Veogonek:[-50,-50,-80,-80,-100,-111,-111,-111],Vhyphen:[-80,-80,-80,-80,-74,-70,-55,-100],Vo:[-90,-90,-80,-80,-100,-111,-111,-129],Voacute:[-90,-90,-80,-80,-100,-111,-111,-129],Vocircumflex:[-90,-90,-80,-80,-100,-111,-111,-129],Vodieresis:[-90,-90,-80,-80,-100,-111,-111,-89],Vograve:[-90,-90,-80,-80,-100,-111,-111,-89],Vohungarumlaut:[-90,-90,-80,-80,-100,-111,-111,-129],Vomacron:[-90,-90,-80,-80,-100,-111,-111,-89],Voslash:[-90,-90,-80,-80,-100,-111,-111,-129],Votilde:[-90,-90,-80,-80,-100,-111,-111,-89],Vperiod:[-120,-120,-125,-125,-145,-129,-129,-129],Vsemicolon:[-40,-40,-40,-40,-92,-74,-74,-74],Vu:[-60,-60,-70,-70,-92,-55,-74,-75],Vuacute:[-60,-60,-70,-70,-92,-55,-74,-75],Vucircumflex:[-60,-60,-70,-70,-92,-55,-74,-75],Vudieresis:[-60,-60,-70,-70,-92,-55,-74,-75],Vugrave:[-60,-60,-70,-70,-92,-55,-74,-75],Vuhungarumlaut:[-60,-60,-70,-70,-92,-55,-74,-75],Vumacron:[-60,-60,-70,-70,-92,-55,-74,-75],Vuogonek:[-60,-60,-70,-70,-92,-55,-74,-75],Vuring:[-60,-60,-70,-70,-92,-55,-74,-75],WA:[-60,-60,-50,-50,-120,-74,-60,-120],WAacute:[-60,-60,-50,-50,-120,-74,-60,-120],WAbreve:[-60,-60,-50,-50,-120,-74,-60,-120],WAcircumflex:[-60,-60,-50,-50,-120,-74,-60,-120],WAdieresis:[-60,-60,-50,-50,-120,-74,-60,-120],WAgrave:[-60,-60,-50,-50,-120,-74,-60,-120],WAmacron:[-60,-60,-50,-50,-120,-74,-60,-120],WAogonek:[-60,-60,-50,-50,-120,-74,-60,-120],WAring:[-60,-60,-50,-50,-120,-74,-60,-120],WAtilde:[-60,-60,-50,-50,-120,-74,-60,-120],WO:[-20,-20,-20,-20,-10,-15,-25,-10],WOacute:[-20,-20,-20,-20,-10,-15,-25,-10],WOcircumflex:[-20,-20,-20,-20,-10,-15,-25,-10],WOdieresis:[-20,-20,-20,-20,-10,-15,-25,-10],WOgrave:[-20,-20,-20,-20,-10,-15,-25,-10],WOhungarumlaut:[-20,-20,-20,-20,-10,-15,-25,-10],WOmacron:[-20,-20,-20,-20,-10,-15,-25,-10],WOslash:[-20,-20,-20,-20,-10,-15,-25,-10],WOtilde:[-20,-20,-20,-20,-10,-15,-25,-10],Wa:[-40,-40,-40,-40,-65,-85,-92,-80],Waacute:[-40,-40,-40,-40,-65,-85,-92,-80],Wabreve:[-40,-40,-40,-40,-65,-85,-92,-80],Wacircumflex:[-40,-40,-40,-40,-65,-85,-92,-80],Wadieresis:[-40,-40,-40,-40,-65,-85,-92,-80],Wagrave:[-40,-40,-40,-40,-65,-85,-92,-80],Wamacron:[-40,-40,-40,-40,-65,-85,-92,-80],Waogonek:[-40,-40,-40,-40,-65,-85,-92,-80],Waring:[-40,-40,-40,-40,-65,-85,-92,-80],Watilde:[-40,-40,-40,-40,-65,-85,-92,-80],Wcolon:[-10,-10,0,0,-55,-55,-65,-37],Wcomma:[-80,-80,-80,-80,-92,-74,-92,-92],We:[-35,-35,-30,-30,-65,-90,-92,-80],Weacute:[-35,-35,-30,-30,-65,-90,-92,-80],Wecaron:[-35,-35,-30,-30,-65,-90,-92,-80],Wecircumflex:[-35,-35,-30,-30,-65,-90,-92,-80],Wedieresis:[-35,-35,-30,-30,-65,-50,-52,-40],Wedotaccent:[-35,-35,-30,-30,-65,-90,-92,-80],Wegrave:[-35,-35,-30,-30,-65,-50,-52,-40],Wemacron:[-35,-35,-30,-30,-65,-50,-52,-40],Weogonek:[-35,-35,-30,-30,-65,-90,-92,-80],Whyphen:[-40,-40,-40,-40,-37,-50,-37,-65],Wo:[-60,-60,-30,-30,-75,-80,-92,-80],Woacute:[-60,-60,-30,-30,-75,-80,-92,-80],Wocircumflex:[-60,-60,-30,-30,-75,-80,-92,-80],Wodieresis:[-60,-60,-30,-30,-75,-80,-92,-80],Wograve:[-60,-60,-30,-30,-75,-80,-92,-80],Wohungarumlaut:[-60,-60,-30,-30,-75,-80,-92,-80],Womacron:[-60,-60,-30,-30,-75,-80,-92,-80],Woslash:[-60,-60,-30,-30,-75,-80,-92,-80],Wotilde:[-60,-60,-30,-30,-75,-80,-92,-80],Wperiod:[-80,-80,-80,-80,-92,-74,-92,-92],Wsemicolon:[-10,-10,0,0,-55,-55,-65,-37],Wu:[-45,-45,-30,-30,-50,-55,-55,-50],Wuacute:[-45,-45,-30,-30,-50,-55,-55,-50],Wucircumflex:[-45,-45,-30,-30,-50,-55,-55,-50],Wudieresis:[-45,-45,-30,-30,-50,-55,-55,-50],Wugrave:[-45,-45,-30,-30,-50,-55,-55,-50],Wuhungarumlaut:[-45,-45,-30,-30,-50,-55,-55,-50],Wumacron:[-45,-45,-30,-30,-50,-55,-55,-50],Wuogonek:[-45,-45,-30,-30,-50,-55,-55,-50],Wuring:[-45,-45,-30,-30,-50,-55,-55,-50],Wy:[-20,-20,-20,-20,-60,-55,-70,-73],Wyacute:[-20,-20,-20,-20,-60,-55,-70,-73],Wydieresis:[-20,-20,-20,-20,-60,-55,-70,-73],YA:[-110,-110,-110,-110,-110,-74,-50,-120],YAacute:[-110,-110,-110,-110,-110,-74,-50,-120],YAbreve:[-110,-110,-110,-110,-110,-74,-50,-120],YAcircumflex:[-110,-110,-110,-110,-110,-74,-50,-120],YAdieresis:[-110,-110,-110,-110,-110,-74,-50,-120],YAgrave:[-110,-110,-110,-110,-110,-74,-50,-120],YAmacron:[-110,-110,-110,-110,-110,-74,-50,-120],YAogonek:[-110,-110,-110,-110,-110,-74,-50,-120],YAring:[-110,-110,-110,-110,-110,-74,-50,-120],YAtilde:[-110,-110,-110,-110,-110,-74,-50,-120],YO:[-70,-70,-85,-85,-35,-25,-15,-30],YOacute:[-70,-70,-85,-85,-35,-25,-15,-30],YOcircumflex:[-70,-70,-85,-85,-35,-25,-15,-30],YOdieresis:[-70,-70,-85,-85,-35,-25,-15,-30],YOgrave:[-70,-70,-85,-85,-35,-25,-15,-30],YOhungarumlaut:[-70,-70,-85,-85,-35,-25,-15,-30],YOmacron:[-70,-70,-85,-85,-35,-25,-15,-30],YOslash:[-70,-70,-85,-85,-35,-25,-15,-30],YOtilde:[-70,-70,-85,-85,-35,-25,-15,-30],Ya:[-90,-90,-140,-140,-85,-92,-92,-100],Yaacute:[-90,-90,-140,-140,-85,-92,-92,-100],Yabreve:[-90,-90,-70,-70,-85,-92,-92,-100],Yacircumflex:[-90,-90,-140,-140,-85,-92,-92,-100],Yadieresis:[-90,-90,-140,-140,-85,-92,-92,-60],Yagrave:[-90,-90,-140,-140,-85,-92,-92,-60],Yamacron:[-90,-90,-70,-70,-85,-92,-92,-60],Yaogonek:[-90,-90,-140,-140,-85,-92,-92,-100],Yaring:[-90,-90,-140,-140,-85,-92,-92,-100],Yatilde:[-90,-90,-140,-140,-85,-92,-92,-60],Ycolon:[-50,-50,-60,-60,-92,-92,-65,-92],Ycomma:[-100,-100,-140,-140,-92,-92,-92,-129],Ye:[-80,-80,-140,-140,-111,-111,-92,-100],Yeacute:[-80,-80,-140,-140,-111,-111,-92,-100],Yecaron:[-80,-80,-140,-140,-111,-111,-92,-100],Yecircumflex:[-80,-80,-140,-140,-111,-71,-92,-100],Yedieresis:[-80,-80,-140,-140,-71,-71,-52,-60],Yedotaccent:[-80,-80,-140,-140,-111,-111,-92,-100],Yegrave:[-80,-80,-140,-140,-71,-71,-52,-60],Yemacron:[-80,-80,-70,-70,-71,-71,-52,-60],Yeogonek:[-80,-80,-140,-140,-111,-111,-92,-100],Yo:[-100,-100,-140,-140,-111,-111,-92,-110],Yoacute:[-100,-100,-140,-140,-111,-111,-92,-110],Yocircumflex:[-100,-100,-140,-140,-111,-111,-92,-110],Yodieresis:[-100,-100,-140,-140,-111,-111,-92,-70],Yograve:[-100,-100,-140,-140,-111,-111,-92,-70],Yohungarumlaut:[-100,-100,-140,-140,-111,-111,-92,-110],Yomacron:[-100,-100,-140,-140,-111,-111,-92,-70],Yoslash:[-100,-100,-140,-140,-111,-111,-92,-110],Yotilde:[-100,-100,-140,-140,-111,-111,-92,-70],Yperiod:[-100,-100,-140,-140,-92,-74,-92,-129],Ysemicolon:[-50,-50,-60,-60,-92,-92,-65,-92],Yu:[-100,-100,-110,-110,-92,-92,-92,-111],Yuacute:[-100,-100,-110,-110,-92,-92,-92,-111],Yucircumflex:[-100,-100,-110,-110,-92,-92,-92,-111],Yudieresis:[-100,-100,-110,-110,-92,-92,-92,-71],Yugrave:[-100,-100,-110,-110,-92,-92,-92,-71],Yuhungarumlaut:[-100,-100,-110,-110,-92,-92,-92,-111],Yumacron:[-100,-100,-110,-110,-92,-92,-92,-71],Yuogonek:[-100,-100,-110,-110,-92,-92,-92,-111],Yuring:[-100,-100,-110,-110,-92,-92,-92,-111],YacuteA:[-110,-110,-110,-110,-110,-74,-50,-120],YacuteAacute:[-110,-110,-110,-110,-110,-74,-50,-120],YacuteAbreve:[-110,-110,-110,-110,-110,-74,-50,-120],YacuteAcircumflex:[-110,-110,-110,-110,-110,-74,-50,-120],YacuteAdieresis:[-110,-110,-110,-110,-110,-74,-50,-120],YacuteAgrave:[-110,-110,-110,-110,-110,-74,-50,-120],YacuteAmacron:[-110,-110,-110,-110,-110,-74,-50,-120],YacuteAogonek:[-110,-110,-110,-110,-110,-74,-50,-120],YacuteAring:[-110,-110,-110,-110,-110,-74,-50,-120],YacuteAtilde:[-110,-110,-110,-110,-110,-74,-50,-120],YacuteO:[-70,-70,-85,-85,-35,-25,-15,-30],YacuteOacute:[-70,-70,-85,-85,-35,-25,-15,-30],YacuteOcircumflex:[-70,-70,-85,-85,-35,-25,-15,-30],YacuteOdieresis:[-70,-70,-85,-85,-35,-25,-15,-30],YacuteOgrave:[-70,-70,-85,-85,-35,-25,-15,-30],YacuteOhungarumlaut:[-70,-70,-85,-85,-35,-25,-15,-30],YacuteOmacron:[-70,-70,-85,-85,-35,-25,-15,-30],YacuteOslash:[-70,-70,-85,-85,-35,-25,-15,-30],YacuteOtilde:[-70,-70,-85,-85,-35,-25,-15,-30],Yacutea:[-90,-90,-140,-140,-85,-92,-92,-100],Yacuteaacute:[-90,-90,-140,-140,-85,-92,-92,-100],Yacuteabreve:[-90,-90,-70,-70,-85,-92,-92,-100],Yacuteacircumflex:[-90,-90,-140,-140,-85,-92,-92,-100],Yacuteadieresis:[-90,-90,-140,-140,-85,-92,-92,-60],Yacuteagrave:[-90,-90,-140,-140,-85,-92,-92,-60],Yacuteamacron:[-90,-90,-70,-70,-85,-92,-92,-60],Yacuteaogonek:[-90,-90,-140,-140,-85,-92,-92,-100],Yacutearing:[-90,-90,-140,-140,-85,-92,-92,-100],Yacuteatilde:[-90,-90,-70,-70,-85,-92,-92,-60],Yacutecolon:[-50,-50,-60,-60,-92,-92,-65,-92],Yacutecomma:[-100,-100,-140,-140,-92,-92,-92,-129],Yacutee:[-80,-80,-140,-140,-111,-111,-92,-100],Yacuteeacute:[-80,-80,-140,-140,-111,-111,-92,-100],Yacuteecaron:[-80,-80,-140,-140,-111,-111,-92,-100],Yacuteecircumflex:[-80,-80,-140,-140,-111,-71,-92,-100],Yacuteedieresis:[-80,-80,-140,-140,-71,-71,-52,-60],Yacuteedotaccent:[-80,-80,-140,-140,-111,-111,-92,-100],Yacuteegrave:[-80,-80,-140,-140,-71,-71,-52,-60],Yacuteemacron:[-80,-80,-70,-70,-71,-71,-52,-60],Yacuteeogonek:[-80,-80,-140,-140,-111,-111,-92,-100],Yacuteo:[-100,-100,-140,-140,-111,-111,-92,-110],Yacuteoacute:[-100,-100,-140,-140,-111,-111,-92,-110],Yacuteocircumflex:[-100,-100,-140,-140,-111,-111,-92,-110],Yacuteodieresis:[-100,-100,-140,-140,-111,-111,-92,-70],Yacuteograve:[-100,-100,-140,-140,-111,-111,-92,-70],Yacuteohungarumlaut:[-100,-100,-140,-140,-111,-111,-92,-110],Yacuteomacron:[-100,-100,-70,-70,-111,-111,-92,-70],Yacuteoslash:[-100,-100,-140,-140,-111,-111,-92,-110],Yacuteotilde:[-100,-100,-140,-140,-111,-111,-92,-70],Yacuteperiod:[-100,-100,-140,-140,-92,-74,-92,-129],Yacutesemicolon:[-50,-50,-60,-60,-92,-92,-65,-92],Yacuteu:[-100,-100,-110,-110,-92,-92,-92,-111],Yacuteuacute:[-100,-100,-110,-110,-92,-92,-92,-111],Yacuteucircumflex:[-100,-100,-110,-110,-92,-92,-92,-111],Yacuteudieresis:[-100,-100,-110,-110,-92,-92,-92,-71],Yacuteugrave:[-100,-100,-110,-110,-92,-92,-92,-71],Yacuteuhungarumlaut:[-100,-100,-110,-110,-92,-92,-92,-111],Yacuteumacron:[-100,-100,-110,-110,-92,-92,-92,-71],Yacuteuogonek:[-100,-100,-110,-110,-92,-92,-92,-111],Yacuteuring:[-100,-100,-110,-110,-92,-92,-92,-111],YdieresisA:[-110,-110,-110,-110,-110,-74,-50,-120],YdieresisAacute:[-110,-110,-110,-110,-110,-74,-50,-120],YdieresisAbreve:[-110,-110,-110,-110,-110,-74,-50,-120],YdieresisAcircumflex:[-110,-110,-110,-110,-110,-74,-50,-120],YdieresisAdieresis:[-110,-110,-110,-110,-110,-74,-50,-120],YdieresisAgrave:[-110,-110,-110,-110,-110,-74,-50,-120],YdieresisAmacron:[-110,-110,-110,-110,-110,-74,-50,-120],YdieresisAogonek:[-110,-110,-110,-110,-110,-74,-50,-120],YdieresisAring:[-110,-110,-110,-110,-110,-74,-50,-120],YdieresisAtilde:[-110,-110,-110,-110,-110,-74,-50,-120],YdieresisO:[-70,-70,-85,-85,-35,-25,-15,-30],YdieresisOacute:[-70,-70,-85,-85,-35,-25,-15,-30],YdieresisOcircumflex:[-70,-70,-85,-85,-35,-25,-15,-30],YdieresisOdieresis:[-70,-70,-85,-85,-35,-25,-15,-30],YdieresisOgrave:[-70,-70,-85,-85,-35,-25,-15,-30],YdieresisOhungarumlaut:[-70,-70,-85,-85,-35,-25,-15,-30],YdieresisOmacron:[-70,-70,-85,-85,-35,-25,-15,-30],YdieresisOslash:[-70,-70,-85,-85,-35,-25,-15,-30],YdieresisOtilde:[-70,-70,-85,-85,-35,-25,-15,-30],Ydieresisa:[-90,-90,-140,-140,-85,-92,-92,-100],Ydieresisaacute:[-90,-90,-140,-140,-85,-92,-92,-100],Ydieresisabreve:[-90,-90,-70,-70,-85,-92,-92,-100],Ydieresisacircumflex:[-90,-90,-140,-140,-85,-92,-92,-100],Ydieresisadieresis:[-90,-90,-140,-140,-85,-92,-92,-60],Ydieresisagrave:[-90,-90,-140,-140,-85,-92,-92,-60],Ydieresisamacron:[-90,-90,-70,-70,-85,-92,-92,-60],Ydieresisaogonek:[-90,-90,-140,-140,-85,-92,-92,-100],Ydieresisaring:[-90,-90,-140,-140,-85,-92,-92,-100],Ydieresisatilde:[-90,-90,-70,-70,-85,-92,-92,-100],Ydieresiscolon:[-50,-50,-60,-60,-92,-92,-65,-92],Ydieresiscomma:[-100,-100,-140,-140,-92,-92,-92,-129],Ydieresise:[-80,-80,-140,-140,-111,-111,-92,-100],Ydieresiseacute:[-80,-80,-140,-140,-111,-111,-92,-100],Ydieresisecaron:[-80,-80,-140,-140,-111,-111,-92,-100],Ydieresisecircumflex:[-80,-80,-140,-140,-111,-71,-92,-100],Ydieresisedieresis:[-80,-80,-140,-140,-71,-71,-52,-60],Ydieresisedotaccent:[-80,-80,-140,-140,-111,-111,-92,-100],Ydieresisegrave:[-80,-80,-140,-140,-71,-71,-52,-60],Ydieresisemacron:[-80,-80,-70,-70,-71,-71,-52,-60],Ydieresiseogonek:[-80,-80,-140,-140,-111,-111,-92,-100],Ydieresiso:[-100,-100,-140,-140,-111,-111,-92,-110],Ydieresisoacute:[-100,-100,-140,-140,-111,-111,-92,-110],Ydieresisocircumflex:[-100,-100,-140,-140,-111,-111,-92,-110],Ydieresisodieresis:[-100,-100,-140,-140,-111,-111,-92,-70],Ydieresisograve:[-100,-100,-140,-140,-111,-111,-92,-70],Ydieresisohungarumlaut:[-100,-100,-140,-140,-111,-111,-92,-110],Ydieresisomacron:[-100,-100,-140,-140,-111,-111,-92,-70],Ydieresisoslash:[-100,-100,-140,-140,-111,-111,-92,-110],Ydieresisotilde:[-100,-100,-140,-140,-111,-111,-92,-70],Ydieresisperiod:[-100,-100,-140,-140,-92,-74,-92,-129],Ydieresissemicolon:[-50,-50,-60,-60,-92,-92,-65,-92],Ydieresisu:[-100,-100,-110,-110,-92,-92,-92,-111],Ydieresisuacute:[-100,-100,-110,-110,-92,-92,-92,-111],Ydieresisucircumflex:[-100,-100,-110,-110,-92,-92,-92,-111],Ydieresisudieresis:[-100,-100,-110,-110,-92,-92,-92,-71],Ydieresisugrave:[-100,-100,-110,-110,-92,-92,-92,-71],Ydieresisuhungarumlaut:[-100,-100,-110,-110,-92,-92,-92,-111],Ydieresisumacron:[-100,-100,-110,-110,-92,-92,-92,-71],Ydieresisuogonek:[-100,-100,-110,-110,-92,-92,-92,-111],Ydieresisuring:[-100,-100,-110,-110,-92,-92,-92,-111],ag:[-10,-10,0,0,0,0,-10],agbreve:[-10,-10,0,0,0,0,-10],agcommaaccent:[-10,-10,0,0,0,0,-10],av:[-15,-15,-20,-20,-25,0,0,-20],aw:[-15,-15,-20,-20,0,0,0,-15],ay:[-20,-20,-30,-30],ayacute:[-20,-20,-30,-30],aydieresis:[-20,-20,-30,-30],aacuteg:[-10,-10,0,0,0,0,-10],aacutegbreve:[-10,-10,0,0,0,0,-10],aacutegcommaaccent:[-10,-10,0,0,0,0,-10],aacutev:[-15,-15,-20,-20,-25,0,0,-20],aacutew:[-15,-15,-20,-20,0,0,0,-15],aacutey:[-20,-20,-30,-30],aacuteyacute:[-20,-20,-30,-30],aacuteydieresis:[-20,-20,-30,-30],abreveg:[-10,-10,0,0,0,0,-10],abrevegbreve:[-10,-10,0,0,0,0,-10],abrevegcommaaccent:[-10,-10,0,0,0,0,-10],abrevev:[-15,-15,-20,-20,-25,0,0,-20],abrevew:[-15,-15,-20,-20,0,0,0,-15],abrevey:[-20,-20,-30,-30],abreveyacute:[-20,-20,-30,-30],abreveydieresis:[-20,-20,-30,-30],acircumflexg:[-10,-10,0,0,0,0,-10],acircumflexgbreve:[-10,-10,0,0,0,0,-10],acircumflexgcommaaccent:[-10,-10,0,0,0,0,-10],acircumflexv:[-15,-15,-20,-20,-25,0,0,-20],acircumflexw:[-15,-15,-20,-20,0,0,0,-15],acircumflexy:[-20,-20,-30,-30],acircumflexyacute:[-20,-20,-30,-30],acircumflexydieresis:[-20,-20,-30,-30],adieresisg:[-10,-10,0,0,0,0,-10],adieresisgbreve:[-10,-10,0,0,0,0,-10],adieresisgcommaaccent:[-10,-10,0,0,0,0,-10],adieresisv:[-15,-15,-20,-20,-25,0,0,-20],adieresisw:[-15,-15,-20,-20,0,0,0,-15],adieresisy:[-20,-20,-30,-30],adieresisyacute:[-20,-20,-30,-30],adieresisydieresis:[-20,-20,-30,-30],agraveg:[-10,-10,0,0,0,0,-10],agravegbreve:[-10,-10,0,0,0,0,-10],agravegcommaaccent:[-10,-10,0,0,0,0,-10],agravev:[-15,-15,-20,-20,-25,0,0,-20],agravew:[-15,-15,-20,-20,0,0,0,-15],agravey:[-20,-20,-30,-30],agraveyacute:[-20,-20,-30,-30],agraveydieresis:[-20,-20,-30,-30],amacrong:[-10,-10,0,0,0,0,-10],amacrongbreve:[-10,-10,0,0,0,0,-10],amacrongcommaaccent:[-10,-10,0,0,0,0,-10],amacronv:[-15,-15,-20,-20,-25,0,0,-20],amacronw:[-15,-15,-20,-20,0,0,0,-15],amacrony:[-20,-20,-30,-30],amacronyacute:[-20,-20,-30,-30],amacronydieresis:[-20,-20,-30,-30],aogonekg:[-10,-10,0,0,0,0,-10],aogonekgbreve:[-10,-10,0,0,0,0,-10],aogonekgcommaaccent:[-10,-10,0,0,0,0,-10],aogonekv:[-15,-15,-20,-20,-25,0,0,-20],aogonekw:[-15,-15,-20,-20,0,0,0,-15],aogoneky:[-20,-20,-30,-30],aogonekyacute:[-20,-20,-30,-30],aogonekydieresis:[-20,-20,-30,-30],aringg:[-10,-10,0,0,0,0,-10],aringgbreve:[-10,-10,0,0,0,0,-10],aringgcommaaccent:[-10,-10,0,0,0,0,-10],aringv:[-15,-15,-20,-20,-25,0,0,-20],aringw:[-15,-15,-20,-20,0,0,0,-15],aringy:[-20,-20,-30,-30],aringyacute:[-20,-20,-30,-30],aringydieresis:[-20,-20,-30,-30],atildeg:[-10,-10,0,0,0,0,-10],atildegbreve:[-10,-10,0,0,0,0,-10],atildegcommaaccent:[-10,-10,0,0,0,0,-10],atildev:[-15,-15,-20,-20,-25,0,0,-20],atildew:[-15,-15,-20,-20,0,0,0,-15],atildey:[-20,-20,-30,-30],atildeyacute:[-20,-20,-30,-30],atildeydieresis:[-20,-20,-30,-30],bl:[-10,-10,-20,-20],blacute:[-10,-10,-20,-20],blcommaaccent:[-10,-10,-20,-20],blslash:[-10,-10,-20,-20],bu:[-20,-20,-20,-20,-20,-20,-20,-20],buacute:[-20,-20,-20,-20,-20,-20,-20,-20],bucircumflex:[-20,-20,-20,-20,-20,-20,-20,-20],budieresis:[-20,-20,-20,-20,-20,-20,-20,-20],bugrave:[-20,-20,-20,-20,-20,-20,-20,-20],buhungarumlaut:[-20,-20,-20,-20,-20,-20,-20,-20],bumacron:[-20,-20,-20,-20,-20,-20,-20,-20],buogonek:[-20,-20,-20,-20,-20,-20,-20,-20],buring:[-20,-20,-20,-20,-20,-20,-20,-20],bv:[-20,-20,-20,-20,-15,0,0,-15],by:[-20,-20,-20,-20],byacute:[-20,-20,-20,-20],bydieresis:[-20,-20,-20,-20],ch:[-10,-10,0,0,0,-10,-15],ck:[-20,-20,-20,-20,0,-10,-20],ckcommaaccent:[-20,-20,-20,-20,0,-10,-20],cl:[-20,-20],clacute:[-20,-20],clcommaaccent:[-20,-20],clslash:[-20,-20],cy:[-10,-10,0,0,0,0,0,-15],cyacute:[-10,-10,0,0,0,0,0,-15],cydieresis:[-10,-10,0,0,0,0,0,-15],cacuteh:[-10,-10,0,0,0,-10,-15],cacutek:[-20,-20,-20,-20,0,-10,-20],cacutekcommaaccent:[-20,-20,-20,-20,0,-10,-20],cacutel:[-20,-20],cacutelacute:[-20,-20],cacutelcommaaccent:[-20,-20],cacutelslash:[-20,-20],cacutey:[-10,-10,0,0,0,0,0,-15],cacuteyacute:[-10,-10,0,0,0,0,0,-15],cacuteydieresis:[-10,-10,0,0,0,0,0,-15],ccaronh:[-10,-10,0,0,0,-10,-15],ccaronk:[-20,-20,-20,-20,0,-10,-20],ccaronkcommaaccent:[-20,-20,-20,-20,0,-10,-20],ccaronl:[-20,-20],ccaronlacute:[-20,-20],ccaronlcommaaccent:[-20,-20],ccaronlslash:[-20,-20],ccarony:[-10,-10,0,0,0,0,0,-15],ccaronyacute:[-10,-10,0,0,0,0,0,-15],ccaronydieresis:[-10,-10,0,0,0,0,0,-15],ccedillah:[-10,-10,0,0,0,-10,-15],ccedillak:[-20,-20,-20,-20,0,-10,-20],ccedillakcommaaccent:[-20,-20,-20,-20,0,-10,-20],ccedillal:[-20,-20],ccedillalacute:[-20,-20],ccedillalcommaaccent:[-20,-20],ccedillalslash:[-20,-20],ccedillay:[-10,-10,0,0,0,0,0,-15],ccedillayacute:[-10,-10,0,0,0,0,0,-15],ccedillaydieresis:[-10,-10,0,0,0,0,0,-15],colonspace:[-40,-40,-50,-50],commaquotedblright:[-120,-120,-100,-100,-45,-95,-140,-70],commaquoteright:[-120,-120,-100,-100,-55,-95,-140,-70],commaspace:[-40,-40],dd:[-10,-10],ddcroat:[-10,-10],dv:[-15,-15],dw:[-15,-15,0,0,-15],dy:[-15,-15],dyacute:[-15,-15],dydieresis:[-15,-15],dcroatd:[-10,-10],dcroatdcroat:[-10,-10],dcroatv:[-15,-15],dcroatw:[-15,-15,0,0,-15],dcroaty:[-15,-15],dcroatyacute:[-15,-15],dcroatydieresis:[-15,-15],ecomma:[10,10,-15,-15,0,0,-10],eperiod:[20,20,-15,-15,0,0,-15],ev:[-15,-15,-30,-30,-15,0,-15,-25],ew:[-15,-15,-20,-20,0,0,-15,-25],ex:[-15,-15,-30,-30,0,0,-20,-15],ey:[-15,-15,-20,-20,0,0,-30,-15],eyacute:[-15,-15,-20,-20,0,0,-30,-15],eydieresis:[-15,-15,-20,-20,0,0,-30,-15],eacutecomma:[10,10,-15,-15,0,0,-10],eacuteperiod:[20,20,-15,-15,0,0,-15],eacutev:[-15,-15,-30,-30,-15,0,-15,-25],eacutew:[-15,-15,-20,-20,0,0,-15,-25],eacutex:[-15,-15,-30,-30,0,0,-20,-15],eacutey:[-15,-15,-20,-20,0,0,-30,-15],eacuteyacute:[-15,-15,-20,-20,0,0,-30,-15],eacuteydieresis:[-15,-15,-20,-20,0,0,-30,-15],ecaroncomma:[10,10,-15,-15,0,0,-10],ecaronperiod:[20,20,-15,-15,0,0,-15],ecaronv:[-15,-15,-30,-30,-15,0,-15,-25],ecaronw:[-15,-15,-20,-20,0,0,-15,-25],ecaronx:[-15,-15,-30,-30,0,0,-20,-15],ecarony:[-15,-15,-20,-20,0,0,-30,-15],ecaronyacute:[-15,-15,-20,-20,0,0,-30,-15],ecaronydieresis:[-15,-15,-20,-20,0,0,-30,-15],ecircumflexcomma:[10,10,-15,-15,0,0,-10],ecircumflexperiod:[20,20,-15,-15,0,0,-15],ecircumflexv:[-15,-15,-30,-30,-15,0,-15,-25],ecircumflexw:[-15,-15,-20,-20,0,0,-15,-25],ecircumflexx:[-15,-15,-30,-30,0,0,-20,-15],ecircumflexy:[-15,-15,-20,-20,0,0,-30,-15],ecircumflexyacute:[-15,-15,-20,-20,0,0,-30,-15],ecircumflexydieresis:[-15,-15,-20,-20,0,0,-30,-15],edieresiscomma:[10,10,-15,-15,0,0,-10],edieresisperiod:[20,20,-15,-15,0,0,-15],edieresisv:[-15,-15,-30,-30,-15,0,-15,-25],edieresisw:[-15,-15,-20,-20,0,0,-15,-25],edieresisx:[-15,-15,-30,-30,0,0,-20,-15],edieresisy:[-15,-15,-20,-20,0,0,-30,-15],edieresisyacute:[-15,-15,-20,-20,0,0,-30,-15],edieresisydieresis:[-15,-15,-20,-20,0,0,-30,-15],edotaccentcomma:[10,10,-15,-15,0,0,-10],edotaccentperiod:[20,20,-15,-15,0,0,-15],edotaccentv:[-15,-15,-30,-30,-15,0,-15,-25],edotaccentw:[-15,-15,-20,-20,0,0,-15,-25],edotaccentx:[-15,-15,-30,-30,0,0,-20,-15],edotaccenty:[-15,-15,-20,-20,0,0,-30,-15],edotaccentyacute:[-15,-15,-20,-20,0,0,-30,-15],edotaccentydieresis:[-15,-15,-20,-20,0,0,-30,-15],egravecomma:[10,10,-15,-15,0,0,-10],egraveperiod:[20,20,-15,-15,0,0,-15],egravev:[-15,-15,-30,-30,-15,0,-15,-25],egravew:[-15,-15,-20,-20,0,0,-15,-25],egravex:[-15,-15,-30,-30,0,0,-20,-15],egravey:[-15,-15,-20,-20,0,0,-30,-15],egraveyacute:[-15,-15,-20,-20,0,0,-30,-15],egraveydieresis:[-15,-15,-20,-20,0,0,-30,-15],emacroncomma:[10,10,-15,-15,0,0,-10],emacronperiod:[20,20,-15,-15,0,0,-15],emacronv:[-15,-15,-30,-30,-15,0,-15,-25],emacronw:[-15,-15,-20,-20,0,0,-15,-25],emacronx:[-15,-15,-30,-30,0,0,-20,-15],emacrony:[-15,-15,-20,-20,0,0,-30,-15],emacronyacute:[-15,-15,-20,-20,0,0,-30,-15],emacronydieresis:[-15,-15,-20,-20,0,0,-30,-15],eogonekcomma:[10,10,-15,-15,0,0,-10],eogonekperiod:[20,20,-15,-15,0,0,-15],eogonekv:[-15,-15,-30,-30,-15,0,-15,-25],eogonekw:[-15,-15,-20,-20,0,0,-15,-25],eogonekx:[-15,-15,-30,-30,0,0,-20,-15],eogoneky:[-15,-15,-20,-20,0,0,-30,-15],eogonekyacute:[-15,-15,-20,-20,0,0,-30,-15],eogonekydieresis:[-15,-15,-20,-20,0,0,-30,-15],fcomma:[-10,-10,-30,-30,-15,-10,-10],fe:[-10,-10,-30,-30,0,-10],feacute:[-10,-10,-30,-30,0,-10],fecaron:[-10,-10,-30,-30],fecircumflex:[-10,-10,-30,-30],fedieresis:[-10,-10,-30,-30],fedotaccent:[-10,-10,-30,-30,0,-10],fegrave:[-10,-10,-30,-30],femacron:[-10,-10,-30,-30],feogonek:[-10,-10,-30,-30,0,-10],fo:[-20,-20,-30,-30,-25,-10],foacute:[-20,-20,-30,-30,-25,-10],focircumflex:[-20,-20,-30,-30,-25,-10],fodieresis:[-20,-20,-30,-30,-25],fograve:[-20,-20,-30,-30,-25,-10],fohungarumlaut:[-20,-20,-30,-30,-25,-10],fomacron:[-20,-20,-30,-30,-25],foslash:[-20,-20,-30,-30,-25,-10],fotilde:[-20,-20,-30,-30,-25,-10],fperiod:[-10,-10,-30,-30,-15,-10,-15],fquotedblright:[30,30,60,60,50],fquoteright:[30,30,50,50,55,55,92,55],ge:[10,10,0,0,0,0,-10],geacute:[10,10,0,0,0,0,-10],gecaron:[10,10,0,0,0,0,-10],gecircumflex:[10,10,0,0,0,0,-10],gedieresis:[10,10,0,0,0,0,-10],gedotaccent:[10,10,0,0,0,0,-10],gegrave:[10,10,0,0,0,0,-10],gemacron:[10,10,0,0,0,0,-10],geogonek:[10,10,0,0,0,0,-10],gg:[-10,-10,0,0,0,0,-10],ggbreve:[-10,-10,0,0,0,0,-10],ggcommaaccent:[-10,-10,0,0,0,0,-10],gbrevee:[10,10,0,0,0,0,-10],gbreveeacute:[10,10,0,0,0,0,-10],gbreveecaron:[10,10,0,0,0,0,-10],gbreveecircumflex:[10,10,0,0,0,0,-10],gbreveedieresis:[10,10,0,0,0,0,-10],gbreveedotaccent:[10,10,0,0,0,0,-10],gbreveegrave:[10,10,0,0,0,0,-10],gbreveemacron:[10,10,0,0,0,0,-10],gbreveeogonek:[10,10,0,0,0,0,-10],gbreveg:[-10,-10,0,0,0,0,-10],gbrevegbreve:[-10,-10,0,0,0,0,-10],gbrevegcommaaccent:[-10,-10,0,0,0,0,-10],gcommaaccente:[10,10,0,0,0,0,-10],gcommaaccenteacute:[10,10,0,0,0,0,-10],gcommaaccentecaron:[10,10,0,0,0,0,-10],gcommaaccentecircumflex:[10,10,0,0,0,0,-10],gcommaaccentedieresis:[10,10,0,0,0,0,-10],gcommaaccentedotaccent:[10,10,0,0,0,0,-10],gcommaaccentegrave:[10,10,0,0,0,0,-10],gcommaaccentemacron:[10,10,0,0,0,0,-10],gcommaaccenteogonek:[10,10,0,0,0,0,-10],gcommaaccentg:[-10,-10,0,0,0,0,-10],gcommaaccentgbreve:[-10,-10,0,0,0,0,-10],gcommaaccentgcommaaccent:[-10,-10,0,0,0,0,-10],hy:[-20,-20,-30,-30,-15,0,0,-5],hyacute:[-20,-20,-30,-30,-15,0,0,-5],hydieresis:[-20,-20,-30,-30,-15,0,0,-5],ko:[-15,-15,-20,-20,-15,-10,-10,-10],koacute:[-15,-15,-20,-20,-15,-10,-10,-10],kocircumflex:[-15,-15,-20,-20,-15,-10,-10,-10],kodieresis:[-15,-15,-20,-20,-15,-10,-10,-10],kograve:[-15,-15,-20,-20,-15,-10,-10,-10],kohungarumlaut:[-15,-15,-20,-20,-15,-10,-10,-10],komacron:[-15,-15,-20,-20,-15,-10,-10,-10],koslash:[-15,-15,-20,-20,-15,-10,-10,-10],kotilde:[-15,-15,-20,-20,-15,-10,-10,-10],kcommaaccento:[-15,-15,-20,-20,-15,-10,-10,-10],kcommaaccentoacute:[-15,-15,-20,-20,-15,-10,-10,-10],kcommaaccentocircumflex:[-15,-15,-20,-20,-15,-10,-10,-10],kcommaaccentodieresis:[-15,-15,-20,-20,-15,-10,-10,-10],kcommaaccentograve:[-15,-15,-20,-20,-15,-10,-10,-10],kcommaaccentohungarumlaut:[-15,-15,-20,-20,-15,-10,-10,-10],kcommaaccentomacron:[-15,-15,-20,-20,-15,-10,-10,-10],kcommaaccentoslash:[-15,-15,-20,-20,-15,-10,-10,-10],kcommaaccentotilde:[-15,-15,-20,-20,-15,-10,-10,-10],lw:[-15,-15,0,0,0,0,0,-10],ly:[-15,-15],lyacute:[-15,-15],lydieresis:[-15,-15],lacutew:[-15,-15,0,0,0,0,0,-10],lacutey:[-15,-15],lacuteyacute:[-15,-15],lacuteydieresis:[-15,-15],lcommaaccentw:[-15,-15,0,0,0,0,0,-10],lcommaaccenty:[-15,-15],lcommaaccentyacute:[-15,-15],lcommaaccentydieresis:[-15,-15],lslashw:[-15,-15,0,0,0,0,0,-10],lslashy:[-15,-15],lslashyacute:[-15,-15],lslashydieresis:[-15,-15],mu:[-20,-20,-10,-10],muacute:[-20,-20,-10,-10],mucircumflex:[-20,-20,-10,-10],mudieresis:[-20,-20,-10,-10],mugrave:[-20,-20,-10,-10],muhungarumlaut:[-20,-20,-10,-10],mumacron:[-20,-20,-10,-10],muogonek:[-20,-20,-10,-10],muring:[-20,-20,-10,-10],my:[-30,-30,-15,-15],myacute:[-30,-30,-15,-15],mydieresis:[-30,-30,-15,-15],nu:[-10,-10,-10,-10],nuacute:[-10,-10,-10,-10],nucircumflex:[-10,-10,-10,-10],nudieresis:[-10,-10,-10,-10],nugrave:[-10,-10,-10,-10],nuhungarumlaut:[-10,-10,-10,-10],numacron:[-10,-10,-10,-10],nuogonek:[-10,-10,-10,-10],nuring:[-10,-10,-10,-10],nv:[-40,-40,-20,-20,-40,-40,-40,-40],ny:[-20,-20,-15,-15,0,0,0,-15],nyacute:[-20,-20,-15,-15,0,0,0,-15],nydieresis:[-20,-20,-15,-15,0,0,0,-15],nacuteu:[-10,-10,-10,-10],nacuteuacute:[-10,-10,-10,-10],nacuteucircumflex:[-10,-10,-10,-10],nacuteudieresis:[-10,-10,-10,-10],nacuteugrave:[-10,-10,-10,-10],nacuteuhungarumlaut:[-10,-10,-10,-10],nacuteumacron:[-10,-10,-10,-10],nacuteuogonek:[-10,-10,-10,-10],nacuteuring:[-10,-10,-10,-10],nacutev:[-40,-40,-20,-20,-40,-40,-40,-40],nacutey:[-20,-20,-15,-15,0,0,0,-15],nacuteyacute:[-20,-20,-15,-15,0,0,0,-15],nacuteydieresis:[-20,-20,-15,-15,0,0,0,-15],ncaronu:[-10,-10,-10,-10],ncaronuacute:[-10,-10,-10,-10],ncaronucircumflex:[-10,-10,-10,-10],ncaronudieresis:[-10,-10,-10,-10],ncaronugrave:[-10,-10,-10,-10],ncaronuhungarumlaut:[-10,-10,-10,-10],ncaronumacron:[-10,-10,-10,-10],ncaronuogonek:[-10,-10,-10,-10],ncaronuring:[-10,-10,-10,-10],ncaronv:[-40,-40,-20,-20,-40,-40,-40,-40],ncarony:[-20,-20,-15,-15,0,0,0,-15],ncaronyacute:[-20,-20,-15,-15,0,0,0,-15],ncaronydieresis:[-20,-20,-15,-15,0,0,0,-15],ncommaaccentu:[-10,-10,-10,-10],ncommaaccentuacute:[-10,-10,-10,-10],ncommaaccentucircumflex:[-10,-10,-10,-10],ncommaaccentudieresis:[-10,-10,-10,-10],ncommaaccentugrave:[-10,-10,-10,-10],ncommaaccentuhungarumlaut:[-10,-10,-10,-10],ncommaaccentumacron:[-10,-10,-10,-10],ncommaaccentuogonek:[-10,-10,-10,-10],ncommaaccenturing:[-10,-10,-10,-10],ncommaaccentv:[-40,-40,-20,-20,-40,-40,-40,-40],ncommaaccenty:[-20,-20,-15,-15,0,0,0,-15],ncommaaccentyacute:[-20,-20,-15,-15,0,0,0,-15],ncommaaccentydieresis:[-20,-20,-15,-15,0,0,0,-15],ntildeu:[-10,-10,-10,-10],ntildeuacute:[-10,-10,-10,-10],ntildeucircumflex:[-10,-10,-10,-10],ntildeudieresis:[-10,-10,-10,-10],ntildeugrave:[-10,-10,-10,-10],ntildeuhungarumlaut:[-10,-10,-10,-10],ntildeumacron:[-10,-10,-10,-10],ntildeuogonek:[-10,-10,-10,-10],ntildeuring:[-10,-10,-10,-10],ntildev:[-40,-40,-20,-20,-40,-40,-40,-40],ntildey:[-20,-20,-15,-15,0,0,0,-15],ntildeyacute:[-20,-20,-15,-15,0,0,0,-15],ntildeydieresis:[-20,-20,-15,-15,0,0,0,-15],ov:[-20,-20,-15,-15,-10,-15,-10,-15],ow:[-15,-15,-15,-15,-10,-25,0,-25],ox:[-30,-30,-30,-30,0,-10],oy:[-20,-20,-30,-30,0,-10,0,-10],oyacute:[-20,-20,-30,-30,0,-10,0,-10],oydieresis:[-20,-20,-30,-30,0,-10,0,-10],oacutev:[-20,-20,-15,-15,-10,-15,-10,-15],oacutew:[-15,-15,-15,-15,-10,-25,0,-25],oacutex:[-30,-30,-30,-30,0,-10],oacutey:[-20,-20,-30,-30,0,-10,0,-10],oacuteyacute:[-20,-20,-30,-30,0,-10,0,-10],oacuteydieresis:[-20,-20,-30,-30,0,-10,0,-10],ocircumflexv:[-20,-20,-15,-15,-10,-15,-10,-15],ocircumflexw:[-15,-15,-15,-15,-10,-25,0,-25],ocircumflexx:[-30,-30,-30,-30,0,-10],ocircumflexy:[-20,-20,-30,-30,0,-10,0,-10],ocircumflexyacute:[-20,-20,-30,-30,0,-10,0,-10],ocircumflexydieresis:[-20,-20,-30,-30,0,-10,0,-10],odieresisv:[-20,-20,-15,-15,-10,-15,-10,-15],odieresisw:[-15,-15,-15,-15,-10,-25,0,-25],odieresisx:[-30,-30,-30,-30,0,-10],odieresisy:[-20,-20,-30,-30,0,-10,0,-10],odieresisyacute:[-20,-20,-30,-30,0,-10,0,-10],odieresisydieresis:[-20,-20,-30,-30,0,-10,0,-10],ogravev:[-20,-20,-15,-15,-10,-15,-10,-15],ogravew:[-15,-15,-15,-15,-10,-25,0,-25],ogravex:[-30,-30,-30,-30,0,-10],ogravey:[-20,-20,-30,-30,0,-10,0,-10],ograveyacute:[-20,-20,-30,-30,0,-10,0,-10],ograveydieresis:[-20,-20,-30,-30,0,-10,0,-10],ohungarumlautv:[-20,-20,-15,-15,-10,-15,-10,-15],ohungarumlautw:[-15,-15,-15,-15,-10,-25,0,-25],ohungarumlautx:[-30,-30,-30,-30,0,-10],ohungarumlauty:[-20,-20,-30,-30,0,-10,0,-10],ohungarumlautyacute:[-20,-20,-30,-30,0,-10,0,-10],ohungarumlautydieresis:[-20,-20,-30,-30,0,-10,0,-10],omacronv:[-20,-20,-15,-15,-10,-15,-10,-15],omacronw:[-15,-15,-15,-15,-10,-25,0,-25],omacronx:[-30,-30,-30,-30,0,-10],omacrony:[-20,-20,-30,-30,0,-10,0,-10],omacronyacute:[-20,-20,-30,-30,0,-10,0,-10],omacronydieresis:[-20,-20,-30,-30,0,-10,0,-10],oslashv:[-20,-20,-70,-70,-10,-15,-10,-15],oslashw:[-15,-15,-70,-70,-10,-25,0,-25],oslashx:[-30,-30,-85,-85,0,-10],oslashy:[-20,-20,-70,-70,0,-10,0,-10],oslashyacute:[-20,-20,-70,-70,0,-10,0,-10],oslashydieresis:[-20,-20,-70,-70,0,-10,0,-10],otildev:[-20,-20,-15,-15,-10,-15,-10,-15],otildew:[-15,-15,-15,-15,-10,-25,0,-25],otildex:[-30,-30,-30,-30,0,-10],otildey:[-20,-20,-30,-30,0,-10,0,-10],otildeyacute:[-20,-20,-30,-30,0,-10,0,-10],otildeydieresis:[-20,-20,-30,-30,0,-10,0,-10],py:[-15,-15,-30,-30,0,0,0,-10],pyacute:[-15,-15,-30,-30,0,0,0,-10],pydieresis:[-15,-15,-30,-30,0,0,0,-10],periodquotedblright:[-120,-120,-100,-100,-55,-95,-140,-70],periodquoteright:[-120,-120,-100,-100,-55,-95,-140,-70],periodspace:[-40,-40,-60,-60],quotedblrightspace:[-80,-80,-40,-40],quoteleftquoteleft:[-46,-46,-57,-57,-63,-74,-111,-74],quoterightd:[-80,-80,-50,-50,-20,-15,-25,-50],quoterightdcroat:[-80,-80,-50,-50,-20,-15,-25,-50],quoterightl:[-20,-20,0,0,0,0,0,-10],quoterightlacute:[-20,-20,0,0,0,0,0,-10],quoterightlcommaaccent:[-20,-20,0,0,0,0,0,-10],quoterightlslash:[-20,-20,0,0,0,0,0,-10],quoterightquoteright:[-46,-46,-57,-57,-63,-74,-111,-74],quoterightr:[-40,-40,-50,-50,-20,-15,-25,-50],quoterightracute:[-40,-40,-50,-50,-20,-15,-25,-50],quoterightrcaron:[-40,-40,-50,-50,-20,-15,-25,-50],quoterightrcommaaccent:[-40,-40,-50,-50,-20,-15,-25,-50],quoterights:[-60,-60,-50,-50,-37,-74,-40,-55],quoterightsacute:[-60,-60,-50,-50,-37,-74,-40,-55],quoterightscaron:[-60,-60,-50,-50,-37,-74,-40,-55],quoterightscedilla:[-60,-60,-50,-50,-37,-74,-40,-55],quoterightscommaaccent:[-60,-60,-50,-50,-37,-74,-40,-55],quoterightspace:[-80,-80,-70,-70,-74,-74,-111,-74],quoterightv:[-20,-20,0,0,-20,-15,-10,-50],rc:[-20,-20,0,0,-18,0,-37],rcacute:[-20,-20,0,0,-18,0,-37],rccaron:[-20,-20,0,0,-18,0,-37],rccedilla:[-20,-20,0,0,-18,0,-37],rcomma:[-60,-60,-50,-50,-92,-65,-111,-40],rd:[-20,-20,0,0,0,0,-37],rdcroat:[-20,-20,0,0,0,0,-37],rg:[-15,-15,0,0,-10,0,-37,-18],rgbreve:[-15,-15,0,0,-10,0,-37,-18],rgcommaaccent:[-15,-15,0,0,-10,0,-37,-18],rhyphen:[-20,-20,0,0,-37,0,-20,-20],ro:[-20,-20,0,0,-18,0,-45],roacute:[-20,-20,0,0,-18,0,-45],rocircumflex:[-20,-20,0,0,-18,0,-45],rodieresis:[-20,-20,0,0,-18,0,-45],rograve:[-20,-20,0,0,-18,0,-45],rohungarumlaut:[-20,-20,0,0,-18,0,-45],romacron:[-20,-20,0,0,-18,0,-45],roslash:[-20,-20,0,0,-18,0,-45],rotilde:[-20,-20,0,0,-18,0,-45],rperiod:[-60,-60,-50,-50,-100,-65,-111,-55],rq:[-20,-20,0,0,-18,0,-37],rs:[-15,-15,0,0,0,0,-10],rsacute:[-15,-15,0,0,0,0,-10],rscaron:[-15,-15,0,0,0,0,-10],rscedilla:[-15,-15,0,0,0,0,-10],rscommaaccent:[-15,-15,0,0,0,0,-10],rt:[20,20,40,40],rtcommaaccent:[20,20,40,40],rv:[10,10,30,30,-10],ry:[10,10,30,30],ryacute:[10,10,30,30],rydieresis:[10,10,30,30],racutec:[-20,-20,0,0,-18,0,-37],racutecacute:[-20,-20,0,0,-18,0,-37],racuteccaron:[-20,-20,0,0,-18,0,-37],racuteccedilla:[-20,-20,0,0,-18,0,-37],racutecomma:[-60,-60,-50,-50,-92,-65,-111,-40],racuted:[-20,-20,0,0,0,0,-37],racutedcroat:[-20,-20,0,0,0,0,-37],racuteg:[-15,-15,0,0,-10,0,-37,-18],racutegbreve:[-15,-15,0,0,-10,0,-37,-18],racutegcommaaccent:[-15,-15,0,0,-10,0,-37,-18],racutehyphen:[-20,-20,0,0,-37,0,-20,-20],racuteo:[-20,-20,0,0,-18,0,-45],racuteoacute:[-20,-20,0,0,-18,0,-45],racuteocircumflex:[-20,-20,0,0,-18,0,-45],racuteodieresis:[-20,-20,0,0,-18,0,-45],racuteograve:[-20,-20,0,0,-18,0,-45],racuteohungarumlaut:[-20,-20,0,0,-18,0,-45],racuteomacron:[-20,-20,0,0,-18,0,-45],racuteoslash:[-20,-20,0,0,-18,0,-45],racuteotilde:[-20,-20,0,0,-18,0,-45],racuteperiod:[-60,-60,-50,-50,-100,-65,-111,-55],racuteq:[-20,-20,0,0,-18,0,-37],racutes:[-15,-15,0,0,0,0,-10],racutesacute:[-15,-15,0,0,0,0,-10],racutescaron:[-15,-15,0,0,0,0,-10],racutescedilla:[-15,-15,0,0,0,0,-10],racutescommaaccent:[-15,-15,0,0,0,0,-10],racutet:[20,20,40,40],racutetcommaaccent:[20,20,40,40],racutev:[10,10,30,30,-10],racutey:[10,10,30,30],racuteyacute:[10,10,30,30],racuteydieresis:[10,10,30,30],rcaronc:[-20,-20,0,0,-18,0,-37],rcaroncacute:[-20,-20,0,0,-18,0,-37],rcaronccaron:[-20,-20,0,0,-18,0,-37],rcaronccedilla:[-20,-20,0,0,-18,0,-37],rcaroncomma:[-60,-60,-50,-50,-92,-65,-111,-40],rcarond:[-20,-20,0,0,0,0,-37],rcarondcroat:[-20,-20,0,0,0,0,-37],rcarong:[-15,-15,0,0,-10,0,-37,-18],rcarongbreve:[-15,-15,0,0,-10,0,-37,-18],rcarongcommaaccent:[-15,-15,0,0,-10,0,-37,-18],rcaronhyphen:[-20,-20,0,0,-37,0,-20,-20],rcarono:[-20,-20,0,0,-18,0,-45],rcaronoacute:[-20,-20,0,0,-18,0,-45],rcaronocircumflex:[-20,-20,0,0,-18,0,-45],rcaronodieresis:[-20,-20,0,0,-18,0,-45],rcaronograve:[-20,-20,0,0,-18,0,-45],rcaronohungarumlaut:[-20,-20,0,0,-18,0,-45],rcaronomacron:[-20,-20,0,0,-18,0,-45],rcaronoslash:[-20,-20,0,0,-18,0,-45],rcaronotilde:[-20,-20,0,0,-18,0,-45],rcaronperiod:[-60,-60,-50,-50,-100,-65,-111,-55],rcaronq:[-20,-20,0,0,-18,0,-37],rcarons:[-15,-15,0,0,0,0,-10],rcaronsacute:[-15,-15,0,0,0,0,-10],rcaronscaron:[-15,-15,0,0,0,0,-10],rcaronscedilla:[-15,-15,0,0,0,0,-10],rcaronscommaaccent:[-15,-15,0,0,0,0,-10],rcaront:[20,20,40,40],rcarontcommaaccent:[20,20,40,40],rcaronv:[10,10,30,30,-10],rcarony:[10,10,30,30],rcaronyacute:[10,10,30,30],rcaronydieresis:[10,10,30,30],rcommaaccentc:[-20,-20,0,0,-18,0,-37],rcommaaccentcacute:[-20,-20,0,0,-18,0,-37],rcommaaccentccaron:[-20,-20,0,0,-18,0,-37],rcommaaccentccedilla:[-20,-20,0,0,-18,0,-37],rcommaaccentcomma:[-60,-60,-50,-50,-92,-65,-111,-40],rcommaaccentd:[-20,-20,0,0,0,0,-37],rcommaaccentdcroat:[-20,-20,0,0,0,0,-37],rcommaaccentg:[-15,-15,0,0,-10,0,-37,-18],rcommaaccentgbreve:[-15,-15,0,0,-10,0,-37,-18],rcommaaccentgcommaaccent:[-15,-15,0,0,-10,0,-37,-18],rcommaaccenthyphen:[-20,-20,0,0,-37,0,-20,-20],rcommaaccento:[-20,-20,0,0,-18,0,-45],rcommaaccentoacute:[-20,-20,0,0,-18,0,-45],rcommaaccentocircumflex:[-20,-20,0,0,-18,0,-45],rcommaaccentodieresis:[-20,-20,0,0,-18,0,-45],rcommaaccentograve:[-20,-20,0,0,-18,0,-45],rcommaaccentohungarumlaut:[-20,-20,0,0,-18,0,-45],rcommaaccentomacron:[-20,-20,0,0,-18,0,-45],rcommaaccentoslash:[-20,-20,0,0,-18,0,-45],rcommaaccentotilde:[-20,-20,0,0,-18,0,-45],rcommaaccentperiod:[-60,-60,-50,-50,-100,-65,-111,-55],rcommaaccentq:[-20,-20,0,0,-18,0,-37],rcommaaccents:[-15,-15,0,0,0,0,-10],rcommaaccentsacute:[-15,-15,0,0,0,0,-10],rcommaaccentscaron:[-15,-15,0,0,0,0,-10],rcommaaccentscedilla:[-15,-15,0,0,0,0,-10],rcommaaccentscommaaccent:[-15,-15,0,0,0,0,-10],rcommaaccentt:[20,20,40,40],rcommaaccenttcommaaccent:[20,20,40,40],rcommaaccentv:[10,10,30,30,-10],rcommaaccenty:[10,10,30,30],rcommaaccentyacute:[10,10,30,30],rcommaaccentydieresis:[10,10,30,30],sw:[-15,-15,-30,-30],sacutew:[-15,-15,-30,-30],scaronw:[-15,-15,-30,-30],scedillaw:[-15,-15,-30,-30],scommaaccentw:[-15,-15,-30,-30],semicolonspace:[-40,-40,-50,-50],spaceT:[-100,-100,-50,-50,-30,0,-18,-18],spaceTcaron:[-100,-100,-50,-50,-30,0,-18,-18],spaceTcommaaccent:[-100,-100,-50,-50,-30,0,-18,-18],spaceV:[-80,-80,-50,-50,-45,-70,-35,-50],spaceW:[-80,-80,-40,-40,-30,-70,-40,-30],spaceY:[-120,-120,-90,-90,-55,-70,-75,-90],spaceYacute:[-120,-120,-90,-90,-55,-70,-75,-90],spaceYdieresis:[-120,-120,-90,-90,-55,-70,-75,-90],spacequotedblleft:[-80,-80,-30,-30],spacequoteleft:[-60,-60,-60,-60],va:[-20,-20,-25,-25,-10,0,0,-25],vaacute:[-20,-20,-25,-25,-10,0,0,-25],vabreve:[-20,-20,-25,-25,-10,0,0,-25],vacircumflex:[-20,-20,-25,-25,-10,0,0,-25],vadieresis:[-20,-20,-25,-25,-10,0,0,-25],vagrave:[-20,-20,-25,-25,-10,0,0,-25],vamacron:[-20,-20,-25,-25,-10,0,0,-25],vaogonek:[-20,-20,-25,-25,-10,0,0,-25],varing:[-20,-20,-25,-25,-10,0,0,-25],vatilde:[-20,-20,-25,-25,-10,0,0,-25],vcomma:[-80,-80,-80,-80,-55,-37,-74,-65],vo:[-30,-30,-25,-25,-10,-15,0,-20],voacute:[-30,-30,-25,-25,-10,-15,0,-20],vocircumflex:[-30,-30,-25,-25,-10,-15,0,-20],vodieresis:[-30,-30,-25,-25,-10,-15,0,-20],vograve:[-30,-30,-25,-25,-10,-15,0,-20],vohungarumlaut:[-30,-30,-25,-25,-10,-15,0,-20],vomacron:[-30,-30,-25,-25,-10,-15,0,-20],voslash:[-30,-30,-25,-25,-10,-15,0,-20],votilde:[-30,-30,-25,-25,-10,-15,0,-20],vperiod:[-80,-80,-80,-80,-70,-37,-74,-65],wcomma:[-40,-40,-60,-60,-55,-37,-74,-65],wo:[-20,-20,-10,-10,-10,-15,0,-10],woacute:[-20,-20,-10,-10,-10,-15,0,-10],wocircumflex:[-20,-20,-10,-10,-10,-15,0,-10],wodieresis:[-20,-20,-10,-10,-10,-15,0,-10],wograve:[-20,-20,-10,-10,-10,-15,0,-10],wohungarumlaut:[-20,-20,-10,-10,-10,-15,0,-10],womacron:[-20,-20,-10,-10,-10,-15,0,-10],woslash:[-20,-20,-10,-10,-10,-15,0,-10],wotilde:[-20,-20,-10,-10,-10,-15,0,-10],wperiod:[-40,-40,-60,-60,-70,-37,-74,-65],xe:[-10,-10,-30,-30,0,-10,0,-15],xeacute:[-10,-10,-30,-30,0,-10,0,-15],xecaron:[-10,-10,-30,-30,0,-10,0,-15],xecircumflex:[-10,-10,-30,-30,0,-10,0,-15],xedieresis:[-10,-10,-30,-30,0,-10,0,-15],xedotaccent:[-10,-10,-30,-30,0,-10,0,-15],xegrave:[-10,-10,-30,-30,0,-10,0,-15],xemacron:[-10,-10,-30,-30,0,-10,0,-15],xeogonek:[-10,-10,-30,-30,0,-10,0,-15],ya:[-30,-30,-20,-20],yaacute:[-30,-30,-20,-20],yabreve:[-30,-30,-20,-20],yacircumflex:[-30,-30,-20,-20],yadieresis:[-30,-30,-20,-20],yagrave:[-30,-30,-20,-20],yamacron:[-30,-30,-20,-20],yaogonek:[-30,-30,-20,-20],yaring:[-30,-30,-20,-20],yatilde:[-30,-30,-20,-20],ycomma:[-80,-80,-100,-100,-55,-37,-55,-65],ye:[-10,-10,-20,-20,-10],yeacute:[-10,-10,-20,-20,-10],yecaron:[-10,-10,-20,-20,-10],yecircumflex:[-10,-10,-20,-20,-10],yedieresis:[-10,-10,-20,-20,-10],yedotaccent:[-10,-10,-20,-20,-10],yegrave:[-10,-10,-20,-20,-10],yemacron:[-10,-10,-20,-20,-10],yeogonek:[-10,-10,-20,-20,-10],yo:[-25,-25,-20,-20,-25],yoacute:[-25,-25,-20,-20,-25],yocircumflex:[-25,-25,-20,-20,-25],yodieresis:[-25,-25,-20,-20,-25],yograve:[-25,-25,-20,-20,-25],yohungarumlaut:[-25,-25,-20,-20,-25],yomacron:[-25,-25,-20,-20,-25],yoslash:[-25,-25,-20,-20,-25],yotilde:[-25,-25,-20,-20,-25],yperiod:[-80,-80,-100,-100,-70,-37,-55,-65],yacutea:[-30,-30,-20,-20],yacuteaacute:[-30,-30,-20,-20],yacuteabreve:[-30,-30,-20,-20],yacuteacircumflex:[-30,-30,-20,-20],yacuteadieresis:[-30,-30,-20,-20],yacuteagrave:[-30,-30,-20,-20],yacuteamacron:[-30,-30,-20,-20],yacuteaogonek:[-30,-30,-20,-20],yacutearing:[-30,-30,-20,-20],yacuteatilde:[-30,-30,-20,-20],yacutecomma:[-80,-80,-100,-100,-55,-37,-55,-65],yacutee:[-10,-10,-20,-20,-10],yacuteeacute:[-10,-10,-20,-20,-10],yacuteecaron:[-10,-10,-20,-20,-10],yacuteecircumflex:[-10,-10,-20,-20,-10],yacuteedieresis:[-10,-10,-20,-20,-10],yacuteedotaccent:[-10,-10,-20,-20,-10],yacuteegrave:[-10,-10,-20,-20,-10],yacuteemacron:[-10,-10,-20,-20,-10],yacuteeogonek:[-10,-10,-20,-20,-10],yacuteo:[-25,-25,-20,-20,-25],yacuteoacute:[-25,-25,-20,-20,-25],yacuteocircumflex:[-25,-25,-20,-20,-25],yacuteodieresis:[-25,-25,-20,-20,-25],yacuteograve:[-25,-25,-20,-20,-25],yacuteohungarumlaut:[-25,-25,-20,-20,-25],yacuteomacron:[-25,-25,-20,-20,-25],yacuteoslash:[-25,-25,-20,-20,-25],yacuteotilde:[-25,-25,-20,-20,-25],yacuteperiod:[-80,-80,-100,-100,-70,-37,-55,-65],ydieresisa:[-30,-30,-20,-20],ydieresisaacute:[-30,-30,-20,-20],ydieresisabreve:[-30,-30,-20,-20],ydieresisacircumflex:[-30,-30,-20,-20],ydieresisadieresis:[-30,-30,-20,-20],ydieresisagrave:[-30,-30,-20,-20],ydieresisamacron:[-30,-30,-20,-20],ydieresisaogonek:[-30,-30,-20,-20],ydieresisaring:[-30,-30,-20,-20],ydieresisatilde:[-30,-30,-20,-20],ydieresiscomma:[-80,-80,-100,-100,-55,-37,-55,-65],ydieresise:[-10,-10,-20,-20,-10],ydieresiseacute:[-10,-10,-20,-20,-10],ydieresisecaron:[-10,-10,-20,-20,-10],ydieresisecircumflex:[-10,-10,-20,-20,-10],ydieresisedieresis:[-10,-10,-20,-20,-10],ydieresisedotaccent:[-10,-10,-20,-20,-10],ydieresisegrave:[-10,-10,-20,-20,-10],ydieresisemacron:[-10,-10,-20,-20,-10],ydieresiseogonek:[-10,-10,-20,-20,-10],ydieresiso:[-25,-25,-20,-20,-25],ydieresisoacute:[-25,-25,-20,-20,-25],ydieresisocircumflex:[-25,-25,-20,-20,-25],ydieresisodieresis:[-25,-25,-20,-20,-25],ydieresisograve:[-25,-25,-20,-20,-25],ydieresisohungarumlaut:[-25,-25,-20,-20,-25],ydieresisomacron:[-25,-25,-20,-20,-25],ydieresisoslash:[-25,-25,-20,-20,-25],ydieresisotilde:[-25,-25,-20,-20,-25],ydieresisperiod:[-80,-80,-100,-100,-70,-37,-55,-65],ze:[10,10,-15,-15],zeacute:[10,10,-15,-15],zecaron:[10,10,-15,-15],zecircumflex:[10,10,-15,-15],zedieresis:[10,10,-15,-15],zedotaccent:[10,10,-15,-15],zegrave:[10,10,-15,-15],zemacron:[10,10,-15,-15],zeogonek:[10,10,-15,-15],zacutee:[10,10,-15,-15],zacuteeacute:[10,10,-15,-15],zacuteecaron:[10,10,-15,-15],zacuteecircumflex:[10,10,-15,-15],zacuteedieresis:[10,10,-15,-15],zacuteedotaccent:[10,10,-15,-15],zacuteegrave:[10,10,-15,-15],zacuteemacron:[10,10,-15,-15],zacuteeogonek:[10,10,-15,-15],zcarone:[10,10,-15,-15],zcaroneacute:[10,10,-15,-15],zcaronecaron:[10,10,-15,-15],zcaronecircumflex:[10,10,-15,-15],zcaronedieresis:[10,10,-15,-15],zcaronedotaccent:[10,10,-15,-15],zcaronegrave:[10,10,-15,-15],zcaronemacron:[10,10,-15,-15],zcaroneogonek:[10,10,-15,-15],zdotaccente:[10,10,-15,-15],zdotaccenteacute:[10,10,-15,-15],zdotaccentecaron:[10,10,-15,-15],zdotaccentecircumflex:[10,10,-15,-15],zdotaccentedieresis:[10,10,-15,-15],zdotaccentedotaccent:[10,10,-15,-15],zdotaccentegrave:[10,10,-15,-15],zdotaccentemacron:[10,10,-15,-15],zdotaccenteogonek:[10,10,-15,-15],Bcomma:[0,0,-20,-20],Bperiod:[0,0,-20,-20],Ccomma:[0,0,-30,-30],Cperiod:[0,0,-30,-30],Cacutecomma:[0,0,-30,-30],Cacuteperiod:[0,0,-30,-30],Ccaroncomma:[0,0,-30,-30],Ccaronperiod:[0,0,-30,-30],Ccedillacomma:[0,0,-30,-30],Ccedillaperiod:[0,0,-30,-30],Fe:[0,0,-30,-30,-25,-100,-75],Feacute:[0,0,-30,-30,-25,-100,-75],Fecaron:[0,0,-30,-30,-25,-100,-75],Fecircumflex:[0,0,-30,-30,-25,-100,-75],Fedieresis:[0,0,-30,-30,-25,-100,-75],Fedotaccent:[0,0,-30,-30,-25,-100,-75],Fegrave:[0,0,-30,-30,-25,-100,-75],Femacron:[0,0,-30,-30,-25,-100,-75],Feogonek:[0,0,-30,-30,-25,-100,-75],Fo:[0,0,-30,-30,-25,-70,-105,-15],Foacute:[0,0,-30,-30,-25,-70,-105,-15],Focircumflex:[0,0,-30,-30,-25,-70,-105,-15],Fodieresis:[0,0,-30,-30,-25,-70,-105,-15],Fograve:[0,0,-30,-30,-25,-70,-105,-15],Fohungarumlaut:[0,0,-30,-30,-25,-70,-105,-15],Fomacron:[0,0,-30,-30,-25,-70,-105,-15],Foslash:[0,0,-30,-30,-25,-70,-105,-15],Fotilde:[0,0,-30,-30,-25,-70,-105,-15],Fr:[0,0,-45,-45,0,-50,-55],Fracute:[0,0,-45,-45,0,-50,-55],Frcaron:[0,0,-45,-45,0,-50,-55],Frcommaaccent:[0,0,-45,-45,0,-50,-55],Ja:[0,0,-20,-20,-15,-40,-35],Jaacute:[0,0,-20,-20,-15,-40,-35],Jabreve:[0,0,-20,-20,-15,-40,-35],Jacircumflex:[0,0,-20,-20,-15,-40,-35],Jadieresis:[0,0,-20,-20,-15,-40,-35],Jagrave:[0,0,-20,-20,-15,-40,-35],Jamacron:[0,0,-20,-20,-15,-40,-35],Jaogonek:[0,0,-20,-20,-15,-40,-35],Jaring:[0,0,-20,-20,-15,-40,-35],Jatilde:[0,0,-20,-20,-15,-40,-35],LcaronT:[0,0,-110,-110],LcaronTcaron:[0,0,-110,-110],LcaronTcommaaccent:[0,0,-110,-110],LcaronV:[0,0,-110,-110],LcaronW:[0,0,-70,-70],LcaronY:[0,0,-140,-140],LcaronYacute:[0,0,-140,-140],LcaronYdieresis:[0,0,-140,-140],Lcaronquotedblright:[0,0,-140,-140],Lcaronquoteright:[0,0,-160,-160,0,0,0,-92],Lcarony:[0,0,-30,-30,0,0,0,-55],Lcaronyacute:[0,0,-30,-30,0,0,0,-55],Lcaronydieresis:[0,0,-30,-30,0,0,0,-55],Scomma:[0,0,-20,-20],Speriod:[0,0,-20,-20],Sacutecomma:[0,0,-20,-20],Sacuteperiod:[0,0,-20,-20],Scaroncomma:[0,0,-20,-20],Scaronperiod:[0,0,-20,-20],Scedillacomma:[0,0,-20,-20],Scedillaperiod:[0,0,-20,-20],Scommaaccentcomma:[0,0,-20,-20],Scommaaccentperiod:[0,0,-20,-20],Trcaron:[0,0,-120,-120,-74,-37,-55,-35],Tcaronrcaron:[0,0,-120,-120,-74,-37,-55,-35],Tcommaaccentrcaron:[0,0,-120,-120,-74,-37,-55,-35],Yhyphen:[0,0,-140,-140,-92,-92,-74,-111],Yi:[0,0,-20,-20,-37,-55,-74,-55],Yiacute:[0,0,-20,-20,-37,-55,-74,-55],Yiogonek:[0,0,-20,-20,-37,-55,-74,-55],Yacutehyphen:[0,0,-140,-140,-92,-92,-74,-111],Yacutei:[0,0,-20,-20,-37,-55,-74,-55],Yacuteiacute:[0,0,-20,-20,-37,-55,-74,-55],Yacuteiogonek:[0,0,-20,-20,-37,-55,-74,-55],Ydieresishyphen:[0,0,-140,-140,-92,-92,-74,-111],Ydieresisi:[0,0,-20,-20,-37,-55,-74,-55],Ydieresisiacute:[0,0,-20,-20,-37,-55,-74,-55],Ydieresisiogonek:[0,0,-20,-20,-37,-55,-74,-55],bb:[0,0,-10,-10,-10,-10],bcomma:[0,0,-40,-40],bperiod:[0,0,-40,-40,-40,-40,-40,-40],ccomma:[0,0,-15,-15],cacutecomma:[0,0,-15,-15],ccaroncomma:[0,0,-15,-15],ccedillacomma:[0,0,-15,-15],fa:[0,0,-30,-30,0,0,0,-10],faacute:[0,0,-30,-30,0,0,0,-10],fabreve:[0,0,-30,-30,0,0,0,-10],facircumflex:[0,0,-30,-30,0,0,0,-10],fadieresis:[0,0,-30,-30,0,0,0,-10],fagrave:[0,0,-30,-30,0,0,0,-10],famacron:[0,0,-30,-30,0,0,0,-10],faogonek:[0,0,-30,-30,0,0,0,-10],faring:[0,0,-30,-30,0,0,0,-10],fatilde:[0,0,-30,-30,0,0,0,-10],fdotlessi:[0,0,-28,-28,-35,-30,-60,-50],gr:[0,0,-10,-10],gracute:[0,0,-10,-10],grcaron:[0,0,-10,-10],grcommaaccent:[0,0,-10,-10],gbrever:[0,0,-10,-10],gbreveracute:[0,0,-10,-10],gbrevercaron:[0,0,-10,-10],gbrevercommaaccent:[0,0,-10,-10],gcommaaccentr:[0,0,-10,-10],gcommaaccentracute:[0,0,-10,-10],gcommaaccentrcaron:[0,0,-10,-10],gcommaaccentrcommaaccent:[0,0,-10,-10],ke:[0,0,-20,-20,-10,-30,-10,-10],keacute:[0,0,-20,-20,-10,-30,-10,-10],kecaron:[0,0,-20,-20,-10,-30,-10,-10],kecircumflex:[0,0,-20,-20,-10,-30,-10,-10],kedieresis:[0,0,-20,-20,-10,-30,-10,-10],kedotaccent:[0,0,-20,-20,-10,-30,-10,-10],kegrave:[0,0,-20,-20,-10,-30,-10,-10],kemacron:[0,0,-20,-20,-10,-30,-10,-10],keogonek:[0,0,-20,-20,-10,-30,-10,-10],kcommaaccente:[0,0,-20,-20,-10,-30,-10,-10],kcommaaccenteacute:[0,0,-20,-20,-10,-30,-10,-10],kcommaaccentecaron:[0,0,-20,-20,-10,-30,-10,-10],kcommaaccentecircumflex:[0,0,-20,-20,-10,-30,-10,-10],kcommaaccentedieresis:[0,0,-20,-20,-10,-30,-10,-10],kcommaaccentedotaccent:[0,0,-20,-20,-10,-30,-10,-10],kcommaaccentegrave:[0,0,-20,-20,-10,-30,-10,-10],kcommaaccentemacron:[0,0,-20,-20,-10,-30,-10,-10],kcommaaccenteogonek:[0,0,-20,-20,-10,-30,-10,-10],ocomma:[0,0,-40,-40],operiod:[0,0,-40,-40],oacutecomma:[0,0,-40,-40],oacuteperiod:[0,0,-40,-40],ocircumflexcomma:[0,0,-40,-40],ocircumflexperiod:[0,0,-40,-40],odieresiscomma:[0,0,-40,-40],odieresisperiod:[0,0,-40,-40],ogravecomma:[0,0,-40,-40],ograveperiod:[0,0,-40,-40],ohungarumlautcomma:[0,0,-40,-40],ohungarumlautperiod:[0,0,-40,-40],omacroncomma:[0,0,-40,-40],omacronperiod:[0,0,-40,-40],oslasha:[0,0,-55,-55],oslashaacute:[0,0,-55,-55],oslashabreve:[0,0,-55,-55],oslashacircumflex:[0,0,-55,-55],oslashadieresis:[0,0,-55,-55],oslashagrave:[0,0,-55,-55],oslashamacron:[0,0,-55,-55],oslashaogonek:[0,0,-55,-55],oslasharing:[0,0,-55,-55],oslashatilde:[0,0,-55,-55],oslashb:[0,0,-55,-55],oslashc:[0,0,-55,-55],oslashcacute:[0,0,-55,-55],oslashccaron:[0,0,-55,-55],oslashccedilla:[0,0,-55,-55],oslashcomma:[0,0,-95,-95],oslashd:[0,0,-55,-55],oslashdcroat:[0,0,-55,-55],oslashe:[0,0,-55,-55],oslasheacute:[0,0,-55,-55],oslashecaron:[0,0,-55,-55],oslashecircumflex:[0,0,-55,-55],oslashedieresis:[0,0,-55,-55],oslashedotaccent:[0,0,-55,-55],oslashegrave:[0,0,-55,-55],oslashemacron:[0,0,-55,-55],oslasheogonek:[0,0,-55,-55],oslashf:[0,0,-55,-55],oslashg:[0,0,-55,-55,0,0,-10],oslashgbreve:[0,0,-55,-55,0,0,-10],oslashgcommaaccent:[0,0,-55,-55,0,0,-10],oslashh:[0,0,-55,-55],oslashi:[0,0,-55,-55],oslashiacute:[0,0,-55,-55],oslashicircumflex:[0,0,-55,-55],oslashidieresis:[0,0,-55,-55],oslashigrave:[0,0,-55,-55],oslashimacron:[0,0,-55,-55],oslashiogonek:[0,0,-55,-55],oslashj:[0,0,-55,-55],oslashk:[0,0,-55,-55],oslashkcommaaccent:[0,0,-55,-55],oslashl:[0,0,-55,-55],oslashlacute:[0,0,-55,-55],oslashlcommaaccent:[0,0,-55,-55],oslashlslash:[0,0,-55,-55],oslashm:[0,0,-55,-55],oslashn:[0,0,-55,-55],oslashnacute:[0,0,-55,-55],oslashncaron:[0,0,-55,-55],oslashncommaaccent:[0,0,-55,-55],oslashntilde:[0,0,-55,-55],oslasho:[0,0,-55,-55],oslashoacute:[0,0,-55,-55],oslashocircumflex:[0,0,-55,-55],oslashodieresis:[0,0,-55,-55],oslashograve:[0,0,-55,-55],oslashohungarumlaut:[0,0,-55,-55],oslashomacron:[0,0,-55,-55],oslashoslash:[0,0,-55,-55],oslashotilde:[0,0,-55,-55],oslashp:[0,0,-55,-55],oslashperiod:[0,0,-95,-95],oslashq:[0,0,-55,-55],oslashr:[0,0,-55,-55],oslashracute:[0,0,-55,-55],oslashrcaron:[0,0,-55,-55],oslashrcommaaccent:[0,0,-55,-55],oslashs:[0,0,-55,-55],oslashsacute:[0,0,-55,-55],oslashscaron:[0,0,-55,-55],oslashscedilla:[0,0,-55,-55],oslashscommaaccent:[0,0,-55,-55],oslasht:[0,0,-55,-55],oslashtcommaaccent:[0,0,-55,-55],oslashu:[0,0,-55,-55],oslashuacute:[0,0,-55,-55],oslashucircumflex:[0,0,-55,-55],oslashudieresis:[0,0,-55,-55],oslashugrave:[0,0,-55,-55],oslashuhungarumlaut:[0,0,-55,-55],oslashumacron:[0,0,-55,-55],oslashuogonek:[0,0,-55,-55],oslashuring:[0,0,-55,-55],oslashz:[0,0,-55,-55],oslashzacute:[0,0,-55,-55],oslashzcaron:[0,0,-55,-55],oslashzdotaccent:[0,0,-55,-55],otildecomma:[0,0,-40,-40],otildeperiod:[0,0,-40,-40],pcomma:[0,0,-35,-35],pperiod:[0,0,-35,-35],ra:[0,0,-10,-10,0,0,-15],raacute:[0,0,-10,-10,0,0,-15],rabreve:[0,0,-10,-10,0,0,-15],racircumflex:[0,0,-10,-10,0,0,-15],radieresis:[0,0,-10,-10,0,0,-15],ragrave:[0,0,-10,-10,0,0,-15],ramacron:[0,0,-10,-10,0,0,-15],raogonek:[0,0,-10,-10,0,0,-15],raring:[0,0,-10,-10,0,0,-15],ratilde:[0,0,-10,-10,0,0,-15],rcolon:[0,0,30,30],ri:[0,0,15,15],riacute:[0,0,15,15],ricircumflex:[0,0,15,15],ridieresis:[0,0,15,15],rigrave:[0,0,15,15],rimacron:[0,0,15,15],riogonek:[0,0,15,15],rk:[0,0,15,15],rkcommaaccent:[0,0,15,15],rl:[0,0,15,15],rlacute:[0,0,15,15],rlcommaaccent:[0,0,15,15],rlslash:[0,0,15,15],rm:[0,0,25,25],rn:[0,0,25,25,-15],rnacute:[0,0,25,25,-15],rncaron:[0,0,25,25,-15],rncommaaccent:[0,0,25,25,-15],rntilde:[0,0,25,25,-15],rp:[0,0,30,30,-10],rsemicolon:[0,0,30,30],ru:[0,0,15,15],ruacute:[0,0,15,15],rucircumflex:[0,0,15,15],rudieresis:[0,0,15,15],rugrave:[0,0,15,15],ruhungarumlaut:[0,0,15,15],rumacron:[0,0,15,15],ruogonek:[0,0,15,15],ruring:[0,0,15,15],racutea:[0,0,-10,-10,0,0,-15],racuteaacute:[0,0,-10,-10,0,0,-15],racuteabreve:[0,0,-10,-10,0,0,-15],racuteacircumflex:[0,0,-10,-10,0,0,-15],racuteadieresis:[0,0,-10,-10,0,0,-15],racuteagrave:[0,0,-10,-10,0,0,-15],racuteamacron:[0,0,-10,-10,0,0,-15],racuteaogonek:[0,0,-10,-10,0,0,-15],racutearing:[0,0,-10,-10,0,0,-15],racuteatilde:[0,0,-10,-10,0,0,-15],racutecolon:[0,0,30,30],racutei:[0,0,15,15],racuteiacute:[0,0,15,15],racuteicircumflex:[0,0,15,15],racuteidieresis:[0,0,15,15],racuteigrave:[0,0,15,15],racuteimacron:[0,0,15,15],racuteiogonek:[0,0,15,15],racutek:[0,0,15,15],racutekcommaaccent:[0,0,15,15],racutel:[0,0,15,15],racutelacute:[0,0,15,15],racutelcommaaccent:[0,0,15,15],racutelslash:[0,0,15,15],racutem:[0,0,25,25],racuten:[0,0,25,25,-15],racutenacute:[0,0,25,25,-15],racutencaron:[0,0,25,25,-15],racutencommaaccent:[0,0,25,25,-15],racutentilde:[0,0,25,25,-15],racutep:[0,0,30,30,-10],racutesemicolon:[0,0,30,30],racuteu:[0,0,15,15],racuteuacute:[0,0,15,15],racuteucircumflex:[0,0,15,15],racuteudieresis:[0,0,15,15],racuteugrave:[0,0,15,15],racuteuhungarumlaut:[0,0,15,15],racuteumacron:[0,0,15,15],racuteuogonek:[0,0,15,15],racuteuring:[0,0,15,15],rcarona:[0,0,-10,-10,0,0,-15],rcaronaacute:[0,0,-10,-10,0,0,-15],rcaronabreve:[0,0,-10,-10,0,0,-15],rcaronacircumflex:[0,0,-10,-10,0,0,-15],rcaronadieresis:[0,0,-10,-10,0,0,-15],rcaronagrave:[0,0,-10,-10,0,0,-15],rcaronamacron:[0,0,-10,-10,0,0,-15],rcaronaogonek:[0,0,-10,-10,0,0,-15],rcaronaring:[0,0,-10,-10,0,0,-15],rcaronatilde:[0,0,-10,-10,0,0,-15],rcaroncolon:[0,0,30,30],rcaroni:[0,0,15,15],rcaroniacute:[0,0,15,15],rcaronicircumflex:[0,0,15,15],rcaronidieresis:[0,0,15,15],rcaronigrave:[0,0,15,15],rcaronimacron:[0,0,15,15],rcaroniogonek:[0,0,15,15],rcaronk:[0,0,15,15],rcaronkcommaaccent:[0,0,15,15],rcaronl:[0,0,15,15],rcaronlacute:[0,0,15,15],rcaronlcommaaccent:[0,0,15,15],rcaronlslash:[0,0,15,15],rcaronm:[0,0,25,25],rcaronn:[0,0,25,25,-15],rcaronnacute:[0,0,25,25,-15],rcaronncaron:[0,0,25,25,-15],rcaronncommaaccent:[0,0,25,25,-15],rcaronntilde:[0,0,25,25,-15],rcaronp:[0,0,30,30,-10],rcaronsemicolon:[0,0,30,30],rcaronu:[0,0,15,15],rcaronuacute:[0,0,15,15],rcaronucircumflex:[0,0,15,15],rcaronudieresis:[0,0,15,15],rcaronugrave:[0,0,15,15],rcaronuhungarumlaut:[0,0,15,15],rcaronumacron:[0,0,15,15],rcaronuogonek:[0,0,15,15],rcaronuring:[0,0,15,15],rcommaaccenta:[0,0,-10,-10,0,0,-15],rcommaaccentaacute:[0,0,-10,-10,0,0,-15],rcommaaccentabreve:[0,0,-10,-10,0,0,-15],rcommaaccentacircumflex:[0,0,-10,-10,0,0,-15],rcommaaccentadieresis:[0,0,-10,-10,0,0,-15],rcommaaccentagrave:[0,0,-10,-10,0,0,-15],rcommaaccentamacron:[0,0,-10,-10,0,0,-15],rcommaaccentaogonek:[0,0,-10,-10,0,0,-15],rcommaaccentaring:[0,0,-10,-10,0,0,-15],rcommaaccentatilde:[0,0,-10,-10,0,0,-15],rcommaaccentcolon:[0,0,30,30],rcommaaccenti:[0,0,15,15],rcommaaccentiacute:[0,0,15,15],rcommaaccenticircumflex:[0,0,15,15],rcommaaccentidieresis:[0,0,15,15],rcommaaccentigrave:[0,0,15,15],rcommaaccentimacron:[0,0,15,15],rcommaaccentiogonek:[0,0,15,15],rcommaaccentk:[0,0,15,15],rcommaaccentkcommaaccent:[0,0,15,15],rcommaaccentl:[0,0,15,15],rcommaaccentlacute:[0,0,15,15],rcommaaccentlcommaaccent:[0,0,15,15],rcommaaccentlslash:[0,0,15,15],rcommaaccentm:[0,0,25,25],rcommaaccentn:[0,0,25,25,-15],rcommaaccentnacute:[0,0,25,25,-15],rcommaaccentncaron:[0,0,25,25,-15],rcommaaccentncommaaccent:[0,0,25,25,-15],rcommaaccentntilde:[0,0,25,25,-15],rcommaaccentp:[0,0,30,30,-10],rcommaaccentsemicolon:[0,0,30,30],rcommaaccentu:[0,0,15,15],rcommaaccentuacute:[0,0,15,15],rcommaaccentucircumflex:[0,0,15,15],rcommaaccentudieresis:[0,0,15,15],rcommaaccentugrave:[0,0,15,15],rcommaaccentuhungarumlaut:[0,0,15,15],rcommaaccentumacron:[0,0,15,15],rcommaaccentuogonek:[0,0,15,15],rcommaaccenturing:[0,0,15,15],scomma:[0,0,-15,-15],speriod:[0,0,-15,-15],sacutecomma:[0,0,-15,-15],sacuteperiod:[0,0,-15,-15],scaroncomma:[0,0,-15,-15],scaronperiod:[0,0,-15,-15],scedillacomma:[0,0,-15,-15],scedillaperiod:[0,0,-15,-15],scommaaccentcomma:[0,0,-15,-15],scommaaccentperiod:[0,0,-15,-15],ve:[0,0,-25,-25,-10,-15,0,-15],veacute:[0,0,-25,-25,-10,-15,0,-15],vecaron:[0,0,-25,-25,-10,-15,0,-15],vecircumflex:[0,0,-25,-25,-10,-15,0,-15],vedieresis:[0,0,-25,-25,-10,-15,0,-15],vedotaccent:[0,0,-25,-25,-10,-15,0,-15],vegrave:[0,0,-25,-25,-10,-15,0,-15],vemacron:[0,0,-25,-25,-10,-15,0,-15],veogonek:[0,0,-25,-25,-10,-15,0,-15],wa:[0,0,-15,-15,0,-10,0,-10],waacute:[0,0,-15,-15,0,-10,0,-10],wabreve:[0,0,-15,-15,0,-10,0,-10],wacircumflex:[0,0,-15,-15,0,-10,0,-10],wadieresis:[0,0,-15,-15,0,-10,0,-10],wagrave:[0,0,-15,-15,0,-10,0,-10],wamacron:[0,0,-15,-15,0,-10,0,-10],waogonek:[0,0,-15,-15,0,-10,0,-10],waring:[0,0,-15,-15,0,-10,0,-10],watilde:[0,0,-15,-15,0,-10,0,-10],we:[0,0,-10,-10,0,-10],weacute:[0,0,-10,-10,0,-10],wecaron:[0,0,-10,-10,0,-10],wecircumflex:[0,0,-10,-10,0,-10],wedieresis:[0,0,-10,-10,0,-10],wedotaccent:[0,0,-10,-10,0,-10],wegrave:[0,0,-10,-10,0,-10],wemacron:[0,0,-10,-10,0,-10],weogonek:[0,0,-10,-10,0,-10],zo:[0,0,-15,-15],zoacute:[0,0,-15,-15],zocircumflex:[0,0,-15,-15],zodieresis:[0,0,-15,-15],zograve:[0,0,-15,-15],zohungarumlaut:[0,0,-15,-15],zomacron:[0,0,-15,-15],zoslash:[0,0,-15,-15],zotilde:[0,0,-15,-15],zacuteo:[0,0,-15,-15],zacuteoacute:[0,0,-15,-15],zacuteocircumflex:[0,0,-15,-15],zacuteodieresis:[0,0,-15,-15],zacuteograve:[0,0,-15,-15],zacuteohungarumlaut:[0,0,-15,-15],zacuteomacron:[0,0,-15,-15],zacuteoslash:[0,0,-15,-15],zacuteotilde:[0,0,-15,-15],zcarono:[0,0,-15,-15],zcaronoacute:[0,0,-15,-15],zcaronocircumflex:[0,0,-15,-15],zcaronodieresis:[0,0,-15,-15],zcaronograve:[0,0,-15,-15],zcaronohungarumlaut:[0,0,-15,-15],zcaronomacron:[0,0,-15,-15],zcaronoslash:[0,0,-15,-15],zcaronotilde:[0,0,-15,-15],zdotaccento:[0,0,-15,-15],zdotaccentoacute:[0,0,-15,-15],zdotaccentocircumflex:[0,0,-15,-15],zdotaccentodieresis:[0,0,-15,-15],zdotaccentograve:[0,0,-15,-15],zdotaccentohungarumlaut:[0,0,-15,-15],zdotaccentomacron:[0,0,-15,-15],zdotaccentoslash:[0,0,-15,-15],zdotaccentotilde:[0,0,-15,-15],Ap:[0,0,0,0,-25],Aquoteright:[0,0,0,0,-74,-74,-37,-111],Aacutep:[0,0,0,0,-25],Aacutequoteright:[0,0,0,0,-74,-74,-37,-111],Abrevep:[0,0,0,0,-25],Abrevequoteright:[0,0,0,0,-74,-74,-37,-111],Acircumflexp:[0,0,0,0,-25],Acircumflexquoteright:[0,0,0,0,-74,-74,-37,-111],Adieresisp:[0,0,0,0,-25],Adieresisquoteright:[0,0,0,0,-74,-74,-37,-111],Agravep:[0,0,0,0,-25],Agravequoteright:[0,0,0,0,-74,-74,-37,-111],Amacronp:[0,0,0,0,-25],Amacronquoteright:[0,0,0,0,-74,-74,-37,-111],Aogonekp:[0,0,0,0,-25],Aogonekquoteright:[0,0,0,0,-74,-74,-37,-111],Aringp:[0,0,0,0,-25],Aringquoteright:[0,0,0,0,-74,-74,-37,-111],Atildep:[0,0,0,0,-25],Atildequoteright:[0,0,0,0,-74,-74,-37,-111],Je:[0,0,0,0,-15,-40,-25],Jeacute:[0,0,0,0,-15,-40,-25],Jecaron:[0,0,0,0,-15,-40,-25],Jecircumflex:[0,0,0,0,-15,-40,-25],Jedieresis:[0,0,0,0,-15,-40,-25],Jedotaccent:[0,0,0,0,-15,-40,-25],Jegrave:[0,0,0,0,-15,-40,-25],Jemacron:[0,0,0,0,-15,-40,-25],Jeogonek:[0,0,0,0,-15,-40,-25],Jo:[0,0,0,0,-15,-40,-25],Joacute:[0,0,0,0,-15,-40,-25],Jocircumflex:[0,0,0,0,-15,-40,-25],Jodieresis:[0,0,0,0,-15,-40,-25],Jograve:[0,0,0,0,-15,-40,-25],Johungarumlaut:[0,0,0,0,-15,-40,-25],Jomacron:[0,0,0,0,-15,-40,-25],Joslash:[0,0,0,0,-15,-40,-25],Jotilde:[0,0,0,0,-15,-40,-25],NA:[0,0,0,0,-20,-30,-27,-35],NAacute:[0,0,0,0,-20,-30,-27,-35],NAbreve:[0,0,0,0,-20,-30,-27,-35],NAcircumflex:[0,0,0,0,-20,-30,-27,-35],NAdieresis:[0,0,0,0,-20,-30,-27,-35],NAgrave:[0,0,0,0,-20,-30,-27,-35],NAmacron:[0,0,0,0,-20,-30,-27,-35],NAogonek:[0,0,0,0,-20,-30,-27,-35],NAring:[0,0,0,0,-20,-30,-27,-35],NAtilde:[0,0,0,0,-20,-30,-27,-35],NacuteA:[0,0,0,0,-20,-30,-27,-35],NacuteAacute:[0,0,0,0,-20,-30,-27,-35],NacuteAbreve:[0,0,0,0,-20,-30,-27,-35],NacuteAcircumflex:[0,0,0,0,-20,-30,-27,-35],NacuteAdieresis:[0,0,0,0,-20,-30,-27,-35],NacuteAgrave:[0,0,0,0,-20,-30,-27,-35],NacuteAmacron:[0,0,0,0,-20,-30,-27,-35],NacuteAogonek:[0,0,0,0,-20,-30,-27,-35],NacuteAring:[0,0,0,0,-20,-30,-27,-35],NacuteAtilde:[0,0,0,0,-20,-30,-27,-35],NcaronA:[0,0,0,0,-20,-30,-27,-35],NcaronAacute:[0,0,0,0,-20,-30,-27,-35],NcaronAbreve:[0,0,0,0,-20,-30,-27,-35],NcaronAcircumflex:[0,0,0,0,-20,-30,-27,-35],NcaronAdieresis:[0,0,0,0,-20,-30,-27,-35],NcaronAgrave:[0,0,0,0,-20,-30,-27,-35],NcaronAmacron:[0,0,0,0,-20,-30,-27,-35],NcaronAogonek:[0,0,0,0,-20,-30,-27,-35],NcaronAring:[0,0,0,0,-20,-30,-27,-35],NcaronAtilde:[0,0,0,0,-20,-30,-27,-35],NcommaaccentA:[0,0,0,0,-20,-30,-27,-35],NcommaaccentAacute:[0,0,0,0,-20,-30,-27,-35],NcommaaccentAbreve:[0,0,0,0,-20,-30,-27,-35],NcommaaccentAcircumflex:[0,0,0,0,-20,-30,-27,-35],NcommaaccentAdieresis:[0,0,0,0,-20,-30,-27,-35],NcommaaccentAgrave:[0,0,0,0,-20,-30,-27,-35],NcommaaccentAmacron:[0,0,0,0,-20,-30,-27,-35],NcommaaccentAogonek:[0,0,0,0,-20,-30,-27,-35],NcommaaccentAring:[0,0,0,0,-20,-30,-27,-35],NcommaaccentAtilde:[0,0,0,0,-20,-30,-27,-35],NtildeA:[0,0,0,0,-20,-30,-27,-35],NtildeAacute:[0,0,0,0,-20,-30,-27,-35],NtildeAbreve:[0,0,0,0,-20,-30,-27,-35],NtildeAcircumflex:[0,0,0,0,-20,-30,-27,-35],NtildeAdieresis:[0,0,0,0,-20,-30,-27,-35],NtildeAgrave:[0,0,0,0,-20,-30,-27,-35],NtildeAmacron:[0,0,0,0,-20,-30,-27,-35],NtildeAogonek:[0,0,0,0,-20,-30,-27,-35],NtildeAring:[0,0,0,0,-20,-30,-27,-35],NtildeAtilde:[0,0,0,0,-20,-30,-27,-35],Ti:[0,0,0,0,-18,-37,-55,-35],Tiacute:[0,0,0,0,-18,-37,-55,-35],Tiogonek:[0,0,0,0,-18,-37,-55,-35],Tcaroni:[0,0,0,0,-18,-37,-55,-35],Tcaroniacute:[0,0,0,0,-18,-37,-55,-35],Tcaroniogonek:[0,0,0,0,-18,-37,-55,-35],Tcommaaccenti:[0,0,0,0,-18,-37,-55,-35],Tcommaaccentiacute:[0,0,0,0,-18,-37,-55,-35],Tcommaaccentiogonek:[0,0,0,0,-18,-37,-55,-35],Vi:[0,0,0,0,-37,-55,-74,-60],Viacute:[0,0,0,0,-37,-55,-74,-60],Vicircumflex:[0,0,0,0,-37,0,-34,-20],Vidieresis:[0,0,0,0,-37,0,-34,-20],Vigrave:[0,0,0,0,-37,0,-34,-20],Vimacron:[0,0,0,0,-37,0,-34,-20],Viogonek:[0,0,0,0,-37,-55,-74,-60],Wi:[0,0,0,0,-18,-37,-55,-40],Wiacute:[0,0,0,0,-18,-37,-55,-40],Wiogonek:[0,0,0,0,-18,-37,-55,-40],fi:[0,0,0,0,-25,0,-20,-20],gperiod:[0,0,0,0,-15,0,-15],gbreveperiod:[0,0,0,0,-15,0,-15],gcommaaccentperiod:[0,0,0,0,-15,0,-15],iv:[0,0,0,0,-10,0,0,-25],iacutev:[0,0,0,0,-10,0,0,-25],icircumflexv:[0,0,0,0,-10,0,0,-25],idieresisv:[0,0,0,0,-10,0,0,-25],igravev:[0,0,0,0,-10,0,0,-25],imacronv:[0,0,0,0,-10,0,0,-25],iogonekv:[0,0,0,0,-10,0,0,-25],ky:[0,0,0,0,-15,0,-10,-15],kyacute:[0,0,0,0,-15,0,-10,-15],kydieresis:[0,0,0,0,-15,0,-10,-15],kcommaaccenty:[0,0,0,0,-15,0,-10,-15],kcommaaccentyacute:[0,0,0,0,-15,0,-10,-15],kcommaaccentydieresis:[0,0,0,0,-15,0,-10,-15],quotedblleftA:[0,0,0,0,-10,0,0,-80],quotedblleftAacute:[0,0,0,0,-10,0,0,-80],quotedblleftAbreve:[0,0,0,0,-10,0,0,-80],quotedblleftAcircumflex:[0,0,0,0,-10,0,0,-80],quotedblleftAdieresis:[0,0,0,0,-10,0,0,-80],quotedblleftAgrave:[0,0,0,0,-10,0,0,-80],quotedblleftAmacron:[0,0,0,0,-10,0,0,-80],quotedblleftAogonek:[0,0,0,0,-10,0,0,-80],quotedblleftAring:[0,0,0,0,-10,0,0,-80],quotedblleftAtilde:[0,0,0,0,-10,0,0,-80],quoteleftA:[0,0,0,0,-10,0,0,-80],quoteleftAacute:[0,0,0,0,-10,0,0,-80],quoteleftAbreve:[0,0,0,0,-10,0,0,-80],quoteleftAcircumflex:[0,0,0,0,-10,0,0,-80],quoteleftAdieresis:[0,0,0,0,-10,0,0,-80],quoteleftAgrave:[0,0,0,0,-10,0,0,-80],quoteleftAmacron:[0,0,0,0,-10,0,0,-80],quoteleftAogonek:[0,0,0,0,-10,0,0,-80],quoteleftAring:[0,0,0,0,-10,0,0,-80],quoteleftAtilde:[0,0,0,0,-10,0,0,-80],re:[0,0,0,0,-18,0,-37],reacute:[0,0,0,0,-18,0,-37],recaron:[0,0,0,0,-18,0,-37],recircumflex:[0,0,0,0,-18,0,-37],redieresis:[0,0,0,0,-18,0,-37],redotaccent:[0,0,0,0,-18,0,-37],regrave:[0,0,0,0,-18,0,-37],remacron:[0,0,0,0,-18,0,-37],reogonek:[0,0,0,0,-18,0,-37],racutee:[0,0,0,0,-18,0,-37],racuteeacute:[0,0,0,0,-18,0,-37],racuteecaron:[0,0,0,0,-18,0,-37],racuteecircumflex:[0,0,0,0,-18,0,-37],racuteedieresis:[0,0,0,0,-18,0,-37],racuteedotaccent:[0,0,0,0,-18,0,-37],racuteegrave:[0,0,0,0,-18,0,-37],racuteemacron:[0,0,0,0,-18,0,-37],racuteeogonek:[0,0,0,0,-18,0,-37],rcarone:[0,0,0,0,-18,0,-37],rcaroneacute:[0,0,0,0,-18,0,-37],rcaronecaron:[0,0,0,0,-18,0,-37],rcaronecircumflex:[0,0,0,0,-18,0,-37],rcaronedieresis:[0,0,0,0,-18,0,-37],rcaronedotaccent:[0,0,0,0,-18,0,-37],rcaronegrave:[0,0,0,0,-18,0,-37],rcaronemacron:[0,0,0,0,-18,0,-37],rcaroneogonek:[0,0,0,0,-18,0,-37],rcommaaccente:[0,0,0,0,-18,0,-37],rcommaaccenteacute:[0,0,0,0,-18,0,-37],rcommaaccentecaron:[0,0,0,0,-18,0,-37],rcommaaccentecircumflex:[0,0,0,0,-18,0,-37],rcommaaccentedieresis:[0,0,0,0,-18,0,-37],rcommaaccentedotaccent:[0,0,0,0,-18,0,-37],rcommaaccentegrave:[0,0,0,0,-18,0,-37],rcommaaccentemacron:[0,0,0,0,-18,0,-37],rcommaaccenteogonek:[0,0,0,0,-18,0,-37],spaceA:[0,0,0,0,-55,-37,-18,-55],spaceAacute:[0,0,0,0,-55,-37,-18,-55],spaceAbreve:[0,0,0,0,-55,-37,-18,-55],spaceAcircumflex:[0,0,0,0,-55,-37,-18,-55],spaceAdieresis:[0,0,0,0,-55,-37,-18,-55],spaceAgrave:[0,0,0,0,-55,-37,-18,-55],spaceAmacron:[0,0,0,0,-55,-37,-18,-55],spaceAogonek:[0,0,0,0,-55,-37,-18,-55],spaceAring:[0,0,0,0,-55,-37,-18,-55],spaceAtilde:[0,0,0,0,-55,-37,-18,-55],Fi:[0,0,0,0,0,-40,-45],Fiacute:[0,0,0,0,0,-40,-45],Ficircumflex:[0,0,0,0,0,-40,-45],Fidieresis:[0,0,0,0,0,-40,-45],Figrave:[0,0,0,0,0,-40,-45],Fimacron:[0,0,0,0,0,-40,-45],Fiogonek:[0,0,0,0,0,-40,-45],eb:[0,0,0,0,0,-10],eacuteb:[0,0,0,0,0,-10],ecaronb:[0,0,0,0,0,-10],ecircumflexb:[0,0,0,0,0,-10],edieresisb:[0,0,0,0,0,-10],edotaccentb:[0,0,0,0,0,-10],egraveb:[0,0,0,0,0,-10],emacronb:[0,0,0,0,0,-10],eogonekb:[0,0,0,0,0,-10],ff:[0,0,0,0,0,-18,-18,-25],quoterightt:[0,0,0,0,0,-37,-30,-18],quoterighttcommaaccent:[0,0,0,0,0,-37,-30,-18],Yicircumflex:[0,0,0,0,0,0,-34],Yidieresis:[0,0,0,0,0,0,-34],Yigrave:[0,0,0,0,0,0,-34],Yimacron:[0,0,0,0,0,0,-34],Yacuteicircumflex:[0,0,0,0,0,0,-34],Yacuteidieresis:[0,0,0,0,0,0,-34],Yacuteigrave:[0,0,0,0,0,0,-34],Yacuteimacron:[0,0,0,0,0,0,-34],Ydieresisicircumflex:[0,0,0,0,0,0,-34],Ydieresisidieresis:[0,0,0,0,0,0,-34],Ydieresisigrave:[0,0,0,0,0,0,-34],Ydieresisimacron:[0,0,0,0,0,0,-34],eg:[0,0,0,0,0,0,-40,-15],egbreve:[0,0,0,0,0,0,-40,-15],egcommaaccent:[0,0,0,0,0,0,-40,-15],eacuteg:[0,0,0,0,0,0,-40,-15],eacutegbreve:[0,0,0,0,0,0,-40,-15],eacutegcommaaccent:[0,0,0,0,0,0,-40,-15],ecarong:[0,0,0,0,0,0,-40,-15],ecarongbreve:[0,0,0,0,0,0,-40,-15],ecarongcommaaccent:[0,0,0,0,0,0,-40,-15],ecircumflexg:[0,0,0,0,0,0,-40,-15],ecircumflexgbreve:[0,0,0,0,0,0,-40,-15],ecircumflexgcommaaccent:[0,0,0,0,0,0,-40,-15],edieresisg:[0,0,0,0,0,0,-40,-15],edieresisgbreve:[0,0,0,0,0,0,-40,-15],edieresisgcommaaccent:[0,0,0,0,0,0,-40,-15],edotaccentg:[0,0,0,0,0,0,-40,-15],edotaccentgbreve:[0,0,0,0,0,0,-40,-15],edotaccentgcommaaccent:[0,0,0,0,0,0,-40,-15],egraveg:[0,0,0,0,0,0,-40,-15],egravegbreve:[0,0,0,0,0,0,-40,-15],egravegcommaaccent:[0,0,0,0,0,0,-40,-15],emacrong:[0,0,0,0,0,0,-40,-15],emacrongbreve:[0,0,0,0,0,0,-40,-15],emacrongcommaaccent:[0,0,0,0,0,0,-40,-15],eogonekg:[0,0,0,0,0,0,-40,-15],eogonekgbreve:[0,0,0,0,0,0,-40,-15],eogonekgcommaaccent:[0,0,0,0,0,0,-40,-15],fiogonek:[0,0,0,0,0,0,-20],gcomma:[0,0,0,0,0,0,-10],gbrevecomma:[0,0,0,0,0,0,-10],gcommaaccentcomma:[0,0,0,0,0,0,-10],og:[0,0,0,0,0,0,-10],ogbreve:[0,0,0,0,0,0,-10],ogcommaaccent:[0,0,0,0,0,0,-10],oacuteg:[0,0,0,0,0,0,-10],oacutegbreve:[0,0,0,0,0,0,-10],oacutegcommaaccent:[0,0,0,0,0,0,-10],ocircumflexg:[0,0,0,0,0,0,-10],ocircumflexgbreve:[0,0,0,0,0,0,-10],ocircumflexgcommaaccent:[0,0,0,0,0,0,-10],odieresisg:[0,0,0,0,0,0,-10],odieresisgbreve:[0,0,0,0,0,0,-10],odieresisgcommaaccent:[0,0,0,0,0,0,-10],ograveg:[0,0,0,0,0,0,-10],ogravegbreve:[0,0,0,0,0,0,-10],ogravegcommaaccent:[0,0,0,0,0,0,-10],ohungarumlautg:[0,0,0,0,0,0,-10],ohungarumlautgbreve:[0,0,0,0,0,0,-10],ohungarumlautgcommaaccent:[0,0,0,0,0,0,-10],omacrong:[0,0,0,0,0,0,-10],omacrongbreve:[0,0,0,0,0,0,-10],omacrongcommaaccent:[0,0,0,0,0,0,-10],otildeg:[0,0,0,0,0,0,-10],otildegbreve:[0,0,0,0,0,0,-10],otildegcommaaccent:[0,0,0,0,0,0,-10],fiacute:[0,0,0,0,0,0,0,-20],ga:[0,0,0,0,0,0,0,-5],gaacute:[0,0,0,0,0,0,0,-5],gabreve:[0,0,0,0,0,0,0,-5],gacircumflex:[0,0,0,0,0,0,0,-5],gadieresis:[0,0,0,0,0,0,0,-5],gagrave:[0,0,0,0,0,0,0,-5],gamacron:[0,0,0,0,0,0,0,-5],gaogonek:[0,0,0,0,0,0,0,-5],garing:[0,0,0,0,0,0,0,-5],gatilde:[0,0,0,0,0,0,0,-5],gbrevea:[0,0,0,0,0,0,0,-5],gbreveaacute:[0,0,0,0,0,0,0,-5],gbreveabreve:[0,0,0,0,0,0,0,-5],gbreveacircumflex:[0,0,0,0,0,0,0,-5],gbreveadieresis:[0,0,0,0,0,0,0,-5],gbreveagrave:[0,0,0,0,0,0,0,-5],gbreveamacron:[0,0,0,0,0,0,0,-5],gbreveaogonek:[0,0,0,0,0,0,0,-5],gbrevearing:[0,0,0,0,0,0,0,-5],gbreveatilde:[0,0,0,0,0,0,0,-5],gcommaaccenta:[0,0,0,0,0,0,0,-5],gcommaaccentaacute:[0,0,0,0,0,0,0,-5],gcommaaccentabreve:[0,0,0,0,0,0,0,-5],gcommaaccentacircumflex:[0,0,0,0,0,0,0,-5],gcommaaccentadieresis:[0,0,0,0,0,0,0,-5],gcommaaccentagrave:[0,0,0,0,0,0,0,-5],gcommaaccentamacron:[0,0,0,0,0,0,0,-5],gcommaaccentaogonek:[0,0,0,0,0,0,0,-5],gcommaaccentaring:[0,0,0,0,0,0,0,-5],gcommaaccentatilde:[0,0,0,0,0,0,0,-5]};var data={attributes:attributes,glyphWidths:glyphWidths,kernPairs:kernPairs};const initFont=font=>{return[font.FontName,{attributes:font,glyphWidths:{},kernPairs:{}}];};const expandData=data=>{const{attributes,glyphWidths,kernPairs}=data;const fonts=attributes.map(initFont);Object.keys(glyphWidths).forEach(key=>{glyphWidths[key].forEach((value,index)=>{if(value)fonts[index][1].glyphWidths[key]=value;});});Object.keys(kernPairs).forEach(key=>{kernPairs[key].forEach((value,index)=>{if(value)fonts[index][1].kernPairs[key]=value;});});return Object.fromEntries(fonts);};const STANDARD_FONTS=expandData(data);const createStandardFont=PDFFont=>class StandardFont extends PDFFont{constructor(document,name,id){super();this.document=document;this.name=name;this.id=id;this.font=AFMFont.fromJson(STANDARD_FONTS[this.name]);this.ascender=this.font.ascender;this.descender=this.font.descender;this.bbox=this.font.bbox;this.lineGap=this.font.lineGap;}embed(){this.dictionary.data={Type:'Font',BaseFont:this.name,Subtype:'Type1',Encoding:'WinAnsiEncoding'};return this.dictionary.end();}encode(text){const encoded=this.font.encodeText(text);const glyphs=this.font.glyphsForString(`${text}`);const advances=this.font.advancesForGlyphs(glyphs);const positions=[];for(let i=0;i<glyphs.length;i++){const glyph=glyphs[i];positions.push({xAdvance:advances[i],yAdvance:0,xOffset:0,yOffset:0,advanceWidth:this.font.widthOfGlyph(glyph)});}return[encoded,positions];}encodeGlyphs(glyphs){const res=[];for(let glyph of Array.from(glyphs)){res.push(`00${glyph.id.toString(16)}`.slice(-2));}return res;}widthOfString(string,size){const glyphs=this.font.glyphsForString(`${string}`);const advances=this.font.advancesForGlyphs(glyphs);let width=0;for(let advance of Array.from(advances)){width+=advance;}const scale=size/1000;return width*scale;}static isStandardFont(name){return name in STANDARD_FONTS;}};const pdfkit_browser_toHex=function(){for(var _len=arguments.length,codePoints=new Array(_len),_key=0;_key<_len;_key++){codePoints[_key]=arguments[_key];}const codes=Array.from(codePoints).map(code=>`0000${code.toString(16)}`.slice(-4));return codes.join('');};const createEmbeddedFont=PDFFont=>class EmbeddedFont extends PDFFont{constructor(document,font,id){super();this.document=document;this.font=font;this.id=id;this.subset=this.font.createSubset();this.unicode=[[0]];this.widths=[this.font.getGlyph(0).advanceWidth];this.name=this.font.postscriptName;this.scale=1000/this.font.unitsPerEm;this.ascender=this.font.ascent*this.scale;this.descender=this.font.descent*this.scale;this.xHeight=this.font.xHeight*this.scale;this.capHeight=this.font.capHeight*this.scale;this.lineGap=this.font.lineGap*this.scale;this.bbox=this.font.bbox;this.layoutCache=Object.create(null);}layoutRun(text,features){// passing LTR To force fontkit to not reverse the string
const run=this.font.layout(text,features,undefined,undefined,'ltr');// Normalize position values
for(let i=0;i<run.positions.length;i++){const position=run.positions[i];for(let key in position){position[key]*=this.scale;}position.advanceWidth=run.glyphs[i].advanceWidth*this.scale;}return run;}layoutCached(text){let cached;if(cached=this.layoutCache[text]){return cached;}const run=this.layoutRun(text);this.layoutCache[text]=run;return run;}layout(text,features,onlyWidth){// Skip the cache if any user defined features are applied
if(onlyWidth==null){onlyWidth=false;}if(features){return this.layoutRun(text,features);}const glyphs=onlyWidth?null:[];const positions=onlyWidth?null:[];let advanceWidth=0;// Split the string by words to increase cache efficiency.
// For this purpose, spaces and tabs are a good enough delimeter.
let last=0;let index=0;while(index<=text.length){let needle;if(index===text.length&&last<index||(needle=text.charAt(index),[' ','\t'].includes(needle))){const run=this.layoutCached(text.slice(last,++index));if(!onlyWidth){glyphs.push(...Array.from(run.glyphs||[]));positions.push(...Array.from(run.positions||[]));}advanceWidth+=run.advanceWidth;last=index;}else{index++;}}return{glyphs,positions,advanceWidth};}encode(text,features){const{glyphs,positions}=this.layout(text,features);const res=[];for(let i=0;i<glyphs.length;i++){const glyph=glyphs[i];const gid=this.subset.includeGlyph(glyph.id);res.push(`0000${gid.toString(16)}`.slice(-4));if(this.widths[gid]==null){this.widths[gid]=glyph.advanceWidth*this.scale;}if(this.unicode[gid]==null){this.unicode[gid]=glyph.codePoints;}}return[res,positions];}encodeGlyphs(glyphs){const res=[];for(let i=0;i<glyphs.length;i++){const glyph=glyphs[i];const gid=this.subset.includeGlyph(glyph.id);res.push(`0000${gid.toString(16)}`.slice(-4));if(this.widths[gid]==null){this.widths[gid]=glyph.advanceWidth*this.scale;}if(this.unicode[gid]==null){this.unicode[gid]=glyph.codePoints;}}return res;}widthOfString(string,size,features){const width=this.layout(string,features,true).advanceWidth;const scale=size/1000;return width*scale;}embed(){const isCFF=this.subset.cff!=null;const fontFile=this.document.ref();if(isCFF){fontFile.data.Subtype='CIDFontType0C';}fontFile.end(this.subset.encode());const familyClass=((this.font['OS/2']!=null?this.font['OS/2'].sFamilyClass:undefined)||0)>>8;let flags=0;if(this.font.post.isFixedPitch){flags|=1<<0;}if(1<=familyClass&&familyClass<=7){flags|=1<<1;}flags|=1<<2;// assume the font uses non-latin characters
if(familyClass===10){flags|=1<<3;}if(this.font.head.macStyle.italic){flags|=1<<6;}// generate a random tag (6 uppercase letters. 65 is the char code for 'A')
const tag=[0,1,2,3,4,5].map(()=>String.fromCharCode(Math.random()*26+65)).join('');const name=tag+'+'+this.font.postscriptName;const{bbox}=this.font;const descriptor=this.document.ref({Type:'FontDescriptor',FontName:name,Flags:flags,FontBBox:[bbox.minX*this.scale,bbox.minY*this.scale,bbox.maxX*this.scale,bbox.maxY*this.scale],ItalicAngle:this.font.italicAngle,Ascent:this.ascender,Descent:this.descender,CapHeight:(this.font.capHeight||this.font.ascent)*this.scale,XHeight:(this.font.xHeight||0)*this.scale,StemV:0});// not sure how to calculate this
if(isCFF){descriptor.data.FontFile3=fontFile;}else{descriptor.data.FontFile2=fontFile;}descriptor.end();const descendantFontData={Type:'Font',Subtype:'CIDFontType0',BaseFont:name,CIDSystemInfo:{Registry:new String('Adobe'),Ordering:new String('Identity'),Supplement:0},FontDescriptor:descriptor,W:[0,this.widths]};if(!isCFF){descendantFontData.Subtype='CIDFontType2';descendantFontData.CIDToGIDMap='Identity';}const descendantFont=this.document.ref(descendantFontData);descendantFont.end();this.dictionary.data={Type:'Font',Subtype:'Type0',BaseFont:name,Encoding:'Identity-H',DescendantFonts:[descendantFont],ToUnicode:this.toUnicodeCmap()};return this.dictionary.end();}// Maps the glyph ids encoded in the PDF back to unicode strings
// Because of ligature substitutions and the like, there may be one or more
// unicode characters represented by each glyph.
toUnicodeCmap(){const cmap=this.document.ref();let entries=[];let unicodeMap='/CIDInit /ProcSet findresource begin\n12 dict begin\nbegincmap\n/CIDSystemInfo <<\n  /Registry (Adobe)\n  /Ordering (UCS)\n  /Supplement 0\n>> def\n/CMapName /Adobe-Identity-UCS def\n/CMapType 2 def\n1 begincodespacerange\n<0000><ffff>\nendcodespacerange';for(let[index,codePoints]of this.unicode.entries()){const encoded=[];if(entries.length>=100){unicodeMap+='\n'+entries.length+' beginbfchar\n'+entries.join('\n')+'\nendbfchar';entries=[];}// encode codePoints to utf16
for(let value of codePoints){if(value>0xffff){value-=0x10000;encoded.push(pdfkit_browser_toHex(value>>>10&0x3ff|0xd800));value=0xdc00|value&0x3ff;}encoded.push(pdfkit_browser_toHex(value));}// eslint-disable-next-line no-useless-concat
entries.push('<'+pdfkit_browser_toHex(index)+'>'+'<'+encoded.join(' ')+'>');}if(entries.length){unicodeMap+='\n'+entries.length+' beginbfchar\n'+entries.join('\n')+'\nendbfchar\n';}unicodeMap+='endcmap\nCMapName currentdict /CMap defineresource pop\nend\nend';cmap.end(unicodeMap);return cmap;}};class PDFFont{static open(document,src,family,id){let font;if(typeof src==='string'){if(StandardFont.isStandardFont(src)){return new StandardFont(document,src,id);}{throw new Error(`Can't open ${src} in browser build`);}}else if(src instanceof Uint8Array){font=browser_module/* create */.vt(src,family);}else if(src instanceof ArrayBuffer){font=browser_module/* create */.vt(new Uint8Array(src),family);}else if(typeof src==='object'){font=src;}if(font==null){throw new Error('Not a supported font format or standard PDF font.');}return new EmbeddedFont(document,font,id);}encode(){throw new Error('Must be implemented by subclasses');}widthOfString(){throw new Error('Must be implemented by subclasses');}ref(){return this.dictionary!=null?this.dictionary:this.dictionary=this.document.ref();}finalize(){if(this.embedded||this.dictionary==null){return;}this.embed();return this.embedded=true;}embed(){throw new Error('Must be implemented by subclasses');}lineHeight(size,includeGap){if(includeGap==null){includeGap=false;}const gap=includeGap?this.lineGap:0;return(this.ascender+gap-this.descender)/1000*size;}}const StandardFont=createStandardFont(PDFFont);const EmbeddedFont=createEmbeddedFont(PDFFont);var FontsMixin={initFonts(){// Lookup table for embedded fonts
this._fontFamilies={};this._fontCount=0;// Font state
this._fontSize=12;this._font=null;this._registeredFonts={};// Set the default font
return this.font('Helvetica');},font(src,family,size){let cacheKey;let font;if(typeof family==='number'){size=family;family=null;}// check registered fonts if src is a string
if(typeof src==='string'&&this._registeredFonts[src]){cacheKey=src;({src,family}=this._registeredFonts[src]);}else{cacheKey=family||src;if(typeof cacheKey!=='string'){cacheKey=null;}}if(size!=null){this.fontSize(size);}// fast path: check if the font is already in the PDF
if(font=this._fontFamilies[cacheKey]){this._font=font;return this;}// load the font
const id=`F${++this._fontCount}`;this._font=PDFFont.open(this,src,family,id);// check for existing font familes with the same name already in the PDF
// useful if the font was passed as a buffer
if(font=this._fontFamilies[this._font.name]){this._font=font;return this;}// save the font for reuse later
if(cacheKey){this._fontFamilies[cacheKey]=this._font;}if(this._font.name){this._fontFamilies[this._font.name]=this._font;}return this;},fontSize(_fontSize){this._fontSize=_fontSize;return this;},currentLineHeight(includeGap){if(includeGap==null){includeGap=false;}return this._font.lineHeight(this._fontSize,includeGap);},registerFont(name,src,family){this._registeredFonts[name]={src,family};return this;}};const{number}=PDFObject$1;var TextMixin={initText(){this._line=this._line.bind(this);// Current coordinates
this.x=0;this.y=0;return this._lineGap=0;},_text(text,x,y,options,lineCallback){options=this._initOptions(x,y,options);// Convert text to a string
text=text==null?'':`${text}`;// if the wordSpacing option is specified, remove multiple consecutive spaces
if(options.wordSpacing){text=text.replace(/\s{2,}/g,' ');}const addStructure=()=>{if(options.structParent){options.structParent.add(this.struct(options.structType||'P',[this.markStructureContent(options.structType||'P')]));}};for(let line of text.split('\n')){addStructure();lineCallback(line,options);}return this;},text(text,x,y,options){return this._text(text,x,y,options,this._line);},widthOfString(string,options){if(options===void 0){options={};}return this._font.widthOfString(string,this._fontSize,options.features)+(options.characterSpacing||0)*(string.length-1);},_initOptions(x,y,options){if(x===void 0){x={};}if(options===void 0){options={};}if(typeof x==='object'){options=x;x=null;}// shallow clone options object
/**
     * @type {Object}
     */const result=Object.assign({},options);// extend options with previous values for continued text
if(this._textOptions){for(let key in this._textOptions){const val=this._textOptions[key];if(key!=='continued'){if(result[key]===undefined){result[key]=val;}}}}// Update the current position
if(x!=null){this.x=x;}if(y!=null){this.y=y;}// wrap to margins if no x or y position passed
if(result.lineBreak!==false){if(result.width==null){result.width=this.page.width-this.x-this.page.margins.right;}result.width=Math.max(result.width,0);}if(!result.columns){result.columns=0;}if(result.columnGap==null){result.columnGap=18;}// 1/4 inch
return result;},_line(text,options){if(options===void 0){options={};}this._fragment(text,this.x,this.y,options);return this.x+=this.widthOfString(text);},_fragment(text,x,y,options){text=`${text}`.replace(/\n/g,'');if(text.length===0)return;const[encoded,positions]=this._font.encode(text,options.features);const dy=this._font.ascender/1000*this._fontSize;this._glyphs(encoded,positions,x,y+dy,options);},_glyphs(encoded,positions,x,y,options){const commands=[];const scale=this._fontSize/1000;let i;let last=0;let hadOffset=false;this.save();// flip coordinate system
this.transform(1,0,0,-1,0,this.page.height);y=this.page.height-y;// add current font to page if necessary
if(this.page.fonts[this._font.id]==null){this.page.fonts[this._font.id]=this._font.ref();}// begin the text object
this.addContent('BT');// text position
this.addContent(`1 0 0 1 ${number(x)} ${number(y)} Tm`);// font and font size
this.addContent(`/${this._font.id} ${number(this._fontSize)} Tf`);// rendering mode
const mode=options.fill&&options.stroke?2:options.stroke?1:0;if(mode){this.addContent(`${mode} Tr`);}// Adds a segment of text to the TJ command buffer
const addSegment=cur=>{if(last<cur){const hex=encoded.slice(last,cur).join('');const advance=positions[cur-1].xAdvance-positions[cur-1].advanceWidth;commands.push(`<${hex}> ${number(-advance)}`);}return last=cur;};// Flushes the current TJ commands to the output stream
const flush=i=>{addSegment(i);if(commands.length>0){this.addContent(`[${commands.join(' ')}] TJ`);return commands.length=0;}};for(i=0;i<positions.length;i++){// If we have an x or y offset, we have to break out of the current TJ command
// so we can move the text position.
const pos=positions[i];if(pos.xOffset||pos.yOffset){// Flush the current buffer
flush(i);// Move the text position and flush just the current character
this.addContent(`1 0 0 1 ${number(x+pos.xOffset*scale)} ${number(y+pos.yOffset*scale)} Tm`);flush(i+1);hadOffset=true;}else{// If the last character had an offset, reset the text position
if(hadOffset){this.addContent(`1 0 0 1 ${number(x)} ${number(y)} Tm`);hadOffset=false;}// Group segments that don't have any advance adjustments
if(pos.xAdvance-pos.advanceWidth!==0){addSegment(i+1);}}x+=pos.xAdvance*scale;}// Flush any remaining commands
flush(i);// end the text object
this.addContent('ET');// restore flipped coordinate system
return this.restore();}};const COLOR_SPACE_MAP={1:'DeviceGray',3:'DeviceRGB',4:'DeviceCMYK'};class JPEG{constructor(data,label){this.data=data;this.label=label;this.orientation=1;if(this.data.readUInt16BE(0)!==0xffd8){throw'SOI not found in JPEG';}const markers=src/* default */.A.decode(this.data);for(let i=0;i<markers.length;i+=1){const marker=markers[i];if(marker.name==='EXIF'&&marker.entries.orientation){this.orientation=marker.entries.orientation;}if(marker.name==='SOF'){this.bits||=marker.precision;this.width||=marker.width;this.height||=marker.height;this.colorSpace||=COLOR_SPACE_MAP[marker.numberOfComponents];}}this.obj=null;}embed(document){if(this.obj){return;}this.obj=document.ref({Type:'XObject',Subtype:'Image',BitsPerComponent:this.bits,Width:this.width,Height:this.height,ColorSpace:this.colorSpace,Filter:'DCTDecode'});// add extra decode params for CMYK images. By swapping the
// min and max values from the default, we invert the colors. See
// section 4.8.4 of the spec.
if(this.colorSpace==='DeviceCMYK'){this.obj.data['Decode']=[1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0];}this.obj.end(this.data);// free memory
return this.data=null;}}class PNGImage{constructor(data,label){this.label=label;this.image=new PNG(data);this.width=this.image.width;this.height=this.image.height;this.imgData=this.image.imgData;this.obj=null;}embed(document){let dataDecoded=false;this.document=document;if(this.obj){return;}const hasAlphaChannel=this.image.hasAlphaChannel;const isInterlaced=this.image.interlaceMethod===1;this.obj=this.document.ref({Type:'XObject',Subtype:'Image',BitsPerComponent:hasAlphaChannel?8:this.image.bits,Width:this.width,Height:this.height,Filter:'FlateDecode'});if(!hasAlphaChannel){const params=this.document.ref({Predictor:isInterlaced?1:15,Colors:this.image.colors,BitsPerComponent:this.image.bits,Columns:this.width});this.obj.data.DecodeParms=params;params.end();}if(this.image.palette.length===0){this.obj.data.ColorSpace=this.image.colorSpace;}else{// embed the color palette in the PDF as an object stream
const palette=this.document.ref();palette.end(Buffer$2.from(this.image.palette));// build the color space array for the image
this.obj.data.ColorSpace=['Indexed','DeviceRGB',this.image.palette.length/3-1,palette];}// For PNG color types 0, 2 and 3, the transparency data is stored in
// a dedicated PNG chunk.
if(this.image.transparency.grayscale!=null){// Use Color Key Masking (spec section 4.8.5)
// An array with N elements, where N is two times the number of color components.
const val=this.image.transparency.grayscale;this.obj.data.Mask=[val,val];}else if(this.image.transparency.rgb){// Use Color Key Masking (spec section 4.8.5)
// An array with N elements, where N is two times the number of color components.
const{rgb}=this.image.transparency;const mask=[];for(let x of rgb){mask.push(x,x);}this.obj.data.Mask=mask;}else if(this.image.transparency.indexed){// Create a transparency SMask for the image based on the data
// in the PLTE and tRNS sections. See below for details on SMasks.
dataDecoded=true;return this.loadIndexedAlphaChannel();}else if(hasAlphaChannel){// For PNG color types 4 and 6, the transparency data is stored as a alpha
// channel mixed in with the main image data. Separate this data out into an
// SMask object and store it separately in the PDF.
dataDecoded=true;return this.splitAlphaChannel();}if(isInterlaced&&!dataDecoded){return this.decodeData();}this.finalize();}finalize(){if(this.alphaChannel){const sMask=this.document.ref({Type:'XObject',Subtype:'Image',Height:this.height,Width:this.width,BitsPerComponent:8,Filter:'FlateDecode',ColorSpace:'DeviceGray',Decode:[0,1]});sMask.end(this.alphaChannel);this.obj.data.SMask=sMask;}// add the actual image data
this.obj.end(this.imgData);// free memory
this.image=null;return this.imgData=null;}splitAlphaChannel(){return this.image.decodePixels(pixels=>{let a;let p;const colorCount=this.image.colors;const pixelCount=this.width*this.height;const imgData=Buffer$2.alloc(pixelCount*colorCount);const alphaChannel=Buffer$2.alloc(pixelCount);let i=p=a=0;const len=pixels.length;// For 16bit images copy only most significant byte (MSB) - PNG data is always stored in network byte order (MSB first)
const skipByteCount=this.image.bits===16?1:0;while(i<len){for(let colorIndex=0;colorIndex<colorCount;colorIndex++){imgData[p++]=pixels[i++];i+=skipByteCount;}alphaChannel[a++]=pixels[i++];i+=skipByteCount;}this.imgData=pdfkit_browser_zlib.deflateSync(imgData);this.alphaChannel=pdfkit_browser_zlib.deflateSync(alphaChannel);return this.finalize();});}loadIndexedAlphaChannel(){const transparency=this.image.transparency.indexed;return this.image.decodePixels(pixels=>{const alphaChannel=Buffer$2.alloc(this.width*this.height);let i=0;for(let j=0,end=pixels.length;j<end;j++){alphaChannel[i++]=transparency[pixels[j]];}this.alphaChannel=pdfkit_browser_zlib.deflateSync(alphaChannel);return this.finalize();});}decodeData(){this.image.decodePixels(pixels=>{this.imgData=pdfkit_browser_zlib.deflateSync(pixels);this.finalize();});}}class PDFImage{static open(src,label){let data;if(Buffer$2.isBuffer(src)){data=src;}else if(src instanceof ArrayBuffer){data=Buffer$2.from(new Uint8Array(src));}else{let match;if(match=/^data:.+?;base64,(.*)$/.exec(src)){data=Buffer$2.from(match[1],'base64');}else{data=fs.readFileSync(src);if(!data){return;}}}if(data[0]===0xff&&data[1]===0xd8){return new JPEG(data,label);}else if(data[0]===0x89&&data.toString('ascii',1,4)==='PNG'){return new PNGImage(data,label);}else{throw new Error('Unknown image format.');}}}var ImagesMixin={initImages(){this._imageRegistry={};return this._imageCount=0;},embedImage(src){let image;if(typeof src==='string'){image=this._imageRegistry[src];}if(!image){if(src.width&&src.height){image=src;}else{image=this.openImage(src);}}if(!image.obj){image.embed(this);}return image;},image(src,x,y,options){if(options===void 0){options={};}let bh;let bp;let bw;let image;let ip;let left;let left1;let rotateAngle;let originX;let originY;if(typeof x==='object'){options=x;x=null;}// Ignore orientation based on document options or image options
const ignoreOrientation=options.ignoreOrientation||options.ignoreOrientation!==false&&this.options.ignoreOrientation;x=(left=x!=null?x:options.x)!=null?left:this.x;y=(left1=y!=null?y:options.y)!=null?left1:this.y;if(typeof src==='string'){image=this._imageRegistry[src];}if(!image){if(src.width&&src.height){image=src;}else{image=this.openImage(src);}}if(!image.obj){image.embed(this);}if(this.page.xobjects[image.label]==null){this.page.xobjects[image.label]=image.obj;}let{width,height}=image;// If EXIF orientation calls for it, swap width and height
if(!ignoreOrientation&&image.orientation>4){[width,height]=[height,width];}let w=options.width||width;let h=options.height||height;if(options.width&&!options.height){const wp=w/width;w=width*wp;h=height*wp;}else if(options.height&&!options.width){const hp=h/height;w=width*hp;h=height*hp;}else if(options.scale){w=width*options.scale;h=height*options.scale;}else if(options.fit){[bw,bh]=options.fit;bp=bw/bh;ip=width/height;if(ip>bp){w=bw;h=bw/ip;}else{h=bh;w=bh*ip;}}else if(options.cover){[bw,bh]=options.cover;bp=bw/bh;ip=width/height;if(ip>bp){h=bh;w=bh*ip;}else{w=bw;h=bw/ip;}}if(options.fit||options.cover){if(options.align==='center'){x=x+bw/2-w/2;}else if(options.align==='right'){x=x+bw-w;}if(options.valign==='center'){y=y+bh/2-h/2;}else if(options.valign==='bottom'){y=y+bh-h;}}if(!ignoreOrientation){switch(image.orientation){// No orientation (need to flip image, though, because of the default transform matrix on the document)
default:case 1:h=-h;y-=h;rotateAngle=0;break;// Flip Horizontal
case 2:w=-w;h=-h;x-=w;y-=h;rotateAngle=0;break;// Rotate 180 degrees
case 3:originX=x;originY=y;h=-h;x-=w;rotateAngle=180;break;// Flip vertical
case 4:// Do nothing, image will be flipped
break;// Flip horizontally and rotate 270 degrees CW
case 5:originX=x;originY=y;[w,h]=[h,w];y-=h;rotateAngle=90;break;// Rotate 90 degrees CW
case 6:originX=x;originY=y;[w,h]=[h,w];h=-h;rotateAngle=90;break;// Flip horizontally and rotate 90 degrees CW
case 7:originX=x;originY=y;[w,h]=[h,w];h=-h;w=-w;x-=w;rotateAngle=90;break;// Rotate 270 degrees CW
case 8:originX=x;originY=y;[w,h]=[h,w];h=-h;x-=w;y-=h;rotateAngle=-90;break;}}else{h=-h;y-=h;rotateAngle=0;}// Set the current y position to below the image if it is in the document flow
if(this.y===y){this.y+=h;}this.save();if(rotateAngle){this.rotate(rotateAngle,{origin:[originX,originY]});}this.transform(w,0,0,h,x,y);this.addContent(`/${image.label} Do`);this.restore();return this;},openImage(src){let image;if(typeof src==='string'){image=this._imageRegistry[src];}if(!image){image=PDFImage.open(src,`I${++this._imageCount}`);if(typeof src==='string'){this._imageRegistry[src]=image;}}return image;}};var AnnotationsMixin={annotate(x,y,w,h,options){options.Type='Annot';options.Rect=this._convertRect(x,y,w,h);options.Border=[0,0,0];if(options.Subtype==='Link'&&typeof options.F==='undefined'){options.F=1<<2;// Print Annotation Flag
}if(options.Subtype!=='Link'){if(options.C==null){options.C=this._normalizeColor(options.color||[0,0,0]);}}// convert colors
delete options.color;if(typeof options.Dest==='string'){options.Dest=new String(options.Dest);}// Capitalize keys
for(let key in options){const val=options[key];options[key[0].toUpperCase()+key.slice(1)]=val;}const ref=this.ref(options);this.page.annotations.push(ref);ref.end();return this;},note(x,y,w,h,contents,options){if(options===void 0){options={};}options.Subtype='Text';options.Contents=new String(contents);options.Name='Comment';if(options.color==null){options.color=[243,223,92];}return this.annotate(x,y,w,h,options);},goTo(x,y,w,h,name,options){if(options===void 0){options={};}options.Subtype='Link';options.A=this.ref({S:'GoTo',D:new String(name)});options.A.end();return this.annotate(x,y,w,h,options);},link(x,y,w,h,url,options){if(options===void 0){options={};}options.Subtype='Link';if(typeof url==='number'){// Link to a page in the document (the page must already exist)
const pages=this._root.data.Pages.data;if(url>=0&&url<pages.Kids.length){options.A=this.ref({S:'GoTo',D:[pages.Kids[url],'XYZ',null,null,null]});options.A.end();}else{throw new Error(`The document has no page ${url}`);}}else{// Link to an external url
options.A=this.ref({S:'URI',URI:new String(url)});options.A.end();}return this.annotate(x,y,w,h,options);},_markup(x,y,w,h,options){if(options===void 0){options={};}const[x1,y1,x2,y2]=this._convertRect(x,y,w,h);options.QuadPoints=[x1,y2,x2,y2,x1,y1,x2,y1];options.Contents=new String();return this.annotate(x,y,w,h,options);},highlight(x,y,w,h,options){if(options===void 0){options={};}options.Subtype='Highlight';if(options.color==null){options.color=[241,238,148];}return this._markup(x,y,w,h,options);},underline(x,y,w,h,options){if(options===void 0){options={};}options.Subtype='Underline';return this._markup(x,y,w,h,options);},strike(x,y,w,h,options){if(options===void 0){options={};}options.Subtype='StrikeOut';return this._markup(x,y,w,h,options);},lineAnnotation(x1,y1,x2,y2,options){if(options===void 0){options={};}options.Subtype='Line';options.Contents=new String();options.L=[x1,this.page.height-y1,x2,this.page.height-y2];return this.annotate(x1,y1,x2,y2,options);},rectAnnotation(x,y,w,h,options){if(options===void 0){options={};}options.Subtype='Square';options.Contents=new String();return this.annotate(x,y,w,h,options);},ellipseAnnotation(x,y,w,h,options){if(options===void 0){options={};}options.Subtype='Circle';options.Contents=new String();return this.annotate(x,y,w,h,options);},textAnnotation(x,y,w,h,text,options){if(options===void 0){options={};}options.Subtype='FreeText';options.Contents=new String(text);options.DA=new String();return this.annotate(x,y,w,h,options);},fileAnnotation(x,y,w,h,file,options){if(file===void 0){file={};}if(options===void 0){options={};}// create hidden file
const filespec=this.file(file.src,Object.assign({hidden:true},file));options.Subtype='FileAttachment';options.FS=filespec;// add description from filespec unless description (Contents) has already been set
if(options.Contents){options.Contents=new String(options.Contents);}else if(filespec.data.Desc){options.Contents=filespec.data.Desc;}return this.annotate(x,y,w,h,options);},_convertRect(x1,y1,w,h){// flip y1 and y2
let y2=y1;y1+=h;// make x2
let x2=x1+w;// apply current transformation matrix to points
const[m0,m1,m2,m3,m4,m5]=this._ctm;x1=m0*x1+m2*y1+m4;y1=m1*x1+m3*y1+m5;x2=m0*x2+m2*y2+m4;y2=m1*x2+m3*y2+m5;return[x1,y1,x2,y2];}};class PDFOutline{constructor(document,parent,title,dest,options){if(options===void 0){options={expanded:false};}this.document=document;this.options=options;this.outlineData={};if(dest!==null){this.outlineData['Dest']=[dest.dictionary,'Fit'];}if(parent!==null){this.outlineData['Parent']=parent;}if(title!==null){this.outlineData['Title']=new String(title);}this.dictionary=this.document.ref(this.outlineData);this.children=[];}addItem(title,options){if(options===void 0){options={expanded:false};}const result=new PDFOutline(this.document,this.dictionary,title,this.document.page,options);this.children.push(result);return result;}endOutline(){if(this.children.length>0){if(this.options.expanded){this.outlineData.Count=this.children.length;}const first=this.children[0],last=this.children[this.children.length-1];this.outlineData.First=first.dictionary;this.outlineData.Last=last.dictionary;for(let i=0,len=this.children.length;i<len;i++){const child=this.children[i];if(i>0){child.outlineData.Prev=this.children[i-1].dictionary;}if(i<this.children.length-1){child.outlineData.Next=this.children[i+1].dictionary;}child.endOutline();}}return this.dictionary.end();}}var OutlineMixin={initOutline(){return this.outline=new PDFOutline(this,null,null,null);},endOutline(){this.outline.endOutline();if(this.outline.children.length>0){this._root.data.Outlines=this.outline.dictionary;return this._root.data.PageMode='UseOutlines';}}};/*
PDFStructureContent - a reference to a marked structure content
By Ben Schmidt
*/class PDFStructureContent{constructor(pageRef,mcid){this.refs=[{pageRef,mcid}];}push(structContent){structContent.refs.forEach(ref=>this.refs.push(ref));}}/*
PDFStructureElement - represents an element in the PDF logical structure tree
By Ben Schmidt
*/class PDFStructureElement{constructor(document,type,options,children){if(options===void 0){options={};}if(children===void 0){children=null;}this.document=document;this._attached=false;this._ended=false;this._flushed=false;this.dictionary=document.ref({// Type: "StructElem",
S:type});const data=this.dictionary.data;if(Array.isArray(options)||this._isValidChild(options)){children=options;options={};}if(typeof options.title!=='undefined'){data.T=new String(options.title);}if(typeof options.lang!=='undefined'){data.Lang=new String(options.lang);}if(typeof options.alt!=='undefined'){data.Alt=new String(options.alt);}if(typeof options.expanded!=='undefined'){data.E=new String(options.expanded);}if(typeof options.actual!=='undefined'){data.ActualText=new String(options.actual);}this._children=[];if(children){if(!Array.isArray(children)){children=[children];}children.forEach(child=>this.add(child));this.end();}}add(child){if(this._ended){throw new Error(`Cannot add child to already-ended structure element`);}if(!this._isValidChild(child)){throw new Error(`Invalid structure element child`);}if(child instanceof PDFStructureElement){child.setParent(this.dictionary);if(this._attached){child.setAttached();}}if(child instanceof PDFStructureContent){this._addContentToParentTree(child);}if(typeof child==='function'&&this._attached){// _contentForClosure() adds the content to the parent tree
child=this._contentForClosure(child);}this._children.push(child);return this;}_addContentToParentTree(content){content.refs.forEach(_ref=>{let{pageRef,mcid}=_ref;const pageStructParents=this.document.getStructParentTree().get(pageRef.data.StructParents);pageStructParents[mcid]=this.dictionary;});}setParent(parentRef){if(this.dictionary.data.P){throw new Error(`Structure element added to more than one parent`);}this.dictionary.data.P=parentRef;this._flush();}setAttached(){if(this._attached){return;}this._children.forEach((child,index)=>{if(child instanceof PDFStructureElement){child.setAttached();}if(typeof child==='function'){this._children[index]=this._contentForClosure(child);}});this._attached=true;this._flush();}end(){if(this._ended){return;}this._children.filter(child=>child instanceof PDFStructureElement).forEach(child=>child.end());this._ended=true;this._flush();}_isValidChild(child){return child instanceof PDFStructureElement||child instanceof PDFStructureContent||typeof child==='function';}_contentForClosure(closure){const content=this.document.markStructureContent(this.dictionary.data.S);closure();this.document.endMarkedContent();this._addContentToParentTree(content);return content;}_isFlushable(){if(!this.dictionary.data.P||!this._ended){return false;}return this._children.every(child=>{if(typeof child==='function'){return false;}if(child instanceof PDFStructureElement){return child._isFlushable();}return true;});}_flush(){if(this._flushed||!this._isFlushable()){return;}this.dictionary.data.K=[];this._children.forEach(child=>this._flushChild(child));this.dictionary.end();// free memory used by children; the dictionary itself may still be
// referenced by a parent structure element or root, but we can
// at least trim the tree here
this._children=[];this.dictionary.data.K=null;this._flushed=true;}_flushChild(child){if(child instanceof PDFStructureElement){this.dictionary.data.K.push(child.dictionary);}if(child instanceof PDFStructureContent){child.refs.forEach(_ref2=>{let{pageRef,mcid}=_ref2;if(!this.dictionary.data.Pg){this.dictionary.data.Pg=pageRef;}if(this.dictionary.data.Pg===pageRef){this.dictionary.data.K.push(mcid);}else{this.dictionary.data.K.push({Type:'MCR',Pg:pageRef,MCID:mcid});}});}}}/*
PDFNumberTree - represents a number tree object
*/class PDFNumberTree extends PDFTree{_compareKeys(a,b){return parseInt(a)-parseInt(b);}_keysName(){return'Nums';}_dataForKey(k){return parseInt(k);}}/*
Markings mixin - support marked content sequences in content streams
By Ben Schmidt
*/var MarkingsMixin={initMarkings(options){this.structChildren=[];if(options.tagged){this.getMarkInfoDictionary().data.Marked=true;this.getStructTreeRoot();}},markContent(tag,options){if(options===void 0){options=null;}if(tag==='Artifact'||options&&options.mcid){let toClose=0;this.page.markings.forEach(marking=>{if(toClose||marking.structContent||marking.tag==='Artifact'){toClose++;}});while(toClose--){this.endMarkedContent();}}if(!options){this.page.markings.push({tag});this.addContent(`/${tag} BMC`);return this;}this.page.markings.push({tag,options});const dictionary={};if(typeof options.mcid!=='undefined'){dictionary.MCID=options.mcid;}if(tag==='Artifact'){if(typeof options.type==='string'){dictionary.Type=options.type;}if(Array.isArray(options.bbox)){dictionary.BBox=[options.bbox[0],this.page.height-options.bbox[3],options.bbox[2],this.page.height-options.bbox[1]];}if(Array.isArray(options.attached)&&options.attached.every(val=>typeof val==='string')){dictionary.Attached=options.attached;}}if(tag==='Span'){if(options.lang){dictionary.Lang=new String(options.lang);}if(options.alt){dictionary.Alt=new String(options.alt);}if(options.expanded){dictionary.E=new String(options.expanded);}if(options.actual){dictionary.ActualText=new String(options.actual);}}this.addContent(`/${tag} ${PDFObject$1.convert(dictionary)} BDC`);return this;},markStructureContent(tag,options){if(options===void 0){options={};}const pageStructParents=this.getStructParentTree().get(this.page.structParentTreeKey);const mcid=pageStructParents.length;pageStructParents.push(null);this.markContent(tag,{...options,mcid});const structContent=new PDFStructureContent(this.page.dictionary,mcid);this.page.markings.slice(-1)[0].structContent=structContent;return structContent;},endMarkedContent(){this.page.markings.pop();this.addContent('EMC');return this;},struct(type,options,children){if(options===void 0){options={};}if(children===void 0){children=null;}return new PDFStructureElement(this,type,options,children);},addStructure(structElem){const structTreeRoot=this.getStructTreeRoot();structElem.setParent(structTreeRoot);structElem.setAttached();this.structChildren.push(structElem);if(!structTreeRoot.data.K){structTreeRoot.data.K=[];}structTreeRoot.data.K.push(structElem.dictionary);return this;},initPageMarkings(pageMarkings){pageMarkings.forEach(marking=>{if(marking.structContent){const structContent=marking.structContent;const newStructContent=this.markStructureContent(marking.tag,marking.options);structContent.push(newStructContent);this.page.markings.slice(-1)[0].structContent=structContent;}else{this.markContent(marking.tag,marking.options);}});},endPageMarkings(page){const pageMarkings=page.markings;pageMarkings.forEach(()=>page.write('EMC'));page.markings=[];return pageMarkings;},getMarkInfoDictionary(){if(!this._root.data.MarkInfo){this._root.data.MarkInfo=this.ref({});}return this._root.data.MarkInfo;},getStructTreeRoot(){if(!this._root.data.StructTreeRoot){this._root.data.StructTreeRoot=this.ref({Type:'StructTreeRoot',ParentTree:new PDFNumberTree(),ParentTreeNextKey:0});}return this._root.data.StructTreeRoot;},getStructParentTree(){return this.getStructTreeRoot().data.ParentTree;},createStructParentTreeNextKey(){// initialise the MarkInfo dictionary
this.getMarkInfoDictionary();const structTreeRoot=this.getStructTreeRoot();const key=structTreeRoot.data.ParentTreeNextKey++;structTreeRoot.data.ParentTree.add(key,[]);return key;},endMarkings(){const structTreeRoot=this._root.data.StructTreeRoot;if(structTreeRoot){structTreeRoot.end();this.structChildren.forEach(structElem=>structElem.end());}if(this._root.data.MarkInfo){this._root.data.MarkInfo.end();}}};const FIELD_FLAGS={readOnly:1,required:2,noExport:4,multiline:0x1000,password:0x2000,toggleToOffButton:0x4000,radioButton:0x8000,pushButton:0x10000,combo:0x20000,edit:0x40000,sort:0x80000,multiSelect:0x200000,noSpell:0x400000};const FIELD_JUSTIFY={left:0,center:1,right:2};const VALUE_MAP={value:'V',defaultValue:'DV'};const FORMAT_SPECIAL={zip:'0',zipPlus4:'1',zip4:'1',phone:'2',ssn:'3'};const FORMAT_DEFAULT={number:{nDec:0,sepComma:false,negStyle:'MinusBlack',currency:'',currencyPrepend:true},percent:{nDec:0,sepComma:false}};var AcroFormMixin={/**
   * Must call if adding AcroForms to a document. Must also call font() before
   * this method to set the default font.
   */initForm(){if(!this._font){throw new Error('Must set a font before calling initForm method');}this._acroform={fonts:{},defaultFont:this._font.name};this._acroform.fonts[this._font.id]=this._font.ref();let data={Fields:[],NeedAppearances:true,DA:new String(`/${this._font.id} 0 Tf 0 g`),DR:{Font:{}}};data.DR.Font[this._font.id]=this._font.ref();const AcroForm=this.ref(data);this._root.data.AcroForm=AcroForm;return this;},/**
   * Called automatically by document.js
   */endAcroForm(){if(this._root.data.AcroForm){if(!Object.keys(this._acroform.fonts).length&&!this._acroform.defaultFont){throw new Error('No fonts specified for PDF form');}let fontDict=this._root.data.AcroForm.data.DR.Font;Object.keys(this._acroform.fonts).forEach(name=>{fontDict[name]=this._acroform.fonts[name];});this._root.data.AcroForm.data.Fields.forEach(fieldRef=>{this._endChild(fieldRef);});this._root.data.AcroForm.end();}return this;},_endChild(ref){if(Array.isArray(ref.data.Kids)){ref.data.Kids.forEach(childRef=>{this._endChild(childRef);});ref.end();}return this;},/**
   * Creates and adds a form field to the document. Form fields are intermediate
   * nodes in a PDF form that are used to specify form name heirarchy and form
   * value defaults.
   * @param {string} name - field name (T attribute in field dictionary)
   * @param {object} options  - other attributes to include in field dictionary
   */formField(name,options){if(options===void 0){options={};}let fieldDict=this._fieldDict(name,null,options);let fieldRef=this.ref(fieldDict);this._addToParent(fieldRef);return fieldRef;},/**
   * Creates and adds a Form Annotation to the document. Form annotations are
   * called Widget annotations internally within a PDF file.
   * @param {string} name - form field name (T attribute of widget annotation
   * dictionary)
   * @param {number} x
   * @param {number} y
   * @param {number} w
   * @param {number} h
   * @param {object} options
   */formAnnotation(name,type,x,y,w,h,options){if(options===void 0){options={};}let fieldDict=this._fieldDict(name,type,options);fieldDict.Subtype='Widget';if(fieldDict.F===undefined){fieldDict.F=4;// print the annotation
}// Add Field annot to page, and get it's ref
this.annotate(x,y,w,h,fieldDict);let annotRef=this.page.annotations[this.page.annotations.length-1];return this._addToParent(annotRef);},formText(name,x,y,w,h,options){if(options===void 0){options={};}return this.formAnnotation(name,'text',x,y,w,h,options);},formPushButton(name,x,y,w,h,options){if(options===void 0){options={};}return this.formAnnotation(name,'pushButton',x,y,w,h,options);},formCombo(name,x,y,w,h,options){if(options===void 0){options={};}return this.formAnnotation(name,'combo',x,y,w,h,options);},formList(name,x,y,w,h,options){if(options===void 0){options={};}return this.formAnnotation(name,'list',x,y,w,h,options);},formRadioButton(name,x,y,w,h,options){if(options===void 0){options={};}return this.formAnnotation(name,'radioButton',x,y,w,h,options);},formCheckbox(name,x,y,w,h,options){if(options===void 0){options={};}return this.formAnnotation(name,'checkbox',x,y,w,h,options);},_addToParent(fieldRef){let parent=fieldRef.data.Parent;if(parent){if(!parent.data.Kids){parent.data.Kids=[];}parent.data.Kids.push(fieldRef);}else{this._root.data.AcroForm.data.Fields.push(fieldRef);}return this;},_fieldDict(name,type,options){if(options===void 0){options={};}if(!this._acroform){throw new Error('Call document.initForms() method before adding form elements to document');}let opts=Object.assign({},options);if(type!==null){opts=this._resolveType(type,options);}opts=this._resolveFlags(opts);opts=this._resolveJustify(opts);opts=this._resolveFont(opts);opts=this._resolveStrings(opts);opts=this._resolveColors(opts);opts=this._resolveFormat(opts);opts.T=new String(name);if(opts.parent){opts.Parent=opts.parent;delete opts.parent;}return opts;},_resolveType(type,opts){if(type==='text'){opts.FT='Tx';}else if(type==='pushButton'){opts.FT='Btn';opts.pushButton=true;}else if(type==='radioButton'){opts.FT='Btn';opts.radioButton=true;}else if(type==='checkbox'){opts.FT='Btn';}else if(type==='combo'){opts.FT='Ch';opts.combo=true;}else if(type==='list'){opts.FT='Ch';}else{throw new Error(`Invalid form annotation type '${type}'`);}return opts;},_resolveFormat(opts){const f=opts.format;if(f&&f.type){let fnKeystroke;let fnFormat;let params='';if(FORMAT_SPECIAL[f.type]!==undefined){fnKeystroke=`AFSpecial_Keystroke`;fnFormat=`AFSpecial_Format`;params=FORMAT_SPECIAL[f.type];}else{let format=f.type.charAt(0).toUpperCase()+f.type.slice(1);fnKeystroke=`AF${format}_Keystroke`;fnFormat=`AF${format}_Format`;if(f.type==='date'){fnKeystroke+='Ex';params=String(f.param);}else if(f.type==='time'){params=String(f.param);}else if(f.type==='number'){let p=Object.assign({},FORMAT_DEFAULT.number,f);params=String([String(p.nDec),p.sepComma?'0':'1','"'+p.negStyle+'"','null','"'+p.currency+'"',String(p.currencyPrepend)].join(','));}else if(f.type==='percent'){let p=Object.assign({},FORMAT_DEFAULT.percent,f);params=String([String(p.nDec),p.sepComma?'0':'1'].join(','));}}opts.AA=opts.AA?opts.AA:{};opts.AA.K={S:'JavaScript',JS:new String(`${fnKeystroke}(${params});`)};opts.AA.F={S:'JavaScript',JS:new String(`${fnFormat}(${params});`)};}delete opts.format;return opts;},_resolveColors(opts){let color=this._normalizeColor(opts.backgroundColor);if(color){if(!opts.MK){opts.MK={};}opts.MK.BG=color;}color=this._normalizeColor(opts.borderColor);if(color){if(!opts.MK){opts.MK={};}opts.MK.BC=color;}delete opts.backgroundColor;delete opts.borderColor;return opts;},_resolveFlags(options){let result=0;Object.keys(options).forEach(key=>{if(FIELD_FLAGS[key]){result|=FIELD_FLAGS[key];delete options[key];}});if(result!==0){options.Ff=options.Ff?options.Ff:0;options.Ff|=result;}return options;},_resolveJustify(options){let result=0;if(options.align!==undefined){if(typeof FIELD_JUSTIFY[options.align]==='number'){result=FIELD_JUSTIFY[options.align];}delete options.align;}if(result!==0){options.Q=result;// default
}return options;},_resolveFont(options){// add current font to document-level AcroForm dict if necessary
if(this._acroform.fonts[this._font.id]===null){this._acroform.fonts[this._font.id]=this._font.ref();}// add current font to field's resource dict (RD) if not the default acroform font
if(this._acroform.defaultFont!==this._font.name){options.DR={Font:{}};// Get the fontSize option. If not set use auto sizing
const fontSize=options.fontSize||0;options.DR.Font[this._font.id]=this._font.ref();options.DA=new String(`/${this._font.id} ${fontSize} Tf 0 g`);}return options;},_resolveStrings(options){let select=[];function appendChoices(a){if(Array.isArray(a)){for(let idx=0;idx<a.length;idx++){if(typeof a[idx]==='string'){select.push(new String(a[idx]));}else{select.push(a[idx]);}}}}appendChoices(options.Opt);if(options.select){appendChoices(options.select);delete options.select;}if(select.length){options.Opt=select;}Object.keys(VALUE_MAP).forEach(key=>{if(options[key]!==undefined){options[VALUE_MAP[key]]=options[key];delete options[key];}});['V','DV'].forEach(key=>{if(typeof options[key]==='string'){options[key]=new String(options[key]);}});if(options.MK&&options.MK.CA){options.MK.CA=new String(options.MK.CA);}if(options.label){options.MK=options.MK?options.MK:{};options.MK.CA=new String(options.label);delete options.label;}return options;}};var AttachmentsMixin={/**
   * Embed contents of `src` in PDF
   * @param {Buffer | ArrayBuffer | string} src input Buffer, ArrayBuffer, base64 encoded string or path to file
   * @param {object} options
   *  * options.name: filename to be shown in PDF, will use `src` if none set
   *  * options.type: filetype to be shown in PDF
   *  * options.description: description to be shown in PDF
   *  * options.hidden: if true, do not add attachment to EmbeddedFiles dictionary. Useful for file attachment annotations
   *  * options.creationDate: override creation date
   *  * options.modifiedDate: override modified date
   * @returns filespec reference
   */file(src,options){if(options===void 0){options={};}options.name=options.name||src;const refBody={Type:'EmbeddedFile',Params:{}};let data;if(!src){throw new Error('No src specified');}if(Buffer$2.isBuffer(src)){data=src;}else if(src instanceof ArrayBuffer){data=Buffer$2.from(new Uint8Array(src));}else{let match;if(match=/^data:(.*);base64,(.*)$/.exec(src)){if(match[1]){refBody.Subtype=match[1].replace('/','#2F');}data=Buffer$2.from(match[2],'base64');}else{throw new Error(`Could not find file ${src}`);}}// override creation date and modified date
if(options.creationDate instanceof Date){refBody.Params.CreationDate=options.creationDate;}if(options.modifiedDate instanceof Date){refBody.Params.ModDate=options.modifiedDate;}// add optional subtype
if(options.type){refBody.Subtype=options.type.replace('/','#2F');}// add checksum and size information
const checksum=md5(core.lib.WordArray.create(new Uint8Array(data)));refBody.Params.CheckSum=new String(checksum);refBody.Params.Size=data.byteLength;// save some space when embedding the same file again
// if a file with the same name and metadata exists, reuse its reference
let ref;if(!this._fileRegistry)this._fileRegistry={};let file=this._fileRegistry[options.name];if(file&&isEqual(refBody,file)){ref=file.ref;}else{ref=this.ref(refBody);ref.end(data);this._fileRegistry[options.name]={...refBody,ref};}// add filespec for embedded file
const fileSpecBody={Type:'Filespec',F:new String(options.name),EF:{F:ref},UF:new String(options.name)};if(options.description){fileSpecBody.Desc=new String(options.description);}const filespec=this.ref(fileSpecBody);filespec.end();if(!options.hidden){this.addNamedEmbeddedFile(options.name,filespec);}return filespec;}};/** check two embedded file metadata objects for equality */function isEqual(a,b){return a.Subtype===b.Subtype&&a.Params.CheckSum.toString()===b.Params.CheckSum.toString()&&a.Params.Size===b.Params.Size&&a.Params.CreationDate===b.Params.CreationDate&&a.Params.ModDate===b.Params.ModDate;}class PDFMetadata{constructor(){this._metadata=`
        <?xpacket begin="\ufeff" id="W5M0MpCehiHzreSzNTczkc9d"?>
            <x:xmpmeta xmlns:x="adobe:ns:meta/">
                <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
        `;}_closeTags(){this._metadata=this._metadata.concat(`
                </rdf:RDF>
            </x:xmpmeta>
        <?xpacket end="w"?>
        `);}append(xml,newline){if(newline===void 0){newline=true;}this._metadata=this._metadata.concat(xml);if(newline)this._metadata=this._metadata.concat('\n');}getXML(){return this._metadata;}getLength(){return this._metadata.length;}end(){this._closeTags();this._metadata=this._metadata.trim();}}var MetadataMixin={initMetadata(){this.metadata=new PDFMetadata();},appendXML(xml,newline){if(newline===void 0){newline=true;}this.metadata.append(xml,newline);},_addInfo(){this.appendXML(`
        <rdf:Description rdf:about="" xmlns:xmp="http://ns.adobe.com/xap/1.0/">
            <xmp:CreateDate>${this.info.CreationDate.toISOString().split('.')[0]+'Z'}</xmp:CreateDate>
            <xmp:CreatorTool>${this.info.Creator}</xmp:CreatorTool>
        </rdf:Description>
        `);if(this.info.Title||this.info.Author||this.info.Subject){this.appendXML(`
            <rdf:Description rdf:about="" xmlns:dc="http://purl.org/dc/elements/1.1/">
            `);if(this.info.Title){this.appendXML(`
                <dc:title>
                    <rdf:Alt>
                        <rdf:li xml:lang="x-default">${this.info.Title}</rdf:li>
                    </rdf:Alt>
                </dc:title>
                `);}if(this.info.Author){this.appendXML(`
                <dc:creator>
                    <rdf:Seq>
                        <rdf:li>${this.info.Author}</rdf:li>
                    </rdf:Seq>
                </dc:creator>
                `);}if(this.info.Subject){this.appendXML(`
                <dc:description>
                    <rdf:Alt>
                        <rdf:li xml:lang="x-default">${this.info.Subject}</rdf:li>
                    </rdf:Alt>
                </dc:description>
                `);}this.appendXML(`
            </rdf:Description>
            `);}this.appendXML(`
        <rdf:Description rdf:about="" xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
            <pdf:Producer>${this.info.Creator}</pdf:Producer>`,false);if(this.info.Keywords){this.appendXML(`
            <pdf:Keywords>${this.info.Keywords}</pdf:Keywords>`,false);}this.appendXML(`
        </rdf:Description>
        `);},endMetadata(){this._addInfo();this.metadata.end();/*
        Metadata was introduced in PDF 1.4, so adding it to 1.3
        will likely only take up more space.
        */if(this.version!=1.3){this.metadataRef=this.ref({length:this.metadata.getLength(),Type:'Metadata',Subtype:'XML'});this.metadataRef.compress=false;this.metadataRef.write(Buffer$2.from(this.metadata.getXML(),'utf-8'));this.metadataRef.end();this._root.data.Metadata=this.metadataRef;}}};const pdfkit_browser_capitalize=v=>v[0].toUpperCase()+v.slice(1);class PDFDocument extends stream.Readable{constructor(options){if(options===void 0){options={};}super();this.options=options;// PDF version
switch(options.pdfVersion){case'1.4':this.version=1.4;break;case'1.5':this.version=1.5;break;case'1.6':this.version=1.6;break;case'1.7':case'1.7ext3':this.version=1.7;break;default:this.version=1.3;break;}// Whether streams should be compressed
this.compress=this.options.compress!=null?this.options.compress:true;this._pageBuffer=[];this._pageBufferStart=0;// The PDF object store
this._offsets=[];this._waiting=0;this._ended=false;this._offset=0;const Pages=this.ref({Type:'Pages',Count:0,Kids:[]});const Names=this.ref({Dests:new PDFNameTree()});this._root=this.ref({Type:'Catalog',Pages,Names});if(this.options.lang){this._root.data.Lang=new String(this.options.lang);}if(this.options.pageLayout){this._root.data.PageLayout=pdfkit_browser_capitalize(this.options.pageLayout);}if(this.options.pageMode){this._root.data.PageMode=pdfkit_browser_capitalize(this.options.pageMode);}// The current page
this.page=null;// Initialize mixins
this.initColor();this.initVector();this.initFonts();this.initText();this.initImages();this.initOutline();// this.initMarkings(options)
// Initialize the metadata
this.info={Producer:'PDFKit',Creator:'PDFKit',CreationDate:new Date()};if(this.options.info){for(let key in this.options.info){const val=this.options.info[key];this.info[key]=val;}}if(this.options.displayTitle){this._root.data.ViewerPreferences=this.ref({DisplayDocTitle:true});}// Generate file ID
this._id=PDFSecurity.generateFileID(this.info);// Initialize security settings
// this._security = PDFSecurity.create(this, options);
// Write the header PDF version
this._write(`%PDF-${this.version}`);// 4 binary chars, as recommended by the spec
this._write('%\xFF\xFF\xFF\xFF');// Add the first page
if(this.options.autoFirstPage!==false){this.addPage();}}addPage(options){// end the current page if needed
if(options==null){({options}=this);}// end the current page if needed
if(!this.options.bufferPages){this.flushPages();}// create a page object
this.page=new PDFPage(this,options);this._pageBuffer.push(this.page);// add the page to the object store
const pages=this._root.data.Pages.data;pages.Kids.push(this.page.dictionary);pages.Count++;// flip PDF coordinate system so that the origin is in
// the top left rather than the bottom left
this._ctm=[1,0,0,1,0,0];this.transform(1,0,0,-1,0,this.page.height);// this.emit('pageAdded');
return this;}flushPages(){// this local variable exists so we're future-proof against
// reentrant calls to flushPages.
const pages=this._pageBuffer;this._pageBuffer=[];this._pageBufferStart+=pages.length;for(let page of Array.from(pages)){// this.endPageMarkings(page);
page.end();}}addNamedDestination(name){for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}if(args.length===0){args=['XYZ',null,null,null];}if(args[0]==='XYZ'&&args[2]!==null){args[2]=this.page.height-args[2];}args.unshift(this.page.dictionary);this._root.data.Names.data.Dests.add(name,args);}addNamedEmbeddedFile(name,ref){if(!this._root.data.Names.data.EmbeddedFiles){// disabling /Limits for this tree fixes attachments not showing in Adobe Reader
this._root.data.Names.data.EmbeddedFiles=new PDFNameTree({limits:false});}// add filespec to EmbeddedFiles
this._root.data.Names.data.EmbeddedFiles.add(name,ref);}addNamedJavaScript(name,js){if(!this._root.data.Names.data.JavaScript){this._root.data.Names.data.JavaScript=new PDFNameTree();}let data={JS:new String(js),S:'JavaScript'};this._root.data.Names.data.JavaScript.add(name,data);}ref(data){const ref=new PDFReference(this,this._offsets.length+1,data);this._offsets.push(null);// placeholder for this object's offset once it is finalized
this._waiting++;return ref;}_read(){// do nothing, but this method is required by node
}_write(data){if(!Buffer$2.isBuffer(data)){data=Buffer$2.from(data+'\n','binary');}this.push(data);return this._offset+=data.length;}addContent(data){this.page.write(data);return this;}_refEnd(ref){this._offsets[ref.id-1]=ref.offset;if(--this._waiting===0&&this._ended){this._finalize();return this._ended=false;}}end(){this.flushPages();this._info=this.ref();for(let key in this.info){let val=this.info[key];if(typeof val==='string'){val=new String(val);}let entry=this.ref(val);entry.end();this._info.data[key]=entry;}this._info.end();for(let name in this._fontFamilies){const font=this._fontFamilies[name];font.finalize();}this.endOutline();// this.endMarkings();
this._root.end();this._root.data.Pages.end();this._root.data.Names.end();this.endAcroForm();if(this._root.data.ViewerPreferences){this._root.data.ViewerPreferences.end();}// if (this._security) {
//   this._security.end();
// }
if(this._waiting===0){return this._finalize();}this._ended=true;}_finalize(){// generate xref
const xRefOffset=this._offset;this._write('xref');this._write(`0 ${this._offsets.length+1}`);this._write('0000000000 65535 f ');for(let offset of Array.from(this._offsets)){offset=`0000000000${offset}`.slice(-10);this._write(offset+' 00000 n ');}// trailer
const trailer={Size:this._offsets.length+1,Root:this._root,Info:this._info,ID:[this._id,this._id]};// if (this._security) {
//   trailer.Encrypt = this._security.dictionary;
// }
this._write('trailer');this._write(PDFObject$1.convert(trailer));this._write('startxref');this._write(`${xRefOffset}`);this._write('%%EOF');// end the stream
return this.push(null);}toString(){return'[object PDFDocument]';}initColor(){}initVector(){}initFonts(){}initText(){}initImages(){}initOutline(){}/**
   * @param {number} m11
   * @param {number} m12
   * @param {number} m21
   * @param {number} m22
   * @param {number} dx
   * @param {number} dy
   */// eslint-disable-next-line no-unused-vars
transform(m11,m12,m21,m22,dx,dy){}endOutline(){}endAcroForm(){}}const mixin=methods=>{Object.assign(PDFDocument.prototype,methods);};// Load mixins
mixin(MetadataMixin);mixin(ColorMixin);mixin(VectorMixin);mixin(FontsMixin);mixin(TextMixin);mixin(ImagesMixin);mixin(AnnotationsMixin);mixin(OutlineMixin);mixin(MarkingsMixin);mixin(AcroFormMixin);mixin(AttachmentsMixin);
// EXTERNAL MODULE: ./node_modules/postcss-value-parser/lib/parse.js
var lib_parse = __webpack_require__(8480);
// EXTERNAL MODULE: ./node_modules/postcss-value-parser/lib/unit.js
var unit = __webpack_require__(3517);
// EXTERNAL MODULE: ./node_modules/hsl-to-hex/index.js
var hsl_to_hex = __webpack_require__(1611);
// EXTERNAL MODULE: ./node_modules/media-engine/src/index.js
var media_engine_src = __webpack_require__(7216);
;// ./node_modules/@react-pdf/stylesheet/lib/index.js







// https://developer.mozilla.org/en-US/docs/Web/CSS/flex#values

// TODO: change flex defaults to [0, 1, 'auto'] as in spec in next major release
const flexDefaults = [1, 1, 0];
/**
 * @type {(number | 'auto')[]}
 */
const flexAuto = [1, 1, 'auto'];
const expandFlex = (key, value) => {
  /**
   * @type {(number | 'auto')[]}
   */
  let defaults = flexDefaults;
  let matches = [];
  if (value === 'auto') {
    defaults = flexAuto;
  } else {
    matches = `${value}`.split(' ');
  }
  const flexGrow = matches[0] || defaults[0];
  const flexShrink = matches[1] || defaults[1];
  const flexBasis = matches[2] || defaults[2];
  return {
    flexGrow,
    flexShrink,
    flexBasis
  };
};

/* eslint-disable no-plusplus */
// This file is ran directly with Node - needs to have .js extension
// eslint-disable-next-line import/extensions
const BOX_MODEL_UNITS = 'px,in,mm,cm,pt,%,vw,vh';
const logError = (style, value) => {
  console.error(`
    @react-pdf/stylesheet parsing error:

    ${style}: ${value},
    ${' '.repeat(style.length + 2)}^
    Unsupported ${style} value format
  `);
};

/**
 * @param {Object} options
 * @param {Function} [options.expandsTo]
 * @param {number} [options.maxValues]
 * @param {boolean} [options.autoSupported]
 */
const expandBoxModel = function (_temp) {
  let {
    expandsTo,
    maxValues = 1,
    autoSupported = false
  } = _temp === void 0 ? {} : _temp;
  return (model, value) => {
    const nodes = lib_parse(`${value}`);
    const parts = [];
    for (let i = 0; i < nodes.length; i++) {
      const node = nodes[i];

      // value contains `calc`, `url` or other css function
      // `,`, `/` or strings that unsupported by margin and padding
      if (node.type === 'function' || node.type === 'string' || node.type === 'div') {
        logError(model, value);
        return {};
      }
      if (node.type === 'word') {
        if (node.value === 'auto' && autoSupported) {
          parts.push(node.value);
        } else {
          const result = unit(node.value);

          // when unit isn't specified this condition is true
          if (result && BOX_MODEL_UNITS.includes(result.unit)) {
            parts.push(node.value);
          } else {
            logError(model, value);
            return {};
          }
        }
      }
    }

    // checks that we have enough parsed values
    if (parts.length > maxValues) {
      logError(model, value);
      return {};
    }
    const first = parts[0];
    if (expandsTo) {
      const second = parts[1] || parts[0];
      const third = parts[2] || parts[0];
      const fourth = parts[3] || parts[1] || parts[0];
      return expandsTo({
        first,
        second,
        third,
        fourth
      });
    }
    return {
      [model]: first
    };
  };
};
const processMargin = expandBoxModel({
  expandsTo: _ref => {
    let {
      first,
      second,
      third,
      fourth
    } = _ref;
    return {
      marginTop: first,
      marginRight: second,
      marginBottom: third,
      marginLeft: fourth
    };
  },
  maxValues: 4,
  autoSupported: true
});
const processMarginVertical = expandBoxModel({
  expandsTo: _ref2 => {
    let {
      first,
      second
    } = _ref2;
    return {
      marginTop: first,
      marginBottom: second
    };
  },
  maxValues: 2,
  autoSupported: true
});
const processMarginHorizontal = expandBoxModel({
  expandsTo: _ref3 => {
    let {
      first,
      second
    } = _ref3;
    return {
      marginRight: first,
      marginLeft: second
    };
  },
  maxValues: 2,
  autoSupported: true
});
const processMarginSingle = expandBoxModel({
  autoSupported: true
});
const BORDER_SHORTHAND_REGEX = /(-?\d+(\.\d+)?(px|in|mm|cm|pt|vw|vh|px)?)\s(\S+)\s(.+)/;
const matchBorderShorthand = value => value.match(BORDER_SHORTHAND_REGEX) || [];
const expandBorders = (key, value) => {
  const match = matchBorderShorthand(`${value}`);
  if (match) {
    const color = match[5] || value;
    const style = match[4] || value;
    const width = match[1] || value;
    if (key.match(/(Top|Right|Bottom|Left)$/)) {
      return {
        [`${key}Color`]: color,
        [`${key}Style`]: style,
        [`${key}Width`]: width
      };
    }
    if (key.match(/Color$/)) {
      return {
        borderTopColor: color,
        borderRightColor: color,
        borderBottomColor: color,
        borderLeftColor: color
      };
    }
    if (key.match(/Style$/)) {
      return {
        borderTopStyle: style,
        borderRightStyle: style,
        borderBottomStyle: style,
        borderLeftStyle: style
      };
    }
    if (key.match(/Width$/)) {
      return {
        borderTopWidth: width,
        borderRightWidth: width,
        borderBottomWidth: width,
        borderLeftWidth: width
      };
    }
    if (key.match(/Radius$/)) {
      return {
        borderTopLeftRadius: value,
        borderTopRightRadius: value,
        borderBottomRightRadius: value,
        borderBottomLeftRadius: value
      };
    }
    return {
      borderTopColor: color,
      borderTopStyle: style,
      borderTopWidth: width,
      borderRightColor: color,
      borderRightStyle: style,
      borderRightWidth: width,
      borderBottomColor: color,
      borderBottomStyle: style,
      borderBottomWidth: width,
      borderLeftColor: color,
      borderLeftStyle: style,
      borderLeftWidth: width
    };
  }
  return value;
};
const processPadding = expandBoxModel({
  expandsTo: _ref => {
    let {
      first,
      second,
      third,
      fourth
    } = _ref;
    return {
      paddingTop: first,
      paddingRight: second,
      paddingBottom: third,
      paddingLeft: fourth
    };
  },
  maxValues: 4
});
const processPaddingVertical = expandBoxModel({
  expandsTo: _ref2 => {
    let {
      first,
      second
    } = _ref2;
    return {
      paddingTop: first,
      paddingBottom: second
    };
  },
  maxValues: 2
});
const processPaddingHorizontal = expandBoxModel({
  expandsTo: _ref3 => {
    let {
      first,
      second
    } = _ref3;
    return {
      paddingRight: first,
      paddingLeft: second
    };
  },
  maxValues: 2
});
const processPaddingSingle = expandBoxModel();
const expandObjectPosition = (key, value) => {
  const match = `${value}`.split(' ');
  return {
    objectPositionX: (match === null || match === void 0 ? void 0 : match[0]) || value,
    objectPositionY: (match === null || match === void 0 ? void 0 : match[1]) || value
  };
};
const Y_AXIS_SHORTHANDS = {
  top: true,
  bottom: true
};
const sortTransformOriginPair = (a, b) => {
  if (Y_AXIS_SHORTHANDS[a]) return 1;
  if (Y_AXIS_SHORTHANDS[b]) return -1;
  return 0;
};
const getTransformOriginPair = values => {
  if (!values || values.length === 0) return ['center', 'center'];
  const pair = values.length === 1 ? [values[0], 'center'] : values;
  return pair.sort(sortTransformOriginPair);
};

// Transforms shorthand transformOrigin values
const expandTransformOrigin = (key, value) => {
  const match = `${value}`.split(' ');
  const pair = getTransformOriginPair(match);
  return {
    transformOriginX: pair[0],
    transformOriginY: pair[1]
  };
};
const expandGap = (key, value) => {
  const match = `${value}`.split(' ');
  return {
    rowGap: (match === null || match === void 0 ? void 0 : match[0]) || value,
    columnGap: (match === null || match === void 0 ? void 0 : match[1]) || value
  };
};
const shorthands = {
  flex: expandFlex,
  gap: expandGap,
  margin: processMargin,
  marginHorizontal: processMarginHorizontal,
  marginVertical: processMarginVertical,
  marginTop: processMarginSingle,
  marginRight: processMarginSingle,
  marginBottom: processMarginSingle,
  marginLeft: processMarginSingle,
  padding: processPadding,
  paddingHorizontal: processPaddingHorizontal,
  paddingVertical: processPaddingVertical,
  paddingTop: processPaddingSingle,
  paddingRight: processPaddingSingle,
  paddingBottom: processPaddingSingle,
  paddingLeft: processPaddingSingle,
  border: expandBorders,
  borderTop: expandBorders,
  borderRight: expandBorders,
  borderBottom: expandBorders,
  borderLeft: expandBorders,
  borderColor: expandBorders,
  borderRadius: expandBorders,
  borderStyle: expandBorders,
  borderWidth: expandBorders,
  objectPosition: expandObjectPosition,
  transformOrigin: expandTransformOrigin
};

/**
 * Transforms style key-value
 *
 * @param {string} key style key
 * @param {string} value style value
 * @returns {string | Number} transformed style values
 */
const expandStyle = (key, value) => {
  return shorthands[key] ? shorthands[key](key, value) : {
    [key]: value
  };
};

/**
 * Expand the shorthand properties.
 *
 * @param {Object} style object
 * @returns {Object} expanded style object
 */
const expand = style => {
  if (!style) return style;
  const propsArray = Object.keys(style);
  const resolvedStyle = {};
  for (let i = 0; i < propsArray.length; i += 1) {
    const key = propsArray[i];
    const value = style[key];
    const extended = expandStyle(key, value);
    const keys = Object.keys(extended);
    for (let j = 0; j < keys.length; j += 1) {
      const propName = keys[j];
      const propValue = extended[propName];
      resolvedStyle[propName] = propValue;
    }
  }
  return resolvedStyle;
};

/**
 * Remove nil values from array
 *
 * @template T
 * @param {(T | null | undefined)[]} array
 * @returns {T[]} array without nils
 */
const compact = array => array.filter(Boolean);

/**
 * Merges style objects array
 *
 * @param {Object[]} styles style objects array
 * @returns {Object} merged style object
 */
const mergeStyles = styles => styles.reduce((acc, style) => {
  const s = Array.isArray(style) ? flatten(style) : style;
  Object.keys(s).forEach(key => {
    if (s[key] !== null && s[key] !== undefined) {
      acc[key] = s[key];
    }
  });
  return acc;
}, {});

/**
 * Flattens an array of style objects, into one aggregated style object.
 *
 * @param {Object[]} styles style objects array
 * @returns {Object} flattened style object
 */
const flatten = compose(mergeStyles, compact, castArray);

/**
 * Parses scalar value in value and unit pairs
 *
 * @param {string} value scalar value
 * @returns {Object} parsed value
 */
const parseValue = value => {
  const match = /^(-?\d*\.?\d+)(in|mm|cm|pt|vh|vw|px|rem)?$/g.exec(value);
  return match ? {
    value: parseFloat(match[1]),
    unit: match[2] || 'pt'
  } : {
    value,
    unit: undefined
  };
};

/**
 * Transform given scalar value
 *
 * @param {Object} container
 * @param {string} value styles value
 * @returns {Object} transformed value
 */
const transformUnit = (container, value) => {
  const scalar = parseValue(value);
  const dpi = 72; // Removed: container.dpi || 72
  const mmFactor = 1 / 25.4 * dpi;
  const cmFactor = 1 / 2.54 * dpi;
  switch (scalar.unit) {
    case 'rem':
      return scalar.value * (container.remBase || 18);
    case 'in':
      return scalar.value * dpi;
    case 'mm':
      return scalar.value * mmFactor;
    case 'cm':
      return scalar.value * cmFactor;
    case 'vh':
      return scalar.value * (container.height / 100);
    case 'vw':
      return scalar.value * (container.width / 100);
    default:
      return scalar.value;
  }
};
const isRgb = value => /rgba?/g.test(value);
const isHsl = value => /hsla?/g.test(value);

/**
 * Transform rgb color to hexa
 *
 * @param {string} value styles value
 * @returns {Object} transformed value
 */
const parseRgb = value => {
  const rgb = color_string.get.rgb(value);
  return color_string.to.hex(rgb);
};

/**
 * Transform Hsl color to hexa
 *
 * @param {string} value styles value
 * @returns {Object} transformed value
 */
const parseHsl = value => {
  const hsl = color_string.get.hsl(value).map(Math.round);
  const hex = hsl_to_hex(...hsl);
  return hex.toUpperCase();
};

/**
 * Transform given color to hexa
 *
 * @param {string} value styles value
 * @returns {Object} transformed value
 */
const transformColor = value => {
  if (isRgb(value)) return parseRgb(value);
  if (isHsl(value)) return parseHsl(value);
  return value;
};
const stylesheet_lib_parse = transformString => {
  const transforms = transformString.trim().split(/\)[ ,]|\)/);

  // Handle "initial", "inherit", "unset".
  if (transforms.length === 1) {
    return [[transforms[0], true]];
  }
  const parsed = [];
  for (let i = 0; i < transforms.length; i += 1) {
    const transform = transforms[i];
    if (transform) {
      const [name, rawValue] = transform.split('(');
      const splitChar = rawValue.indexOf(',') >= 0 ? ',' : ' ';
      const value = rawValue.split(splitChar).map(val => val.trim());
      parsed.push({
        operation: name.trim(),
        value
      });
    }
  }
  return parsed;
};
const parseAngle = value => {
  const unitsRegexp = /(-?\d*\.?\d*)(\w*)?/i;
  const [, angle, unit] = unitsRegexp.exec(value);
  const number = Number.parseFloat(angle);
  return unit === 'rad' ? number * 180 / Math.PI : number;
};
const normalizeTransformOperation = _ref => {
  let {
    operation,
    value
  } = _ref;
  switch (operation) {
    case 'scale':
      {
        const [scaleX, scaleY = scaleX] = value.map(num => Number.parseFloat(num));
        return {
          operation: 'scale',
          value: [scaleX, scaleY]
        };
      }
    case 'scaleX':
      {
        return {
          operation: 'scale',
          value: [Number.parseFloat(value), 1]
        };
      }
    case 'scaleY':
      {
        return {
          operation: 'scale',
          value: [1, Number.parseFloat(value)]
        };
      }
    case 'rotate':
      {
        return {
          operation: 'rotate',
          value: [parseAngle(value)]
        };
      }
    case 'translate':
      {
        return {
          operation: 'translate',
          value: value.map(num => Number.parseFloat(num))
        };
      }
    case 'translateX':
      {
        return {
          operation: 'translate',
          value: [Number.parseFloat(value), 0]
        };
      }
    case 'translateY':
      {
        return {
          operation: 'translate',
          value: [0, Number.parseFloat(value)]
        };
      }
    case 'skew':
      {
        return {
          operation: 'skew',
          value: value.map(parseAngle)
        };
      }
    case 'skewX':
      {
        return {
          operation: 'skew',
          value: [parseAngle(value), 0]
        };
      }
    case 'skewY':
      {
        return {
          operation: 'skew',
          value: [0, parseAngle(value)]
        };
      }
    default:
      {
        return {
          operation,
          value: value.map(num => Number.parseFloat(num))
        };
      }
  }
};
const normalize = operations => {
  return operations.map(operation => normalizeTransformOperation(operation));
};
const processTransform = value => {
  if (typeof value !== 'string') return value;
  return normalize(stylesheet_lib_parse(value));
};
const lib_FONT_WEIGHTS = {
  thin: 100,
  hairline: 100,
  ultralight: 200,
  extralight: 200,
  light: 300,
  normal: 400,
  medium: 500,
  semibold: 600,
  demibold: 600,
  bold: 700,
  ultrabold: 800,
  extrabold: 800,
  heavy: 900,
  black: 900
};
const processFontWeight = value => {
  if (!value) return lib_FONT_WEIGHTS.normal;
  if (typeof value === 'number') return value;
  const lv = value.toLowerCase();
  if (lib_FONT_WEIGHTS[lv]) return lib_FONT_WEIGHTS[lv];
  return value;
};

/* eslint-disable no-restricted-globals */

const processLineHeight = (value, styles) => {
  if (value === '') return value;
  const {
    fontSize = 18
  } = styles;

  // Percent values: use this number multiplied by the element's font size
  const {
    percent
  } = matchPercent(value) || {};
  if (percent) return percent * fontSize;

  // Unitless values: use this number multiplied by the element's font size
  return isNaN(value) ? value : value * fontSize;
};
const matchNumber = value => typeof value === 'string' && /^-?\d*\.?\d*$/.test(value);
const castFloat = value => {
  if (typeof value !== 'string') return value;
  if (matchNumber(value)) return parseFloat(value);
  return value;
};
const offsetKeyword = value => {
  switch (value) {
    case 'top':
    case 'left':
      return '0%';
    case 'right':
    case 'bottom':
      return '100%';
    case 'center':
      return '50%';
    default:
      return null;
  }
};
const transformObjectPosition = value => offsetKeyword(value) || castFloat(value);
const transformTransformOrigin = value => offsetKeyword(value) || castFloat(value);
const handlers = {
  transform: processTransform,
  fontWeight: processFontWeight,
  lineHeight: processLineHeight,
  objectPositionX: transformObjectPosition,
  objectPositionY: transformObjectPosition,
  transformOriginX: transformTransformOrigin,
  transformOriginY: transformTransformOrigin
};
const transformStyle = (key, value, styles, container) => {
  const result = handlers[key] ? handlers[key](value, styles) : value;
  return transformColor(transformUnit(container, castFloat(result)));
};

/**
 * @typedef {Function} Transform
 * @param {Object} style styles object
 * @returns {Object} transformed styles
 */

/**
 * Transform styles values
 *
 * @param {Object} container
 * @returns {Transform} transform function
 */
const transform = container => styles => {
  if (!styles) return styles;
  const propsArray = Object.keys(styles);
  const resolvedStyle = {};
  for (let i = 0; i < propsArray.length; i += 1) {
    const key = propsArray[i];
    const value = styles[key];
    const transformed = transformStyle(key, value, styles, container);
    resolvedStyle[key] = transformed;
  }
  return resolvedStyle;
};

/**
 * Resolves media queries in styles object
 *
 * @param {Object} container
 * @param {Object} styles object
 */
const resolveMediaQueries = (container, styles) => {
  return Object.keys(styles).reduce((acc, key) => {
    if (/@media/.test(key)) {
      return {
        ...acc,
        ...media_engine_src({
          [key]: styles[key]
        }, container)
      };
    }
    return {
      ...acc,
      [key]: styles[key]
    };
  }, {});
};

/**
 * Resolves styles
 *
 * @param {Object} container
 * @param {Object} style object
 * @returns {Object} resolved style object
 */
const resolveStyles = (container, style) => {
  const computeMediaQueries = value => resolveMediaQueries(container, value);
  return compose(transform(container), expand, computeMediaQueries, flatten)(style);
};

// EXTERNAL MODULE: ./node_modules/bidi-js/dist/bidi.mjs
var bidi = __webpack_require__(836);
// EXTERNAL MODULE: ./node_modules/unicode-properties/dist/module.mjs
var dist_module = __webpack_require__(1685);
// EXTERNAL MODULE: ./node_modules/hyphen/hyphen.js
var hyphen = __webpack_require__(5626);
// EXTERNAL MODULE: ./node_modules/hyphen/patterns/en-us.js
var en_us = __webpack_require__(4664);
;// ./node_modules/@react-pdf/textkit/lib/textkit.js






/**
 * @typedef {import('../types.js').AttributedString} AttributedString
 * @typedef {import('../types.js').Fragment} Fragment
 */

/**
 * Create attributed string from text fragments
 *
 * @param {Fragment[]} fragments fragments
 * @returns {AttributedString} attributed string
 */
const fromFragments = fragments => {
  let offset = 0;
  let string = '';
  const runs = [];
  fragments.forEach(fragment => {
    string += fragment.string;
    runs.push({
      ...fragment,
      start: offset,
      end: offset + fragment.string.length,
      attributes: fragment.attributes || {}
    });
    offset += fragment.string.length;
  });
  return {
    string,
    runs
  };
};

/**
 * @typedef {import('../types.js').AttributedString} AttributedString
 */

/**
 * Default word hyphenation engine used when no one provided.
 * Does not perform word hyphenation at all
 *
 * @param {string} word
 * @returns {[string]} same word
 */
const defaultHyphenationEngine = word => [word];

/**
 * Wrap words of attribute string
 *
 * @param {Object} engines layout engines
 * @param {Object} options layout options
 */
const wrapWords = function (engines, options) {
  if (engines === void 0) {
    engines = {};
  }
  if (options === void 0) {
    options = {};
  }
  /**
   * @param {AttributedString} attributedString attributed string
   * @returns {AttributedString} attributed string including syllables
   */
  return attributedString => {
    var _engines$wordHyphenat, _engines;
    const syllables = [];
    const fragments = [];
    const hyphenateWord = options.hyphenationCallback || ((_engines$wordHyphenat = (_engines = engines).wordHyphenation) === null || _engines$wordHyphenat === void 0 ? void 0 : _engines$wordHyphenat.call(_engines, options)) || defaultHyphenationEngine;
    for (let i = 0; i < attributedString.runs.length; i += 1) {
      let string = '';
      const run = attributedString.runs[i];
      const words = attributedString.string.slice(run.start, run.end).split(/([ ]+)/g).filter(Boolean);
      for (let j = 0; j < words.length; j += 1) {
        const word = words[j];
        const parts = hyphenateWord(word);
        syllables.push(...parts);
        string += parts.join('');
      }
      fragments.push({
        ...run,
        string
      });
    }
    return {
      ...fromFragments(fragments),
      syllables
    };
  };
};

/**
 * @typedef {import('../types.js').Rect} Rect
 */

/**
 * Clone rect
 *
 * @param {Rect} rect rect
 * @returns {Rect} cloned rect
 */
const copy = rect => {
  return Object.assign({}, rect);
};

/**
 * @typedef {import('../types.js').Rect} Rect
 */

/**
 *
 * @param {Rect} rect rect
 * @param {number} height height
 * @returns {[Rect, Rect]} partitioned rects
 */
const partition = (rect, height) => {
  const a = Object.assign({}, rect, {
    height
  });
  const b = Object.assign({}, rect, {
    y: rect.y + height,
    height: rect.height - height
  });
  return [a, b];
};

/**
 * @typedef {import('../types.js').Rect} Rect
 */

/**
 * Crop upper section of rect
 *
 * @param {number} height height
 * @param {Rect} rect rect
 * @returns {Rect} cropped rect
 */
const crop = (height, rect) => {
  const [, result] = partition(rect, height);
  return result;
};

/**
 * Get paragraph block height
 *
 * @param {Object}  paragraph block
 * @returns {number} paragraph block height
 */
const height$2 = paragraph => {
  return paragraph.reduce((acc, block) => acc + block.box.height, 0);
};

/**
 * @typedef {import('../types.js').Run} Run
 */

/**
 * Calculate run scale
 *
 * @param {Run} run run
 * @returns {number} scale
 */
const calculateScale = run => {
  var _attributes$font;
  const attributes = run.attributes || {};
  const fontSize = attributes.fontSize || 12;
  const unitsPerEm = (_attributes$font = attributes.font) === null || _attributes$font === void 0 ? void 0 : _attributes$font.unitsPerEm;
  return unitsPerEm ? fontSize / unitsPerEm : 0;
};

/**
 * Get run scale
 *
 * @param {Object}  run
 * @returns {number} scale
 */
const scale = run => {
  var _run$attributes;
  return ((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : _run$attributes.scale) || calculateScale(run);
};

/**
 * @typedef {import('../types.js').Run} Run
 */

/**
 * Get ligature offset by index
 *
 * Ex. ffi ligature
 *
 *   glyphs:         l  o  f  f  i  m
 *   glyphIndices:   0  1  2  2  2  3
 *   offset:         0  0  0  1  2  0
 *
 * @param {number} index
 * @param {Run} run run
 * @returns {number} ligature offset
 */
const offset = (index, run) => {
  if (!run) return 0;
  const glyphIndices = run.glyphIndices || [];
  const value = glyphIndices[index];
  return glyphIndices.slice(0, index).filter(i => i === value).length;
};

/**
 * @typedef {import('../types.js').Font} Font
 * @typedef {import('../types.js').Run} Run
 */

/**
 * Get run font
 *
 * @param {Run} run run
 * @returns {Font | null} font
 */
const getFont = run => {
  var _run$attributes;
  return ((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : _run$attributes.font) || null;
};

/**
 * @typedef {import('../types.js').Font} Font
 * @typedef {import('../types.js').Glyph} Glyph
 */

/**
 * Slice glyph between codePoints range
 * Util for breaking ligatures
 *
 * @param {number} start start code point index
 * @param {number} end end code point index
 * @param {Font} font font to generate new glyph
 * @param {Glyph} glyph glyph to be sliced
 * @returns {Glyph[]} sliced glyph parts
 */
const slice$2 = (start, end, font, glyph) => {
  if (!glyph) return [];
  if (start === end) return [];
  if (start === 0 && end === glyph.codePoints.length) return [glyph];
  const codePoints = glyph.codePoints.slice(start, end);
  const string = String.fromCodePoint(...codePoints);

  // passing LTR To force fontkit to not reverse the string
  return font ? font.layout(string, undefined, undefined, undefined, 'ltr').glyphs : [glyph];
};

/**
 * @typedef {import('../types.js').Run} Run
 */

/**
 * Return glyph index at string index, if glyph indices present.
 * Otherwise return string index
 *
 * @param {number} index index
 * @param {Run} run run
 * @returns {number} glyph index
 */
const glyphIndexAt = (index, run) => {
  var _run$glyphIndices;
  const result = run === null || run === void 0 ? void 0 : (_run$glyphIndices = run.glyphIndices) === null || _run$glyphIndices === void 0 ? void 0 : _run$glyphIndices[index];
  return isNil(result) ? index : result;
};

/**
 * Returns new array starting with zero, and keeping same relation between consecutive values
 *
 * @param {number[]} array list
 * @returns {number[]} normalized array
 */
const textkit_normalize = array => {
  const head = array[0];
  return array.map(value => value - head);
};

/**
 * @typedef {import('../types.js').Run} Run
 */

/**
 * Slice run between glyph indices range
 *
 * @param {number} start glyph index
 * @param {number} end glyph index
 * @param {Run} run run
 * @returns {Run} sliced run
 */
const slice$1 = (start, end, run) => {
  var _run$glyphs, _run$glyphs2;
  const runScale = scale(run);
  const font = getFont(run);

  // Get glyph start and end indices
  const startIndex = glyphIndexAt(start, run);
  const endIndex = glyphIndexAt(end, run);

  // Get start and end glyph
  const startGlyph = (_run$glyphs = run.glyphs) === null || _run$glyphs === void 0 ? void 0 : _run$glyphs[startIndex];
  const endGlyph = (_run$glyphs2 = run.glyphs) === null || _run$glyphs2 === void 0 ? void 0 : _run$glyphs2[endIndex];

  // Get start ligature chunks (if any)
  const startOffset = offset(start, run);
  const startGlyphs = startOffset > 0 ? slice$2(startOffset, Infinity, font, startGlyph) : [];

  // Get end ligature chunks (if any)
  const endOffset = offset(end, run);
  const endGlyphs = slice$2(0, endOffset, font, endGlyph);

  // Compute new glyphs
  const sliceStart = startIndex + Math.min(1, startOffset);
  const glyphs = (run.glyphs || []).slice(sliceStart, endIndex);

  // Compute new positions
  const glyphPosition = g => ({
    xAdvance: g.advanceWidth * runScale
  });
  const startPositions = startGlyphs.map(glyphPosition);
  const positions = (run.positions || []).slice(sliceStart, endIndex);
  const endPositions = endGlyphs.map(glyphPosition);
  return Object.assign({}, run, {
    start: run.start + start,
    end: Math.min(run.end, run.start + end),
    glyphIndices: textkit_normalize((run.glyphIndices || []).slice(start, end)),
    glyphs: [startGlyphs, glyphs, endGlyphs].flat(),
    positions: [startPositions, positions, endPositions].flat()
  });
};

/**
 * @typedef {import('../types.js').Run} Run
 */

/**
 * Get run index that contains passed index
 *
 * @param {number} n index
 * @param {Run[]} runs runs
 * @returns {number} run index
 */
const runIndexAt$1 = (n, runs) => {
  if (!runs) return -1;
  return runs.findIndex(run => run.start <= n && n < run.end);
};

/**
 * @typedef {import('../types.js').Run} Run
 */

/**
 * Filter runs contained between start and end
 *
 * @param {number} start
 * @param {number} end
 * @param {Run[]} runs
 * @returns {Run[]} filtered runs
 */
const filter = (start, end, runs) => {
  const startIndex = runIndexAt$1(start, runs);
  const endIndex = Math.max(runIndexAt$1(end - 1, runs), startIndex);
  return runs.slice(startIndex, endIndex + 1);
};

/**
 * @typedef {import('../types.js').Run} Run
 */

/**
 * Subtract scalar to run
 *
 * @param {number} n scalar
 * @param {Run} run run
 * @returns {Object} subtracted run
 */
const subtract = (n, run) => {
  const start = run.start - n;
  const end = run.end - n;
  return Object.assign({}, run, {
    start,
    end
  });
};

/**
 * @typedef {import('../types.js').AttributedString} AttributedString
 * @typedef {import('../types.js').Run} Run
 */

/**
 * Slice array of runs
 *
 * @param {number} start offset
 * @param {number} end offset
 * @param {Run[]} runs
 * @returns {Run[]} sliced runs
 */
const sliceRuns = (start, end, runs) => {
  const sliceFirstRun = a => slice$1(start - a.start, end - a.start, a);
  const sliceLastRun = a => slice$1(0, end - a.start, a);
  return runs.map((run, i) => {
    let result = run;
    const isFirst = i === 0;
    const isLast = !isFirst && i === runs.length - 1;
    if (isFirst) result = sliceFirstRun(run);
    if (isLast) result = sliceLastRun(run);
    return subtract(start, result);
  });
};

/**
 * Slice attributed string between two indices
 *
 * @param {number} start offset
 * @param {number} end offset
 * @param {AttributedString} attributedString attributed string
 * @returns {AttributedString} attributed string
 */
const slice = (start, end, attributedString) => {
  if (attributedString.string.length === 0) return attributedString;
  const string = attributedString.string.slice(start, end);
  const filteredRuns = filter(start, end, attributedString.runs);
  const slicedRuns = sliceRuns(start, end, filteredRuns);
  return Object.assign({}, attributedString, {
    string,
    runs: slicedRuns
  });
};

/**
 * @typedef {import('../types.js').AttributedString} AttributedString
 */

/**
 * @param {string} string
 * @returns {number} index
 */
const findCharIndex = string => {
  return string.search(/\S/g);
};

/**
 * @param {string} string
 * @returns {number} index
 */
const findLastCharIndex = string => {
  const match = string.match(/\S/g);
  return match ? string.lastIndexOf(match[match.length - 1]) : -1;
};

/**
 * Removes (strips) whitespace from both ends of the attributted string.
 *
 * @param {AttributedString} attributedString attributed string
 * @returns {AttributedString} attributed string
 */
const trim = attributedString => {
  const start = findCharIndex(attributedString.string);
  const end = findLastCharIndex(attributedString.string);
  return slice(start, end + 1, attributedString);
};

/**
 * @typedef {import('../types.js').Run} Run
 */

/**
 * Returns empty run
 *
 * @returns {Run} empty run
 */
const empty$1 = () => {
  return {
    start: 0,
    end: 0,
    glyphIndices: [],
    glyphs: [],
    positions: [],
    attributes: {}
  };
};

/**
 * Check if value is a number
 *
 * @template {unknown} T
 * @param {T} value Value to check
 * @returns {value is number} Whether value is a number
 */
const textkit_isNumber = value => {
  return typeof value === 'number';
};

/**
 * Append glyph indices with given length
 *
 * Ex. appendIndices(3, [0, 1, 2, 2]) => [0, 1, 2, 2, 3, 3, 3]
 *
 * @param {number} length length
 * @param {number[]} indices glyph indices
 * @returns {number[]} extended glyph indices
 */
const appendIndices = (length, indices) => {
  const lastIndex = lib_last(indices);
  const value = isNil(lastIndex) ? 0 : lastIndex + 1;
  const newIndices = Array(length).fill(value);
  return indices.concat(newIndices);
};

/**
 * @typedef {import('../types.js').Font} Font
 * @typedef {import('../types.js').Glyph} Glyph
 */

/**
 * Get glyph for a given code point
 *
 * @param {number} [value] codePoint
 * @param {Font} [font] font
 * @returns {Glyph} glyph
 * */
const fromCodePoint = (value, font) => {
  return font && value ? font.glyphForCodePoint(value) : null;
};

/**
 * @typedef {import('../types.js').Glyph} Glyph
 * @typedef {import('../types.js').Run} Run
 */

/**
 * Append glyph to run
 *
 * @param {Glyph} glyph glyph
 * @param {Run} run run
 * @returns {Run} run with glyph
 */
const appendGlyph = (glyph, run) => {
  var _glyph$codePoints;
  const glyphLength = ((_glyph$codePoints = glyph.codePoints) === null || _glyph$codePoints === void 0 ? void 0 : _glyph$codePoints.length) || 0;
  const end = run.end + glyphLength;
  const glyphs = run.glyphs.concat(glyph);
  const glyphIndices = appendIndices(glyphLength, run.glyphIndices);
  if (!run.positions) return Object.assign({}, run, {
    end,
    glyphs,
    glyphIndices
  });
  const positions = run.positions.concat({
    xAdvance: glyph.advanceWidth * scale(run)
  });
  return Object.assign({}, run, {
    end,
    glyphs,
    glyphIndices,
    positions
  });
};

/**
 * Append glyph or code point to run
 *
 * @param {Glyph | number | undefined} value glyph or codePoint
 * @param {Run} run run
 * @returns {Run} run with glyph
 */
const append$1 = (value, run) => {
  if (!value) return run;
  const font = getFont(run);
  const glyph = textkit_isNumber(value) ? fromCodePoint(value, font) : value;
  return appendGlyph(glyph, run);
};

/**
 * Get string from array of code points
 *
 * @param {number[]} codePoints points
 * @returns {string} string
 */
const stringFromCodePoints = codePoints => {
  return String.fromCodePoint(...(codePoints || []));
};

/**
 * @typedef {import('../types.js').AttributedString} AttributedString
 * @typedef {import('../types.js').Glyph} Glyph
 */

/**
 * Append glyph into last run of attributed string
 *
 * @param {Glyph} glyph glyph
 * @param {AttributedString} attributedString attributed string
 * @returns {AttributedString} attributed string with new glyph
 */
const append = (glyph, attributedString) => {
  const codePoints = (glyph === null || glyph === void 0 ? void 0 : glyph.codePoints) || [];
  const codePointsString = stringFromCodePoints(codePoints);
  const string = attributedString.string + codePointsString;
  const firstRuns = attributedString.runs.slice(0, -1);
  const lastRun = lib_last(attributedString.runs) || empty$1();
  const runs = firstRuns.concat(append$1(glyph, lastRun));
  return Object.assign({}, attributedString, {
    string,
    runs
  });
};
const ELLIPSIS_UNICODE = 8230;
const ELLIPSIS_STRING = String.fromCharCode(ELLIPSIS_UNICODE);

/**
 * Get ellipsis codepoint. This may be different in standard and embedded fonts
 *
 * @param {Object} font
 * @returns {Object} ellipsis codepoint
 */
const getEllipsisCodePoint = font => {
  if (!font.encode) return ELLIPSIS_UNICODE;
  const [codePoints] = font.encode(ELLIPSIS_STRING);
  return parseInt(codePoints[0], 16);
};

/**
 * Trucante block with ellipsis
 *
 * @param {Object} block paragraph block
 * @returns {Object} sliced paragraph block
 */
const textkit_truncate = block => {
  var _last, _last2, _last2$attributes;
  const runs = ((_last = lib_last(block)) === null || _last === void 0 ? void 0 : _last.runs) || [];
  const font = (_last2 = lib_last(runs)) === null || _last2 === void 0 ? void 0 : (_last2$attributes = _last2.attributes) === null || _last2$attributes === void 0 ? void 0 : _last2$attributes.font;
  if (font) {
    const index = block.length - 1;
    const codePoint = getEllipsisCodePoint(font);
    const glyph = font.glyphForCodePoint(codePoint);
    const lastBlock = append(glyph, trim(block[index]));
    return Object.assign([], block, {
      [index]: lastBlock
    });
  }
  return block;
};

/**
 * @typedef {import('../types.js').Attributes} Attributes
 * @typedef {import('../types.js').Run} Run
 */

/**
 * Omit attribute from run
 *
 * @param {keyof Attributes} value attribute value
 * @param {Run} run run
 * @returns {Run} run without ommited attribute
 */
const textkit_omit = (value, run) => {
  const attributes = Object.assign({}, run.attributes);
  delete attributes[value];
  return Object.assign({}, run, {
    attributes
  });
};

/**
 * @typedef {import('../types.js').Run} Run
 */

/**
 * Get run ascent
 *
 * @param {Run} run run
 * @returns {number} ascent
 */
const ascent$1 = run => {
  var _run$attributes, _run$attributes$attac, _run$attributes2, _run$attributes2$font;
  const attachmentHeight = ((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : (_run$attributes$attac = _run$attributes.attachment) === null || _run$attributes$attac === void 0 ? void 0 : _run$attributes$attac.height) || 0;
  const fontAscent = ((_run$attributes2 = run.attributes) === null || _run$attributes2 === void 0 ? void 0 : (_run$attributes2$font = _run$attributes2.font) === null || _run$attributes2$font === void 0 ? void 0 : _run$attributes2$font.ascent) || 0;
  return Math.max(attachmentHeight, fontAscent * scale(run));
};

/**
 * @typedef {import('../types.js').Run} Run
 */

/**
 * Get run descent
 *
 * @param {Run} run run
 * @returns {number} descent
 */
const descent = run => {
  var _run$attributes, _run$attributes$font;
  const fontDescent = ((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : (_run$attributes$font = _run$attributes.font) === null || _run$attributes$font === void 0 ? void 0 : _run$attributes$font.descent) || 0;
  return scale(run) * fontDescent;
};

/**
 * @typedef {import('../types.js').Run} Run
 */

/**
 * Get run lineGap
 *
 * @param {Object} run run
 * @returns {number} lineGap
 */
const lineGap = run => {
  var _run$attributes, _run$attributes$font;
  return (((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : (_run$attributes$font = _run$attributes.font) === null || _run$attributes$font === void 0 ? void 0 : _run$attributes$font.lineGap) || 0) * scale(run);
};

/**
 * @typedef {import('../types.js').Run} Run
 */

/**
 * Get run height
 *
 * @param {Run} run run
 * @returns {number} height
 */
const height$1 = run => {
  var _run$attributes;
  const lineHeight = (_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : _run$attributes.lineHeight;
  return lineHeight || lineGap(run) + ascent$1(run) - descent(run);
};

/**
 * @typedef {import('../types.js').AttributedString} AttributedString
 */

/**
 * Returns attributed string height
 *
 * @param {AttributedString} attributedString attributed string
 * @returns {number} height
 */
const height = attributedString => {
  const reducer = (acc, run) => Math.max(acc, height$1(run));
  return attributedString.runs.reduce(reducer, 0);
};

/**
 * @typedef {import('../types.js').Rect} Rect
 */

/**
 * Checks if two rects intersect each other
 *
 * @param {Rect} a rect A
 * @param {Rect} b rect B
 * @returns {boolean} whether rects intersect
 */
const intersects = (a, b) => {
  const x = Math.max(a.x, b.x);
  const num1 = Math.min(a.x + a.width, b.x + b.width);
  const y = Math.max(a.y, b.y);
  const num2 = Math.min(a.y + a.height, b.y + b.height);
  return num1 >= x && num2 >= y;
};
const getLineFragment = (lineRect, excludeRect) => {
  if (!intersects(excludeRect, lineRect)) return [lineRect];
  const eStart = excludeRect.x;
  const eEnd = excludeRect.x + excludeRect.width;
  const lStart = lineRect.x;
  const lEnd = lineRect.x + lineRect.width;
  const a = Object.assign({}, lineRect, {
    width: eStart - lStart
  });
  const b = Object.assign({}, lineRect, {
    x: eEnd,
    width: lEnd - eEnd
  });
  return [a, b].filter(r => r.width > 0);
};
const getLineFragments = (rect, excludeRects) => {
  let fragments = [rect];
  for (let i = 0; i < excludeRects.length; i += 1) {
    const excludeRect = excludeRects[i];
    fragments = fragments.reduce((acc, fragment) => {
      const pieces = getLineFragment(fragment, excludeRect);
      return acc.concat(pieces);
    }, []);
  }
  return fragments;
};
const generateLineRects = (container, height) => {
  const {
    excludeRects,
    ...rect
  } = container;
  if (!excludeRects) return [rect];
  const lineRects = [];
  const maxY = Math.max(...excludeRects.map(r => r.y + r.height));
  let currentRect = rect;
  while (currentRect.y < maxY) {
    const [lineRect, rest] = partition(currentRect, height);
    const lineRectFragments = getLineFragments(lineRect, excludeRects);
    currentRect = rest;
    lineRects.push(...lineRectFragments);
  }
  return [...lineRects, currentRect];
};
const ATTACHMENT_CODE$1 = '\ufffc'; // 65532

/**
 * @typedef {import('../types.js').AttributedString} AttributedString
 * @typedef {import('../types.js').Rect} Rect
 */

/**
 * Remove attachment attribute if no char present
 *
 * @param {AttributedString} attributedString attributed string
 * @returns {AttributedString} attributed string
 */
const purgeAttachments = attributedString => {
  const shouldPurge = !attributedString.string.includes(ATTACHMENT_CODE$1);
  if (!shouldPurge) return attributedString;
  const runs = attributedString.runs.map(run => textkit_omit('attachment', run));
  return Object.assign({}, attributedString, {
    runs
  });
};

/**
 * Layout paragraphs inside rectangle
 *
 * @param {Object} rects rect
 * @param {Object[]} lines attributed strings
 * @param {number} indent
 * @returns {Object} layout blocks
 */
const layoutLines = (rects, lines, indent) => {
  let rect = rects.shift();
  let currentY = rect.y;
  return lines.map((line, i) => {
    var _line$runs, _line$runs$;
    const lineIndent = i === 0 ? indent : 0;
    const style = ((_line$runs = line.runs) === null || _line$runs === void 0 ? void 0 : (_line$runs$ = _line$runs[0]) === null || _line$runs$ === void 0 ? void 0 : _line$runs$.attributes) || {};
    const height$1 = Math.max(height(line), style.lineHeight);
    if (currentY + height$1 > rect.y + rect.height && rects.length > 0) {
      rect = rects.shift();
      currentY = rect.y;
    }
    const newLine = Object.assign({}, line);
    delete newLine.syllables;
    newLine.box = {
      x: rect.x + lineIndent,
      y: currentY,
      width: rect.width - lineIndent,
      height: height$1
    };
    currentY += height$1;
    return purgeAttachments(newLine);
  });
};

/**
 * Performs line breaking and layout
 *
 * @param {Object} engines engines
 * @param {Object} options layout options
 */
const layoutParagraph = (engines, options) => {
  /**
   * @param {Rect} container rect
   * @param {Object} paragraph attributed string
   * @returns {Object} layout block
   */
  return (container, paragraph) => {
    var _paragraph$runs, _paragraph$runs$, _paragraph$runs$$attr;
    const height$1 = height(paragraph);
    const indent = ((_paragraph$runs = paragraph.runs) === null || _paragraph$runs === void 0 ? void 0 : (_paragraph$runs$ = _paragraph$runs[0]) === null || _paragraph$runs$ === void 0 ? void 0 : (_paragraph$runs$$attr = _paragraph$runs$.attributes) === null || _paragraph$runs$$attr === void 0 ? void 0 : _paragraph$runs$$attr.indent) || 0;
    const rects = generateLineRects(container, height$1);
    const availableWidths = rects.map(r => r.width);
    availableWidths.unshift(availableWidths[0] - indent);
    const lines = engines.linebreaker(options)(paragraph, availableWidths);
    return layoutLines(rects, lines, indent);
  };
};

/**
 * Slice block at given height
 *
 * @param {number} height height
 * @param {Object} block paragraph block
 * @returns {number[]} sliced paragraph block
 */
const sliceAtHeight = (height, block) => {
  const newBlock = [];
  let counter = 0;
  for (let i = 0; i < block.length; i += 1) {
    const line = block[i];
    counter += line.box.height;
    if (counter < height) {
      newBlock.push(line);
    } else {
      break;
    }
  }
  return newBlock;
};

/**
 * @typedef {import('../types.js').AttributedString} AttributedString
 * @typedef {import('../types.js').Rect} Rect
 */

/**
 * Layout paragraphs inside container until it does not
 * fit anymore, performing line wrapping in the process.
 *
 * @param {Object} engines engines
 * @param {Object} options layout options
 * @param {Rect} container container rect
 */
const typesetter = (engines, options, container) => {
  /**
   * @param {AttributedString} attributedStrings attributed strings (paragraphs)
   * @returns {Object[]} paragraph blocks
   */
  return attributedStrings => {
    const blocks = [];
    const paragraphs = [...attributedStrings];
    const layoutBlock = layoutParagraph(engines, options);
    const maxLines = isNil(container.maxLines) ? Infinity : container.maxLines;
    const truncateEllipsis = container.truncateMode === 'ellipsis';
    let linesCount = maxLines;
    let paragraphRect = copy(container);
    let nextParagraph = paragraphs.shift();
    while (linesCount > 0 && nextParagraph) {
      const block = layoutBlock(paragraphRect, nextParagraph);
      const slicedBlock = block.slice(0, linesCount);
      const linesHeight = height$2(slicedBlock);
      const shouldTruncate = truncateEllipsis && block.length !== slicedBlock.length;
      linesCount -= slicedBlock.length;
      if (paragraphRect.height >= linesHeight) {
        blocks.push(shouldTruncate ? textkit_truncate(slicedBlock) : slicedBlock);
        paragraphRect = crop(linesHeight, paragraphRect);
        nextParagraph = paragraphs.shift();
      } else {
        blocks.push(textkit_truncate(sliceAtHeight(paragraphRect.height, slicedBlock)));
        break;
      }
    }
    return blocks;
  };
};

/**
 * @typedef {import('../types.js').AttributedString} AttributedString
 */

/**
 * Get attributed string start value
 *
 * @param {AttributedString} attributedString attributed string
 * @returns {number} start
 */
const start = attributedString => {
  const {
    runs
  } = attributedString;
  return runs.length === 0 ? 0 : runs[0].start;
};

/**
 * @typedef {import('../types.js').AttributedString} AttributedString
 */

/**
 * Get attributed string end value
 *
 * @param {AttributedString} attributedString attributed string
 * @returns {number} end
 */
const end = attributedString => {
  const {
    runs
  } = attributedString;
  return runs.length === 0 ? 0 : lib_last(runs).end;
};

/**
 * @typedef {import('../types.js').AttributedString} AttributedString
 */

/**
 * Get attributed string length
 *
 * @param {AttributedString} attributedString attributed string
 * @returns {number} end
 */
const length$1 = attributedString => {
  return end(attributedString) - start(attributedString);
};

/**
 * @typedef {import('../types.js').AttributedString} AttributedString
 * @typedef {import('../types.js').Glyph} Glyph
 * @typedef {import('../types.js').Position} Position
 * @typedef {import('../types.js').Run} Run
 */

const bidi$2 = (0,bidi/* default */.A)();

/**
 * @param {Run[]} runs
 * @returns {number[]} bidi levels
 */
const getBidiLevels$1 = runs => {
  return runs.reduce((acc, run) => {
    const length = run.end - run.start;
    const levels = repeat(run.attributes.bidiLevel, length);
    return acc.concat(levels);
  }, []);
};
const getReorderedIndices = (string, segments) => {
  // Fill an array with indices
  const indices = [];
  for (let i = 0; i < string.length; i += 1) {
    indices[i] = i;
  }
  // Reverse each segment in order
  segments.forEach(_ref => {
    let [start, end] = _ref;
    const slice = indices.slice(start, end + 1);
    for (let i = slice.length - 1; i >= 0; i -= 1) {
      indices[end - i] = slice[i];
    }
  });
  return indices;
};

/**
 * @template {'glyphs'|'positions'} T
 * @param {Run[]} runs
 * @param {T} objectName
 * @param {number} index
 * @returns {T extends 'glyphs' ? Glyph|undefined : Position|undefined}
 */
const getItemAtIndex = (runs, objectName, index) => {
  for (let i = 0; i < runs.length; i += 1) {
    const run = runs[i];
    const updatedIndex = run.glyphIndices[index - run.start];
    if (index >= run.start && index < run.end) {
      return run[objectName][updatedIndex];
    }
  }
  throw new Error(`index ${index} out of range`);
};

/**
 * @param {AttributedString} attributedString attributed string
 * @returns {AttributedString} reordered attributed string
 */
const reorderLine = attributedString => {
  var _attributedString$run;
  const levels = getBidiLevels$1(attributedString.runs);
  const direction = (_attributedString$run = attributedString.runs[0]) === null || _attributedString$run === void 0 ? void 0 : _attributedString$run.attributes.direction;
  const level = direction === 'rtl' ? 1 : 0;
  const end = length$1(attributedString) - 1;
  const paragraphs = [{
    start: 0,
    end,
    level
  }];
  const embeddingLevels = {
    paragraphs,
    levels
  };
  const segments = bidi$2.getReorderSegments(attributedString.string, embeddingLevels);

  // No need for bidi reordering
  if (segments.length === 0) return attributedString;
  const indices = getReorderedIndices(attributedString.string, segments);
  const updatedString = bidi$2.getReorderedString(attributedString.string, embeddingLevels);
  const updatedRuns = attributedString.runs.map(run => {
    const selectedIndices = indices.slice(run.start, run.end);
    const updatedGlyphs = [];
    const updatedPositions = [];
    const addedGlyphs = new Set();
    for (let i = 0; i < selectedIndices.length; i += 1) {
      const index = selectedIndices[i];
      const glyph = getItemAtIndex(attributedString.runs, 'glyphs', index);
      if (addedGlyphs.has(glyph.id)) continue;
      updatedGlyphs.push(glyph);
      updatedPositions.push(getItemAtIndex(attributedString.runs, 'positions', index));
      if (glyph.isLigature) {
        addedGlyphs.add(glyph.id);
      }
    }
    return {
      ...run,
      glyphs: updatedGlyphs,
      positions: updatedPositions
    };
  });
  return {
    ...attributedString,
    runs: updatedRuns,
    string: updatedString
  };
};

/**
 * Reorder a paragraph
 *
 * @param {AttributedString[]} lines
 * @returns {AttributedString[]} reordered lines
 */
const reorderParagraph = lines => lines.map(reorderLine);

/**
 * Perform bidi reordering
 *
 * @returns {(paragraphs: AttributedString[][]) => AttributedString[][]} reordered paragraphs
 */
const bidiReordering = () => {
  /**
   * @param {AttributedString[][]} paragraphs line blocks
   * @returns {AttributedString[][]} reordered line blocks
   */
  return paragraphs => paragraphs.map(reorderParagraph);
};

/**
 * @typedef {import('../types.js').Glyph} Glyph
 */

const DUMMY_CODEPOINT = 123;

/**
 * Resolve string indices based on glyphs code points
 *
 * @param {Glyph[]} glyphs
 * @returns {number[]} glyph indices
 */
const resolve = function (glyphs) {
  if (glyphs === void 0) {
    glyphs = [];
  }
  return glyphs.reduce((acc, glyph) => {
    const codePoints = (glyph === null || glyph === void 0 ? void 0 : glyph.codePoints) || [DUMMY_CODEPOINT];
    if (acc.length === 0) return codePoints.map(() => 0);
    const last = acc[acc.length - 1];
    const next = codePoints.map(() => last + 1);
    return [...acc, ...next];
  }, []);
};

/**
 * @typedef {import('../types.js').AttributedString} AttributedString
 * @typedef {import('../types.js').Position} Position
 * @typedef {import('../types.js').Run} Run
 */

/**
 * @param {Run} run
 * @returns {number}
 */
const getCharacterSpacing = run => {
  var _run$attributes;
  return ((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : _run$attributes.characterSpacing) || 0;
};

/**
 * Scale run positions
 *
 * @param {Run} run
 * @param {Position[]} positions
 * @returns {Position[]} scaled positions
 */
const scalePositions = (run, positions) => {
  const runScale = scale(run);
  const characterSpacing = getCharacterSpacing(run);
  return positions.map((position, i) => {
    const isLast = i === positions.length;
    const xSpacing = isLast ? 0 : characterSpacing;
    return Object.assign({}, position, {
      xAdvance: position.xAdvance * runScale + xSpacing,
      yAdvance: position.yAdvance * runScale,
      xOffset: position.xOffset * runScale,
      yOffset: position.yOffset * runScale
    });
  });
};

/**
 * Create glyph run
 *
 * @param {string} string string
 */
const layoutRun = string => {
  /**
   * @param {Run} run run
   * @returns {Run} glyph run
   */
  return run => {
    const {
      start,
      end,
      attributes = {}
    } = run;
    const {
      font
    } = attributes;
    if (!font) return {
      ...run,
      glyphs: [],
      glyphIndices: [],
      positions: []
    };
    const runString = string.slice(start, end);

    // passing LTR To force fontkit to not reverse the string
    const glyphRun = font.layout(runString, undefined, undefined, undefined, 'ltr');
    const positions = scalePositions(run, glyphRun.positions);
    const glyphIndices = resolve(glyphRun.glyphs);
    return {
      ...run,
      positions,
      glyphIndices,
      glyphs: glyphRun.glyphs
    };
  };
};

/**
 * Generate glyphs for single attributed string
 */
const generateGlyphs = () => {
  /**
   * @param {AttributedString} attributedString attributed string
   * @returns {AttributedString} attributed string with glyphs
   */
  return attributedString => {
    const runs = attributedString.runs.map(layoutRun(attributedString.string));
    return Object.assign({}, attributedString, {
      runs
    });
  };
};

/**
 * @typedef {import('../types.js').AttributedString} AttributedString
 * @typedef {import('../types.js').Run} Run
 */

/**
 * Resolves yOffset for run
 *
 * @param {Run} run run
 * @returns {Run} run
 */
const resolveRunYOffset = run => {
  var _run$attributes, _run$attributes$font, _run$attributes2;
  if (!run.positions) return run;
  const unitsPerEm = ((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : (_run$attributes$font = _run$attributes.font) === null || _run$attributes$font === void 0 ? void 0 : _run$attributes$font.unitsPerEm) || 0;
  const yOffset = (((_run$attributes2 = run.attributes) === null || _run$attributes2 === void 0 ? void 0 : _run$attributes2.yOffset) || 0) * unitsPerEm;
  const positions = run.positions.map(p => Object.assign({}, p, {
    yOffset
  }));
  return Object.assign({}, run, {
    positions
  });
};

/**
 * Resolves yOffset for multiple paragraphs
 */
const resolveYOffset = () => {
  /**
   * @param {AttributedString} attributedString attributed string
   * @returns {AttributedString} attributed string
   */
  return attributedString => {
    const runs = attributedString.runs.map(resolveRunYOffset);
    return Object.assign({}, attributedString, {
      runs
    });
  };
};

/**
 * @typedef {import('../types.js').Run} Run
 */

/**
 * Sort runs in ascending order
 *
 * @param {Run[]} runs
 * @returns {Run[]} sorted runs
 */
const sort = runs => {
  return runs.sort((a, b) => a.start - b.start || a.end - b.end);
};

/**
 * @typedef {import('../types.js').Run} Run
 */

/**
 * Is run empty (start === end)
 *
 * @param {Run} run run
 * @returns {boolean} is run empty
 */
const isEmpty = run => {
  return run.start === run.end;
};

/**
 * @typedef {import('../types.js').Point} Point
 * @typedef {import('../types.js').Run} Run
 */

/**
 * Sort points in ascending order
 * @param {Point} a first point
 * @param {Point} b second point
 * @returns {number} sort order
 */
const sortPoints = (a, b) => {
  return a[1] - b[1] || a[3] - b[3];
};

/**
 * @param {Run[]} runs
 * @returns {Point[]} points
 */
const generatePoints = runs => {
  const result = runs.reduce((acc, run, i) => {
    return acc.concat([['start', run.start, run.attributes, i], ['end', run.end, run.attributes, i]]);
  }, []);
  return result.sort(sortPoints);
};

/**
 * @param {Run[]} runs
 * @returns {Run} merged runs
 */
const mergeRuns = runs => {
  return runs.reduce((acc, run) => {
    const attributes = Object.assign({}, acc.attributes, run.attributes);
    return Object.assign({}, run, {
      attributes
    });
  }, {});
};

/**
 * @param {Run[]} runs
 * @returns {Run[][]} grouped runs
 */
const groupEmptyRuns = runs => {
  const groups = runs.reduce((acc, run) => {
    if (!acc[run.start]) acc[run.start] = [];
    acc[run.start].push(run);
    return acc;
  }, []);
  return Object.values(groups);
};

/**
 * @param {Run[]} runs
 * @returns {Run[]} flattened runs
 */
const flattenEmptyRuns = runs => {
  return groupEmptyRuns(runs).map(mergeRuns);
};

/**
 * @param {Run[]} runs
 * @returns {Run[]} flattened runs
 */
const flattenRegularRuns = runs => {
  const res = [];
  const points = generatePoints(runs);
  let start = -1;
  let attrs = {};
  const stack = [];
  for (let i = 0; i < points.length; i += 1) {
    const [type, offset, attributes] = points[i];
    if (start !== -1 && start < offset) {
      res.push({
        start,
        end: offset,
        attributes: attrs
      });
    }
    if (type === 'start') {
      stack.push(attributes);
      attrs = Object.assign({}, attrs, attributes);
    } else {
      attrs = {};
      for (let j = 0; j < stack.length; j += 1) {
        if (stack[j] === attributes) {
          // eslint-disable-next-line no-plusplus
          stack.splice(j--, 1);
        } else {
          attrs = Object.assign({}, attrs, stack[j]);
        }
      }
    }
    start = offset;
  }
  return res;
};

/**
 * Flatten many runs
 *
 * @param {Run[]} runs
 * @returns {Run[]} flattened runs
 */
const textkit_flatten = function (runs) {
  if (runs === void 0) {
    runs = [];
  }
  const emptyRuns = flattenEmptyRuns(runs.filter(run => isEmpty(run)));
  const regularRuns = flattenRegularRuns(runs.filter(run => !isEmpty(run)));
  return sort(emptyRuns.concat(regularRuns));
};

/**
 * Returns empty attributed string
 *
 * @returns {Object} empty attributed string
 */
const empty = () => ({
  string: '',
  runs: []
});

/**
 * @typedef {import('../types.js').AttributedString} AttributedString
 */

/**
 *
 * @param {AttributedString} attributedString
 * @returns {AttributedString} attributed string without font
 */
const omitFont = attributedString => {
  const runs = attributedString.runs.map(run => textkit_omit('font', run));
  return Object.assign({}, attributedString, {
    runs
  });
};

/**
 * Performs font substitution and script itemization on attributed string
 *
 * @param {Object} engines engines
 * @param {Object} options layout options
 */
const preprocessRuns = (engines, options) => {
  /**
   * @param {AttributedString} attributedString attributed string
   * @returns {AttributedString} processed attributed string
   */
  return attributedString => {
    if (isNil(attributedString)) return empty();
    const {
      string
    } = attributedString;
    const {
      fontSubstitution,
      scriptItemizer,
      bidi
    } = engines;
    const {
      runs: omittedFontRuns
    } = omitFont(attributedString);
    const {
      runs: itemizationRuns
    } = scriptItemizer(options)(attributedString);
    const {
      runs: substitutedRuns
    } = fontSubstitution(options)(attributedString);
    const {
      runs: bidiRuns
    } = bidi(options)(attributedString);
    const runs = bidiRuns.concat(substitutedRuns).concat(itemizationRuns).concat(omittedFontRuns);
    return {
      string,
      runs: textkit_flatten(runs)
    };
  };
};

/**
 * @typedef {import('../types.js').AttributedString} AttributedString
 */

/**
 * Breaks attributed string into paragraphs
 */
const splitParagraphs = () => {
  /**
   * @param {AttributedString} attributedString attributed string
   * @returns {AttributedString[]} attributed string array
   */
  return attributedString => {
    const res = [];
    let start = 0;
    let breakPoint = attributedString.string.indexOf('\n') + 1;
    while (breakPoint > 0) {
      res.push(slice(start, breakPoint, attributedString));
      start = breakPoint;
      breakPoint = attributedString.string.indexOf('\n', breakPoint) + 1;
    }
    if (start === 0) {
      res.push(attributedString);
    } else if (start < attributedString.string.length) {
      res.push(slice(start, length$1(attributedString), attributedString));
    }
    return res;
  };
};

/**
 * @typedef {import('../types.js').Position} Position
 */

/**
 * Return positions advance width
 *
 * @param {Position[]} positions positions
 * @returns {number} advance width
 */
const advanceWidth$2 = positions => {
  return positions.reduce((acc, pos) => acc + (pos.xAdvance || 0), 0);
};

/**
 * @typedef {import('../types.js').Run} Run
 */

/**
 * Return run advance width
 *
 * @param {Run} run run
 * @returns {number} advance width
 */
const advanceWidth$1 = run => {
  return advanceWidth$2(run.positions || []);
};

/**
 * @typedef {import('../types.js').AttributedString} AttributedString
 */

/**
 * Returns attributed string advancewidth
 *
 * @param {AttributedString} attributedString attributed string
 * @returns {number} advance width
 */
const advanceWidth = attributedString => {
  const reducer = (acc, run) => acc + advanceWidth$1(run);
  return attributedString.runs.reduce(reducer, 0);
};

/**
 * @typedef {import('../types.js').Glyph} Glyph
 */

const WHITE_SPACES_CODE = 32;

/**
 * Check if glyph is white space
 *
 * @param {Glyph} [glyph] glyph
 * @returns {boolean} whether glyph is white space
 * */
const isWhiteSpace = glyph => {
  const codePoints = (glyph === null || glyph === void 0 ? void 0 : glyph.codePoints) || [];
  return codePoints.includes(WHITE_SPACES_CODE);
};

/**
 * @typedef {import('../types.js').Position} Position
 * @typedef {import('../types.js').Run} Run
 */

/**
 * Get white space leading positions
 *
 * @param {Run} run run
 * @returns {Position[]} white space leading positions
 */
const leadingPositions = run => {
  const glyphs = run.glyphs || [];
  const positions = run.positions || [];
  const leadingWhitespaces = glyphs.findIndex(g => !isWhiteSpace(g));
  return positions.slice(0, leadingWhitespaces);
};

/**
 * Get run leading white space offset
 *
 * @param {Run} run run
 * @returns {number} leading white space offset
 */
const leadingOffset$1 = run => {
  const positions = leadingPositions(run);
  return positions.reduce((acc, pos) => acc + (pos.xAdvance || 0), 0);
};

/**
 * @typedef {import('../types.js').AttributedString} AttributedString
 */

/**
 * Get attributed string leading white space offset
 *
 * @param {AttributedString} attributedString attributed string
 * @returns {number} leading white space offset
 */
const leadingOffset = attributedString => {
  const runs = attributedString.runs || [];
  return leadingOffset$1(runs[0]);
};

/**
 * @typedef {import('../types.js').Position} Position
 * @typedef {import('../types.js').Run} Run
 */

/**
 * @template T
 * @param {T[]} array
 * @returns {T[]} reversed array
 */
const textkit_reverse = array => {
  return [...array].reverse();
};

/**
 * Get white space trailing positions
 *
 * @param {Run} run run
 * @returns {Position[]} white space trailing positions
 */
const trailingPositions = run => {
  const glyphs = textkit_reverse(run.glyphs || []);
  const positions = textkit_reverse(run.positions || []);
  const leadingWhitespaces = glyphs.findIndex(g => !isWhiteSpace(g));
  return positions.slice(0, leadingWhitespaces);
};

/**
 * Get run trailing white space offset
 *
 * @param {Run} run run
 * @returns {number} trailing white space offset
 */
const trailingOffset$1 = run => {
  const positions = trailingPositions(run);
  return positions.reduce((acc, pos) => acc + (pos.xAdvance || 0), 0);
};

/**
 * @typedef {import('../types.js').AttributedString} AttributedString
 */

/**
 * Get attributed string trailing white space offset
 *
 * @param {AttributedString} attributedString attributed string
 * @returns {number} trailing white space offset
 */
const trailingOffset = attributedString => {
  const runs = attributedString.runs || [];
  return trailingOffset$1(lib_last(runs));
};

/**
 * @typedef {import('../types.js').Run} Run
 */

/**
 * Drop last char of run
 *
 * @param {Run} run run
 * @returns {Run} run without last char
 */
const dropLast$1 = run => {
  return slice$1(0, run.end - run.start - 1, run);
};

/**
 * @typedef {import('../types.js').AttributedString} AttributedString
 */

/**
 * Drop last glyph
 *
 * @param {AttributedString} attributedString attributed string
 * @returns {AttributedString} attributed string with new glyph
 */
const textkit_dropLast = attributedString => {
  const string = dropLast(attributedString.string);
  const runs = adjust(-1, dropLast$1, attributedString.runs);
  return Object.assign({}, attributedString, {
    string,
    runs
  });
};
const ALIGNMENT_FACTORS = {
  center: 0.5,
  right: 1
};

/**
 * Remove new line char at the end of line if present
 *
 * @param {Object}  line
 * @returns {Object} line
 */
const removeNewLine = line => {
  return lib_last(line.string) === '\n' ? textkit_dropLast(line) : line;
};
const getOverflowLeft = line => {
  return leadingOffset(line) + (line.overflowLeft || 0);
};
const getOverflowRight = line => {
  return trailingOffset(line) + (line.overflowRight || 0);
};

/**
 * Ignore whitespace at the start and end of a line for alignment
 *
 * @param {Object}  line
 * @returns {Object} line
 */
const adjustOverflow = line => {
  const overflowLeft = getOverflowLeft(line);
  const overflowRight = getOverflowRight(line);
  const x = line.box.x - overflowLeft;
  const width = line.box.width + overflowLeft + overflowRight;
  const box = Object.assign({}, line.box, {
    x,
    width
  });
  return Object.assign({}, line, {
    box,
    overflowLeft,
    overflowRight
  });
};

/**
 * Performs line justification by calling appropiate engine
 *
 * @param {Object} engines engines
 * @param {Object} options layout options
 * @param {string} align text align
 */
const justifyLine$1 = (engines, options, align) => {
  /**
   * @param {Object} line lint
   * @returns {Object} line
   */
  return line => {
    const lineWidth = advanceWidth(line);
    const alignFactor = ALIGNMENT_FACTORS[align] || 0;
    const remainingWidth = Math.max(0, line.box.width - lineWidth);
    const shouldJustify = align === 'justify' || lineWidth > line.box.width;
    const x = line.box.x + remainingWidth * alignFactor;
    const box = Object.assign({}, line.box, {
      x
    });
    const newLine = Object.assign({}, line, {
      box
    });
    return shouldJustify ? engines.justification(options)(newLine) : newLine;
  };
};
const finalizeLine = line => {
  let lineAscent = 0;
  let lineDescent = 0;
  let lineHeight = 0;
  let lineXAdvance = 0;
  const runs = line.runs.map(run => {
    const height = height$1(run);
    const ascent = ascent$1(run);
    const descent$1 = descent(run);
    const xAdvance = advanceWidth$1(run);
    lineHeight = Math.max(lineHeight, height);
    lineAscent = Math.max(lineAscent, ascent);
    lineDescent = Math.max(lineDescent, descent$1);
    lineXAdvance += xAdvance;
    return Object.assign({}, run, {
      height,
      ascent,
      descent: descent$1,
      xAdvance
    });
  });
  return Object.assign({}, line, {
    runs,
    height: lineHeight,
    ascent: lineAscent,
    descent: lineDescent,
    xAdvance: lineXAdvance
  });
};

/**
 * Finalize line by performing line justification
 * and text decoration (using appropiate engines)
 *
 * @param {Object} engines engines
 * @param {Object} options layout options
 */
const finalizeBlock = function (engines, options) {
  if (engines === void 0) {
    engines = {};
  }
  /**
   * @param {Object} line lint
   * @param {number} i line index
   * @param {Object[]} lines total lines
   * @returns {Object} line
   */
  return (line, i, lines) => {
    var _line$runs, _line$runs$;
    const isLastFragment = i === lines.length - 1;
    const style = ((_line$runs = line.runs) === null || _line$runs === void 0 ? void 0 : (_line$runs$ = _line$runs[0]) === null || _line$runs$ === void 0 ? void 0 : _line$runs$.attributes) || {};
    const align = isLastFragment ? style.alignLastLine : style.align;
    return compose(finalizeLine, engines.textDecoration(options), justifyLine$1(engines, options, align), adjustOverflow, removeNewLine)(line);
  };
};

/**
 * Finalize line block by performing line justification
 * and text decoration (using appropiate engines)
 *
 * @param {Object} engines engines
 * @param {Object} options layout options
 */
const finalizeFragments = (engines, options) => {
  /**
   * @param {Object[]} blocks line blocks
   * @returns {Object[]} blocks
   */
  return blocks => {
    const blockFinalizer = finalizeBlock(engines, options);
    return blocks.map(block => block.map(blockFinalizer));
  };
};

/**
 * @typedef {import('../types.js').AttributedString} AttributedString
 */

const ATTACHMENT_CODE = 0xfffc; // 65532

const isReplaceGlyph = glyph => glyph.codePoints.includes(ATTACHMENT_CODE);

/**
 * Resolve attachments of run
 *
 * @param {Object}  run
 * @returns {Object} run
 */
const resolveRunAttachments = run => {
  var _run$attributes;
  if (!run.positions) return run;
  const glyphs = run.glyphs || [];
  const attachment = ((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : _run$attributes.attachment) || {};
  const positions = run.positions.map((position, i) => {
    const glyph = glyphs[i];
    if (attachment && attachment.width && isReplaceGlyph(glyph)) {
      return Object.assign({}, position, {
        xAdvance: attachment.width
      });
    }
    return Object.assign({}, position);
  });
  return Object.assign({}, run, {
    positions
  });
};

/**
 * Resolve attachments for multiple paragraphs
 */
const resolveAttachments = () => {
  /**
   * @param {AttributedString} attributedString attributed string
   * @returns {AttributedString} attributed string
   */
  return attributedString => {
    const runs = attributedString.runs.map(resolveRunAttachments);
    return Object.assign({}, attributedString, {
      runs
    });
  };
};

/**
 * @typedef {import('../types.js').AttributedString} AttributedString
 * @typedef {import('../types.js').Attributes} Attributes
 * @typedef {import('../types.js').Run} Run
 */

/**
 * @param {Attributes} a attributes
 * @returns {Attributes} attributes with defaults
 */
const applyAttributes = a => {
  return {
    align: a.align || (a.direction === 'rtl' ? 'right' : 'left'),
    alignLastLine: a.alignLastLine || (a.align === 'justify' ? 'left' : a.align || 'left'),
    attachment: a.attachment || null,
    backgroundColor: a.backgroundColor || null,
    bullet: a.bullet || null,
    characterSpacing: a.characterSpacing || 0,
    color: a.color || 'black',
    direction: a.direction || 'ltr',
    features: a.features || [],
    fill: a.fill !== false,
    font: a.font || null,
    fontSize: a.fontSize || 12,
    hangingPunctuation: a.hangingPunctuation || false,
    hyphenationFactor: a.hyphenationFactor || 0,
    indent: a.indent || 0,
    justificationFactor: a.justificationFactor || 1,
    lineHeight: a.lineHeight || null,
    lineSpacing: a.lineSpacing || 0,
    link: a.link || null,
    marginLeft: a.marginLeft || a.margin || 0,
    marginRight: a.marginRight || a.margin || 0,
    opacity: a.opacity,
    paddingTop: a.paddingTop || a.padding || 0,
    paragraphSpacing: a.paragraphSpacing || 0,
    script: a.script || null,
    shrinkFactor: a.shrinkFactor || 0,
    strike: a.strike || false,
    strikeColor: a.strikeColor || a.color || 'black',
    strikeStyle: a.strikeStyle || 'solid',
    stroke: a.stroke || false,
    underline: a.underline || false,
    underlineColor: a.underlineColor || a.color || 'black',
    underlineStyle: a.underlineStyle || 'solid',
    verticalAlign: a.verticalAlign || null,
    wordSpacing: a.wordSpacing || 0,
    yOffset: a.yOffset || 0
  };
};

/**
 * Apply default style to run
 *
 * @param {Run} run run
 * @returns {Run} run with styles
 */
const applyRunStyles = run => {
  const attributes = applyAttributes(run.attributes);
  return Object.assign({}, run, {
    attributes
  });
};

/**
 * Apply default attributes for an attributed string
 */
const applyDefaultStyles = () => {
  /**
   * @param {AttributedString} attributedString attributed string
   * @returns {AttributedString} attributed string
   */
  return attributedString => {
    const string = attributedString.string || '';
    const runs = (attributedString.runs || []).map(applyRunStyles);
    return {
      string,
      runs
    };
  };
};

/* eslint-disable no-restricted-syntax */

/**
 * @typedef {import('../types.js').AttributedString} AttributedString
 */

/**
 * Apply scaling and yOffset for verticalAlign 'sub' and 'super'.
 */
const verticalAlignment = () => {
  /**
   * @param {AttributedString} attributedString attributed string
   * @returns {AttributedString} attributed string
   */
  return attributedString => {
    attributedString.runs.forEach(run => {
      const {
        attributes
      } = run;
      const {
        verticalAlign
      } = attributes;
      if (verticalAlign === 'sub') {
        attributes.yOffset = -0.2;
      } else if (verticalAlign === 'super') {
        attributes.yOffset = 0.4;
      }
    });
    return attributedString;
  };
};

/**
 * @typedef {import('../types.js').AttributedString} AttributedString
 * @typedef {import('../types.js').Run} Run
 */

const bidi$1 = (0,bidi/* default */.A)();

/**
 * @param {Run[]} runs
 * @returns {number[]} bidi levels
 */
const getBidiLevels = runs => {
  return runs.reduce((acc, run) => {
    const length = run.end - run.start;
    const levels = repeat(run.attributes.bidiLevel, length);
    return acc.concat(levels);
  }, []);
};

/**
 * Perform bidi mirroring
 */
const mirrorString = () => {
  /**
   * @param {AttributedString} attributedString attributed string
   * @returns {AttributedString} attributed string
   */
  return attributedString => {
    const levels = getBidiLevels(attributedString.runs);
    let updatedString = '';
    attributedString.string.split('').forEach((char, index) => {
      const isRTL = levels[index] % 2 === 1;
      const mirroredChar = isRTL ? bidi$1.getMirroredCharacter(attributedString.string.charAt(index)) : null;
      updatedString += mirroredChar || char;
    });
    return {
      ...attributedString,
      string: updatedString,
      levels
    };
  };
};

/**
 * @typedef {import('../types.js').AttributedString} AttributedString
 * @typedef {import('../types.js').Rect} Rect
 */

/**
 * A LayoutEngine is the main object that performs text layout.
 * It accepts an AttributedString and a Container object
 * to layout text into, and uses several helper objects to perform
 * various layout tasks. These objects can be overridden to customize
 * layout behavior.
 *
 * @param {Object} engines engines
 */
const layoutEngine = engines => {
  /**
   * @param {AttributedString} attributedString attributed string
   * @param {Rect} container container rect
   * @param {Object} options layout options
   * @returns {Object[]} paragraph blocks
   */
  return function (attributedString, container, options) {
    if (options === void 0) {
      options = {};
    }
    const processParagraph = compose(resolveYOffset(), resolveAttachments(), verticalAlignment(), wrapWords(engines, options), generateGlyphs(), mirrorString(), preprocessRuns(engines, options));
    const processParagraphs = paragraphs => paragraphs.map(processParagraph);
    return compose(finalizeFragments(engines, options), bidiReordering(), typesetter(engines, options, container), processParagraphs, splitParagraphs(), applyDefaultStyles())(attributedString);
  };
};
const textkit_bidi = (0,bidi/* default */.A)();

/**
 * @param  {Object}  layout options
 * @param  {Object}  attributed string
 * @return {Object} attributed string
 */
const bidiEngine = () => attributedString => {
  var _attributedString$run;
  const {
    string
  } = attributedString;
  const direction = (_attributedString$run = attributedString.runs[0]) === null || _attributedString$run === void 0 ? void 0 : _attributedString$run.attributes.direction;
  const {
    levels
  } = textkit_bidi.getEmbeddingLevels(string, direction);
  let lastLevel = null;
  let lastIndex = 0;
  let index = 0;
  const res = [];
  for (let i = 0; i < levels.length; i += 1) {
    const level = levels[i];
    if (level !== lastLevel) {
      if (lastLevel !== null) {
        res.push({
          start: lastIndex,
          end: index,
          attributes: {
            bidiLevel: lastLevel
          }
        });
      }
      lastIndex = index;
      lastLevel = level;
    }
    index += 1;
  }
  if (lastIndex < string.length) {
    res.push({
      start: lastIndex,
      end: string.length,
      attributes: {
        bidiLevel: lastLevel
      }
    });
  }
  return {
    string,
    runs: res
  };
};

/* eslint-disable no-plusplus */
const INFINITY = 10000;

/**
 * @param {Object[]} subnodes
 * @param {number[]} widths
 * @param {number} lineNumber
 * @returns {number}
 */
const getNextBreakpoint = (subnodes, widths, lineNumber) => {
  let position = null;
  let minimumBadness = Infinity;
  const sum = {
    width: 0,
    stretch: 0,
    shrink: 0
  };
  const lineLength = widths[Math.min(lineNumber, widths.length - 1)];
  const calculateRatio = node => {
    if (sum.width < lineLength) {
      return sum.stretch - node.stretch > 0 ? (lineLength - sum.width) / sum.stretch : INFINITY;
    }
    if (sum.width > lineLength) {
      return sum.shrink - node.shrink > 0 ? (lineLength - sum.width) / sum.shrink : INFINITY;
    }
    return 0;
  };
  for (let i = 0; i < subnodes.length; i += 1) {
    const node = subnodes[i];
    if (node.type === 'box') {
      sum.width += node.width;
    } else if (node.type === 'glue') {
      sum.width += node.width;
      sum.stretch += node.stretch;
      sum.shrink += node.shrink;
    }
    if (sum.width - sum.shrink > lineLength) {
      if (position === null) {
        let j = i === 0 ? i + 1 : i;
        while (j < subnodes.length && (subnodes[j].type === 'glue' || subnodes[j].type === 'penalty')) {
          j++;
        }
        position = j - 1;
      }
      break;
    }
    if (node.type === 'penalty' || node.type === 'glue') {
      const ratio = calculateRatio(node);
      const penalty = node.type === 'penalty' ? node.penalty : 0;
      const badness = 100 * Math.abs(ratio) ** 3 + penalty;
      if (minimumBadness >= badness) {
        position = i;
        minimumBadness = badness;
      }
    }
  }
  return sum.width - sum.shrink > lineLength ? position : null;
};

/**
 * @param {Object[]} nodes
 * @param {number[]} widths
 */
const applyBestFit = (nodes, widths) => {
  let count = 0;
  let lineNumber = 0;
  let subnodes = nodes;
  const breakpoints = [{
    position: 0
  }];
  while (subnodes.length > 0) {
    const breakpoint = getNextBreakpoint(subnodes, widths, lineNumber);
    if (breakpoint !== null) {
      count += breakpoint;
      breakpoints.push({
        position: count
      });
      subnodes = subnodes.slice(breakpoint + 1, subnodes.length);
      count++;
      lineNumber++;
    } else {
      subnodes = [];
    }
  }
  return breakpoints;
};

/* eslint-disable no-param-reassign */
/* eslint-disable max-classes-per-file */
class Node {
  constructor(data) {
    this.prev = null;
    this.next = null;
    this.data = data;
  }
  toString() {
    return this.data.toString();
  }
}
class LinkedList {
  constructor() {
    this.head = null;
    this.tail = null;
    this.listSize = 0;
    this.listLength = 0;
  }
  isLinked(node) {
    return !(node && node.prev === null && node.next === null && this.tail !== node && this.head !== node || this.isEmpty());
  }
  size() {
    return this.listSize;
  }
  isEmpty() {
    return this.listSize === 0;
  }
  first() {
    return this.head;
  }
  last() {
    return this.last;
  }
  toString() {
    return this.toArray().toString();
  }
  toArray() {
    let node = this.head;
    const result = [];
    while (node !== null) {
      result.push(node);
      node = node.next;
    }
    return result;
  }
  forEach(fun) {
    let node = this.head;
    while (node !== null) {
      fun(node);
      node = node.next;
    }
  }
  contains(n) {
    let node = this.head;
    if (!this.isLinked(n)) {
      return false;
    }
    while (node !== null) {
      if (node === n) {
        return true;
      }
      node = node.next;
    }
    return false;
  }
  at(i) {
    let node = this.head;
    let index = 0;
    if (i >= this.listLength || i < 0) {
      return null;
    }
    while (node !== null) {
      if (i === index) {
        return node;
      }
      node = node.next;
      index += 1;
    }
    return null;
  }
  insertAfter(node, newNode) {
    if (!this.isLinked(node)) {
      return this;
    }
    newNode.prev = node;
    newNode.next = node.next;
    if (node.next === null) {
      this.tail = newNode;
    } else {
      node.next.prev = newNode;
    }
    node.next = newNode;
    this.listSize += 1;
    return this;
  }
  insertBefore(node, newNode) {
    if (!this.isLinked(node)) {
      return this;
    }
    newNode.prev = node.prev;
    newNode.next = node;
    if (node.prev === null) {
      this.head = newNode;
    } else {
      node.prev.next = newNode;
    }
    node.prev = newNode;
    this.listSize += 1;
    return this;
  }
  push(node) {
    if (this.head === null) {
      this.unshift(node);
    } else {
      this.insertAfter(this.tail, node);
    }
    return this;
  }
  unshift(node) {
    if (this.head === null) {
      this.head = node;
      this.tail = node;
      node.prev = null;
      node.next = null;
      this.listSize += 1;
    } else {
      this.insertBefore(this.head, node);
    }
    return this;
  }
  remove(node) {
    if (!this.isLinked(node)) {
      return this;
    }
    if (node.prev === null) {
      this.head = node.next;
    } else {
      node.prev.next = node.next;
    }
    if (node.next === null) {
      this.tail = node.prev;
    } else {
      node.next.prev = node.prev;
    }
    this.listSize -= 1;
    return this;
  }
  pop() {
    const node = this.tail;
    this.tail.prev.next = null;
    this.tail = this.tail.prev;
    this.listSize -= 1;
    node.prev = null;
    node.next = null;
    return node;
  }
  shift() {
    const node = this.head;
    this.head.next.prev = null;
    this.head = this.head.next;
    this.listSize -= 1;
    node.prev = null;
    node.next = null;
    return node;
  }
}
LinkedList.Node = Node;

/* eslint-disable no-restricted-properties */

/**
 * @param {Object[]} nodes
 * @param {number[]} lines
 * @param {Object} settings
 * @preserve Knuth and Plass line breaking algorithm in JavaScript
 *
 * Licensed under the new BSD License.
 * Copyright 2009-2010, Bram Stein
 * All rights reserved.
 */
const linebreak = (nodes, lines, settings) => {
  const options = {
    demerits: {
      line: settings && settings.demerits && settings.demerits.line || 10,
      flagged: settings && settings.demerits && settings.demerits.flagged || 100,
      fitness: settings && settings.demerits && settings.demerits.fitness || 3000
    },
    tolerance: settings && settings.tolerance || 3
  };
  const activeNodes = new LinkedList();
  const sum = {
    width: 0,
    stretch: 0,
    shrink: 0
  };
  const lineLengths = lines;
  const breaks = [];
  let tmp = {
    data: {
      demerits: Infinity
    }
  };
  function breakpoint(position, demerits, ratio, line, fitnessClass, totals, previous) {
    return {
      position,
      demerits,
      ratio,
      line,
      fitnessClass,
      totals: totals || {
        width: 0,
        stretch: 0,
        shrink: 0
      },
      previous
    };
  }
  function computeCost(start, end, active, currentLine) {
    let width = sum.width - active.totals.width;
    let stretch = 0;
    let shrink = 0;
    // If the current line index is within the list of linelengths, use it, otherwise use
    // the last line length of the list.
    const lineLength = currentLine < lineLengths.length ? lineLengths[currentLine - 1] : lineLengths[lineLengths.length - 1];
    if (nodes[end].type === 'penalty') {
      width += nodes[end].width;
    }
    if (width < lineLength) {
      // Calculate the stretch ratio
      stretch = sum.stretch - active.totals.stretch;
      if (stretch > 0) {
        return (lineLength - width) / stretch;
      }
      return linebreak.infinity;
    }
    if (width > lineLength) {
      // Calculate the shrink ratio
      shrink = sum.shrink - active.totals.shrink;
      if (shrink > 0) {
        return (lineLength - width) / shrink;
      }
      return linebreak.infinity;
    }

    // perfect match
    return 0;
  }

  // Add width, stretch and shrink values from the current
  // break point up to the next box or forced penalty.
  function computeSum(breakPointIndex) {
    const result = {
      width: sum.width,
      stretch: sum.stretch,
      shrink: sum.shrink
    };
    for (let i = breakPointIndex; i < nodes.length; i += 1) {
      if (nodes[i].type === 'glue') {
        result.width += nodes[i].width;
        result.stretch += nodes[i].stretch;
        result.shrink += nodes[i].shrink;
      } else if (nodes[i].type === 'box' || nodes[i].type === 'penalty' && nodes[i].penalty === -linebreak.infinity && i > breakPointIndex) {
        break;
      }
    }
    return result;
  }

  // The main loop of the algorithm
  // eslint-disable-next-line no-shadow
  function mainLoop(node, index, nodes) {
    let active = activeNodes.first();
    let next = null;
    let ratio = 0;
    let demerits = 0;
    /**
     * @type {Object[]}
     */
    let candidates = [];
    let badness;
    let currentLine = 0;
    let tmpSum;
    let currentClass = 0;
    let fitnessClass;
    /**
     * @type {Object}
     */
    let candidate;
    let newNode;

    // The inner loop iterates through all the active nodes with line < currentLine and then
    // breaks out to insert the new active node candidates before looking at the next active
    // nodes for the next lines. The result of this is that the active node list is always
    // sorted by line number.
    while (active !== null) {
      candidates = [{
        demerits: Infinity
      }, {
        demerits: Infinity
      }, {
        demerits: Infinity
      }, {
        demerits: Infinity
      }];

      // Iterate through the linked list of active nodes to find new potential active nodes
      // and deactivate current active nodes.
      while (active !== null) {
        next = active.next;
        currentLine = active.data.line + 1;
        ratio = computeCost(active.data.position, index, active.data, currentLine);

        // Deactive nodes when the distance between the current active node and the
        // current node becomes too large (i.e. it exceeds the stretch limit and the stretch
        // ratio becomes negative) or when the current node is a forced break (i.e. the end
        // of the paragraph when we want to remove all active nodes, but possibly have a final
        // candidate active node---if the paragraph can be set using the given tolerance value.)
        if (ratio < -1 || node.type === 'penalty' && node.penalty === -linebreak.infinity) {
          activeNodes.remove(active);
        }

        // If the ratio is within the valid range of -1 <= ratio <= tolerance calculate the
        // total demerits and record a candidate active node.
        if (ratio >= -1 && ratio <= options.tolerance) {
          badness = 100 * Math.pow(Math.abs(ratio), 3);

          // Positive penalty
          if (node.type === 'penalty' && node.penalty >= 0) {
            demerits = Math.pow(options.demerits.line + badness, 2) + Math.pow(node.penalty, 2);
            // Negative penalty but not a forced break
          } else if (node.type === 'penalty' && node.penalty !== -linebreak.infinity) {
            demerits = Math.pow(options.demerits.line + badness, 2) - Math.pow(node.penalty, 2);
            // All other cases
          } else {
            demerits = Math.pow(options.demerits.line + badness, 2);
          }
          if (node.type === 'penalty' && nodes[active.data.position].type === 'penalty') {
            demerits += options.demerits.flagged * node.flagged * nodes[active.data.position].flagged;
          }

          // Calculate the fitness class for this candidate active node.
          if (ratio < -0.5) {
            currentClass = 0;
          } else if (ratio <= 0.5) {
            currentClass = 1;
          } else if (ratio <= 1) {
            currentClass = 2;
          } else {
            currentClass = 3;
          }

          // Add a fitness penalty to the demerits if the fitness classes of two adjacent lines
          // differ too much.
          if (Math.abs(currentClass - active.data.fitnessClass) > 1) {
            demerits += options.demerits.fitness;
          }

          // Add the total demerits of the active node to get the total demerits of this candidate node.
          demerits += active.data.demerits;

          // Only store the best candidate for each fitness class
          if (demerits < candidates[currentClass].demerits) {
            candidates[currentClass] = {
              active,
              demerits,
              ratio
            };
          }
        }
        active = next;

        // Stop iterating through active nodes to insert new candidate active nodes in the active list
        // before moving on to the active nodes for the next line.
        // TODO: The Knuth and Plass paper suggests a conditional for currentLine < j0. This means paragraphs
        // with identical line lengths will not be sorted by line number. Find out if that is a desirable outcome.
        // For now I left this out, as it only adds minimal overhead to the algorithm and keeping the active node
        // list sorted has a higher priority.
        if (active !== null && active.data.line >= currentLine) {
          break;
        }
      }
      tmpSum = computeSum(index);
      for (fitnessClass = 0; fitnessClass < candidates.length; fitnessClass += 1) {
        candidate = candidates[fitnessClass];
        if (candidate.demerits < Infinity) {
          newNode = new LinkedList.Node(breakpoint(index, candidate.demerits, candidate.ratio, candidate.active.data.line + 1, fitnessClass, tmpSum, candidate.active));
          if (active !== null) {
            activeNodes.insertBefore(active, newNode);
          } else {
            activeNodes.push(newNode);
          }
        }
      }
    }
  }

  // Add an active node for the start of the paragraph.
  activeNodes.push(new LinkedList.Node(breakpoint(0, 0, 0, 0, 0, undefined, null)));

  // eslint-disable-next-line no-shadow
  nodes.forEach((node, index, nodes) => {
    if (node.type === 'box') {
      sum.width += node.width;
    } else if (node.type === 'glue') {
      if (index > 0 && nodes[index - 1].type === 'box') {
        mainLoop(node, index, nodes);
      }
      sum.width += node.width;
      sum.stretch += node.stretch;
      sum.shrink += node.shrink;
    } else if (node.type === 'penalty' && node.penalty !== linebreak.infinity) {
      mainLoop(node, index, nodes);
    }
  });
  if (activeNodes.size() !== 0) {
    // Find the best active node (the one with the least total demerits.)
    activeNodes.forEach(node => {
      if (node.data.demerits < tmp.data.demerits) {
        tmp = node;
      }
    });
    while (tmp !== null) {
      breaks.push({
        position: tmp.data.position,
        ratio: tmp.data.ratio
      });
      tmp = tmp.data.previous;
    }
    return breaks.reverse();
  }
  return [];
};
linebreak.infinity = 10000;
linebreak.glue = (width, value, stretch, shrink) => ({
  type: 'glue',
  value,
  width,
  stretch,
  shrink
});
linebreak.box = function (width, value, hyphenated) {
  if (hyphenated === void 0) {
    hyphenated = false;
  }
  return {
    type: 'box',
    width,
    value,
    hyphenated
  };
};
linebreak.penalty = (width, penalty, flagged) => ({
  type: 'penalty',
  width,
  penalty,
  flagged
});

/**
 * @typedef {import('../types.js').Run} Run
 */

/**
 * Add scalar to run
 *
 * @param {number} n scalar
 * @param {Run} run run
 * @returns {Run} added run
 */
const add = (n, run) => {
  const start = run.start + n;
  const end = run.end + n;
  return Object.assign({}, run, {
    start,
    end
  });
};

/**
 * @typedef {import('../types.js').Run} Run
 */

/**
 * Get run length
 *
 * @param {Run} run run
 * @returns {number} length
 */
const textkit_length = run => {
  return run.end - run.start;
};

/**
 * @typedef {import('../types.js').Run} Run
 */

/**
 * Concats two runs into one
 *
 * @param {Run} runA first run
 * @param {Run} runB second run
 * @returns {Run} concatenated run
 */
const concat = (runA, runB) => {
  const end = runA.end + textkit_length(runB);
  const glyphs = (runA.glyphs || []).concat(runB.glyphs || []);
  const positions = (runA.positions || []).concat(runB.positions || []);
  const attributes = Object.assign({}, runA.attributes, runB.attributes);
  const runAIndices = runA.glyphIndices || [];
  const runALastIndex = lib_last(runAIndices) || 0;
  const runBIndices = (runB.glyphIndices || []).map(i => i + runALastIndex + 1);
  const glyphIndices = textkit_normalize(runAIndices.concat(runBIndices));
  return Object.assign({}, runA, {
    end,
    glyphs,
    positions,
    attributes,
    glyphIndices
  });
};

/**
 * @typedef {import('../types.js').Glyph} Glyph
 * @typedef {import('../types.js').Run} Run
 */

/**
 * Insert glyph to run in the given index
 *
 * @param {number} index index
 * @param {Glyph} glyph glyph
 * @param {Run} run run
 * @returns {Run} run with glyph
 */
const insertGlyph$1 = (index, glyph, run) => {
  if (!glyph) return run;

  // Split resolves ligature splitting in case new glyph breaks some
  const leadingRun = slice$1(0, index, run);
  const trailingRun = slice$1(index, Infinity, run);
  return concat(append$1(glyph, leadingRun), trailingRun);
};

/**
 * Insert either glyph or code point to run in the given index
 *
 * @param {number} index index
 * @param {Glyph | number} value glyph or codePoint
 * @param {Run} run run
 * @returns {Run} run with glyph
 */
const insert = (index, value, run) => {
  const font = getFont(run);
  const glyph = textkit_isNumber(value) ? fromCodePoint(value, font) : value;
  return insertGlyph$1(index, glyph, run);
};

/**
 * @typedef {import('../types.js').AttributedString} AttributedString
 */

/**
 * Get run index at char index
 *
 * @param {number} n char index
 * @param {AttributedString} string attributed string
 * @returns {number} run index
 */
const runIndexAt = (n, string) => {
  return runIndexAt$1(n, string.runs);
};

/**
 * @typedef {import('../types.js').AttributedString} AttributedString
 * @typedef {import('../types.js').Glyph} Glyph
 */

/**
 * Insert glyph into attributed string
 *
 * @param {number} index index
 * @param {Glyph} glyph glyph
 * @param {AttributedString} attributedString attributed string
 * @returns {AttributedString} attributed string with new glyph
 */
const insertGlyph = (index, glyph, attributedString) => {
  const runIndex = runIndexAt(index, attributedString);

  // Add glyph to the end if run index invalid
  if (runIndex === -1) return append(glyph, attributedString);
  const codePoints = glyph.codePoints || [];
  const string = attributedString.string.slice(0, index) + stringFromCodePoints(codePoints) + attributedString.string.slice(index);
  const runs = attributedString.runs.map((run, i) => {
    if (i === runIndex) return insert(index - run.start, glyph, run);
    if (i > runIndex) return add(codePoints.length, run);
    return run;
  });
  return Object.assign({}, attributedString, {
    string,
    runs
  });
};

/**
 * @typedef {import('../types.js').Run} Run
 */

/**
 * Advance width between two string indices
 *
 * @param {number} start glyph index
 * @param {number} end glyph index
 * @param {Run} run run
 * @returns {number} advanced width run
 */
const advanceWidthBetween$1 = (start, end, run) => {
  const runStart = run.start || 0;
  const glyphStartIndex = Math.max(0, glyphIndexAt(start - runStart, run));
  const glyphEndIndex = Math.max(0, glyphIndexAt(end - runStart, run));
  const positions = (run.positions || []).slice(glyphStartIndex, glyphEndIndex);
  return advanceWidth$2(positions);
};

/**
 * @typedef {import('../types.js').AttributedString} AttributedString
 */

/**
 * Advance width between start and end
 * Does not consider ligature splitting for the moment.
 * Check performance impact on supporting this
 *
 * @param {number} start offset
 * @param {number} end offset
 * @param {AttributedString} attributedString
 * @returns {number} advance width
 */
const advanceWidthBetween = (start, end, attributedString) => {
  const runs = filter(start, end, attributedString.runs);
  return runs.reduce((acc, run) => acc + advanceWidthBetween$1(start, end, run), 0);
};

/**
 * @typedef {import('../../types.js').AttributedString} AttributedString
 * @typedef {import('../../types.js').Attributes} Attributes
 */

const HYPHEN = 0x002d;
const TOLERANCE_STEPS = 5;
const TOLERANCE_LIMIT = 50;
const opts = {
  width: 3,
  stretch: 6,
  shrink: 9
};

/**
 * Slice attributed string to many lines
 *
 * @param {AttributedString} string attributed string
 * @param {Object[]} nodes
 * @param {Object[]} breaks
 * @returns {AttributedString[]} attributed strings
 */
const breakLines = (string, nodes, breaks) => {
  let start = 0;
  let end = null;
  const lines = breaks.reduce((acc, breakPoint) => {
    const node = nodes[breakPoint.position];
    const prevNode = nodes[breakPoint.position - 1];

    // Last breakpoint corresponds to K&P mandatory final glue
    if (breakPoint.position === nodes.length - 1) return acc;
    let line;
    if (node.type === 'penalty') {
      end = prevNode.value.end;
      line = slice(start, end, string);
      line = insertGlyph(line.length, HYPHEN, line);
    } else {
      end = node.value.end;
      line = slice(start, end, string);
    }
    start = end;
    return [...acc, line];
  }, []);

  // Last line
  lines.push(slice(start, string.string.length, string));
  return lines;
};

/**
 * Return Knuth & Plass nodes based on line and previously calculated syllables
 *
 * @param {AttributedString} attributedString attributed string
 * @param {Object} args attributed string args
 * @param {Object} options layout options
 * @returns {Object[]} attributed strings
 */
const getNodes = (attributedString, _ref, options) => {
  let {
    align
  } = _ref;
  let start = 0;
  const hyphenWidth = 5;
  const {
    syllables
  } = attributedString;
  const hyphenPenalty = options.hyphenationPenalty || (align === 'justify' ? 100 : 600);
  const result = syllables.reduce((acc, s, index) => {
    const width = advanceWidthBetween(start, start + s.length, attributedString);
    if (s.trim() === '') {
      const stretch = width * opts.width / opts.stretch;
      const shrink = width * opts.width / opts.shrink;
      const value = {
        start,
        end: start + s.length
      };
      acc.push(linebreak.glue(width, value, stretch, shrink));
    } else {
      const hyphenated = syllables[index + 1] !== ' ';
      const value = {
        start,
        end: start + s.length
      };
      acc.push(linebreak.box(width, value, hyphenated));
      if (syllables[index + 1] && hyphenated) {
        acc.push(linebreak.penalty(hyphenWidth, hyphenPenalty, 1));
      }
    }
    start += s.length;
    return acc;
  }, []);
  result.push(linebreak.glue(0, null, linebreak.infinity, 0));
  result.push(linebreak.penalty(0, -linebreak.infinity, 1));
  return result;
};

/**
 * @param {AttributedString} attributedString attributed string
 * @returns {Attributes} styles
 */
const getStyles = attributedString => {
  var _attributedString$run, _attributedString$run2;
  return ((_attributedString$run = attributedString.runs) === null || _attributedString$run === void 0 ? void 0 : (_attributedString$run2 = _attributedString$run[0]) === null || _attributedString$run2 === void 0 ? void 0 : _attributedString$run2.attributes) || {};
};

/**
 * Performs Knuth & Plass line breaking algorithm
 * Fallbacks to best fit algorithm if latter not successful
 *
 * @param {Object} options layout options
 */
const linebreaker = options => {
  /**
   * @param {AttributedString} attributedString attributed string
   * @param {number[]} availableWidths available widths
   * @returns {AttributedString[]} attributed strings
   */
  return (attributedString, availableWidths) => {
    let tolerance = options.tolerance || 4;
    const style = getStyles(attributedString);
    const nodes = getNodes(attributedString, style, options);

    /** @type {Object[]} */
    let breaks = linebreak(nodes, availableWidths, {
      tolerance
    });

    // Try again with a higher tolerance if the line breaking failed.
    while (breaks.length === 0 && tolerance < TOLERANCE_LIMIT) {
      tolerance += TOLERANCE_STEPS;
      breaks = linebreak(nodes, availableWidths, {
        tolerance
      });
    }
    if (breaks.length === 0 || breaks.length === 1 && breaks[0].position === 0) {
      breaks = applyBestFit(nodes, availableWidths);
    }
    return breakLines(attributedString, nodes, breaks.slice(1));
  };
};
const WHITESPACE_PRIORITY = 1;
const LETTER_PRIORITY = 2;
const EXPAND_WHITESPACE_FACTOR = {
  before: 0.5,
  after: 0.5,
  priority: WHITESPACE_PRIORITY,
  unconstrained: false
};
const EXPAND_CHAR_FACTOR = {
  before: 0.14453125,
  // 37/256
  after: 0.14453125,
  priority: LETTER_PRIORITY,
  unconstrained: false
};
const SHRINK_WHITESPACE_FACTOR = {
  before: -0.04296875,
  // -11/256
  after: -0.04296875,
  priority: WHITESPACE_PRIORITY,
  unconstrained: false
};
const SHRINK_CHAR_FACTOR = {
  before: -0.04296875,
  after: -0.04296875,
  priority: LETTER_PRIORITY,
  unconstrained: false
};
const getCharFactor = (direction, options) => {
  const expandCharFactor = options.expandCharFactor || {};
  const shrinkCharFactor = options.shrinkCharFactor || {};
  return direction === 'GROW' ? Object.assign({}, EXPAND_CHAR_FACTOR, expandCharFactor) : Object.assign({}, SHRINK_CHAR_FACTOR, shrinkCharFactor);
};
const getWhitespaceFactor = (direction, options) => {
  const expandWhitespaceFactor = options.expandWhitespaceFactor || {};
  const shrinkWhitespaceFactor = options.shrinkWhitespaceFactor || {};
  return direction === 'GROW' ? Object.assign({}, EXPAND_WHITESPACE_FACTOR, expandWhitespaceFactor) : Object.assign({}, SHRINK_WHITESPACE_FACTOR, shrinkWhitespaceFactor);
};
const factor = (direction, options) => glyphs => {
  const charFactor = getCharFactor(direction, options);
  const whitespaceFactor = getWhitespaceFactor(direction, options);
  const factors = [];
  for (let index = 0; index < glyphs.length; index += 1) {
    let f;
    const glyph = glyphs[index];
    if (isWhiteSpace(glyph)) {
      f = Object.assign({}, whitespaceFactor);
      if (index === glyphs.length - 1) {
        f.before = 0;
        if (index > 0) {
          factors[index - 1].after = 0;
        }
      }
    } else if (glyph.isMark && index > 0) {
      f = Object.assign({}, factors[index - 1]);
      f.before = 0;
      factors[index - 1].after = 0;
    } else {
      f = Object.assign({}, charFactor);
    }
    factors.push(f);
  }
  return factors;
};
const getFactors = (gap, line, options) => {
  const direction = gap > 0 ? 'GROW' : 'SHRINK';
  const getFactor = factor(direction, options);
  const factors = line.runs.reduce((acc, run) => {
    return acc.concat(getFactor(run.glyphs));
  }, []);
  factors[0].before = 0;
  factors[factors.length - 1].after = 0;
  return factors;
};

/* eslint-disable no-multi-assign */
const KASHIDA_PRIORITY = 0;
const NULL_PRIORITY = 3;
const getDistances = (gap, factors) => {
  let total = 0;
  const priorities = [];
  const unconstrained = [];
  for (let priority = KASHIDA_PRIORITY; priority <= NULL_PRIORITY; priority += 1) {
    priorities[priority] = unconstrained[priority] = 0;
  }

  // sum the factors at each priority
  for (let j = 0; j < factors.length; j += 1) {
    const f = factors[j];
    const sum = f.before + f.after;
    total += sum;
    priorities[f.priority] += sum;
    if (f.unconstrained) {
      unconstrained[f.priority] += sum;
    }
  }

  // choose the priorities that need to be applied
  let highestPriority = -1;
  let highestPrioritySum = 0;
  let remainingGap = gap;
  let priority;
  for (priority = KASHIDA_PRIORITY; priority <= NULL_PRIORITY; priority += 1) {
    const prioritySum = priorities[priority];
    if (prioritySum !== 0) {
      if (highestPriority === -1) {
        highestPriority = priority;
        highestPrioritySum = prioritySum;
      }

      // if this priority covers the remaining gap, we're done
      if (Math.abs(remainingGap) <= Math.abs(prioritySum)) {
        priorities[priority] = remainingGap / prioritySum;
        unconstrained[priority] = 0;
        remainingGap = 0;
        break;
      }

      // mark that we need to use 100% of the adjustment from
      // this priority, and subtract the space that it consumes
      priorities[priority] = 1;
      remainingGap -= prioritySum;

      // if this priority has unconstrained glyphs, let them consume the remaining space
      if (unconstrained[priority] !== 0) {
        unconstrained[priority] = remainingGap / unconstrained[priority];
        remainingGap = 0;
        break;
      }
    }
  }

  // zero out remaining priorities (if any)
  for (let p = priority + 1; p <= NULL_PRIORITY; p += 1) {
    priorities[p] = 0;
    unconstrained[p] = 0;
  }

  // if there is still space left over, assign it to the highest priority that we saw.
  // this violates their factors, but it only happens in extreme cases
  if (remainingGap > 0 && highestPriority > -1) {
    priorities[highestPriority] = (highestPrioritySum + (gap - total)) / highestPrioritySum;
  }

  // create and return an array of distances to add to each glyph's advance
  const distances = [];
  for (let index = 0; index < factors.length; index += 1) {
    // the distance to add to this glyph is the sum of the space to add
    // after this glyph, and the space to add before the next glyph
    const f = factors[index];
    const next = factors[index + 1];
    let dist = f.after * priorities[f.priority];
    if (next) {
      dist += next.before * priorities[next.priority];
    }

    // if this glyph is unconstrained, add the unconstrained distance as well
    if (f.unconstrained) {
      dist += f.after * unconstrained[f.priority];
      if (next) {
        dist += next.before * unconstrained[next.priority];
      }
    }
    distances.push(dist);
  }
  return distances;
};

/* eslint-disable consistent-return */
/* eslint-disable no-plusplus */
/* eslint-disable no-restricted-syntax */

/**
 * Adjust run positions by given distances
 *
 * @param {number[]} distances
 * @param {Object} line
 * @returns {Object} line
 */
const justifyLine = (distances, line) => {
  let index = 0;
  for (const run of line.runs) {
    for (const position of run.positions) {
      position.xAdvance += distances[index++];
    }
  }
  return line;
};

/**
 * A JustificationEngine is used by a Typesetter to perform line fragment
 * justification. This implementation is based on a description of Apple's
 * justification algorithm from a PDF in the Apple Font Tools package.
 *
 * // TODO: Make it immutable
 *
 * @param {Object} options layout options
 */
const justification = options => {
  /**
   * @param {Object} line
   * @returns {Object} line
   */
  return line => {
    const gap = line.box.width - advanceWidth(line);
    if (gap === 0) return; // Exact fit

    const factors = getFactors(gap, line, options);
    const distances = getDistances(gap, factors);
    return justifyLine(distances, line);
  };
};

/**
 * @typedef {import('../types.js').AttributedString} AttributedString
 */

/**
 * Returns attributed string ascent
 *
 * @param {AttributedString} attributedString attributed string
 * @returns {number} ascent
 */
const ascent = attributedString => {
  const reducer = (acc, run) => Math.max(acc, ascent$1(run));
  return attributedString.runs.reduce(reducer, 0);
};

/* eslint-disable no-param-reassign */

// The base font size used for calculating underline thickness.
const BASE_FONT_SIZE = 12;

/**
 * A TextDecorationEngine is used by a Typesetter to generate
 * DecorationLines for a line fragment, including underlines
 * and strikes.
 */
const textDecoration = () => lineFragment => {
  let x = lineFragment.overflowLeft || 0;
  const overflowRight = lineFragment.overflowRight || 0;
  const maxX = advanceWidth(lineFragment) - overflowRight;
  lineFragment.decorationLines = [];
  for (let i = 0; i < lineFragment.runs.length; i += 1) {
    const run = lineFragment.runs[i];
    const width = Math.min(maxX - x, advanceWidth$1(run));
    const thickness = Math.max(0.5, Math.floor(run.attributes.fontSize / BASE_FONT_SIZE));
    if (run.attributes.underline) {
      const rect = {
        x,
        y: ascent(lineFragment) + thickness * 2,
        width,
        height: thickness
      };
      const line = {
        rect,
        opacity: run.attributes.opacity,
        color: run.attributes.underlineColor || 'black',
        style: run.attributes.underlineStyle || 'solid'
      };
      lineFragment.decorationLines.push(line);
    }
    if (run.attributes.strike) {
      const y = ascent(lineFragment) - ascent$1(run) / 3;
      const rect = {
        x,
        y,
        width,
        height: thickness
      };
      const line = {
        rect,
        opacity: run.attributes.opacity,
        color: run.attributes.strikeColor || 'black',
        style: run.attributes.strikeStyle || 'solid'
      };
      lineFragment.decorationLines.push(line);
    }
    x += width;
  }
  return lineFragment;
};
const ignoredScripts = ['Common', 'Inherited', 'Unknown'];

/**
 * @typedef {import('../../types.js').AttributedString} AttributedString
 */

/**
 * Resolves unicode script in runs, grouping equal runs together
 */
const scriptItemizer = () => {
  /**
   * @param {AttributedString} attributedString attributed string
   * @returns {AttributedString} attributed string
   */
  return attributedString => {
    const {
      string
    } = attributedString;
    let lastScript = 'Unknown';
    let lastIndex = 0;
    let index = 0;
    const res = [];
    if (!string) return empty();
    for (let i = 0; i < string.length; i += 1) {
      const char = string[i];
      const codePoint = char.codePointAt();
      const script = dist_module/* default.getScript */.Ay.getScript(codePoint);
      if (script !== lastScript && !ignoredScripts.includes(script)) {
        if (lastScript !== 'Unknown') {
          res.push({
            start: lastIndex,
            end: index,
            attributes: {
              script: lastScript
            }
          });
        }
        lastIndex = index;
        lastScript = script;
      }
      index += char.length;
    }
    if (lastIndex < string.length) {
      res.push({
        start: lastIndex,
        end: string.length,
        attributes: {
          script: lastScript
        }
      });
    }
    return {
      string,
      runs: res
    };
  };
};
const SOFT_HYPHEN = '\u00ad';
const hyphenator = hyphen(en_us);

/**
 * @param {string} word
 * @returns {string[]} word parts
 */
const splitHyphen = word => {
  return word.split(SOFT_HYPHEN);
};
const cache = {};

/**
 * @param {string} word
 * @returns {string[]} word parts
 */
const getParts = word => {
  const base = word.includes(SOFT_HYPHEN) ? word : hyphenator(word);
  return splitHyphen(base);
};
const wordHyphenation = () => {
  /**
   * @param {string} word word
   * @returns {string[]} word parts
   */
  return word => {
    const cacheKey = `_${word}`;
    if (isNil(word)) return [];
    if (cache[cacheKey]) return cache[cacheKey];
    cache[cacheKey] = getParts(word);
    return cache[cacheKey];
  };
};

/* eslint-disable no-restricted-syntax */

/**
 * @typedef {import('../../types.js').AttributedString} AttributedString
 * @typedef {import('../../types.js').Run} Run
 */

/**
 * @param {Run} run run
 * @returns {number}
 */
const getFontSize = run => {
  return run.attributes.fontSize || 12;
};

/**
 * Resolve font runs in an AttributedString, grouping equal
 * runs and performing font substitution where necessary.
 */
const fontSubstitution = () => {
  /**
   * @param {AttributedString} attributedString attributed string
   * @returns {AttributedString} attributed string
   */
  return attributedString => {
    const {
      string,
      runs
    } = attributedString;
    let lastFont = null;
    let lastIndex = 0;
    let index = 0;
    const res = [];
    if (!string) return empty();
    for (const run of runs) {
      const fontSize = getFontSize(run);
      const defaultFont = run.attributes.font;
      if (string.length === 0) {
        res.push({
          start: 0,
          end: 0,
          attributes: {
            font: defaultFont
          }
        });
        break;
      }
      for (const char of string.slice(run.start, run.end)) {
        const font = defaultFont;
        if (font !== lastFont) {
          if (lastFont) {
            res.push({
              start: lastIndex,
              end: index,
              attributes: {
                font: lastFont,
                scale: lastFont ? fontSize / lastFont.unitsPerEm : 0
              }
            });
          }
          lastFont = font;
          lastIndex = index;
        }
        index += char.length;
      }
    }
    if (lastIndex < string.length) {
      const fontSize = getFontSize(last(runs));
      res.push({
        start: lastIndex,
        end: string.length,
        attributes: {
          font: lastFont,
          scale: lastFont ? fontSize / lastFont.unitsPerEm : 0
        }
      });
    }
    return {
      string,
      runs: res
    };
  };
};

// EXTERNAL MODULE: ./node_modules/yoga-layout/dist/src/load.js + 3 modules
var load = __webpack_require__(4474);
// EXTERNAL MODULE: ./node_modules/emoji-regex/index.mjs
var emoji_regex = __webpack_require__(631);
;// ./node_modules/@react-pdf/image/lib/index.browser.js


var index_browser_global$1 = typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {};
var index_browser_lookup = [];
var index_browser_revLookup = [];
var index_browser_Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var index_browser_inited = false;
function index_browser_init() {
  index_browser_inited = true;
  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
  for (var i = 0, len = code.length; i < len; ++i) {
    index_browser_lookup[i] = code[i];
    index_browser_revLookup[code.charCodeAt(i)] = i;
  }
  index_browser_revLookup['-'.charCodeAt(0)] = 62;
  index_browser_revLookup['_'.charCodeAt(0)] = 63;
}
function index_browser_toByteArray(b64) {
  if (!index_browser_inited) {
    index_browser_init();
  }
  var i, j, l, tmp, placeHolders, arr;
  var len = b64.length;
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4');
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

  // base64 is 4/3 + up to two characters of the original data
  arr = new index_browser_Arr(len * 3 / 4 - placeHolders);

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len;
  var L = 0;
  for (i = 0, j = 0; i < l; i += 4, j += 3) {
    tmp = index_browser_revLookup[b64.charCodeAt(i)] << 18 | index_browser_revLookup[b64.charCodeAt(i + 1)] << 12 | index_browser_revLookup[b64.charCodeAt(i + 2)] << 6 | index_browser_revLookup[b64.charCodeAt(i + 3)];
    arr[L++] = tmp >> 16 & 0xFF;
    arr[L++] = tmp >> 8 & 0xFF;
    arr[L++] = tmp & 0xFF;
  }
  if (placeHolders === 2) {
    tmp = index_browser_revLookup[b64.charCodeAt(i)] << 2 | index_browser_revLookup[b64.charCodeAt(i + 1)] >> 4;
    arr[L++] = tmp & 0xFF;
  } else if (placeHolders === 1) {
    tmp = index_browser_revLookup[b64.charCodeAt(i)] << 10 | index_browser_revLookup[b64.charCodeAt(i + 1)] << 4 | index_browser_revLookup[b64.charCodeAt(i + 2)] >> 2;
    arr[L++] = tmp >> 8 & 0xFF;
    arr[L++] = tmp & 0xFF;
  }
  return arr;
}
function index_browser_tripletToBase64(num) {
  return index_browser_lookup[num >> 18 & 0x3F] + index_browser_lookup[num >> 12 & 0x3F] + index_browser_lookup[num >> 6 & 0x3F] + index_browser_lookup[num & 0x3F];
}
function index_browser_encodeChunk(uint8, start, end) {
  var tmp;
  var output = [];
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
    output.push(index_browser_tripletToBase64(tmp));
  }
  return output.join('');
}
function index_browser_fromByteArray(uint8) {
  if (!index_browser_inited) {
    index_browser_init();
  }
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
  var output = '';
  var parts = [];
  var maxChunkLength = 16383; // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(index_browser_encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    output += index_browser_lookup[tmp >> 2];
    output += index_browser_lookup[tmp << 4 & 0x3F];
    output += '==';
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    output += index_browser_lookup[tmp >> 10];
    output += index_browser_lookup[tmp >> 4 & 0x3F];
    output += index_browser_lookup[tmp << 2 & 0x3F];
    output += '=';
  }
  parts.push(output);
  return parts.join('');
}
function index_browser_read(buffer, offset, isLE, mLen, nBytes) {
  var e, m;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i = isLE ? nBytes - 1 : 0;
  var d = isLE ? -1 : 1;
  var s = buffer[offset + i];
  i += d;
  e = s & (1 << -nBits) - 1;
  s >>= -nBits;
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}
  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}
  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : (s ? -1 : 1) * Infinity;
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
}
function index_browser_write(buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
  var i = isLE ? 0 : nBytes - 1;
  var d = isLE ? 1 : -1;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  value = Math.abs(value);
  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }
    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }
  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}
  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}
  buffer[offset + i - d] |= s * 128;
}
var index_browser_toString = {}.toString;
var index_browser_isArray = Array.isArray || function (arr) {
  return index_browser_toString.call(arr) == '[object Array]';
};

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

var index_browser_INSPECT_MAX_BYTES = 50;

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
index_browser_Buffer.TYPED_ARRAY_SUPPORT = index_browser_global$1.TYPED_ARRAY_SUPPORT !== undefined ? index_browser_global$1.TYPED_ARRAY_SUPPORT : true;

/*
 * Export kMaxLength after typed array support is determined.
 */
index_browser_kMaxLength();
function index_browser_kMaxLength() {
  return index_browser_Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
}
function index_browser_createBuffer(that, length) {
  if (index_browser_kMaxLength() < length) {
    throw new RangeError('Invalid typed array length');
  }
  if (index_browser_Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length);
    that.__proto__ = index_browser_Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new index_browser_Buffer(length);
    }
    that.length = length;
  }
  return that;
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function index_browser_Buffer(arg, encodingOrOffset, length) {
  if (!index_browser_Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof index_browser_Buffer)) {
    return new index_browser_Buffer(arg, encodingOrOffset, length);
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error('If encoding is specified then the first argument must be a string');
    }
    return index_browser_allocUnsafe(this, arg);
  }
  return index_browser_from(this, arg, encodingOrOffset, length);
}
index_browser_Buffer.poolSize = 8192; // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
index_browser_Buffer._augment = function (arr) {
  arr.__proto__ = index_browser_Buffer.prototype;
  return arr;
};
function index_browser_from(that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number');
  }
  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return index_browser_fromArrayBuffer(that, value, encodingOrOffset, length);
  }
  if (typeof value === 'string') {
    return index_browser_fromString(that, value, encodingOrOffset);
  }
  return index_browser_fromObject(that, value);
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
index_browser_Buffer.from = function (value, encodingOrOffset, length) {
  return index_browser_from(null, value, encodingOrOffset, length);
};
if (index_browser_Buffer.TYPED_ARRAY_SUPPORT) {
  index_browser_Buffer.prototype.__proto__ = Uint8Array.prototype;
  index_browser_Buffer.__proto__ = Uint8Array;
  if (typeof Symbol !== 'undefined' && Symbol.species && index_browser_Buffer[Symbol.species] === index_browser_Buffer) ;
}
function index_browser_assertSize(size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number');
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative');
  }
}
function index_browser_alloc(that, size, fill, encoding) {
  index_browser_assertSize(size);
  if (size <= 0) {
    return index_browser_createBuffer(that, size);
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string' ? index_browser_createBuffer(that, size).fill(fill, encoding) : index_browser_createBuffer(that, size).fill(fill);
  }
  return index_browser_createBuffer(that, size);
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
index_browser_Buffer.alloc = function (size, fill, encoding) {
  return index_browser_alloc(null, size, fill, encoding);
};
function index_browser_allocUnsafe(that, size) {
  index_browser_assertSize(size);
  that = index_browser_createBuffer(that, size < 0 ? 0 : index_browser_checked(size) | 0);
  if (!index_browser_Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0;
    }
  }
  return that;
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
index_browser_Buffer.allocUnsafe = function (size) {
  return index_browser_allocUnsafe(null, size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
index_browser_Buffer.allocUnsafeSlow = function (size) {
  return index_browser_allocUnsafe(null, size);
};
function index_browser_fromString(that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8';
  }
  if (!index_browser_Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding');
  }
  var length = index_browser_byteLength(string, encoding) | 0;
  that = index_browser_createBuffer(that, length);
  var actual = that.write(string, encoding);
  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual);
  }
  return that;
}
function index_browser_fromArrayLike(that, array) {
  var length = array.length < 0 ? 0 : index_browser_checked(array.length) | 0;
  that = index_browser_createBuffer(that, length);
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255;
  }
  return that;
}
function index_browser_fromArrayBuffer(that, array, byteOffset, length) {
  array.byteLength; // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds');
  }
  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds');
  }
  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array);
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset);
  } else {
    array = new Uint8Array(array, byteOffset, length);
  }
  if (index_browser_Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array;
    that.__proto__ = index_browser_Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = index_browser_fromArrayLike(that, array);
  }
  return that;
}
function index_browser_fromObject(that, obj) {
  if (index_browser_internalIsBuffer(obj)) {
    var len = index_browser_checked(obj.length) | 0;
    that = index_browser_createBuffer(that, len);
    if (that.length === 0) {
      return that;
    }
    obj.copy(that, 0, 0, len);
    return that;
  }
  if (obj) {
    if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {
      if (typeof obj.length !== 'number' || index_browser_isnan(obj.length)) {
        return index_browser_createBuffer(that, 0);
      }
      return index_browser_fromArrayLike(that, obj);
    }
    if (obj.type === 'Buffer' && index_browser_isArray(obj.data)) {
      return index_browser_fromArrayLike(that, obj.data);
    }
  }
  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
}
function index_browser_checked(length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= index_browser_kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + index_browser_kMaxLength().toString(16) + ' bytes');
  }
  return length | 0;
}
index_browser_Buffer.isBuffer = index_browser_isBuffer;
function index_browser_internalIsBuffer(b) {
  return !!(b != null && b._isBuffer);
}
index_browser_Buffer.compare = function compare(a, b) {
  if (!index_browser_internalIsBuffer(a) || !index_browser_internalIsBuffer(b)) {
    throw new TypeError('Arguments must be Buffers');
  }
  if (a === b) return 0;
  var x = a.length;
  var y = b.length;
  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }
  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
};
index_browser_Buffer.isEncoding = function isEncoding(encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true;
    default:
      return false;
  }
};
index_browser_Buffer.concat = function concat(list, length) {
  if (!index_browser_isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers');
  }
  if (list.length === 0) {
    return index_browser_Buffer.alloc(0);
  }
  var i;
  if (length === undefined) {
    length = 0;
    for (i = 0; i < list.length; ++i) {
      length += list[i].length;
    }
  }
  var buffer = index_browser_Buffer.allocUnsafe(length);
  var pos = 0;
  for (i = 0; i < list.length; ++i) {
    var buf = list[i];
    if (!index_browser_internalIsBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }
    buf.copy(buffer, pos);
    pos += buf.length;
  }
  return buffer;
};
function index_browser_byteLength(string, encoding) {
  if (index_browser_internalIsBuffer(string)) {
    return string.length;
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength;
  }
  if (typeof string !== 'string') {
    string = '' + string;
  }
  var len = string.length;
  if (len === 0) return 0;

  // Use a for loop to avoid recursion
  var loweredCase = false;
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len;
      case 'utf8':
      case 'utf-8':
      case undefined:
        return index_browser_utf8ToBytes(string).length;
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2;
      case 'hex':
        return len >>> 1;
      case 'base64':
        return index_browser_base64ToBytes(string).length;
      default:
        if (loweredCase) return index_browser_utf8ToBytes(string).length; // assume utf8
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
}
index_browser_Buffer.byteLength = index_browser_byteLength;
function index_browser_slowToString(encoding, start, end) {
  var loweredCase = false;

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0;
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return '';
  }
  if (end === undefined || end > this.length) {
    end = this.length;
  }
  if (end <= 0) {
    return '';
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0;
  start >>>= 0;
  if (end <= start) {
    return '';
  }
  if (!encoding) encoding = 'utf8';
  while (true) {
    switch (encoding) {
      case 'hex':
        return index_browser_hexSlice(this, start, end);
      case 'utf8':
      case 'utf-8':
        return index_browser_utf8Slice(this, start, end);
      case 'ascii':
        return index_browser_asciiSlice(this, start, end);
      case 'latin1':
      case 'binary':
        return index_browser_latin1Slice(this, start, end);
      case 'base64':
        return index_browser_base64Slice(this, start, end);
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return index_browser_utf16leSlice(this, start, end);
      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = (encoding + '').toLowerCase();
        loweredCase = true;
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
index_browser_Buffer.prototype._isBuffer = true;
function index_browser_swap(b, n, m) {
  var i = b[n];
  b[n] = b[m];
  b[m] = i;
}
index_browser_Buffer.prototype.swap16 = function swap16() {
  var len = this.length;
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits');
  }
  for (var i = 0; i < len; i += 2) {
    index_browser_swap(this, i, i + 1);
  }
  return this;
};
index_browser_Buffer.prototype.swap32 = function swap32() {
  var len = this.length;
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits');
  }
  for (var i = 0; i < len; i += 4) {
    index_browser_swap(this, i, i + 3);
    index_browser_swap(this, i + 1, i + 2);
  }
  return this;
};
index_browser_Buffer.prototype.swap64 = function swap64() {
  var len = this.length;
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits');
  }
  for (var i = 0; i < len; i += 8) {
    index_browser_swap(this, i, i + 7);
    index_browser_swap(this, i + 1, i + 6);
    index_browser_swap(this, i + 2, i + 5);
    index_browser_swap(this, i + 3, i + 4);
  }
  return this;
};
index_browser_Buffer.prototype.toString = function toString() {
  var length = this.length | 0;
  if (length === 0) return '';
  if (arguments.length === 0) return index_browser_utf8Slice(this, 0, length);
  return index_browser_slowToString.apply(this, arguments);
};
index_browser_Buffer.prototype.equals = function equals(b) {
  if (!index_browser_internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer');
  if (this === b) return true;
  return index_browser_Buffer.compare(this, b) === 0;
};
index_browser_Buffer.prototype.inspect = function inspect() {
  var str = '';
  var max = index_browser_INSPECT_MAX_BYTES;
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
    if (this.length > max) str += ' ... ';
  }
  return '<Buffer ' + str + '>';
};
index_browser_Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
  if (!index_browser_internalIsBuffer(target)) {
    throw new TypeError('Argument must be a Buffer');
  }
  if (start === undefined) {
    start = 0;
  }
  if (end === undefined) {
    end = target ? target.length : 0;
  }
  if (thisStart === undefined) {
    thisStart = 0;
  }
  if (thisEnd === undefined) {
    thisEnd = this.length;
  }
  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index');
  }
  if (thisStart >= thisEnd && start >= end) {
    return 0;
  }
  if (thisStart >= thisEnd) {
    return -1;
  }
  if (start >= end) {
    return 1;
  }
  start >>>= 0;
  end >>>= 0;
  thisStart >>>= 0;
  thisEnd >>>= 0;
  if (this === target) return 0;
  var x = thisEnd - thisStart;
  var y = end - start;
  var len = Math.min(x, y);
  var thisCopy = this.slice(thisStart, thisEnd);
  var targetCopy = target.slice(start, end);
  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i];
      y = targetCopy[i];
      break;
    }
  }
  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
};

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function index_browser_bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1;

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset;
    byteOffset = 0;
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff;
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000;
  }
  byteOffset = +byteOffset; // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
  if (byteOffset >= buffer.length) {
    if (dir) return -1;else byteOffset = buffer.length - 1;
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0;else return -1;
  }

  // Normalize val
  if (typeof val === 'string') {
    val = index_browser_Buffer.from(val, encoding);
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (index_browser_internalIsBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1;
    }
    return index_browser_arrayIndexOf(buffer, val, byteOffset, encoding, dir);
  } else if (typeof val === 'number') {
    val = val & 0xFF; // Search for a byte value [0-255]
    if (index_browser_Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
      }
    }
    return index_browser_arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
  }
  throw new TypeError('val must be string, number or Buffer');
}
function index_browser_arrayIndexOf(arr, val, byteOffset, encoding, dir) {
  var indexSize = 1;
  var arrLength = arr.length;
  var valLength = val.length;
  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase();
    if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1;
      }
      indexSize = 2;
      arrLength /= 2;
      valLength /= 2;
      byteOffset /= 2;
    }
  }
  function read(buf, i) {
    if (indexSize === 1) {
      return buf[i];
    } else {
      return buf.readUInt16BE(i * indexSize);
    }
  }
  var i;
  if (dir) {
    var foundIndex = -1;
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i;
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
      } else {
        if (foundIndex !== -1) i -= i - foundIndex;
        foundIndex = -1;
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
    for (i = byteOffset; i >= 0; i--) {
      var found = true;
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false;
          break;
        }
      }
      if (found) return i;
    }
  }
  return -1;
}
index_browser_Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1;
};
index_browser_Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
  return index_browser_bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
index_browser_Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
  return index_browser_bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function index_browser_hexWrite(buf, string, offset, length) {
  offset = Number(offset) || 0;
  var remaining = buf.length - offset;
  if (!length) {
    length = remaining;
  } else {
    length = Number(length);
    if (length > remaining) {
      length = remaining;
    }
  }

  // must be an even number of digits
  var strLen = string.length;
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');
  if (length > strLen / 2) {
    length = strLen / 2;
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16);
    if (isNaN(parsed)) return i;
    buf[offset + i] = parsed;
  }
  return i;
}
function index_browser_utf8Write(buf, string, offset, length) {
  return index_browser_blitBuffer(index_browser_utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function index_browser_asciiWrite(buf, string, offset, length) {
  return index_browser_blitBuffer(index_browser_asciiToBytes(string), buf, offset, length);
}
function index_browser_latin1Write(buf, string, offset, length) {
  return index_browser_asciiWrite(buf, string, offset, length);
}
function index_browser_base64Write(buf, string, offset, length) {
  return index_browser_blitBuffer(index_browser_base64ToBytes(string), buf, offset, length);
}
function index_browser_ucs2Write(buf, string, offset, length) {
  return index_browser_blitBuffer(index_browser_utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
index_browser_Buffer.prototype.write = function write(string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8';
    length = this.length;
    offset = 0;
    // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset;
    length = this.length;
    offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0;
    if (isFinite(length)) {
      length = length | 0;
      if (encoding === undefined) encoding = 'utf8';
    } else {
      encoding = length;
      length = undefined;
    }
    // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
  }
  var remaining = this.length - offset;
  if (length === undefined || length > remaining) length = remaining;
  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds');
  }
  if (!encoding) encoding = 'utf8';
  var loweredCase = false;
  for (;;) {
    switch (encoding) {
      case 'hex':
        return index_browser_hexWrite(this, string, offset, length);
      case 'utf8':
      case 'utf-8':
        return index_browser_utf8Write(this, string, offset, length);
      case 'ascii':
        return index_browser_asciiWrite(this, string, offset, length);
      case 'latin1':
      case 'binary':
        return index_browser_latin1Write(this, string, offset, length);
      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return index_browser_base64Write(this, string, offset, length);
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return index_browser_ucs2Write(this, string, offset, length);
      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
};
index_browser_Buffer.prototype.toJSON = function toJSON() {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  };
};
function index_browser_base64Slice(buf, start, end) {
  if (start === 0 && end === buf.length) {
    return index_browser_fromByteArray(buf);
  } else {
    return index_browser_fromByteArray(buf.slice(start, end));
  }
}
function index_browser_utf8Slice(buf, start, end) {
  end = Math.min(buf.length, end);
  var res = [];
  var i = start;
  while (i < end) {
    var firstByte = buf[i];
    var codePoint = null;
    var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint;
      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte;
          }
          break;
        case 2:
          secondByte = buf[i + 1];
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint;
            }
          }
          break;
        case 3:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint;
            }
          }
          break;
        case 4:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          fourthByte = buf[i + 3];
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint;
            }
          }
      }
    }
    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD;
      bytesPerSequence = 1;
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000;
      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
      codePoint = 0xDC00 | codePoint & 0x3FF;
    }
    res.push(codePoint);
    i += bytesPerSequence;
  }
  return index_browser_decodeCodePointsArray(res);
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var index_browser_MAX_ARGUMENTS_LENGTH = 0x1000;
function index_browser_decodeCodePointsArray(codePoints) {
  var len = codePoints.length;
  if (len <= index_browser_MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = '';
  var i = 0;
  while (i < len) {
    res += String.fromCharCode.apply(String, codePoints.slice(i, i += index_browser_MAX_ARGUMENTS_LENGTH));
  }
  return res;
}
function index_browser_asciiSlice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);
  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F);
  }
  return ret;
}
function index_browser_latin1Slice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);
  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i]);
  }
  return ret;
}
function index_browser_hexSlice(buf, start, end) {
  var len = buf.length;
  if (!start || start < 0) start = 0;
  if (!end || end < 0 || end > len) end = len;
  var out = '';
  for (var i = start; i < end; ++i) {
    out += index_browser_toHex(buf[i]);
  }
  return out;
}
function index_browser_utf16leSlice(buf, start, end) {
  var bytes = buf.slice(start, end);
  var res = '';
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
  }
  return res;
}
index_browser_Buffer.prototype.slice = function slice(start, end) {
  var len = this.length;
  start = ~~start;
  end = end === undefined ? len : ~~end;
  if (start < 0) {
    start += len;
    if (start < 0) start = 0;
  } else if (start > len) {
    start = len;
  }
  if (end < 0) {
    end += len;
    if (end < 0) end = 0;
  } else if (end > len) {
    end = len;
  }
  if (end < start) end = start;
  var newBuf;
  if (index_browser_Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end);
    newBuf.__proto__ = index_browser_Buffer.prototype;
  } else {
    var sliceLen = end - start;
    newBuf = new index_browser_Buffer(sliceLen, undefined);
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start];
    }
  }
  return newBuf;
};

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function index_browser_checkOffset(offset, ext, length) {
  if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
}
index_browser_Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) index_browser_checkOffset(offset, byteLength, this.length);
  var val = this[offset];
  var mul = 1;
  var i = 0;
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }
  return val;
};
index_browser_Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    index_browser_checkOffset(offset, byteLength, this.length);
  }
  var val = this[offset + --byteLength];
  var mul = 1;
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul;
  }
  return val;
};
index_browser_Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
  if (!noAssert) index_browser_checkOffset(offset, 1, this.length);
  return this[offset];
};
index_browser_Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
  if (!noAssert) index_browser_checkOffset(offset, 2, this.length);
  return this[offset] | this[offset + 1] << 8;
};
index_browser_Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
  if (!noAssert) index_browser_checkOffset(offset, 2, this.length);
  return this[offset] << 8 | this[offset + 1];
};
index_browser_Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
  if (!noAssert) index_browser_checkOffset(offset, 4, this.length);
  return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};
index_browser_Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
  if (!noAssert) index_browser_checkOffset(offset, 4, this.length);
  return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
index_browser_Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) index_browser_checkOffset(offset, byteLength, this.length);
  var val = this[offset];
  var mul = 1;
  var i = 0;
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }
  mul *= 0x80;
  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
  return val;
};
index_browser_Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) index_browser_checkOffset(offset, byteLength, this.length);
  var i = byteLength;
  var mul = 1;
  var val = this[offset + --i];
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul;
  }
  mul *= 0x80;
  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
  return val;
};
index_browser_Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
  if (!noAssert) index_browser_checkOffset(offset, 1, this.length);
  if (!(this[offset] & 0x80)) return this[offset];
  return (0xff - this[offset] + 1) * -1;
};
index_browser_Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
  if (!noAssert) index_browser_checkOffset(offset, 2, this.length);
  var val = this[offset] | this[offset + 1] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};
index_browser_Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
  if (!noAssert) index_browser_checkOffset(offset, 2, this.length);
  var val = this[offset + 1] | this[offset] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};
index_browser_Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
  if (!noAssert) index_browser_checkOffset(offset, 4, this.length);
  return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
index_browser_Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
  if (!noAssert) index_browser_checkOffset(offset, 4, this.length);
  return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
index_browser_Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
  if (!noAssert) index_browser_checkOffset(offset, 4, this.length);
  return index_browser_read(this, offset, true, 23, 4);
};
index_browser_Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
  if (!noAssert) index_browser_checkOffset(offset, 4, this.length);
  return index_browser_read(this, offset, false, 23, 4);
};
index_browser_Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
  if (!noAssert) index_browser_checkOffset(offset, 8, this.length);
  return index_browser_read(this, offset, true, 52, 8);
};
index_browser_Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
  if (!noAssert) index_browser_checkOffset(offset, 8, this.length);
  return index_browser_read(this, offset, false, 52, 8);
};
function index_browser_checkInt(buf, value, offset, ext, max, min) {
  if (!index_browser_internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
}
index_browser_Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    index_browser_checkInt(this, value, offset, byteLength, maxBytes, 0);
  }
  var mul = 1;
  var i = 0;
  this[offset] = value & 0xFF;
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }
  return offset + byteLength;
};
index_browser_Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    index_browser_checkInt(this, value, offset, byteLength, maxBytes, 0);
  }
  var i = byteLength - 1;
  var mul = 1;
  this[offset + i] = value & 0xFF;
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }
  return offset + byteLength;
};
index_browser_Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) index_browser_checkInt(this, value, offset, 1, 0xff, 0);
  if (!index_browser_Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  this[offset] = value & 0xff;
  return offset + 1;
};
function index_browser_objectWriteUInt16(buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1;
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
  }
}
index_browser_Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) index_browser_checkInt(this, value, offset, 2, 0xffff, 0);
  if (index_browser_Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
  } else {
    index_browser_objectWriteUInt16(this, value, offset, true);
  }
  return offset + 2;
};
index_browser_Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) index_browser_checkInt(this, value, offset, 2, 0xffff, 0);
  if (index_browser_Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
  } else {
    index_browser_objectWriteUInt16(this, value, offset, false);
  }
  return offset + 2;
};
function index_browser_objectWriteUInt32(buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1;
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;
  }
}
index_browser_Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) index_browser_checkInt(this, value, offset, 4, 0xffffffff, 0);
  if (index_browser_Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
  } else {
    index_browser_objectWriteUInt32(this, value, offset, true);
  }
  return offset + 4;
};
index_browser_Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) index_browser_checkInt(this, value, offset, 4, 0xffffffff, 0);
  if (index_browser_Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
  } else {
    index_browser_objectWriteUInt32(this, value, offset, false);
  }
  return offset + 4;
};
index_browser_Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);
    index_browser_checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }
  var i = 0;
  var mul = 1;
  var sub = 0;
  this[offset] = value & 0xFF;
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }
  return offset + byteLength;
};
index_browser_Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);
    index_browser_checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }
  var i = byteLength - 1;
  var mul = 1;
  var sub = 0;
  this[offset + i] = value & 0xFF;
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }
  return offset + byteLength;
};
index_browser_Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) index_browser_checkInt(this, value, offset, 1, 0x7f, -0x80);
  if (!index_browser_Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  if (value < 0) value = 0xff + value + 1;
  this[offset] = value & 0xff;
  return offset + 1;
};
index_browser_Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) index_browser_checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  if (index_browser_Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
  } else {
    index_browser_objectWriteUInt16(this, value, offset, true);
  }
  return offset + 2;
};
index_browser_Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) index_browser_checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  if (index_browser_Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
  } else {
    index_browser_objectWriteUInt16(this, value, offset, false);
  }
  return offset + 2;
};
index_browser_Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) index_browser_checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (index_browser_Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
  } else {
    index_browser_objectWriteUInt32(this, value, offset, true);
  }
  return offset + 4;
};
index_browser_Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) index_browser_checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (value < 0) value = 0xffffffff + value + 1;
  if (index_browser_Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
  } else {
    index_browser_objectWriteUInt32(this, value, offset, false);
  }
  return offset + 4;
};
function index_browser_checkIEEE754(buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
  if (offset < 0) throw new RangeError('Index out of range');
}
function index_browser_writeFloat(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    index_browser_checkIEEE754(buf, value, offset, 4);
  }
  index_browser_write(buf, value, offset, littleEndian, 23, 4);
  return offset + 4;
}
index_browser_Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
  return index_browser_writeFloat(this, value, offset, true, noAssert);
};
index_browser_Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
  return index_browser_writeFloat(this, value, offset, false, noAssert);
};
function index_browser_writeDouble(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    index_browser_checkIEEE754(buf, value, offset, 8);
  }
  index_browser_write(buf, value, offset, littleEndian, 52, 8);
  return offset + 8;
}
index_browser_Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
  return index_browser_writeDouble(this, value, offset, true, noAssert);
};
index_browser_Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
  return index_browser_writeDouble(this, value, offset, false, noAssert);
};

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
index_browser_Buffer.prototype.copy = function copy(target, targetStart, start, end) {
  if (!start) start = 0;
  if (!end && end !== 0) end = this.length;
  if (targetStart >= target.length) targetStart = target.length;
  if (!targetStart) targetStart = 0;
  if (end > 0 && end < start) end = start;

  // Copy 0 bytes; we're done
  if (end === start) return 0;
  if (target.length === 0 || this.length === 0) return 0;

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds');
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');
  if (end < 0) throw new RangeError('sourceEnd out of bounds');

  // Are we oob?
  if (end > this.length) end = this.length;
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start;
  }
  var len = end - start;
  var i;
  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start];
    }
  } else if (len < 1000 || !index_browser_Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start];
    }
  } else {
    Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
  }
  return len;
};

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
index_browser_Buffer.prototype.fill = function fill(val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start;
      start = 0;
      end = this.length;
    } else if (typeof end === 'string') {
      encoding = end;
      end = this.length;
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0);
      if (code < 256) {
        val = code;
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string');
    }
    if (typeof encoding === 'string' && !index_browser_Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding);
    }
  } else if (typeof val === 'number') {
    val = val & 255;
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index');
  }
  if (end <= start) {
    return this;
  }
  start = start >>> 0;
  end = end === undefined ? this.length : end >>> 0;
  if (!val) val = 0;
  var i;
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val;
    }
  } else {
    var bytes = index_browser_internalIsBuffer(val) ? val : index_browser_utf8ToBytes(new index_browser_Buffer(val, encoding).toString());
    var len = bytes.length;
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len];
    }
  }
  return this;
};

// HELPER FUNCTIONS
// ================

var index_browser_INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;
function index_browser_base64clean(str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = index_browser_stringtrim(str).replace(index_browser_INVALID_BASE64_RE, '');
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return '';
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '=';
  }
  return str;
}
function index_browser_stringtrim(str) {
  if (str.trim) return str.trim();
  return str.replace(/^\s+|\s+$/g, '');
}
function index_browser_toHex(n) {
  if (n < 16) return '0' + n.toString(16);
  return n.toString(16);
}
function index_browser_utf8ToBytes(string, units) {
  units = units || Infinity;
  var codePoint;
  var length = string.length;
  var leadSurrogate = null;
  var bytes = [];
  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i);

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        }

        // valid lead
        leadSurrogate = codePoint;
        continue;
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        leadSurrogate = codePoint;
        continue;
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
    }
    leadSurrogate = null;

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break;
      bytes.push(codePoint);
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break;
      bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break;
      bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break;
      bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else {
      throw new Error('Invalid code point');
    }
  }
  return bytes;
}
function index_browser_asciiToBytes(str) {
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
  }
  return byteArray;
}
function index_browser_utf16leToBytes(str, units) {
  var c, hi, lo;
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break;
    c = str.charCodeAt(i);
    hi = c >> 8;
    lo = c % 256;
    byteArray.push(lo);
    byteArray.push(hi);
  }
  return byteArray;
}
function index_browser_base64ToBytes(str) {
  return index_browser_toByteArray(index_browser_base64clean(str));
}
function index_browser_blitBuffer(src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if (i + offset >= dst.length || i >= src.length) break;
    dst[i + offset] = src[i];
  }
  return i;
}
function index_browser_isnan(val) {
  return val !== val; // eslint-disable-line no-self-compare
}

// the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
function index_browser_isBuffer(obj) {
  return obj != null && (!!obj._isBuffer || index_browser_isFastBuffer(obj) || index_browser_isSlowBuffer(obj));
}
function index_browser_isFastBuffer(obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
}

// For Node v0.10 support. Remove this eventually.
function index_browser_isSlowBuffer(obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && index_browser_isFastBuffer(obj.slice(0, 0));
}
PNG.isValid = function isValid(data) {
  try {
    return !!new PNG(data);
  } catch (e) {
    return false;
  }
};
class index_browser_JPEG {
  constructor(data) {
    this.data = null;
    this.width = null;
    this.height = null;
    this.data = data;
    if (data.readUInt16BE(0) !== 0xffd8) {
      throw new Error('SOI not found in JPEG');
    }
    const markers = src/* default */.A.decode(this.data);
    for (let i = 0; i < markers.length; i += 1) {
      const marker = markers[i];
      if (marker.name === 'EXIF' && marker.entries.orientation) {
        this.orientation = marker.entries.orientation;
      }
      if (marker.name === 'SOF') {
        this.width ||= marker.width;
        this.height ||= marker.height;
      }
    }
    if (this.orientation > 4) {
      [this.width, this.height] = [this.height, this.width];
    }
  }
}
index_browser_JPEG.isValid = data => {
  return data && index_browser_Buffer.isBuffer(data) && data.readUInt16BE(0) === 0xffd8;
};
const createCache = function (_temp) {
  let {
    limit = 100
  } = _temp === void 0 ? {} : _temp;
  let cache = {};
  let keys = [];
  return {
    get: key => cache[key],
    set: (key, value) => {
      keys.push(key);
      if (keys.length > limit) {
        delete cache[keys.shift()];
      }
      cache[key] = value;
    },
    reset: () => {
      cache = {};
      keys = [];
    },
    length: () => keys.length
  };
};
const IMAGE_CACHE = createCache({
  limit: 30
});
const fetchRemoteFile = async (uri, options) => {
  const response = await fetch(uri, options);
  const buffer = await (response.buffer ? response.buffer() : response.arrayBuffer());
  return buffer.constructor.name === 'Buffer' ? buffer : index_browser_Buffer.from(buffer);
};
const isValidFormat = format => {
  const lower = format.toLowerCase();
  return lower === 'jpg' || lower === 'jpeg' || lower === 'png';
};
const guessFormat = buffer => {
  let format;
  if (index_browser_JPEG.isValid(buffer)) {
    format = 'jpg';
  } else if (PNG.isValid(buffer)) {
    format = 'png';
  }
  return format;
};
const isCompatibleBase64 = _ref => {
  let {
    uri
  } = _ref;
  return /^data:image\/[a-zA-Z]*;base64,[^"]*/g.test(uri);
};
function getImage(body, extension) {
  switch (extension.toLowerCase()) {
    case 'jpg':
    case 'jpeg':
      return new index_browser_JPEG(body);
    case 'png':
      return new PNG(body);
    default:
      return null;
  }
}
const resolveBase64Image = _ref2 => {
  let {
    uri
  } = _ref2;
  const match = /^data:image\/([a-zA-Z]*);base64,([^"]*)/g.exec(uri);
  const format = match[1];
  const data = match[2];
  if (!isValidFormat(format)) {
    throw new Error(`Base64 image invalid format: ${format}`);
  }
  return new Promise(resolve => {
    return resolve(getImage(index_browser_Buffer.from(data, 'base64'), format));
  });
};
const resolveImageFromData = src => {
  if (src.data && src.format) {
    return new Promise(resolve => resolve(getImage(src.data, src.format)));
  }
  throw new Error(`Invalid data given for local file: ${JSON.stringify(src)}`);
};
const resolveBufferImage = buffer => {
  const format = guessFormat(buffer);
  if (format) {
    return new Promise(resolve => resolve(getImage(buffer, format)));
  }
  return Promise.resolve();
};
const resolveBlobImage = async blob => {
  const {
    type
  } = blob;
  if (!type || type === 'application/octet-stream') {
    const arrayBuffer = await blob.arrayBuffer();
    const buffer = index_browser_Buffer.from(arrayBuffer);
    return resolveBufferImage(buffer);
  }
  if (!type.startsWith('image/')) {
    throw new Error(`Invalid blob type: ${type}`);
  }
  const format = type.replace('image/', '');
  if (!isValidFormat(format)) {
    throw new Error(`Invalid blob type: ${type}`);
  }
  const buffer = await blob.arrayBuffer();
  return getImage(index_browser_Buffer.from(buffer), format);
};
const getImageFormat = body => {
  const isPng = body[0] === 137 && body[1] === 80 && body[2] === 78 && body[3] === 71 && body[4] === 13 && body[5] === 10 && body[6] === 26 && body[7] === 10;
  const isJpg = body[0] === 255 && body[1] === 216 && body[2] === 255;
  let extension = '';
  if (isPng) {
    extension = 'png';
  } else if (isJpg) {
    extension = 'jpg';
  } else {
    throw new Error('Not valid image extension');
  }
  return extension;
};
const resolveImageFromUrl = async src => {
  const {
    uri,
    body,
    headers,
    method = 'GET',
    credentials
  } = src;
  const data = await fetchRemoteFile(uri, {
    body,
    headers,
    method,
    credentials
  });
  const extension = getImageFormat(data);
  return getImage(data, extension);
};
const resolveImage = function (src, _temp) {
  let {
    cache = true
  } = _temp === void 0 ? {} : _temp;
  let image;
  const cacheKey = src.data ? src.data.toString() : src.uri;
  if (typeof Blob !== 'undefined' && src instanceof Blob) {
    image = resolveBlobImage(src);
  } else if (index_browser_Buffer.isBuffer(src)) {
    image = resolveBufferImage(src);
  } else if (cache && IMAGE_CACHE.get(cacheKey)) {
    return IMAGE_CACHE.get(cacheKey);
  } else if (isCompatibleBase64(src)) {
    image = resolveBase64Image(src);
  } else if (typeof src === 'object' && src.data) {
    image = resolveImageFromData(src);
  } else {
    image = resolveImageFromUrl(src);
  }
  if (!image) {
    throw new Error('Cannot resolve image');
  }
  if (cache) {
    IMAGE_CACHE.set(cacheKey, image);
  }
  return image;
};

;// ./node_modules/@react-pdf/layout/lib/index.js











/**
 * Create attributed string from text fragments
 *
 * @param {Object[]} fragments fragments
 * @returns {Object} attributed string
 */
const lib_fromFragments = fragments => {
  let offset = 0;
  let string = '';
  const runs = [];
  fragments.forEach(fragment => {
    string += fragment.string;
    runs.push({
      start: offset,
      end: offset + fragment.string.length,
      attributes: fragment.attributes || {}
    });
    offset += fragment.string.length;
  });
  return {
    string,
    runs
  };
};

/**
 * Apply transformation to text string
 *
 * @param {string} text
 * @param {string} transformation type
 * @returns {string} transformed text
 */
const transformText = (text, transformation) => {
  switch (transformation) {
    case 'uppercase':
      return text.toUpperCase();
    case 'lowercase':
      return text.toLowerCase();
    case 'capitalize':
      return capitalize(text);
    case 'upperfirst':
      return upperFirst(text);
    default:
      return text;
  }
};

/* eslint-disable class-methods-use-this */

class lib_StandardFont {
  constructor(src) {
    this.name = src;
    this.src = PDFFont.open(null, src);
  }
  encode(str) {
    return this.src.encode(str);
  }
  layout(str) {
    const [encoded, positions] = this.encode(str);
    return {
      positions,
      stringIndices: positions.map((_, i) => i),
      glyphs: encoded.map((g, i) => {
        const glyph = this.getGlyph(parseInt(g, 16));
        glyph.advanceWidth = positions[i].advanceWidth;
        return glyph;
      })
    };
  }
  glyphForCodePoint(codePoint) {
    const glyph = this.getGlyph(codePoint);
    glyph.advanceWidth = 400;
    return glyph;
  }
  getGlyph(id) {
    return {
      id,
      _font: this.src,
      codePoints: [id],
      isLigature: false,
      name: this.src.font.characterToGlyph(id)
    };
  }
  hasGlyphForCodePoint(codePoint) {
    return this.src.font.characterToGlyph(codePoint) !== '.notdef';
  }

  // Based on empirical observation
  get ascent() {
    return 900;
  }

  // Based on empirical observation
  get capHeight() {
    switch (this.name) {
      case 'Times-Roman':
      case 'Times-Bold':
      case 'Times-Italic':
      case 'Times-BoldItalic':
        return 650;
      case 'Courier':
      case 'Courier-Bold':
      case 'Courier-Oblique':
      case 'Courier-BoldOblique':
        return 550;
      default:
        return 690;
    }
  }

  // Based on empirical observation
  get xHeight() {
    switch (this.name) {
      case 'Times-Roman':
      case 'Times-Bold':
      case 'Times-Italic':
      case 'Times-BoldItalic':
        return 440;
      case 'Courier':
      case 'Courier-Bold':
      case 'Courier-Oblique':
      case 'Courier-BoldOblique':
        return 390;
      default:
        return 490;
    }
  }

  // Based on empirical observation
  get descent() {
    switch (this.name) {
      case 'Times-Roman':
      case 'Times-Bold':
      case 'Times-Italic':
      case 'Times-BoldItalic':
        return -220;
      case 'Courier':
      case 'Courier-Bold':
      case 'Courier-Oblique':
      case 'Courier-BoldOblique':
        return -230;
      default:
        return -200;
    }
  }
  get lineGap() {
    return 0;
  }
  get unitsPerEm() {
    return 1000;
  }
}
const fontCache = {};
const IGNORED_CODE_POINTS = [173];
const lib_getFontSize = node => node.attributes.fontSize || 12;
const getOrCreateFont = name => {
  if (fontCache[name]) return fontCache[name];
  const font = new lib_StandardFont(name);
  fontCache[name] = font;
  return font;
};
const getFallbackFont = () => getOrCreateFont('Helvetica');
const pickFontFromFontStack = (codePoint, fontStack, lastFont) => {
  const fontStackWithFallback = [...fontStack, lastFont, getFallbackFont()];
  for (let i = 0; i < fontStackWithFallback.length; i += 1) {
    const font = fontStackWithFallback[i];
    if (!IGNORED_CODE_POINTS.includes(codePoint) && font && font.hasGlyphForCodePoint && font.hasGlyphForCodePoint(codePoint)) {
      return font;
    }
  }
  return getFallbackFont();
};
const lib_fontSubstitution = () => _ref => {
  let {
    string,
    runs
  } = _ref;
  let lastFont = null;
  let lastFontSize = null;
  let lastIndex = 0;
  let index = 0;
  const res = [];
  for (let i = 0; i < runs.length; i += 1) {
    const run = runs[i];
    const defaultFont = run.attributes.font.map(font => typeof font === 'string' ? getOrCreateFont(font) : font);
    if (string.length === 0) {
      res.push({
        start: 0,
        end: 0,
        attributes: {
          font: defaultFont
        }
      });
      break;
    }
    const chars = string.slice(run.start, run.end);
    for (let j = 0; j < chars.length; j += 1) {
      const char = chars[j];
      const codePoint = char.codePointAt();
      // If the default font does not have a glyph and the fallback font does, we use it
      const font = pickFontFromFontStack(codePoint, defaultFont, lastFont);
      const fontSize = lib_getFontSize(run);

      // If anything that would impact res has changed, update it
      if (font !== lastFont || fontSize !== lastFontSize || font.unitsPerEm !== lastFont.unitsPerEm) {
        if (lastFont) {
          res.push({
            start: lastIndex,
            end: index,
            attributes: {
              font: lastFont,
              scale: lastFontSize / lastFont.unitsPerEm
            }
          });
        }
        lastFont = font;
        lastFontSize = fontSize;
        lastIndex = index;
      }
      index += char.length;
    }
  }
  if (lastIndex < string.length) {
    const fontSize = lib_getFontSize(lib_last(runs));
    res.push({
      start: lastIndex,
      end: string.length,
      attributes: {
        font: lastFont,
        scale: fontSize / lastFont.unitsPerEm
      }
    });
  }
  return {
    string,
    runs: res
  };
};
const isTextInstance$4 = node => node.type === TextInstance;
const engines$1 = {
  bidi: bidiEngine,
  linebreaker: linebreaker,
  justification: justification,
  textDecoration: textDecoration,
  scriptItemizer: scriptItemizer,
  wordHyphenation: wordHyphenation,
  fontSubstitution: lib_fontSubstitution
};
const engine$1 = layoutEngine(engines$1);
const getFragments$1 = (fontStore, instance) => {
  if (!instance) return [{
    string: ''
  }];
  const fragments = [];
  const {
    fill = 'black',
    fontFamily = 'Helvetica',
    fontWeight,
    fontStyle,
    fontSize = 18,
    textDecorationColor,
    textDecorationStyle,
    textTransform,
    opacity
  } = instance.props;
  const _textDecoration = instance.props.textDecoration;
  const fontFamilies = typeof fontFamily === 'string' ? [fontFamily] : [...(fontFamily || [])];
  const font = fontFamilies.map(fontFamilyName => {
    if (typeof fontFamilyName !== 'string') return fontFamilyName;
    const opts = {
      fontFamily: fontFamilyName,
      fontWeight,
      fontStyle
    };
    const obj = fontStore ? fontStore.getFont(opts) : null;
    return obj ? obj.data : fontFamilyName;
  });
  const attributes = {
    font,
    opacity,
    fontSize,
    color: fill,
    underlineStyle: textDecorationStyle,
    underline: _textDecoration === 'underline' || _textDecoration === 'underline line-through' || _textDecoration === 'line-through underline',
    underlineColor: textDecorationColor || fill,
    strike: _textDecoration === 'line-through' || _textDecoration === 'underline line-through' || _textDecoration === 'line-through underline',
    strikeStyle: textDecorationStyle,
    strikeColor: textDecorationColor || fill
  };
  for (let i = 0; i < instance.children.length; i += 1) {
    const child = instance.children[i];
    if (isTextInstance$4(child)) {
      fragments.push({
        string: transformText(child.value, textTransform),
        attributes
      });
    } else if (child) {
      fragments.push(...getFragments$1(child));
    }
  }
  return fragments;
};
const getAttributedString$1 = (fontStore, instance) => lib_fromFragments(getFragments$1(fontStore, instance));
const AlmostInfinity = 999999999999;
const shrinkWhitespaceFactor = {
  before: -0.5,
  after: -0.5
};
const layoutTspan = fontStore => node => {
  var _node$props, _node$props2;
  const attributedString = getAttributedString$1(fontStore, node);
  const x = ((_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.x) || 0;
  const y = ((_node$props2 = node.props) === null || _node$props2 === void 0 ? void 0 : _node$props2.y) || 0;
  const container = {
    x,
    y,
    width: AlmostInfinity,
    height: AlmostInfinity
  };
  const hyphenationCallback = node.props.hyphenationCallback || (fontStore === null || fontStore === void 0 ? void 0 : fontStore.getHyphenationCallback()) || null;
  const layoutOptions = {
    hyphenationCallback,
    shrinkWhitespaceFactor
  };
  const lines = engine$1(attributedString, container, layoutOptions).flat();
  return Object.assign({}, node, {
    lines
  });
};
const layoutText$1 = (fontStore, node) => {
  if (!node.children) return node;
  const children = node.children.map(layoutTspan(fontStore));
  return Object.assign({}, node, {
    children
  });
};
const isDefs = node => node.type === Defs;
const getDefs = node => {
  const children = node.children || [];
  const defs = children.find(isDefs) || {};
  const values = defs.children || [];
  return values.reduce((acc, value) => {
    var _value$props;
    const id = (_value$props = value.props) === null || _value$props === void 0 ? void 0 : _value$props.id;
    if (id) acc[id] = value;
    return acc;
  }, {});
};
const isNotDefs = node => node.type !== Defs;
const detachDefs = node => {
  if (!node.children) return node;
  const children = node.children.filter(isNotDefs);
  return Object.assign({}, node, {
    children
  });
};
const URL_REGEX = /url\(['"]?#([^'"]+)['"]?\)/;
const replaceDef = (defs, value) => {
  if (!value) return undefined;
  if (!URL_REGEX.test(value)) return value;
  const match = value.match(URL_REGEX);
  return defs[match[1]];
};
const parseNodeDefs = defs => node => {
  var _node$props, _node$props2;
  const fill = replaceDef(defs, (_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.fill);
  const clipPath = replaceDef(defs, (_node$props2 = node.props) === null || _node$props2 === void 0 ? void 0 : _node$props2.clipPath);
  const props = Object.assign({}, node.props, {
    fill,
    clipPath
  });
  const children = node.children ? node.children.map(parseNodeDefs(defs)) : undefined;
  return Object.assign({}, node, {
    props,
    children
  });
};
const parseDefs = root => {
  if (!root.children) return root;
  const defs = getDefs(root);
  const children = root.children.map(parseNodeDefs(defs));
  return Object.assign({}, root, {
    children
  });
};
const replaceDefs = node => {
  return detachDefs(parseDefs(node));
};
const parseViewbox = value => {
  if (!value) return null;
  const values = value.split(/[,\s]+/).map(parseFloat);
  if (values.length !== 4) return null;
  return {
    minX: values[0],
    minY: values[1],
    maxX: values[2],
    maxY: values[3]
  };
};
const getContainer$1 = node => {
  const viewbox = parseViewbox(node.props.viewBox);
  if (viewbox) {
    return {
      width: viewbox.maxX,
      height: viewbox.maxY
    };
  }
  if (node.props.width && node.props.height) {
    return {
      width: parseFloat(node.props.width),
      height: parseFloat(node.props.height)
    };
  }
  return {
    width: 0,
    height: 0
  };
};
const SVG_INHERITED_PROPS = ['x', 'y', 'clipPath', 'clipRule', 'opacity', 'fill', 'fillOpacity', 'fillRule', 'stroke', 'strokeLinecap', 'strokeLinejoin', 'strokeOpacity', 'strokeWidth', 'textAnchor', 'dominantBaseline', 'color', 'fontFamily', 'fontSize', 'fontStyle', 'fontWeight', 'letterSpacing', 'opacity', 'textDecoration', 'lineHeight', 'textAlign', 'visibility', 'wordSpacing'];
const getInheritProps = node => {
  const props = node.props || {};
  return pick(SVG_INHERITED_PROPS, props);
};
const inheritProps = node => {
  if (!node.children) return node;
  const inheritedProps = getInheritProps(node);
  const children = node.children.map(child => {
    const props = Object.assign({}, inheritedProps, child.props || {});
    const newChild = Object.assign({}, child, {
      props
    });
    return inheritProps(newChild);
  });
  return Object.assign({}, node, {
    children
  });
};
const parseAspectRatio = value => {
  const match = value.replace(/[\s\r\t\n]+/gm, ' ').replace(/^defer\s/, '').split(' ');
  const align = match[0] || 'xMidYMid';
  const meetOrSlice = match[1] || 'meet';
  return {
    align,
    meetOrSlice
  };
};
const STYLE_PROPS = ['width', 'height', 'color', 'stroke', 'strokeWidth', 'opacity', 'fillOpacity', 'strokeOpacity', 'fill', 'fillRule', 'clipPath', 'offset', 'transform', 'strokeLinejoin', 'strokeLinecap', 'strokeDasharray'];
const VERTICAL_PROPS = ['y', 'y1', 'y2', 'height', 'cy', 'ry'];
const HORIZONTAL_PROPS = ['x', 'x1', 'x2', 'width', 'cx', 'rx'];
const isType$3 = type => node => node.type === type;
const isSvg$3 = isType$3(Svg);
const isText$5 = isType$3(Text);
const isTextInstance$3 = isType$3(TextInstance);
const transformPercent = container => props => mapValues(props, (value, key) => {
  const match = matchPercent(value);
  if (match && VERTICAL_PROPS.includes(key)) {
    return match.percent * container.height;
  }
  if (match && HORIZONTAL_PROPS.includes(key)) {
    return match.percent * container.width;
  }
  return value;
});
const parsePercent = value => {
  const match = matchPercent(value);
  return match ? match.percent : parseFloat(value);
};
const parseProps = container => node => {
  let props = transformPercent(container)(node.props);
  props = evolve({
    x: parseFloat,
    x1: parseFloat,
    x2: parseFloat,
    y: parseFloat,
    y1: parseFloat,
    y2: parseFloat,
    r: parseFloat,
    rx: parseFloat,
    ry: parseFloat,
    cx: parseFloat,
    cy: parseFloat,
    width: parseFloat,
    height: parseFloat,
    offset: parsePercent,
    fill: transformColor,
    opacity: parsePercent,
    stroke: transformColor,
    stopOpacity: parsePercent,
    stopColor: transformColor,
    transform: processTransform
  }, props);
  return Object.assign({}, node, {
    props
  });
};
const mergeStyles$1 = node => {
  const style = node.style || {};
  const props = Object.assign({}, style, node.props);
  return Object.assign({}, node, {
    props
  });
};
const removeNoneValues = node => {
  const removeNone = value => value === 'none' ? null : value;
  const props = mapValues(node.props, removeNone);
  return Object.assign({}, node, {
    props
  });
};
const pickStyleProps = node => {
  const props = node.props || {};
  const styleProps = pick(STYLE_PROPS, props);
  const style = Object.assign({}, styleProps, node.style || {});
  return Object.assign({}, node, {
    style
  });
};
const parseSvgProps = node => {
  const props = evolve({
    width: parseFloat,
    height: parseFloat,
    viewBox: parseViewbox,
    preserveAspectRatio: parseAspectRatio
  }, node.props);
  return Object.assign({}, node, {
    props
  });
};
const wrapBetweenTspan = node => ({
  type: Tspan,
  props: {},
  children: [node]
});
const addMissingTspan = node => {
  if (!isText$5(node)) return node;
  if (!node.children) return node;
  const resolveChild = child => isTextInstance$3(child) ? wrapBetweenTspan(child) : child;
  const children = node.children.map(resolveChild);
  return Object.assign({}, node, {
    children
  });
};
const parseText = fontStore => node => {
  if (isText$5(node)) return layoutText$1(fontStore, node);
  if (!node.children) return node;
  const children = node.children.map(parseText(fontStore));
  return Object.assign({}, node, {
    children
  });
};
const resolveSvgNode = container => compose(parseProps(container), addMissingTspan, removeNoneValues, mergeStyles$1);
const resolveChildren = container => node => {
  if (!node.children) return node;
  const resolveChild = compose(resolveChildren(container), resolveSvgNode(container));
  const children = node.children.map(resolveChild);
  return Object.assign({}, node, {
    children
  });
};
const resolveSvgRoot = (node, fontStore) => {
  const container = getContainer$1(node);
  return compose(replaceDefs, parseText(fontStore), parseSvgProps, pickStyleProps, inheritProps, resolveChildren(container))(node);
};

/**
 * Pre-process SVG nodes so they can be rendered in the next steps
 *
 * @param {Object} node root node
 * @param {Object} fontStore font store
 * @returns {Object} root node
 */
const resolveSvg = (node, fontStore) => {
  if (!node.children) return node;
  const resolveChild = child => resolveSvg(child, fontStore);
  const root = isSvg$3(node) ? resolveSvgRoot(node, fontStore) : node;
  const children = root.children.map(resolveChild);
  return Object.assign({}, root, {
    children
  });
};

/* eslint-disable import/prefer-default-export */

let instancePromise;
const loadYoga = async () => {
  // Yoga WASM binaries must be asynchronously compiled and loaded
  // to prevent Event emitter memory leak warnings, Yoga must be loaded only once
  const instance = await (instancePromise ??= (0,load/* loadYoga */.Bc)());
  const config = instance.Config.create();
  config.setPointScaleFactor(0);
  const node = {
    create: () => instance.Node.createWithConfig(config)
  };
  return {
    node
  };
};
const resolveYoga = async root => {
  const yoga = await loadYoga();
  return Object.assign({}, root, {
    yoga
  });
};
const getZIndex = node => node.style.zIndex;
const shouldSort = node => node.type !== Document && node.type !== Svg;
const sortZIndex = (a, b) => {
  const za = getZIndex(a);
  const zb = getZIndex(b);
  if (!za && !zb) return 0;
  if (!za) return 1;
  if (!zb) return -1;
  return zb - za;
};

/**
 * Sort children by zIndex value
 *
 * @param {Object} node
 * @returns {Object} node
 */
const resolveZIndex = node => {
  if (!node.children) return node;
  const sortedChildren = shouldSort(node) ? node.children.sort(sortZIndex) : node.children;
  const children = sortedChildren.map(resolveZIndex);
  return Object.assign({}, node, {
    children
  });
};

/* eslint-disable no-cond-assign */

// Caches emoji images data
const emojis = {};
const lib_regex = (0,emoji_regex/* default */.A)();
const reflect = promise => function () {
  return promise(...arguments).then(v => v, e => e);
};

// Returns a function to be able to mock resolveImage.
const makeFetchEmojiImage = () => reflect(resolveImage);

/**
 * When an emoji as no variations, it might still have 2 parts,
 * the canonical emoji and an empty string.
 * ex.
 *   (no color) Array.from('❤️') => ["❤", "️"]
 *   (w/ color) Array.from('👍🏿') => ["👍", "🏿"]
 *
 * The empty string needs to be removed otherwise the generated
 * url will be incorect.
 */
const _removeVariationSelectors = x => x !== '️';
const getCodePoints = (string, withVariationSelectors) => Array.from(string).filter(withVariationSelectors ? () => true : _removeVariationSelectors).map(char => char.codePointAt(0).toString(16)).join('-');
const buildEmojiUrl = (emoji, source) => {
  const {
    url,
    format,
    builder,
    withVariationSelectors
  } = source;
  if (typeof builder === 'function') {
    return builder(getCodePoints(emoji, withVariationSelectors));
  }
  return `${url}${getCodePoints(emoji, withVariationSelectors)}.${format}`;
};
const fetchEmojis = (string, source) => {
  if (!source || !source.url && !source.builder) return [];
  const promises = [];
  Array.from(string.matchAll(lib_regex)).forEach(match => {
    const emoji = match[0];
    if (!emojis[emoji] || emojis[emoji].loading) {
      const emojiUrl = buildEmojiUrl(emoji, source);
      emojis[emoji] = {
        loading: true
      };
      const fetchEmojiImage = makeFetchEmojiImage();
      promises.push(fetchEmojiImage({
        uri: emojiUrl
      }).then(image => {
        emojis[emoji].loading = false;
        emojis[emoji].data = image.data;
      }));
    }
  });
  return promises;
};
const embedEmojis = fragments => {
  const result = [];
  for (let i = 0; i < fragments.length; i += 1) {
    const fragment = fragments[i];
    let lastIndex = 0;
    Array.from(fragment.string.matchAll(lib_regex)).forEach(match => {
      const {
        index
      } = match;
      const emoji = match[0];
      const emojiSize = fragment.attributes.fontSize;
      const chunk = fragment.string.slice(lastIndex, index + match[0].length);

      // If emoji image was found, we create a new fragment with the
      // correct attachment and object substitution character;
      if (emojis[emoji] && emojis[emoji].data) {
        result.push({
          string: chunk.replace(match, String.fromCharCode(0xfffc)),
          attributes: {
            ...fragment.attributes,
            attachment: {
              width: emojiSize,
              height: emojiSize,
              yOffset: Math.floor(emojiSize * 0.1),
              image: emojis[emoji].data
            }
          }
        });
      } else {
        // If no emoji data, we try to use emojis in the font
        result.push({
          string: chunk,
          attributes: fragment.attributes
        });
      }
      lastIndex = index + emoji.length;
    });
    if (lastIndex < fragment.string.length) {
      result.push({
        string: fragment.string.slice(lastIndex),
        attributes: fragment.attributes
      });
    }
  }
  return result;
};

/**
 * Get image source
 *
 * @param {Object} node image node
 * @returns {string | Object} image src
 */
const getSource = node => {
  var _node$props, _node$props2, _node$props3;
  return ((_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.src) || ((_node$props2 = node.props) === null || _node$props2 === void 0 ? void 0 : _node$props2.source) || ((_node$props3 = node.props) === null || _node$props3 === void 0 ? void 0 : _node$props3.href);
};

/**
 * Resolves `src` to `@react-pdf/image` interface.
 *
 * Also it handles factories and async sources.
 *
 * @param {string | Object | Function} src
 * @returns {Promise<Object>} resolved src
 */
const resolveSource = async src => {
  const source = typeof src === 'function' ? await src() : await src;
  return typeof source === 'string' ? {
    uri: source
  } : source;
};

/* eslint-disable no-param-reassign */

/**
 * Fetches image and append data to node
 * Ideally this fn should be immutable.
 *
 * @param {Object} node
 */
const fetchImage = async node => {
  const src = getSource(node);
  const {
    cache
  } = node.props;
  if (!src) {
    console.warn(false, 'Image should receive either a "src" or "source" prop');
    return;
  }
  try {
    const source = await resolveSource(src);
    if (!source) {
      throw new Error(`Image's "src" or "source" prop returned ${source}`);
    }
    node.image = await resolveImage(source, {
      cache
    });
    node.image.key = source.data ? source.data.toString() : source.uri;
  } catch (e) {
    node.image = {
      width: 0,
      height: 0,
      key: null
    };
    console.warn(e.message);
  }
};
const isImage$2 = node => node.type === Image;

/**
 * Get all asset promises that need to be resolved
 *
 * @param {Object} fontStore font store
 * @param {Object} node root node
 * @returns {Promise<void>[]} asset promises
 */
const fetchAssets = (fontStore, node) => {
  var _node$children;
  const promises = [];
  const listToExplore = ((_node$children = node.children) === null || _node$children === void 0 ? void 0 : _node$children.slice(0)) || [];
  const emojiSource = fontStore ? fontStore.getEmojiSource() : null;
  while (listToExplore.length > 0) {
    var _n$style;
    const n = listToExplore.shift();
    if (isImage$2(n)) {
      promises.push(fetchImage(n));
    }
    if (fontStore && (_n$style = n.style) !== null && _n$style !== void 0 && _n$style.fontFamily) {
      promises.push(fontStore.load(n.style));
    }
    if (typeof n === 'string') {
      promises.push(...fetchEmojis(n, emojiSource));
    }
    if (typeof n.value === 'string') {
      promises.push(...fetchEmojis(n.value, emojiSource));
    }
    if (n.children) {
      n.children.forEach(childNode => {
        listToExplore.push(childNode);
      });
    }
  }
  return promises;
};

/**
 * Fetch image, font and emoji assets in parallel.
 * Layout process will not be resumed until promise resolves.
 *
 * @param {Object} node root node
 * @param {Object} fontStore font store
 * @returns {Promise<Object>} root node
 */
const resolveAssets = async (node, fontStore) => {
  const promises = fetchAssets(fontStore, node);
  await Promise.all(promises);
  return node;
};
const isLink$1 = node => node.type === Link;
const DEFAULT_LINK_STYLES = {
  color: 'blue',
  textDecoration: 'underline'
};

/**
 * Computes styles using stylesheet
 *
 * @param {Object} container
 * @param {Object} node document node
 * @returns {Object} computed styles
 */
const computeStyle = (container, node) => {
  let baseStyle = node.style;
  if (isLink$1(node)) {
    baseStyle = Array.isArray(node.style) ? [DEFAULT_LINK_STYLES, ...node.style] : [DEFAULT_LINK_STYLES, node.style];
  }
  return resolveStyles(container, baseStyle);
};

/**
 * @typedef {Function} ResolveNodeStyles
 * @param {Object} node document node
 * @returns {Object} node (and subnodes) with resolved styles
 */

/**
 * Resolves node styles
 *
 * @param {Object} container
 * @returns {ResolveNodeStyles} resolve node styles
 */
const resolveNodeStyles = container => node => {
  const style = computeStyle(container, node);
  if (!node.children) return Object.assign({}, node, {
    style
  });
  const children = node.children.map(resolveNodeStyles(container));
  return Object.assign({}, node, {
    style,
    children
  });
};

/**
 * Resolves page styles
 *
 * @param {Object} page document page
 * @returns {Object} document page with resolved styles
 */
const resolvePageStyles = page => {
  var _page$box, _page$box2, _page$props, _page$style;
  const dpi = 72; // Removed: page.props?.dpi || 72;
  const width = ((_page$box = page.box) === null || _page$box === void 0 ? void 0 : _page$box.width) || page.style.width;
  const height = ((_page$box2 = page.box) === null || _page$box2 === void 0 ? void 0 : _page$box2.height) || page.style.height;
  const orientation = ((_page$props = page.props) === null || _page$props === void 0 ? void 0 : _page$props.orientation) || 'portrait';
  const remBase = ((_page$style = page.style) === null || _page$style === void 0 ? void 0 : _page$style.fontSize) || 18;
  const container = {
    width,
    height,
    orientation,
    dpi,
    remBase
  };
  return resolveNodeStyles(container)(page);
};

/**
 * Resolves document styles
 *
 * @param {Object} root document root
 * @returns {Object} document root with resolved styles
 */
const lib_resolveStyles = root => {
  if (!root.children) return root;
  const children = root.children.map(resolvePageStyles);
  return Object.assign({}, root, {
    children
  });
};
const getTransformStyle = s => node => {
  var _node$style, _node$style2;
  return isNil((_node$style = node.style) === null || _node$style === void 0 ? void 0 : _node$style[s]) ? '50%' : (_node$style2 = node.style) === null || _node$style2 === void 0 ? void 0 : _node$style2[s];
};

/**
 * Get node origin
 *
 * @param {Object} node
 * @returns {{ left?: number, top?: number }} node origin
 */
const getOrigin = node => {
  if (!node.box) return {};
  const {
    left,
    top,
    width,
    height
  } = node.box;
  const transformOriginX = getTransformStyle('transformOriginX')(node);
  const transformOriginY = getTransformStyle('transformOriginY')(node);
  const percentX = matchPercent(transformOriginX);
  const percentY = matchPercent(transformOriginY);
  const offsetX = percentX ? width * percentX.percent : transformOriginX;
  const offsetY = percentY ? height * percentY.percent : transformOriginY;
  return {
    left: left + offsetX,
    top: top + offsetY
  };
};

/**
 * Resolve node origin
 *
 * @param {Object} node
 * @returns {Object} node with origin attribute
 */
const resolveNodeOrigin = node => {
  const origin = getOrigin(node);
  const newNode = Object.assign({}, node, {
    origin
  });
  if (!node.children) return newNode;
  const children = node.children.map(resolveNodeOrigin);
  return Object.assign({}, newNode, {
    children
  });
};

/**
 * Resolve document origins
 *
 * @param {Object} root document root
 * @returns {Object} document root
 */

const resolveOrigin = root => {
  if (!root.children) return root;
  const children = root.children.map(resolveNodeOrigin);
  return Object.assign({}, root, {
    children
  });
};

/* eslint-disable no-plusplus */
/* eslint-disable prefer-const */
/* eslint-disable prefer-destructuring */

const getBookmarkValue = title => {
  return typeof title === 'string' ? {
    title,
    fit: false,
    expanded: false
  } : title;
};
const resolveBookmarks = node => {
  let refs = 0;
  const children = (node.children || []).slice(0);
  const listToExplore = children.map(value => ({
    value,
    parent: null
  }));
  while (listToExplore.length > 0) {
    var _child$props;
    const element = listToExplore.shift();
    const child = element.value;
    let parent = element.parent;
    if ((_child$props = child.props) !== null && _child$props !== void 0 && _child$props.bookmark) {
      var _parent;
      const bookmark = getBookmarkValue(child.props.bookmark);
      const ref = refs++;
      const newHierarchy = {
        ref,
        parent: (_parent = parent) === null || _parent === void 0 ? void 0 : _parent.ref,
        ...bookmark
      };
      child.props.bookmark = newHierarchy;
      parent = newHierarchy;
    }
    if (child.children) {
      child.children.forEach(childNode => {
        listToExplore.push({
          value: childNode,
          parent
        });
      });
    }
  }
  return node;
};
const VALID_ORIENTATIONS = ['portrait', 'landscape'];

/**
 * Get page orientation. Defaults to portrait
 *
 * @param {Object} page object
 * @returns {string} page orientation
 */
const getOrientation = page => {
  var _page$props;
  const value = ((_page$props = page.props) === null || _page$props === void 0 ? void 0 : _page$props.orientation) || 'portrait';
  return VALID_ORIENTATIONS.includes(value) ? value : 'portrait';
};

/**
 * Return true if page is landscape
 *
 * @param {Object} page instance
 * @returns {boolean} is page landscape
 */
const isLandscape = page => getOrientation(page) === 'landscape';
const PAGE_SIZES = {
  '4A0': [4767.87, 6740.79],
  '2A0': [3370.39, 4767.87],
  A0: [2383.94, 3370.39],
  A1: [1683.78, 2383.94],
  A2: [1190.55, 1683.78],
  A3: [841.89, 1190.55],
  A4: [595.28, 841.89],
  A5: [419.53, 595.28],
  A6: [297.64, 419.53],
  A7: [209.76, 297.64],
  A8: [147.4, 209.76],
  A9: [104.88, 147.4],
  A10: [73.7, 104.88],
  B0: [2834.65, 4008.19],
  B1: [2004.09, 2834.65],
  B2: [1417.32, 2004.09],
  B3: [1000.63, 1417.32],
  B4: [708.66, 1000.63],
  B5: [498.9, 708.66],
  B6: [354.33, 498.9],
  B7: [249.45, 354.33],
  B8: [175.75, 249.45],
  B9: [124.72, 175.75],
  B10: [87.87, 124.72],
  C0: [2599.37, 3676.54],
  C1: [1836.85, 2599.37],
  C2: [1298.27, 1836.85],
  C3: [918.43, 1298.27],
  C4: [649.13, 918.43],
  C5: [459.21, 649.13],
  C6: [323.15, 459.21],
  C7: [229.61, 323.15],
  C8: [161.57, 229.61],
  C9: [113.39, 161.57],
  C10: [79.37, 113.39],
  RA0: [2437.8, 3458.27],
  RA1: [1729.13, 2437.8],
  RA2: [1218.9, 1729.13],
  RA3: [864.57, 1218.9],
  RA4: [609.45, 864.57],
  SRA0: [2551.18, 3628.35],
  SRA1: [1814.17, 2551.18],
  SRA2: [1275.59, 1814.17],
  SRA3: [907.09, 1275.59],
  SRA4: [637.8, 907.09],
  EXECUTIVE: [521.86, 756.0],
  FOLIO: [612.0, 936.0],
  LEGAL: [612.0, 1008.0],
  LETTER: [612.0, 792.0],
  TABLOID: [792.0, 1224.0],
  ID1: [153, 243]
};

/**
 * Transforms array into size object
 *
 * @param {number[]} v array
 * @returns {{ width: number, height: number }} size object with width and height
 */
const toSizeObject = v => ({
  width: v[0],
  height: v[1]
});

/**
 * Flip size object
 *
 * @param {{ width: number, height: number }} v size object
 * @returns {{ width: number, height: number }} flipped size object
 */
const flipSizeObject = v => ({
  width: v.height,
  height: v.width
});

/**
 * Adjust page size to passed DPI
 *
 * @param {{ width: number, height: number }} v size object
 * @param {number} dpi DPI
 * @returns {{ width: number, height: number }} adjusted size object
 */
const adjustDpi = (v, dpi) => ({
  width: v.width ? v.width * (72 / dpi) : v.width,
  height: v.height ? v.height * (72 / dpi) : v.height
});

/**
 * Returns size object from a given string
 *
 * @param {string} v page size string
 * @returns {{ width: number, height: number }} size object with width and height
 */
const getStringSize = v => {
  return toSizeObject(PAGE_SIZES[v.toUpperCase()]);
};

/**
 * Returns size object from a single number
 *
 * @param {number} n page size number
 * @returns {{ width: number, height: number }} size object with width and height
 */
const getNumberSize = n => toSizeObject([n]);

/**
 * Return page size in an object { width, height }
 *
 * @param {Object} page instance
 * @returns {{ width: number, height: number }} size object with width and height
 */
const getSize = page => {
  var _page$props, _page$props2;
  const value = ((_page$props = page.props) === null || _page$props === void 0 ? void 0 : _page$props.size) || 'A4';
  const dpi = parseFloat(((_page$props2 = page.props) === null || _page$props2 === void 0 ? void 0 : _page$props2.dpi) || 72);
  const type = typeof value;

  /**
   * @type {{ width: number, height: number }}
   */
  let size;
  if (type === 'string') {
    size = getStringSize(value);
  } else if (Array.isArray(value)) {
    size = toSizeObject(value);
    size = adjustDpi(size, dpi);
  } else if (type === 'number') {
    size = getNumberSize(value);
    size = adjustDpi(size, dpi);
  } else {
    size = value;
    size = adjustDpi(size, dpi);
  }
  return isLandscape(page) ? flipSizeObject(size) : size;
};

/**
 * Resolves page size
 *
 * @param {Object} page
 * @returns {Object} page with resolved size in style attribute
 */
const resolvePageSize = page => {
  const size = getSize(page);
  const style = flatten(page.style || {});
  return {
    ...page,
    style: {
      ...style,
      ...size
    }
  };
};

/**
 * Resolves page sizes
 *
 * @param {Object} root document root
 * @returns {Object} document root with resolved page sizes
 */
const resolvePageSizes = root => {
  if (!root.children) return root;
  const children = root.children.map(resolvePageSize);
  return Object.assign({}, root, {
    children
  });
};
const isFixed = node => {
  var _node$props;
  return ((_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.fixed) === true;
};

/**
 * Get line index at given height
 *
 * @param {Object} node
 * @param {number} height
 */
const lineIndexAtHeight = (node, height) => {
  let y = 0;
  if (!node.lines) return 0;
  for (let i = 0; i < node.lines.length; i += 1) {
    const line = node.lines[i];
    if (y + line.box.height > height) return i;
    y += line.box.height;
  }
  return node.lines.length;
};

/**
 * Get height for given text line index
 *
 * @param {Object} node
 * @param {number} index
 */
const heightAtLineIndex = (node, index) => {
  let counter = 0;
  if (!node.lines) return counter;
  for (let i = 0; i < index; i += 1) {
    const line = node.lines[i];
    if (!line) break;
    counter += line.box.height;
  }
  return counter;
};
const getLineBreak = (node, height) => {
  const top = get(node, ['box', 'top'], 0);
  const widows = get(node, ['props', 'widows'], 2);
  const orphans = get(node, ['props', 'orphans'], 2);
  const linesQuantity = node.lines.length;
  const slicedLine = lineIndexAtHeight(node, height - top);
  if (slicedLine === 0) {
    return 0;
  }
  if (linesQuantity < orphans) {
    return linesQuantity;
  }
  if (slicedLine < orphans || linesQuantity < orphans + widows) {
    return 0;
  }
  if (linesQuantity === orphans + widows) {
    return orphans;
  }
  if (linesQuantity - slicedLine < widows) {
    return linesQuantity - widows;
  }
  return slicedLine;
};

// Also receives contentArea in case it's needed
const splitText = (node, height) => {
  const slicedLineIndex = getLineBreak(node, height);
  const currentHeight = heightAtLineIndex(node, slicedLineIndex);
  const nextHeight = node.box.height - currentHeight;
  const current = Object.assign({}, node, {
    box: {
      ...node.box,
      height: currentHeight,
      borderBottomWidth: 0
    },
    style: {
      ...node.style,
      marginBottom: 0,
      paddingBottom: 0,
      borderBottomWidth: 0,
      borderBottomLeftRadius: 0,
      borderBottomRightRadius: 0
    },
    lines: node.lines.slice(0, slicedLineIndex)
  });
  const next = Object.assign({}, node, {
    box: {
      ...node.box,
      top: 0,
      height: nextHeight,
      borderTopWidth: 0
    },
    style: {
      ...node.style,
      marginTop: 0,
      paddingTop: 0,
      borderTopWidth: 0,
      borderTopLeftRadius: 0,
      borderTopRightRadius: 0
    },
    lines: node.lines.slice(slicedLineIndex)
  });
  return [current, next];
};
const getTop$1 = node => {
  var _node$box;
  return ((_node$box = node.box) === null || _node$box === void 0 ? void 0 : _node$box.top) || 0;
};
const hasFixedHeight = node => {
  var _node$style;
  return !isNil((_node$style = node.style) === null || _node$style === void 0 ? void 0 : _node$style.height);
};
const splitNode = (node, height) => {
  if (!node) return [null, null];
  const nodeTop = getTop$1(node);
  const current = Object.assign({}, node, {
    box: {
      ...node.box,
      borderBottomWidth: 0
    },
    style: {
      ...node.style,
      marginBottom: 0,
      paddingBottom: 0,
      borderBottomWidth: 0,
      borderBottomLeftRadius: 0,
      borderBottomRightRadius: 0
    }
  });
  current.style.height = height - nodeTop;
  const nextHeight = hasFixedHeight(node) ? node.box.height - (height - nodeTop) : null;
  const next = Object.assign({}, node, {
    box: {
      ...node.box,
      top: 0,
      borderTopWidth: 0
    },
    style: {
      ...node.style,
      marginTop: 0,
      paddingTop: 0,
      borderTopWidth: 0,
      borderTopLeftRadius: 0,
      borderTopRightRadius: 0
    }
  });
  if (nextHeight) {
    next.style.height = nextHeight;
  }
  return [current, next];
};
const NON_WRAP_TYPES = [Svg, Note, Image, Canvas];
const getWrap = node => {
  var _node$props;
  if (NON_WRAP_TYPES.includes(node.type)) return false;
  return isNil((_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.wrap) ? true : node.props.wrap;
};
const getComputedPadding = (node, edge) => {
  const {
    yogaNode
  } = node;
  return yogaNode ? yogaNode.getComputedPadding(edge) : null;
};

/**
 * Get Yoga computed paddings. Zero otherwise
 *
 * @param {Object} node
 * @returns {{ paddingTop: number, paddingRight: number, paddingBottom: number, paddingLeft: number }} paddings
 */
const getPadding = node => {
  const {
    style,
    box
  } = node;
  const paddingTop = getComputedPadding(node, load/* Edge */.oH.Top) || (box === null || box === void 0 ? void 0 : box.paddingTop) || (style === null || style === void 0 ? void 0 : style.paddingTop) || (style === null || style === void 0 ? void 0 : style.paddingVertical) || (style === null || style === void 0 ? void 0 : style.padding) || 0;
  const paddingRight = getComputedPadding(node, load/* Edge */.oH.Right) || (box === null || box === void 0 ? void 0 : box.paddingRight) || (style === null || style === void 0 ? void 0 : style.paddingRight) || (style === null || style === void 0 ? void 0 : style.paddingHorizontal) || (style === null || style === void 0 ? void 0 : style.padding) || 0;
  const paddingBottom = getComputedPadding(node, load/* Edge */.oH.Bottom) || (box === null || box === void 0 ? void 0 : box.paddingBottom) || (style === null || style === void 0 ? void 0 : style.paddingBottom) || (style === null || style === void 0 ? void 0 : style.paddingVertical) || (style === null || style === void 0 ? void 0 : style.padding) || 0;
  const paddingLeft = getComputedPadding(node, load/* Edge */.oH.Left) || (box === null || box === void 0 ? void 0 : box.paddingLeft) || (style === null || style === void 0 ? void 0 : style.paddingLeft) || (style === null || style === void 0 ? void 0 : style.paddingHorizontal) || (style === null || style === void 0 ? void 0 : style.padding) || 0;
  return {
    paddingTop,
    paddingRight,
    paddingBottom,
    paddingLeft
  };
};
const getWrapArea = page => {
  var _page$style;
  const {
    paddingBottom
  } = getPadding(page);
  const height = (_page$style = page.style) === null || _page$style === void 0 ? void 0 : _page$style.height;
  return height - paddingBottom;
};
const getContentArea = page => {
  var _page$style;
  const height = (_page$style = page.style) === null || _page$style === void 0 ? void 0 : _page$style.height;
  const {
    paddingTop,
    paddingBottom
  } = getPadding(page);
  return height - paddingBottom - paddingTop;
};
const lib_isString = value => typeof value === 'string';
const lib_isNumber = value => typeof value === 'number';
const isFragment = value => value && value.type === Symbol.for('react.fragment');

/**
 * Transforms a react element instance to internal element format.
 *
 * Can return multiple instances in the case of arrays or fragments.
 *
 * @param {Object} element React element
 * @returns {Object[]} parsed React elements
 */
const createInstances = element => {
  if (!element) return [];
  if (lib_isString(element) || lib_isNumber(element)) {
    return [{
      type: TextInstance,
      value: `${element}`
    }];
  }
  if (isFragment(element)) {
    return createInstances(element.props.children);
  }
  if (Array.isArray(element)) {
    return element.reduce((acc, el) => acc.concat(createInstances(el)), []);
  }
  if (!lib_isString(element.type)) {
    return createInstances(element.type(element.props));
  }
  const {
    type,
    props: {
      style = {},
      children = [],
      ...props
    }
  } = element;
  const nextChildren = castArray(children).reduce((acc, child) => acc.concat(createInstances(child)), []);
  return [{
    type,
    style,
    props,
    box: {},
    children: nextChildren
  }];
};

/* eslint-disable no-continue */

const getBreak = node => {
  var _node$props;
  return ((_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.break) || false;
};
const getMinPresenceAhead = node => {
  var _node$props2;
  return ((_node$props2 = node.props) === null || _node$props2 === void 0 ? void 0 : _node$props2.minPresenceAhead) || 0;
};
const getFurthestEnd = elements => Math.max(...elements.map(node => node.box.top + node.box.height));
const getEndOfMinPresenceAhead = child => {
  return child.box.top + child.box.height + child.box.marginBottom + getMinPresenceAhead(child);
};
const getEndOfPresence = (child, futureElements) => {
  const afterMinPresenceAhead = getEndOfMinPresenceAhead(child);
  const endOfFurthestFutureElement = getFurthestEnd(futureElements.filter(node => {
    var _node$props3;
    return !((_node$props3 = node.props) !== null && _node$props3 !== void 0 && _node$props3.fixed);
  }));
  return Math.min(afterMinPresenceAhead, endOfFurthestFutureElement);
};
const shouldBreak = (child, futureElements, height) => {
  var _child$props;
  if ((_child$props = child.props) !== null && _child$props !== void 0 && _child$props.fixed) return false;
  const shouldSplit = height < child.box.top + child.box.height;
  const canWrap = getWrap(child);

  // Calculate the y coordinate where the desired presence of the child ends
  const endOfPresence = getEndOfPresence(child, futureElements);
  // If the child is already at the top of the page, breaking won't improve its presence
  // (as long as react-pdf does not support breaking into differently sized containers)
  const breakingImprovesPresence = child.box.top > child.box.marginTop;
  return getBreak(child) || shouldSplit && !canWrap || !shouldSplit && endOfPresence > height && breakingImprovesPresence;
};
const IGNORABLE_CODEPOINTS = [8232,
// LINE_SEPARATOR
8233 // PARAGRAPH_SEPARATOR
];
const buildSubsetForFont = font => IGNORABLE_CODEPOINTS.reduce((acc, codePoint) => {
  if (font && font.hasGlyphForCodePoint && font.hasGlyphForCodePoint(codePoint)) {
    return acc;
  }
  return [...acc, String.fromCharCode(codePoint)];
}, []);
const ignoreChars = fragments => fragments.map(fragment => {
  const charSubset = buildSubsetForFont(fragment.attributes.font);
  const subsetRegex = new RegExp(charSubset.join('|'));
  return {
    string: fragment.string.replace(subsetRegex, ''),
    attributes: fragment.attributes
  };
});
const PREPROCESSORS = [ignoreChars, embedEmojis];
const isImage$1 = node => node.type === Image;
const isTextInstance$2 = node => node.type === TextInstance;

/**
 * Get textkit fragments of given node object
 *
 * @param {Object} fontStore font store
 * @param {Object} instance node
 * @param {string} [parentLink] parent link
 * @param {number} [level] fragment level
 * @returns {Object[]} text fragments
 */
const getFragments = function (fontStore, instance, parentLink, level) {
  var _instance$props, _instance$props2;
  if (level === void 0) {
    level = 0;
  }
  if (!instance) return [{
    string: ''
  }];
  let fragments = [];
  const {
    color = 'black',
    direction = 'ltr',
    fontFamily = 'Helvetica',
    fontWeight,
    fontStyle,
    fontSize = 18,
    textAlign,
    lineHeight,
    textDecoration,
    textDecorationColor,
    textDecorationStyle,
    textTransform,
    letterSpacing,
    textIndent,
    opacity,
    verticalAlign
  } = instance.style;
  const fontFamilies = typeof fontFamily === 'string' ? [fontFamily] : [...(fontFamily || [])];
  const font = fontFamilies.map(fontFamilyName => {
    if (typeof fontFamilyName !== 'string') return fontFamilyName;
    const opts = {
      fontFamily: fontFamilyName,
      fontWeight,
      fontStyle
    };
    const obj = fontStore ? fontStore.getFont(opts) : null;
    return obj ? obj.data : fontFamilyName;
  });

  // Don't pass main background color to textkit. Will be rendered by the render package instead
  const backgroundColor = level === 0 ? null : instance.style.backgroundColor;
  const attributes = {
    font,
    color,
    opacity,
    fontSize,
    lineHeight,
    direction,
    verticalAlign,
    backgroundColor,
    indent: textIndent,
    characterSpacing: letterSpacing,
    strikeStyle: textDecorationStyle,
    underlineStyle: textDecorationStyle,
    underline: textDecoration === 'underline' || textDecoration === 'underline line-through' || textDecoration === 'line-through underline',
    strike: textDecoration === 'line-through' || textDecoration === 'underline line-through' || textDecoration === 'line-through underline',
    strikeColor: textDecorationColor || color,
    underlineColor: textDecorationColor || color,
    link: parentLink || ((_instance$props = instance.props) === null || _instance$props === void 0 ? void 0 : _instance$props.src) || ((_instance$props2 = instance.props) === null || _instance$props2 === void 0 ? void 0 : _instance$props2.href),
    align: textAlign || (direction === 'rtl' ? 'right' : 'left')
  };
  for (let i = 0; i < instance.children.length; i += 1) {
    const child = instance.children[i];
    if (isImage$1(child)) {
      fragments.push({
        string: String.fromCharCode(0xfffc),
        attributes: {
          ...attributes,
          attachment: {
            width: child.style.width || fontSize,
            height: child.style.height || fontSize,
            image: child.image.data
          }
        }
      });
    } else if (isTextInstance$2(child)) {
      fragments.push({
        string: transformText(child.value, textTransform),
        attributes
      });
    } else if (child) {
      fragments.push(...getFragments(fontStore, child, attributes.link, level + 1));
    }
  }
  for (let i = 0; i < PREPROCESSORS.length; i += 1) {
    const preprocessor = PREPROCESSORS[i];
    fragments = preprocessor(fragments);
  }
  return fragments;
};

/**
 * Get textkit attributed string from text node
 *
 * @param {Object} fontStore font store
 * @param {Object} instance node
 * @returns {Object} attributed string
 */
const getAttributedString = (fontStore, instance) => {
  const fragments = getFragments(fontStore, instance);
  return lib_fromFragments(fragments);
};
const engines = {
  bidi: bidiEngine,
  linebreaker: linebreaker,
  justification: justification,
  textDecoration: textDecoration,
  scriptItemizer: scriptItemizer,
  wordHyphenation: wordHyphenation,
  fontSubstitution: lib_fontSubstitution
};
const engine = layoutEngine(engines);
const getMaxLines = node => {
  var _node$style;
  return (_node$style = node.style) === null || _node$style === void 0 ? void 0 : _node$style.maxLines;
};
const getTextOverflow = node => {
  var _node$style2;
  return (_node$style2 = node.style) === null || _node$style2 === void 0 ? void 0 : _node$style2.textOverflow;
};

/**
 * Get layout container for specific text node
 *
 * @param {number} width
 * @param {number} height
 * @param {Object} node
 * @returns {Object} layout container
 */
const getContainer = (width, height, node) => {
  const maxLines = getMaxLines(node);
  const textOverflow = getTextOverflow(node);
  return {
    x: 0,
    y: 0,
    width,
    maxLines,
    height: height || Infinity,
    truncateMode: textOverflow
  };
};

/**
 * Get text layout options for specific text node
 *
 * @param {Object} node instance
 * @returns {Object} layout options
 */
const getLayoutOptions = (fontStore, node) => ({
  hyphenationPenalty: node.props.hyphenationPenalty,
  shrinkWhitespaceFactor: {
    before: -0.5,
    after: -0.5
  },
  hyphenationCallback: node.props.hyphenationCallback || (fontStore === null || fontStore === void 0 ? void 0 : fontStore.getHyphenationCallback()) || null
});

/**
 * Get text lines for given node
 *
 * @param {Object} node node
 * @param {number} width container width
 * @param {number} height container height
 * @param {number} fontStore font store
 * @returns {Object[]} layout lines
 */
const layoutText = (node, width, height, fontStore) => {
  const attributedString = getAttributedString(fontStore, node);
  const container = getContainer(width, height, node);
  const options = getLayoutOptions(fontStore, node);
  const lines = engine(attributedString, container, options);
  return lines.reduce((acc, line) => [...acc, ...line], []);
};
const isType$2 = type => node => node.type === type;
const isSvg$2 = isType$2(Svg);
const isText$4 = isType$2(Text);
const shouldIterate = node => !isSvg$2(node) && !isText$4(node);
const shouldLayoutText = node => isText$4(node) && !node.lines;

/**
 * Performs text layout on text node if wasn't calculated before.
 * Text layout is usually performed on Yoga's layout process (via setMeasureFunc),
 * but we need to layout those nodes with fixed width and height.
 *
 * @param {Object} node
 * @returns {Object} layout node
 */
const resolveTextLayout = (node, fontStore) => {
  if (shouldLayoutText(node)) {
    const width = node.box.width - (node.box.paddingRight + node.box.paddingLeft);
    const height = node.box.height - (node.box.paddingTop + node.box.paddingBottom);

    // eslint-disable-next-line no-param-reassign
    node.lines = layoutText(node, width, height, fontStore);
  }
  if (shouldIterate(node)) {
    if (!node.children) return node;
    const mapChild = child => resolveTextLayout(child, fontStore);
    const children = node.children.map(mapChild);
    return Object.assign({}, node, {
      children
    });
  }
  return node;
};
const BASE_INHERITABLE_PROPERTIES = ['color', 'fontFamily', 'fontSize', 'fontStyle', 'fontWeight', 'letterSpacing', 'opacity', 'textDecoration', 'textTransform', 'lineHeight', 'textAlign', 'visibility', 'wordSpacing'];
const TEXT_INHERITABLE_PROPERTIES = [...BASE_INHERITABLE_PROPERTIES, 'backgroundColor'];
const isSvg$1 = node => node.type === Svg;
const isText$3 = node => node.type === Text;

// Merge style values
const mergeValues = (styleName, value, inheritedValue) => {
  switch (styleName) {
    case 'textDecoration':
      {
        // merge not none and not false textDecoration values to one rule
        return [inheritedValue, value].filter(v => v && v !== 'none').join(' ');
      }
    default:
      return value;
  }
};

// Merge inherited and node styles
const merge = (inheritedStyles, style) => {
  const mergedStyles = {
    ...inheritedStyles
  };
  Object.entries(style).forEach(_ref => {
    let [styleName, value] = _ref;
    mergedStyles[styleName] = mergeValues(styleName, value, inheritedStyles[styleName]);
  });
  return mergedStyles;
};

/**
 * @typedef {Function} MergeStyles
 * @param {Object} node
 * @returns {Object} node with styles merged
 */

/**
 * Merges styles with node
 *
 * @param {Object} inheritedStyles style object
 * @returns {MergeStyles} merge styles function
 */
const lib_mergeStyles = inheritedStyles => node => {
  const style = merge(inheritedStyles, node.style || {});
  return Object.assign({}, node, {
    style
  });
};

/**
 * Inherit style values from the root to the leafs
 *
 * @param {Object} node document root
 * @returns {Object} document root with inheritance
 *
 */
const resolveInheritance = node => {
  if (isSvg$1(node)) return node;
  if (!node.children) return node;
  const inheritableProperties = isText$3(node) ? TEXT_INHERITABLE_PROPERTIES : BASE_INHERITABLE_PROPERTIES;
  const inheritStyles = pick(inheritableProperties, node.style || {});
  const resolveChild = compose(resolveInheritance, lib_mergeStyles(inheritStyles));
  const children = node.children.map(resolveChild);
  return Object.assign({}, node, {
    children
  });
};
const getComputedMargin = (node, edge) => {
  const {
    yogaNode
  } = node;
  return yogaNode ? yogaNode.getComputedMargin(edge) : null;
};

/**
 * Get Yoga computed magins. Zero otherwise
 *
 * @param {Object} node
 * @returns {{ marginTop: number, marginRight: number, marginBottom: number, marginLeft: number }} margins
 */
const lib_getMargin = node => {
  const {
    style,
    box
  } = node;
  const marginTop = getComputedMargin(node, load/* Edge */.oH.Top) || (box === null || box === void 0 ? void 0 : box.marginTop) || (style === null || style === void 0 ? void 0 : style.marginTop) || (style === null || style === void 0 ? void 0 : style.marginVertical) || (style === null || style === void 0 ? void 0 : style.margin) || 0;
  const marginRight = getComputedMargin(node, load/* Edge */.oH.Right) || (box === null || box === void 0 ? void 0 : box.marginRight) || (style === null || style === void 0 ? void 0 : style.marginRight) || (style === null || style === void 0 ? void 0 : style.marginHorizontal) || (style === null || style === void 0 ? void 0 : style.margin) || 0;
  const marginBottom = getComputedMargin(node, load/* Edge */.oH.Bottom) || (box === null || box === void 0 ? void 0 : box.marginBottom) || (style === null || style === void 0 ? void 0 : style.marginBottom) || (style === null || style === void 0 ? void 0 : style.marginVertical) || (style === null || style === void 0 ? void 0 : style.margin) || 0;
  const marginLeft = getComputedMargin(node, load/* Edge */.oH.Left) || (box === null || box === void 0 ? void 0 : box.marginLeft) || (style === null || style === void 0 ? void 0 : style.marginLeft) || (style === null || style === void 0 ? void 0 : style.marginHorizontal) || (style === null || style === void 0 ? void 0 : style.margin) || 0;
  return {
    marginTop,
    marginRight,
    marginBottom,
    marginLeft
  };
};

/**
 * Get Yoga computed position. Zero otherwise
 *
 * @param {Object} node
 * @returns {{ top: number, right: number, bottom: number, left: number }} position
 */
const getPosition = node => {
  const {
    yogaNode
  } = node;
  return {
    top: (yogaNode === null || yogaNode === void 0 ? void 0 : yogaNode.getComputedTop()) || 0,
    right: (yogaNode === null || yogaNode === void 0 ? void 0 : yogaNode.getComputedRight()) || 0,
    bottom: (yogaNode === null || yogaNode === void 0 ? void 0 : yogaNode.getComputedBottom()) || 0,
    left: (yogaNode === null || yogaNode === void 0 ? void 0 : yogaNode.getComputedLeft()) || 0
  };
};
const DEFAULT_DIMENSION = {
  width: 0,
  height: 0
};

/**
 * Get Yoga computed dimensions. Zero otherwise
 *
 * @param {Object} node
 * @returns {{ width: number, height: number }} dimensions
 */
const getDimension = node => {
  const {
    yogaNode
  } = node;
  if (!yogaNode) return DEFAULT_DIMENSION;
  return {
    width: yogaNode.getComputedWidth(),
    height: yogaNode.getComputedHeight()
  };
};
const getComputedBorder = (yogaNode, edge) => yogaNode ? yogaNode.getComputedBorder(edge) : 0;

/**
 * Get Yoga computed border width. Zero otherwise
 *
 * @param {Object} node
 * @returns {{ borderTopWidth: number, borderRightWidth: number, borderBottomWidth: number, borderLeftWidth: number }} border widths
 */
const getBorderWidth = node => {
  const {
    yogaNode
  } = node;
  return {
    borderTopWidth: getComputedBorder(yogaNode, load/* Edge */.oH.Top),
    borderRightWidth: getComputedBorder(yogaNode, load/* Edge */.oH.Right),
    borderBottomWidth: getComputedBorder(yogaNode, load/* Edge */.oH.Bottom),
    borderLeftWidth: getComputedBorder(yogaNode, load/* Edge */.oH.Left)
  };
};

/**
 * @typedef {Function} NodeInstanceWrapper
 * @param {Object} node node instance
 * @returns {Object} node instance
 */

/**
 * Set display attribute to node's Yoga instance
 *
 * @param {string} value display
 * @returns {NodeInstanceWrapper} node instance wrapper
 */
const setDisplay = value => node => {
  const {
    yogaNode
  } = node;
  if (yogaNode) {
    yogaNode.setDisplay(value === 'none' ? load/* Display */.nl.None : load/* Display */.nl.Flex);
  }
  return node;
};
const OVERFLOW = {
  hidden: load/* Overflow */.nE.Hidden,
  scroll: load/* Overflow */.nE.Scroll
};

/**
 * @typedef {Function} NodeInstanceWrapper
 * @param {Object} node node instance
 * @returns {Object} node instance
 */

/**
 * Set overflow attribute to node's Yoga instance
 *
 * @param {string} value overflow value
 * @returns {NodeInstanceWrapper} node instance wrapper
 */
const setOverflow = value => node => {
  const {
    yogaNode
  } = node;
  if (!isNil(value) && yogaNode) {
    const overflow = OVERFLOW[value] || load/* Overflow */.nE.Visible;
    yogaNode.setOverflow(overflow);
  }
  return node;
};
const FLEX_WRAP = {
  wrap: load/* Wrap */.B_.Wrap,
  'wrap-reverse': load/* Wrap */.B_.WrapReverse
};

/**
 * @typedef {Function} NodeInstanceWrapper
 * @param {Object} node node instance
 * @returns {Object} node instance
 */

/**
 * Set flex wrap attribute to node's Yoga instance
 *
 * @param {string} value flex wrap value
 * @returns {NodeInstanceWrapper} node instance wrapper
 */
const setFlexWrap = value => node => {
  const {
    yogaNode
  } = node;
  if (yogaNode) {
    const flexWrap = FLEX_WRAP[value] || load/* Wrap */.B_.NoWrap;
    yogaNode.setFlexWrap(flexWrap);
  }
  return node;
};

/* eslint-disable no-unused-expressions */

/**
 * @typedef {Function} NodeInstanceWrapper
 * @param {Object} node node instance
 * @returns {Object} node instance
 */

/**
 * @typedef {Function} YogaValueSetter
 * @param {any} value
 * @returns {NodeInstanceWrapper} node instance wrapper
 */

/**
 * Set generic yoga attribute to node's Yoga instance, handing `auto`, edges and percentage cases
 *
 * @param {string} attr property
 * @param {number} [edge] edge
 * @returns {YogaValueSetter} node instance wrapper
 */
const setYogaValue = (attr, edge) => value => node => {
  const {
    yogaNode
  } = node;
  if (!isNil(value) && yogaNode) {
    const hasEdge = !isNil(edge);
    const fixedMethod = `set${upperFirst(attr)}`;
    const autoMethod = `${fixedMethod}Auto`;
    const percentMethod = `${fixedMethod}Percent`;
    const percent = matchPercent(value);
    if (percent && !yogaNode[percentMethod]) {
      throw new Error(`You can't pass percentage values to ${attr} property`);
    }
    if (percent) {
      if (hasEdge) {
        var _yogaNode$percentMeth;
        (_yogaNode$percentMeth = yogaNode[percentMethod]) === null || _yogaNode$percentMeth === void 0 ? void 0 : _yogaNode$percentMeth.call(yogaNode, edge, percent.value);
      } else {
        var _yogaNode$percentMeth2;
        (_yogaNode$percentMeth2 = yogaNode[percentMethod]) === null || _yogaNode$percentMeth2 === void 0 ? void 0 : _yogaNode$percentMeth2.call(yogaNode, percent.value);
      }
    } else if (value === 'auto') {
      if (hasEdge) {
        var _yogaNode$autoMethod;
        (_yogaNode$autoMethod = yogaNode[autoMethod]) === null || _yogaNode$autoMethod === void 0 ? void 0 : _yogaNode$autoMethod.call(yogaNode, edge);
      } else {
        var _yogaNode$autoMethod2;
        (_yogaNode$autoMethod2 = yogaNode[autoMethod]) === null || _yogaNode$autoMethod2 === void 0 ? void 0 : _yogaNode$autoMethod2.call(yogaNode);
      }
    } else if (hasEdge) {
      var _yogaNode$fixedMethod;
      (_yogaNode$fixedMethod = yogaNode[fixedMethod]) === null || _yogaNode$fixedMethod === void 0 ? void 0 : _yogaNode$fixedMethod.call(yogaNode, edge, value);
    } else {
      var _yogaNode$fixedMethod2;
      (_yogaNode$fixedMethod2 = yogaNode[fixedMethod]) === null || _yogaNode$fixedMethod2 === void 0 ? void 0 : _yogaNode$fixedMethod2.call(yogaNode, value);
    }
  }
  return node;
};

/**
 * @typedef {Function} NodeInstanceWrapper
 * @param {Object} node node instance
 * @returns {Object} node instance
 */

/**
 * Set flex grow attribute to node's Yoga instance
 *
 * @param {number} value flex grow value
 * @returns {NodeInstanceWrapper} node instance wrapper
 */
const setFlexGrow = value => node => {
  return setYogaValue('flexGrow')(value || 0)(node);
};

/**
 * Set flex basis attribute to node's Yoga instance
 *
 * @param {number} flex basis value
 * @param {Object} node instance
 * @returns {Object} node instance
 */
const setFlexBasis = setYogaValue('flexBasis');
const ALIGN = {
  'flex-start': load/* Align */.W3.FlexStart,
  center: load/* Align */.W3.Center,
  'flex-end': load/* Align */.W3.FlexEnd,
  stretch: load/* Align */.W3.Stretch,
  baseline: load/* Align */.W3.Baseline,
  'space-between': load/* Align */.W3.SpaceBetween,
  'space-around': load/* Align */.W3.SpaceAround,
  'space-evenly': load/* Align */.W3.SpaceEvenly
};

/**
 * @typedef {Function} NodeInstanceWrapper
 * @param {Object} node node instance
 * @returns {Object} node instance
 */

/**
 * @typedef {Function} AlignSetter
 * @param {string} value align value
 * @returns {NodeInstanceWrapper} node instance wrapper
 */

/**
 * Set generic align attribute to node's Yoga instance
 *
 * @param {string} attr specific align property
 * @returns {AlignSetter} align setter
 */
const setAlign = attr => value => node => {
  const {
    yogaNode
  } = node;
  const defaultValue = attr === 'items' ? load/* Align */.W3.Stretch : load/* Align */.W3.Auto;
  if (yogaNode) {
    const align = ALIGN[value] || defaultValue;
    yogaNode[`setAlign${upperFirst(attr)}`](align);
  }
  return node;
};

/**
 * Set align self attribute to node's Yoga instance
 *
 * @param {string} align value
 * @param {Object} node instance
 * @returns {Object} node instance
 */
const setAlignSelf = setAlign('self');

/**
 * Set align items attribute to node's Yoga instance
 *
 * @param {string} align value
 * @param {Object} node instance
 * @returns {Object} node instance
 */
const setAlignItems = setAlign('items');

/**
 * @typedef {Function} NodeInstanceWrapper
 * @param {Object} node node instance
 * @returns {Object} node instance
 */

/**
 * Set flex shrink attribute to node's Yoga instance
 *
 * @param {number} value flex shrink value
 * @returns {NodeInstanceWrapper} node instance wrapper
 */
const setFlexShrink = value => node => {
  return setYogaValue('flexShrink')(value || 1)(node);
};

/**
 * @typedef {Function} NodeInstanceWrapper
 * @param {Object} node node instance
 * @returns {Object} node instance
 */

/**
 * Set aspect ratio attribute to node's Yoga instance
 *
 * @param {number} value ratio
 * @returns {NodeInstanceWrapper} node instance wrapper
 */
const setAspectRatio = value => node => {
  const {
    yogaNode
  } = node;
  if (!isNil(value) && yogaNode) {
    yogaNode.setAspectRatio(value);
  }
  return node;
};

/**
 * Set align content attribute to node's Yoga instance
 *
 * @param {string} align value
 * @param {Object} node instance
 * @returns {Object} node instance
 */
const setAlignContent = setAlign('content');
const POSITION = {
  absolute: load/* PositionType */.CR.Absolute,
  relative: load/* PositionType */.CR.Relative,
  static: load/* PositionType */.CR.Static
};

/**
 * @typedef {Function} NodeInstanceWrapper
 * @param {Object} node node instance
 * @returns {Object} node instance
 */

/**
 * Set position type attribute to node's Yoga instance
 *
 * @param {string} value position position type
 * @returns {NodeInstanceWrapper} node instance wrapper
 */
const setPositionType = value => node => {
  const {
    yogaNode
  } = node;
  if (!isNil(value) && yogaNode) {
    yogaNode.setPositionType(POSITION[value]);
  }
  return node;
};
const FLEX_DIRECTIONS = {
  row: load/* FlexDirection */.bo.Row,
  'row-reverse': load/* FlexDirection */.bo.RowReverse,
  'column-reverse': load/* FlexDirection */.bo.ColumnReverse
};

/**
 * @typedef {Function} NodeInstanceWrapper
 * @param {Object} node node instance
 * @returns {Object} node instance
 */

/**
 * Set flex direction attribute to node's Yoga instance
 *
 * @param {string} value flex direction value
 * @returns {NodeInstanceWrapper} node instance wrapper
 */
const setFlexDirection = value => node => {
  const {
    yogaNode
  } = node;
  if (yogaNode) {
    const flexDirection = FLEX_DIRECTIONS[value] || load/* FlexDirection */.bo.Column;
    yogaNode.setFlexDirection(flexDirection);
  }
  return node;
};
const JUSTIFY_CONTENT = {
  center: load/* Justify */.F1.Center,
  'flex-end': load/* Justify */.F1.FlexEnd,
  'space-between': load/* Justify */.F1.SpaceBetween,
  'space-around': load/* Justify */.F1.SpaceAround,
  'space-evenly': load/* Justify */.F1.SpaceEvenly
};

/**
 * @typedef {Function} NodeInstanceWrapper
 * @param {Object} node node instance
 * @returns {Object} node instance
 */

/**
 * Set justify content attribute to node's Yoga instance
 *
 * @param {string} value justify content value
 * @returns {NodeInstanceWrapper} node instance wrapper
 */
const setJustifyContent = value => node => {
  const {
    yogaNode
  } = node;
  if (!isNil(value) && yogaNode) {
    const justifyContent = JUSTIFY_CONTENT[value] || load/* Justify */.F1.FlexStart;
    yogaNode.setJustifyContent(justifyContent);
  }
  return node;
};

/**
 * @typedef {Function} NodeInstanceWrapper
 * @param {Object} node node instance
 * @returns {Object} node instance
 */

/**
 * Set margin top attribute to node's Yoga instance
 *
 * @param {number} margin margin top
 * @param {Object} node node instance
 * @returns {Object} node instance
 */
const setMarginTop = setYogaValue('margin', load/* Edge */.oH.Top);

/**
 * Set margin right attribute to node's Yoga instance
 *
 * @param {number} margin margin right
 * @param {Object} node node instance
 * @returns {Object} node instance
 */
const setMarginRight = setYogaValue('margin', load/* Edge */.oH.Right);

/**
 * Set margin bottom attribute to node's Yoga instance
 *
 * @param {number} margin margin bottom
 * @param {Object} node node instance
 * @returns {Object} node instance
 */
const setMarginBottom = setYogaValue('margin', load/* Edge */.oH.Bottom);

/**
 * Set margin left attribute to node's Yoga instance
 *
 * @param {number} margin margin left
 * @param {Object} node node instance
 * @returns {Object} node instance
 */
const setMarginLeft = setYogaValue('margin', load/* Edge */.oH.Left);

/**
 * @typedef {Function} NodeInstanceWrapper
 * @param {Object} node node instance
 * @returns {Object} node instance
 */

/**
 * Set padding top attribute to node's Yoga instance
 *
 * @param {number} padding padding top
 * @param {Object} node node instance
 * @returns {Object} node instance
 */
const setPaddingTop = setYogaValue('padding', load/* Edge */.oH.Top);

/**
 * Set padding right attribute to node's Yoga instance
 *
 * @param {number} padding padding right
 * @param {Object} node node instance
 * @returns {Object} node instance
 */
const setPaddingRight = setYogaValue('padding', load/* Edge */.oH.Right);

/**
 * Set padding bottom attribute to node's Yoga instance
 *
 * @param {number} padding padding bottom
 * @param {Object} node node instance
 * @returns {Object} node instance
 */
const setPaddingBottom = setYogaValue('padding', load/* Edge */.oH.Bottom);

/**
 * Set padding left attribute to node's Yoga instance
 *
 * @param {number} padding padding left
 * @param {Object} node node instance
 * @returns {Object} node instance
 */
const setPaddingLeft = setYogaValue('padding', load/* Edge */.oH.Left);

/**
 * @typedef {Function} NodeInstanceWrapper
 * @param {Object} node node instance
 * @returns {Object} node instance
 */

/**
 * Set border top attribute to node's Yoga instance
 *
 * @param {number} border border top width
 * @param {Object} node node instance
 * @returns {Object} node instance
 */
const setBorderTop = setYogaValue('border', load/* Edge */.oH.Top);

/**
 * Set border right attribute to node's Yoga instance
 *
 * @param {number} border border right width
 * @param {Object} node node instance
 * @returns {Object} node instance
 */
const setBorderRight = setYogaValue('border', load/* Edge */.oH.Right);

/**
 * Set border bottom attribute to node's Yoga instance
 *
 * @param {number} border border bottom width
 * @param {Object} node node instance
 * @returns {Object} node instance
 */
const setBorderBottom = setYogaValue('border', load/* Edge */.oH.Bottom);

/**
 * Set border left attribute to node's Yoga instance
 *
 * @param {number} border border left width
 * @param {Object} node node instance
 * @returns {Object} node instance
 */
const setBorderLeft = setYogaValue('border', load/* Edge */.oH.Left);

/**
 * @typedef {Function} NodeInstanceWrapper
 * @param {Object} node node instance
 * @returns {Object} node instance
 */

/**
 * Set position top attribute to node's Yoga instance
 *
 * @param {number} position position top
 * @param {Object} node node instance
 * @returns {Object} node instance
 */
const setPositionTop = setYogaValue('position', load/* Edge */.oH.Top);

/**
 * Set position right attribute to node's Yoga instance
 *
 * @param {number} position position right
 * @param {Object} node node instance
 * @returns {Object} node instance
 */
const setPositionRight = setYogaValue('position', load/* Edge */.oH.Right);

/**
 * Set position bottom attribute to node's Yoga instance
 *
 * @param {number} position position bottom
 * @param {Object} node node instance
 * @returns {Object} node instance
 */
const setPositionBottom = setYogaValue('position', load/* Edge */.oH.Bottom);

/**
 * Set position left attribute to node's Yoga instance
 *
 * @param {number} position position left
 * @param {Object} node node instance
 * @returns {Object} node instance
 */
const setPositionLeft = setYogaValue('position', load/* Edge */.oH.Left);

/**
 * Set width to node's Yoga instance
 *
 * @param {number} width
 * @param {Object} node instance
 * @returns {Object} node instance
 */
const setWidth = setYogaValue('width');

/**
 * Set min width to node's Yoga instance
 *
 * @param {number} min width
 * @param {Object} node instance
 * @returns {Object} node instance
 */
const setMinWidth = setYogaValue('minWidth');

/**
 * Set max width to node's Yoga instance
 *
 * @param {number} max width
 * @param {Object} node instance
 * @returns {Object} node instance
 */
const setMaxWidth = setYogaValue('maxWidth');

/**
 * Set height to node's Yoga instance
 *
 * @param {number} height
 * @param {Object} node instance
 * @returns {Object} node instance
 */
const setHeight = setYogaValue('height');

/**
 * Set min height to node's Yoga instance
 *
 * @param {number} min height
 * @param {Object} node instance
 * @returns {Object} node instance
 */
const setMinHeight = setYogaValue('minHeight');

/**
 * Set max height to node's Yoga instance
 *
 * @param {number} max height
 * @param {Object} node instance
 * @returns {Object} node instance
 */
const setMaxHeight = setYogaValue('maxHeight');

/**
 * @typedef {Function} NodeInstanceWrapper
 * @param {Object} node node instance
 * @returns {Object} node instance
 */

/**
 * Set rowGap value to node's Yoga instance
 *
 * @param {number} value gap value
 * @returns {NodeInstanceWrapper} node instance wrapper
 */
const setRowGap = value => node => {
  const {
    yogaNode
  } = node;
  if (!isNil(value) && yogaNode) {
    yogaNode.setGap(load/* Gutter */.WP.Row, value);
  }
  return node;
};

/**
 * Set columnGap value to node's Yoga instance
 *
 * @param {number} value gap value
 * @returns {NodeInstanceWrapper} node instance wrapper
 */
const setColumnGap = value => node => {
  const {
    yogaNode
  } = node;
  if (!isNil(value) && yogaNode) {
    yogaNode.setGap(load/* Gutter */.WP.Column, value);
  }
  return node;
};
const getAspectRatio = viewbox => {
  if (!viewbox) return null;
  return (viewbox.maxX - viewbox.minX) / (viewbox.maxY - viewbox.minY);
};

/**
 * @typedef {Function} MeasureSvg
 * @param {number} width
 * @param {number} widthMode
 * @param {number} height
 * @param {number} heightMode
 * @returns {{ width: number, height: number }} svg width and height
 */

/**
 * Yoga svg measure function
 *
 * @param {Object} page
 * @param {Object} node
 * @returns {MeasureSvg} measure svg
 */
const measureCanvas$1 = (page, node) => (width, widthMode, height, heightMode) => {
  const aspectRatio = getAspectRatio(node.props.viewBox) || 1;
  if (widthMode === load/* MeasureMode */.U$.Exactly || widthMode === load/* MeasureMode */.U$.AtMost) {
    return {
      width,
      height: width / aspectRatio
    };
  }
  if (heightMode === load/* MeasureMode */.U$.Exactly) {
    return {
      width: height * aspectRatio
    };
  }
  return {};
};

/**
 * Get lines width (if any)
 *
 * @param {Object} node
 * @returns {number} lines width
 */
const linesWidth = node => {
  if (!node.lines) return 0;
  return Math.max(0, ...node.lines.map(line => line.xAdvance));
};

/**
 * Get lines height (if any)
 *
 * @param {Object} node
 * @returns {number} lines height
 */
const linesHeight = node => {
  if (!node.lines) return -1;
  return node.lines.reduce((acc, line) => acc + line.box.height, 0);
};

/* eslint-disable no-param-reassign */

const lib_ALIGNMENT_FACTORS = {
  center: 0.5,
  right: 1
};

/**
 * @typedef {Function} MeasureText
 * @param {number} width
 * @param {number} widthMode
 * @param {number} height
 * @returns {{ width: number, height: number }} text width and height
 */

/**
 * Yoga text measure function
 *
 * @param {Object} page
 * @param {Object} node
 * @param {Object} fontStore
 * @returns {MeasureText} measure text function
 */
const measureText = (page, node, fontStore) => (width, widthMode, height) => {
  if (widthMode === load/* MeasureMode */.U$.Exactly) {
    if (!node.lines) node.lines = layoutText(node, width, height, fontStore);
    return {
      height: linesHeight(node)
    };
  }
  if (widthMode === load/* MeasureMode */.U$.AtMost) {
    var _node$style;
    const alignFactor = lib_ALIGNMENT_FACTORS[(_node$style = node.style) === null || _node$style === void 0 ? void 0 : _node$style.textAlign] || 0;
    if (!node.lines) {
      node.lines = layoutText(node, width, height, fontStore);
      node.alignOffset = (width - linesWidth(node)) * alignFactor; // Compensate align in variable width containers
    }
    return {
      height: linesHeight(node),
      width: Math.min(width, linesWidth(node))
    };
  }
  return {};
};

/**
 * Get image ratio
 *
 * @param {Object} node image node
 * @returns {number} image ratio
 */
const getRatio = node => {
  var _node$image;
  return (_node$image = node.image) !== null && _node$image !== void 0 && _node$image.data ? node.image.width / node.image.height : 1;
};

/**
 * Checks if page has auto height
 *
 * @param {Object} page
 * @returns {boolean} is page height auto
 */
const isHeightAuto = page => {
  var _page$box;
  return isNil((_page$box = page.box) === null || _page$box === void 0 ? void 0 : _page$box.height);
};
const SAFETY_HEIGHT$1 = 10;

/**
 * @typedef {Function} MeasureImage
 * @param {number} width
 * @param {number} widthMode
 * @param {number} height
 * @param {number} heightMode
 * @returns {{ width: number, height: number }} image width and height
 */

/**
 * Yoga image measure function
 *
 * @param {Object} page page
 * @param {Object} node node
 * @returns {MeasureImage} measure image
 */
const measureImage = (page, node) => (width, widthMode, height, heightMode) => {
  const imageRatio = getRatio(node);
  const imageMargin = lib_getMargin(node);
  const pagePadding = getPadding(page);
  const pageArea = isHeightAuto(page) ? Infinity : page.box.height - pagePadding.paddingTop - pagePadding.paddingBottom - imageMargin.marginTop - imageMargin.marginBottom - SAFETY_HEIGHT$1;

  // Skip measure if image data not present yet
  if (!node.image) return {
    width: 0,
    height: 0
  };
  if (widthMode === load/* MeasureMode */.U$.Exactly && heightMode === load/* MeasureMode */.U$.Undefined) {
    const scaledHeight = width / imageRatio;
    return {
      height: Math.min(pageArea, scaledHeight)
    };
  }
  if (heightMode === load/* MeasureMode */.U$.Exactly && (widthMode === load/* MeasureMode */.U$.AtMost || widthMode === load/* MeasureMode */.U$.Undefined)) {
    return {
      width: Math.min(height * imageRatio, width)
    };
  }
  if (widthMode === load/* MeasureMode */.U$.Exactly && heightMode === load/* MeasureMode */.U$.AtMost) {
    const scaledHeight = width / imageRatio;
    return {
      height: Math.min(height, pageArea, scaledHeight)
    };
  }
  if (widthMode === load/* MeasureMode */.U$.AtMost && heightMode === load/* MeasureMode */.U$.AtMost) {
    if (imageRatio > 1) {
      return {
        width,
        height: Math.min(width / imageRatio, height)
      };
    }
    return {
      height,
      width: Math.min(height * imageRatio, width)
    };
  }
  return {
    height,
    width
  };
};

/* eslint-disable no-param-reassign */

const SAFETY_HEIGHT = 10;
const getMax = values => Math.max(-Infinity, ...values);

/**
 * Helper object to predict canvas size
 * TODO: Implement remaining functions (as close as possible);
 */
const measureCtx = () => {
  const ctx = {};
  const points = [];
  const nil = () => ctx;
  const addPoint = (x, y) => points.push([x, y]);
  const moveTo = function () {
    addPoint(...arguments);
    return ctx;
  };
  const rect = (x, y, w, h) => {
    addPoint(x, y);
    addPoint(x + w, y);
    addPoint(x, y + h);
    addPoint(x + w, y + h);
    return ctx;
  };
  const ellipse = (x, y, rx, ry) => {
    ry = ry || rx;
    addPoint(x - rx, y - ry);
    addPoint(x + rx, y - ry);
    addPoint(x + rx, y + ry);
    addPoint(x - rx, y + ry);
    return ctx;
  };
  const polygon = function () {
    points.push(...arguments);
    return ctx;
  };

  // Change dimensions
  ctx.rect = rect;
  ctx.moveTo = moveTo;
  ctx.lineTo = moveTo;
  ctx.circle = ellipse;
  ctx.polygon = polygon;
  ctx.ellipse = ellipse;
  ctx.roundedRect = rect;

  // To be implemented
  ctx.text = nil;
  ctx.path = nil;
  ctx.lineWidth = nil;
  ctx.bezierCurveTo = nil;
  ctx.quadraticCurveTo = nil;
  ctx.scale = nil;
  ctx.rotate = nil;
  ctx.translate = nil;

  // These don't change dimensions
  ctx.dash = nil;
  ctx.clip = nil;
  ctx.save = nil;
  ctx.fill = nil;
  ctx.font = nil;
  ctx.stroke = nil;
  ctx.lineCap = nil;
  ctx.opacity = nil;
  ctx.restore = nil;
  ctx.lineJoin = nil;
  ctx.fontSize = nil;
  ctx.fillColor = nil;
  ctx.miterLimit = nil;
  ctx.strokeColor = nil;
  ctx.fillOpacity = nil;
  ctx.strokeOpacity = nil;
  ctx.linearGradient = nil;
  ctx.radialGradient = nil;
  ctx.getWidth = () => getMax(points.map(p => p[0]));
  ctx.getHeight = () => getMax(points.map(p => p[1]));
  return ctx;
};

/**
 * @typedef {Function} MeasureCanvas
 * @returns {{ width: number, height: number }} canvas width and height
 */

/**
 * Yoga canvas measure function
 *
 * @param {Object} page
 * @param {Object} node
 * @returns {MeasureCanvas} measure canvas
 */
const measureCanvas = (page, node) => () => {
  const imageMargin = lib_getMargin(node);
  const pagePadding = getPadding(page);
  const pageArea = isHeightAuto(page) ? Infinity : page.box.height - pagePadding.paddingTop - pagePadding.paddingBottom - imageMargin.marginTop - imageMargin.marginBottom - SAFETY_HEIGHT;
  const ctx = measureCtx();
  node.props.paint(ctx);
  const width = ctx.getWidth();
  const height = Math.min(pageArea, ctx.getHeight());
  return {
    width,
    height
  };
};
const isType$1 = type => node => node.type === type;
const isSvg = isType$1(Svg);
const isText$2 = isType$1(Text);
const isNote = isType$1(Note);
const isPage = isType$1(Page);
const isImage = isType$1(Image);
const isCanvas = isType$1(Canvas);
const isTextInstance$1 = isType$1(TextInstance);
const setNodeHeight = node => {
  const value = isPage(node) ? node.box.height : node.style.height;
  return setHeight(value);
};

/**
 * Set styles valeus into yoga node before layout calculation
 *
 * @param {Object} node
 * @returns {Object} node
 */
const setYogaValues = node => {
  compose(setNodeHeight(node), setWidth(node.style.width), setMinWidth(node.style.minWidth), setMaxWidth(node.style.maxWidth), setMinHeight(node.style.minHeight), setMaxHeight(node.style.maxHeight), setMarginTop(node.style.marginTop), setMarginRight(node.style.marginRight), setMarginBottom(node.style.marginBottom), setMarginLeft(node.style.marginLeft), setPaddingTop(node.style.paddingTop), setPaddingRight(node.style.paddingRight), setPaddingBottom(node.style.paddingBottom), setPaddingLeft(node.style.paddingLeft), setPositionType(node.style.position), setPositionTop(node.style.top), setPositionRight(node.style.right), setPositionBottom(node.style.bottom), setPositionLeft(node.style.left), setBorderTop(node.style.borderTopWidth), setBorderRight(node.style.borderRightWidth), setBorderBottom(node.style.borderBottomWidth), setBorderLeft(node.style.borderLeftWidth), setDisplay(node.style.display), setFlexDirection(node.style.flexDirection), setAlignSelf(node.style.alignSelf), setAlignContent(node.style.alignContent), setAlignItems(node.style.alignItems), setJustifyContent(node.style.justifyContent), setFlexWrap(node.style.flexWrap), setOverflow(node.style.overflow), setAspectRatio(node.style.aspectRatio), setFlexBasis(node.style.flexBasis), setFlexGrow(node.style.flexGrow), setFlexShrink(node.style.flexShrink), setRowGap(node.style.rowGap), setColumnGap(node.style.columnGap))(node);
};

/**
 * @typedef {Function} InsertYogaNodes
 * @param {Object} child child node
 * @returns {Object} node
 */

/**
 * Inserts child into parent' yoga node
 *
 * @param {Object} parent parent
 * @returns {InsertYogaNodes} insert yoga nodes
 */
const insertYogaNodes = parent => child => {
  parent.insertChild(child.yogaNode, parent.getChildCount());
  return child;
};
const setMeasureFunc = (node, page, fontStore) => {
  const {
    yogaNode
  } = node;
  if (isText$2(node)) {
    yogaNode.setMeasureFunc(measureText(page, node, fontStore));
  }
  if (isImage(node)) {
    yogaNode.setMeasureFunc(measureImage(page, node));
  }
  if (isCanvas(node)) {
    yogaNode.setMeasureFunc(measureCanvas(page, node));
  }
  if (isSvg(node)) {
    yogaNode.setMeasureFunc(measureCanvas$1(page, node));
  }
  return node;
};
const isLayoutElement = node => !isText$2(node) && !isNote(node) && !isSvg(node);

/**
 * @typedef {Function} CreateYogaNodes
 * @param {Object} node
 * @returns {Object} node with appended yoga node
 */

/**
 * Creates and add yoga node to document tree
 * Handles measure function for text and image nodes
 *
 * @returns {CreateYogaNodes} create yoga nodes
 */
const createYogaNodes = (page, fontStore, yoga) => node => {
  const yogaNode = yoga.node.create();
  const result = Object.assign({}, node, {
    yogaNode
  });
  setYogaValues(result);
  if (isLayoutElement(node) && node.children) {
    const resolveChild = compose(insertYogaNodes(yogaNode), createYogaNodes(page, fontStore, yoga));
    result.children = node.children.map(resolveChild);
  }
  setMeasureFunc(result, page, fontStore);
  return result;
};

/**
 * Performs yoga calculation
 *
 * @param {Object} page page node
 * @returns {Object} page node
 */
const calculateLayout = page => {
  page.yogaNode.calculateLayout();
  return page;
};

/**
 * Saves Yoga layout result into 'box' attribute of node
 *
 * @param {Object} node
 * @returns {Object} node with box data
 */
const persistDimensions = node => {
  if (isTextInstance$1(node)) return node;
  const box = Object.assign(getPadding(node), lib_getMargin(node), getBorderWidth(node), getPosition(node), getDimension(node));
  const newNode = Object.assign({}, node, {
    box
  });
  if (!node.children) return newNode;
  const children = node.children.map(persistDimensions);
  return Object.assign({}, newNode, {
    children
  });
};

/**
 * Removes yoga node from document tree
 *
 * @param {Object} node
 * @returns {Object} node without yoga node
 */
const destroyYogaNodes = node => {
  const newNode = Object.assign({}, node);
  delete newNode.yogaNode;
  if (!node.children) return newNode;
  const children = node.children.map(destroyYogaNodes);
  return Object.assign({}, newNode, {
    children
  });
};

/**
 * Free yoga node from document tree
 *
 * @param {Object} node
 * @returns {Object} node without yoga node
 */
const freeYogaNodes = node => {
  if (node.yogaNode) node.yogaNode.freeRecursive();
  return node;
};

/**
 * Calculates page object layout using Yoga.
 * Takes node values from 'box' and 'style' attributes, and persist them back into 'box'
 * Destroy yoga values at the end.
 *
 * @param {Object} page object
 * @returns {Object} page object with correct 'box' layout attributes
 */
const resolvePageDimensions = (page, fontStore, yoga) => {
  if (isNil(page)) return null;
  return compose(destroyYogaNodes, freeYogaNodes, persistDimensions, calculateLayout, createYogaNodes(page, fontStore, yoga))(page);
};

/**
 * Calculates root object layout using Yoga.
 *
 * @param {Object} node root object
 * @param {Object} fontStore font store
 * @returns {Object} root object with correct 'box' layout attributes
 */
const resolveDimensions = (node, fontStore) => {
  if (!node.children) return node;
  const resolveChild = child => resolvePageDimensions(child, fontStore, node.yoga);
  const children = node.children.map(resolveChild);
  return Object.assign({}, node, {
    children
  });
};

/* eslint-disable no-use-before-define */
/* eslint-disable no-continue */
/* eslint-disable prefer-destructuring */

const isText$1 = node => node.type === Text;

// Prevent splitting elements by low decimal numbers
const SAFETY_THRESHOLD = 0.001;
const assingChildren = (children, node) => Object.assign({}, node, {
  children
});
const getTop = node => {
  var _node$box;
  return ((_node$box = node.box) === null || _node$box === void 0 ? void 0 : _node$box.top) || 0;
};
const allFixed = nodes => nodes.every(isFixed);
const isDynamic = node => {
  var _node$props;
  return !isNil((_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.render);
};
const relayoutPage = compose(resolveTextLayout, resolvePageDimensions, resolveInheritance, resolvePageStyles);
const warnUnavailableSpace = node => {
  console.warn(`Node of type ${node.type} can't wrap between pages and it's bigger than available page height`);
};
const splitNodes = (height, contentArea, nodes) => {
  const currentChildren = [];
  const nextChildren = [];
  for (let i = 0; i < nodes.length; i += 1) {
    const child = nodes[i];
    const futureNodes = nodes.slice(i + 1);
    const futureFixedNodes = futureNodes.filter(isFixed);
    const nodeTop = getTop(child);
    const nodeHeight = child.box.height;
    const isOutside = height <= nodeTop;
    const shouldBreak$1 = shouldBreak(child, futureNodes, height);
    const shouldSplit = height + SAFETY_THRESHOLD < nodeTop + nodeHeight;
    const canWrap = getWrap(child);
    const fitsInsidePage = nodeHeight <= contentArea;
    if (isFixed(child)) {
      nextChildren.push(child);
      currentChildren.push(child);
      continue;
    }
    if (isOutside) {
      const box = Object.assign({}, child.box, {
        top: child.box.top - height
      });
      const next = Object.assign({}, child, {
        box
      });
      nextChildren.push(next);
      continue;
    }
    if (!fitsInsidePage && !canWrap) {
      currentChildren.push(child);
      nextChildren.push(...futureNodes);
      warnUnavailableSpace(child);
      break;
    }
    if (shouldBreak$1) {
      const box = Object.assign({}, child.box, {
        top: child.box.top - height
      });
      const props = Object.assign({}, child.props, {
        wrap: true,
        break: false
      });
      const next = Object.assign({}, child, {
        box,
        props
      });
      currentChildren.push(...futureFixedNodes);
      nextChildren.push(next, ...futureNodes);
      break;
    }
    if (shouldSplit) {
      const [currentChild, nextChild] = split(child, height, contentArea);

      // All children are moved to the next page, it doesn't make sense to show the parent on the current page
      if (child.children.length > 0 && currentChild.children.length === 0) {
        // But if the current page is empty then we can just include the parent on the current page
        if (currentChildren.length === 0) {
          currentChildren.push(child, ...futureFixedNodes);
          nextChildren.push(...futureNodes);
        } else {
          const box = Object.assign({}, child.box, {
            top: child.box.top - height
          });
          const next = Object.assign({}, child, {
            box
          });
          currentChildren.push(...futureFixedNodes);
          nextChildren.push(next, ...futureNodes);
        }
        break;
      }
      if (currentChild) currentChildren.push(currentChild);
      if (nextChild) nextChildren.push(nextChild);
      continue;
    }
    currentChildren.push(child);
  }
  return [currentChildren, nextChildren];
};
const splitChildren = (height, contentArea, node) => {
  const children = node.children || [];
  const availableHeight = height - getTop(node);
  return splitNodes(availableHeight, contentArea, children);
};
const splitView = (node, height, contentArea) => {
  const [currentNode, nextNode] = splitNode(node, height);
  const [currentChilds, nextChildren] = splitChildren(height, contentArea, node);
  return [assingChildren(currentChilds, currentNode), assingChildren(nextChildren, nextNode)];
};
const split = (node, height, contentArea) => isText$1(node) ? splitText(node, height) : splitView(node, height, contentArea);
const shouldResolveDynamicNodes = node => {
  const children = node.children || [];
  return isDynamic(node) || children.some(shouldResolveDynamicNodes);
};
const resolveDynamicNodes = (props, node) => {
  const isNodeDynamic = isDynamic(node);

  // Call render prop on dynamic nodes and append result to children
  const resolveChildren = function (children) {
    if (children === void 0) {
      children = [];
    }
    if (isNodeDynamic) {
      const res = node.props.render(props);
      return createInstances(res).filter(Boolean).map(n => resolveDynamicNodes(props, n));
    }
    return children.map(c => resolveDynamicNodes(props, c));
  };

  // We reset dynamic text box so it can be computed again later on
  const resetHeight = isNodeDynamic && isText$1(node);
  const box = resetHeight ? {
    ...node.box,
    height: 0
  } : node.box;
  const children = resolveChildren(node.children);
  const lines = isNodeDynamic ? null : node.lines;
  return Object.assign({}, node, {
    box,
    lines,
    children
  });
};
const resolveDynamicPage = (props, page, fontStore, yoga) => {
  if (shouldResolveDynamicNodes(page)) {
    const resolvedPage = resolveDynamicNodes(props, page);
    return relayoutPage(resolvedPage, fontStore, yoga);
  }
  return page;
};
const splitPage = (page, pageNumber, fontStore, yoga) => {
  const wrapArea = getWrapArea(page);
  const contentArea = getContentArea(page);
  const dynamicPage = resolveDynamicPage({
    pageNumber
  }, page, fontStore, yoga);
  const height = page.style.height;
  const [currentChilds, nextChilds] = splitNodes(wrapArea, contentArea, dynamicPage.children);
  const relayout = node => relayoutPage(node, fontStore, yoga);
  const currentBox = {
    ...page.box,
    height
  };
  const currentPage = relayout(Object.assign({}, page, {
    box: currentBox,
    children: currentChilds
  }));
  if (nextChilds.length === 0 || allFixed(nextChilds)) return [currentPage, null];
  const nextBox = omit('height', page.box);
  const nextProps = omit('bookmark', page.props);
  const nextPage = relayout(Object.assign({}, page, {
    props: nextProps,
    box: nextBox,
    children: nextChilds
  }));
  return [currentPage, nextPage];
};
const resolvePageIndices = (fontStore, yoga, page, pageNumber, pages) => {
  const totalPages = pages.length;
  const props = {
    totalPages,
    pageNumber: pageNumber + 1,
    subPageNumber: page.subPageNumber + 1,
    subPageTotalPages: page.subPageTotalPages
  };
  return resolveDynamicPage(props, page, fontStore, yoga);
};
const assocSubPageData = subpages => {
  return subpages.map((page, i) => ({
    ...page,
    subPageNumber: i,
    subPageTotalPages: subpages.length
  }));
};
const dissocSubPageData = page => {
  return omit(['subPageNumber', 'subPageTotalPages'], page);
};
const paginate = (page, pageNumber, fontStore, yoga) => {
  var _page$props;
  if (!page) return [];
  if (((_page$props = page.props) === null || _page$props === void 0 ? void 0 : _page$props.wrap) === false) return [page];
  let splittedPage = splitPage(page, pageNumber, fontStore, yoga);
  const pages = [splittedPage[0]];
  let nextPage = splittedPage[1];
  while (nextPage !== null) {
    splittedPage = splitPage(nextPage, pageNumber + pages.length, fontStore, yoga);
    pages.push(splittedPage[0]);
    nextPage = splittedPage[1];
  }
  return pages;
};

/**
 * Performs pagination. This is the step responsible of breaking the whole document
 * into pages following pagiation rules, such as `fixed`, `break` and dynamic nodes.
 *
 * @param {Object} doc node
 * @param {Object} fontStore font store
 * @returns {Object} layout node
 */
const resolvePagination = (doc, fontStore) => {
  let pages = [];
  let pageNumber = 1;
  for (let i = 0; i < doc.children.length; i += 1) {
    const page = doc.children[i];
    let subpages = paginate(page, pageNumber, fontStore, doc.yoga);
    subpages = assocSubPageData(subpages);
    pageNumber += subpages.length;
    pages = pages.concat(subpages);
  }
  pages = pages.map(function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return dissocSubPageData(resolvePageIndices(fontStore, doc.yoga, ...args));
  });
  return assingChildren(pages, doc);
};

/**
 * @typedef {Function} ResolvePageHorizontalPadding
 * @param {string} value padding value
 * @returns {Object} translated padding value
 */

/**
 * Translates page percentage horizontal paddings in fixed ones
 *
 * @param {Object} container page container
 * @returns {ResolvePageHorizontalPadding} resolve page horizontal padding
 */
const resolvePageHorizontalPadding = container => value => {
  const match = matchPercent(value);
  return match ? match.percent * container.width : value;
};

/**
 * @typedef {Function} ResolvePageVerticalPadding
 * @param {string} padding value
 * @returns {Object} translated padding value
 */

/**
 * Translates page percentage vertical paddings in fixed ones
 *
 * @param {Object} container page container
 * @returns {ResolvePageVerticalPadding} resolve page vertical padding
 */
const resolvePageVerticalPadding = container => value => {
  const match = matchPercent(value);
  return match ? match.percent * container.height : value;
};

/**
 * Translates page percentage paddings in fixed ones
 *
 * @param {Object} page
 * @returns {Object} page with fixed paddings
 */
const resolvePagePaddings = page => {
  const container = page.style;
  const style = evolve({
    paddingTop: resolvePageVerticalPadding(container),
    paddingLeft: resolvePageHorizontalPadding(container),
    paddingRight: resolvePageHorizontalPadding(container),
    paddingBottom: resolvePageVerticalPadding(container)
  }, page.style);
  return Object.assign({}, page, {
    style
  });
};

/**
 * Translates all pages percentage paddings in fixed ones
 * This has to be computed from pages calculated size and not by Yoga
 * because at this point we didn't performed pagination yet.
 *
 * @param {Object} root document root
 * @returns {Object} document root with translated page paddings
 */
const resolvePagesPaddings = root => {
  if (!root.children) return root;
  const children = root.children.map(resolvePagePaddings);
  return Object.assign({}, root, {
    children
  });
};

/**
 * @typedef {Function} ResolveRadius
 * @param {string | number} value border radius value
 * @returns {number} resolved radius value
 */

/**
 *
 * @param {{ width: number, height: number }} container width and height
 * @returns {ResolveRadius} resolve radius function
 */
const resolveRadius = container => value => {
  if (!value) return undefined;
  const match = matchPercent(value);
  return match ? match.percent * Math.min(container.width, container.height) : value;
};

/**
 * Transforms percent border radius into fixed values
 *
 * @param {Object} node
 * @returns {Object} node
 */
const resolvePercentRadius = node => {
  const style = evolve({
    borderTopLeftRadius: resolveRadius(node.box),
    borderTopRightRadius: resolveRadius(node.box),
    borderBottomRightRadius: resolveRadius(node.box),
    borderBottomLeftRadius: resolveRadius(node.box)
  }, node.style || {});
  const newNode = Object.assign({}, node, {
    style
  });
  if (!node.children) return newNode;
  const children = node.children.map(resolvePercentRadius);
  return Object.assign({}, newNode, {
    children
  });
};

/**
 * Transform percent height into fixed
 *
 * @param {number} height
 * @returns {number} height
 */
const transformHeight = (pageArea, height) => {
  const match = matchPercent(height);
  return match ? match.percent * pageArea : height;
};

/**
 * Get page area (height minus paddings)
 *
 * @param {Object} page
 * @returns {number} page area
 */
const getPageArea = page => {
  var _page$style, _page$style2;
  const pageHeight = page.style.height;
  const pagePaddingTop = ((_page$style = page.style) === null || _page$style === void 0 ? void 0 : _page$style.paddingTop) || 0;
  const pagePaddingBottom = ((_page$style2 = page.style) === null || _page$style2 === void 0 ? void 0 : _page$style2.paddingBottom) || 0;
  return pageHeight - pagePaddingTop - pagePaddingBottom;
};

/**
 * Transform node percent height to fixed
 *
 * @param {Object} page
 * @param {Object} node
 * @returns {Object} transformed node
 */
const resolveNodePercentHeight = (page, node) => {
  var _page$style3, _node$style;
  if (isNil((_page$style3 = page.style) === null || _page$style3 === void 0 ? void 0 : _page$style3.height)) return node;
  if (isNil((_node$style = node.style) === null || _node$style === void 0 ? void 0 : _node$style.height)) return node;
  const pageArea = getPageArea(page);
  const height = transformHeight(pageArea, node.style.height);
  const style = Object.assign({}, node.style, {
    height
  });
  return Object.assign({}, node, {
    style
  });
};

/**
 * Transform page immediate children with percent height to fixed
 *
 * @param {Object} page
 * @returns {Object} transformed page
 */
const resolvePagePercentHeight = page => {
  if (!page.children) return page;
  const resolveChild = child => resolveNodePercentHeight(page, child);
  const children = page.children.map(resolveChild);
  return Object.assign({}, page, {
    children
  });
};

/**
 * Transform all page immediate children with percent height to fixed.
 * This is needed for computing correct dimensions on pre-pagination layout.
 *
 * @param {Object} root document root
 * @returns {Object} transformed document root
 */
const resolvePercentHeight = root => {
  if (!root.children) return root;
  const children = root.children.map(resolvePagePercentHeight);
  return Object.assign({}, root, {
    children
  });
};
const isType = type => node => node.type === type;
const isLink = isType(Link);
const isText = isType(Text);
const isTextInstance = isType(TextInstance);

/**
 * Checks if node has render prop
 *
 * @param {Object} node
 * @returns {boolean} has render prop?
 */
const hasRenderProp = node => {
  var _node$props;
  return !!((_node$props = node.props) !== null && _node$props !== void 0 && _node$props.render);
};

/**
 * Checks if node is text type (Text or TextInstance)
 *
 * @param {Object} node
 * @returns {boolean} are all children text instances?
 */
const isTextType = node => isText(node) || isTextInstance(node);

/**
 * Checks if is tet link that needs to be wrapped in Text
 *
 * @param {Object} node
 * @returns {boolean} are all children text instances?
 */
const isTextLink = node => {
  const children = node.children || [];

  // Text string inside a Link
  if (children.every(isTextInstance)) return true;

  // Text node inside a Link
  if (children.every(isText)) return false;
  return children.every(isTextType);
};

/**
 * Wraps node children inside Text node
 *
 * @param {Object} node
 * @returns {boolean} node with intermediate Text child
 */
const wrapText = node => {
  const textElement = {
    type: Text,
    props: {},
    style: {},
    box: {},
    children: node.children
  };
  return Object.assign({}, node, {
    children: [textElement]
  });
};
const transformLink = node => {
  if (!isLink(node)) return node;

  // If has render prop substitute the instance by a Text, that will
  // ultimately render the inline Link via the textkit PDF renderer.
  if (hasRenderProp(node)) return Object.assign({}, node, {
    type: Text
  });

  // If is a text link (either contains Text or TextInstalce), wrap it
  // inside a Text element so styles are applied correctly

  if (isTextLink(node)) return wrapText(node);
  return node;
};

/**
 * Transforms Link layout to correctly render text and dynamic rendered links
 *
 * @param {Object} node
 * @returns {Object} node with link substitution
 */
const resolveLinkSubstitution = node => {
  if (!node.children) return node;
  const resolveChild = compose(transformLink, resolveLinkSubstitution);
  const children = node.children.map(resolveChild);
  return Object.assign({}, node, {
    children
  });
};
const lib_layout = asyncCompose(resolveZIndex, resolveOrigin, resolveAssets, resolvePagination, resolveTextLayout, resolvePercentRadius, resolveDimensions, resolveSvg, resolveAssets, resolveInheritance, resolvePercentHeight, resolvePagesPaddings, lib_resolveStyles, resolveLinkSubstitution, resolveBookmarks, resolvePageSizes, resolveYoga);

// EXTERNAL MODULE: ./node_modules/@react-pdf/reconciler/node_modules/scheduler/index.js
var scheduler = __webpack_require__(3664);
var scheduler_namespaceObject = /*#__PURE__*/__webpack_require__.t(scheduler, 2);
;// ./node_modules/@react-pdf/reconciler/lib/reconciler-31.js


function t(e) {
  return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, "default") ? e.default : e;
}
function r(e) {
  if (e.__esModule) return e;
  var n = e.default;
  if ("function" == typeof n) {
    var t = function e() {
      return this instanceof e ? Reflect.construct(n, arguments, this.constructor) : n.apply(this, arguments);
    };
    t.prototype = n.prototype;
  } else t = {};
  return Object.defineProperty(t, "__esModule", {
    value: !0
  }), Object.keys(e).forEach(function (n) {
    var r = Object.getOwnPropertyDescriptor(e, n);
    Object.defineProperty(t, n, r.get ? r : {
      enumerable: !0,
      get: function () {
        return e[n];
      }
    });
  }), t;
}
var l,
  a = {
    exports: {}
  },
  o = {
    exports: {}
  },
  u = r(scheduler_namespaceObject);
var i,
  s,
  c = {
    exports: {}
  };
/**
 * @license React
 * react-reconciler.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
 true ? a.exports = (l || (l = 1, (s = o).exports = function (n) {
  function t(e, n, t, r) {
    return new Yr(e, n, t, r);
  }
  function r(e) {
    var n = "https://react.dev/errors/" + e;
    if (1 < arguments.length) {
      n += "?args[]=" + encodeURIComponent(arguments[1]);
      for (var t = 2; t < arguments.length; t++) n += "&args[]=" + encodeURIComponent(arguments[t]);
    }
    return "Minified React error #" + e + "; visit " + n + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
  }
  function l(e) {
    return null === e || "object" != typeof e ? null : "function" == typeof (e = El && e[El] || e["@@iterator"]) ? e : null;
  }
  function a(e) {
    if (null == e) return null;
    if ("function" == typeof e) return e.$$typeof === _l ? null : e.displayName || e.name || null;
    if ("string" == typeof e) return e;
    switch (e) {
      case ml:
        return "Fragment";
      case pl:
        return "Portal";
      case gl:
        return "Profiler";
      case hl:
        return "StrictMode";
      case kl:
        return "Suspense";
      case wl:
        return "SuspenseList";
    }
    if ("object" == typeof e) switch (e.$$typeof) {
      case vl:
        return (e.displayName || "Context") + ".Provider";
      case bl:
        return (e._context.displayName || "Context") + ".Consumer";
      case Sl:
        var n = e.render;
        return (e = e.displayName) || (e = "" !== (e = n.displayName || n.name || "") ? "ForwardRef(" + e + ")" : "ForwardRef"), e;
      case xl:
        return null !== (n = e.displayName || null) ? n : a(e.type) || "Memo";
      case zl:
        n = e._payload, e = e._init;
        try {
          return a(e(n));
        } catch (e) {}
    }
    return null;
  }
  function o(e) {
    if (void 0 === al) try {
      throw Error();
    } catch (e) {
      var n = e.stack.trim().match(/\n( *(at )?)/);
      al = n && n[1] || "", ol = -1 < e.stack.indexOf("\n    at") ? " (<anonymous>)" : -1 < e.stack.indexOf("@") ? "@unknown:0:0" : "";
    }
    return "\n" + al + e + ol;
  }
  function i(e, n) {
    if (!e || Tl) return "";
    Tl = !0;
    var t = Error.prepareStackTrace;
    Error.prepareStackTrace = void 0;
    try {
      var r = {
        DetermineComponentFrameRoot: function () {
          try {
            if (n) {
              var t = function () {
                throw Error();
              };
              if (Object.defineProperty(t.prototype, "props", {
                set: function () {
                  throw Error();
                }
              }), "object" == typeof Reflect && Reflect.construct) {
                try {
                  Reflect.construct(t, []);
                } catch (e) {
                  var r = e;
                }
                Reflect.construct(e, [], t);
              } else {
                try {
                  t.call();
                } catch (e) {
                  r = e;
                }
                e.call(t.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (e) {
                r = e;
              }
              (t = e()) && "function" == typeof t.catch && t.catch(function () {});
            }
          } catch (e) {
            if (e && r && "string" == typeof e.stack) return [e.stack, r.stack];
          }
          return [null, null];
        }
      };
      r.DetermineComponentFrameRoot.displayName = "DetermineComponentFrameRoot";
      var l = Object.getOwnPropertyDescriptor(r.DetermineComponentFrameRoot, "name");
      l && l.configurable && Object.defineProperty(r.DetermineComponentFrameRoot, "name", {
        value: "DetermineComponentFrameRoot"
      });
      var a = r.DetermineComponentFrameRoot(),
        u = a[0],
        i = a[1];
      if (u && i) {
        var s = u.split("\n"),
          c = i.split("\n");
        for (l = r = 0; r < s.length && !s[r].includes("DetermineComponentFrameRoot");) r++;
        for (; l < c.length && !c[l].includes("DetermineComponentFrameRoot");) l++;
        if (r === s.length || l === c.length) for (r = s.length - 1, l = c.length - 1; 1 <= r && 0 <= l && s[r] !== c[l];) l--;
        for (; 1 <= r && 0 <= l; r--, l--) if (s[r] !== c[l]) {
          if (1 !== r || 1 !== l) do {
            if (r--, 0 > --l || s[r] !== c[l]) {
              var f = "\n" + s[r].replace(" at new ", " at ");
              return e.displayName && f.includes("<anonymous>") && (f = f.replace("<anonymous>", e.displayName)), f;
            }
          } while (1 <= r && 0 <= l);
          break;
        }
      }
    } finally {
      Tl = !1, Error.prepareStackTrace = t;
    }
    return (t = e ? e.displayName || e.name : "") ? o(t) : "";
  }
  function s(e) {
    switch (e.tag) {
      case 26:
      case 27:
      case 5:
        return o(e.type);
      case 16:
        return o("Lazy");
      case 13:
        return o("Suspense");
      case 19:
        return o("SuspenseList");
      case 0:
      case 15:
        return i(e.type, !1);
      case 11:
        return i(e.type.render, !1);
      case 1:
        return i(e.type, !0);
      default:
        return "";
    }
  }
  function c(e) {
    try {
      var n = "";
      do {
        n += s(e), e = e.return;
      } while (e);
      return n;
    } catch (e) {
      return "\nError generating stack: " + e.message + "\n" + e.stack;
    }
  }
  function f(e) {
    return {
      current: e
    };
  }
  function d(e) {
    0 > Wa || (e.current = ja[Wa], ja[Wa] = null, Wa--);
  }
  function p(e, n) {
    Wa++, ja[Wa] = e.current, e.current = n;
  }
  function m(e) {
    var n = 42 & e;
    if (0 !== n) return n;
    switch (e & -e) {
      case 1:
        return 1;
      case 2:
        return 2;
      case 4:
        return 4;
      case 8:
        return 8;
      case 16:
        return 16;
      case 32:
        return 32;
      case 64:
        return 64;
      case 128:
      case 256:
      case 512:
      case 1024:
      case 2048:
      case 4096:
      case 8192:
      case 16384:
      case 32768:
      case 65536:
      case 131072:
      case 262144:
      case 524288:
      case 1048576:
      case 2097152:
        return 4194176 & e;
      case 4194304:
      case 8388608:
      case 16777216:
      case 33554432:
        return 62914560 & e;
      case 67108864:
        return 67108864;
      case 134217728:
        return 134217728;
      case 268435456:
        return 268435456;
      case 536870912:
        return 536870912;
      case 1073741824:
        return 0;
      default:
        return e;
    }
  }
  function h(e, n) {
    var t = e.pendingLanes;
    if (0 === t) return 0;
    var r = 0,
      l = e.suspendedLanes;
    e = e.pingedLanes;
    var a = 134217727 & t;
    return 0 !== a ? 0 != (t = a & ~l) ? r = m(t) : 0 != (e &= a) && (r = m(e)) : 0 != (t &= ~l) ? r = m(t) : 0 !== e && (r = m(e)), 0 === r ? 0 : 0 !== n && n !== r && 0 == (n & l) && ((l = r & -r) >= (e = n & -n) || 32 === l && 0 != (4194176 & e)) ? n : r;
  }
  function g(e, n) {
    switch (e) {
      case 1:
      case 2:
      case 4:
      case 8:
        return n + 250;
      case 16:
      case 32:
      case 64:
      case 128:
      case 256:
      case 512:
      case 1024:
      case 2048:
      case 4096:
      case 8192:
      case 16384:
      case 32768:
      case 65536:
      case 131072:
      case 262144:
      case 524288:
      case 1048576:
      case 2097152:
        return n + 5e3;
      default:
        return -1;
    }
  }
  function y() {
    var e = Va;
    return 0 == (4194176 & (Va <<= 1)) && (Va = 128), e;
  }
  function b() {
    var e = $a;
    return 0 == (62914560 & ($a <<= 1)) && ($a = 4194304), e;
  }
  function v(e) {
    for (var n = [], t = 0; 31 > t; t++) n.push(e);
    return n;
  }
  function S(e, n) {
    e.pendingLanes |= n, 268435456 !== n && (e.suspendedLanes = 0, e.pingedLanes = 0, e.warmLanes = 0);
  }
  function k(e, n, t) {
    e.pendingLanes |= n, e.suspendedLanes &= ~n;
    var r = 31 - Aa(n);
    e.entangledLanes |= n, e.entanglements[r] = 1073741824 | e.entanglements[r] | 4194218 & t;
  }
  function w(e, n) {
    var t = e.entangledLanes |= n;
    for (e = e.entanglements; t;) {
      var r = 31 - Aa(t),
        l = 1 << r;
      l & n | e[r] & n && (e[r] |= n), t &= ~l;
    }
  }
  function x(e) {
    return 2 < (e &= -e) ? 8 < e ? 0 != (134217727 & e) ? 32 : 268435456 : 8 : 2;
  }
  function z(e) {
    "function" == typeof to && ro(e);
  }
  function C(e, n) {
    if ("object" == typeof e && null !== e) {
      var t = oo.get(e);
      return void 0 !== t ? t : (n = {
        value: e,
        source: n,
        stack: c(n)
      }, oo.set(e, n), n);
    }
    return {
      value: e,
      source: n,
      stack: c(n)
    };
  }
  function P(e) {
    for (; e === so;) so = uo[--io], uo[io] = null, uo[--io], uo[io] = null;
    for (; e === po;) po = co[--fo], co[fo] = null, co[--fo], co[fo] = null, co[--fo], co[fo] = null;
  }
  function E(e, n) {
    p(go, n), p(ho, e), p(mo, null), e = Ul(n), d(mo), p(mo, e);
  }
  function _() {
    d(mo), d(ho), d(go);
  }
  function R(e) {
    null !== e.memoizedState && p(yo, e);
    var n = mo.current,
      t = Il(n, e.type);
    n !== t && (p(ho, e), p(mo, t));
  }
  function T(e) {
    ho.current === e && (d(mo), d(ho)), yo.current === e && (d(yo), oa._currentValue2 = aa);
  }
  function N(e) {
    throw L(C(Error(r(418, "")), e)), wo;
  }
  function L(e) {
    null === So ? So = [e] : So.push(e);
  }
  function U() {
    for (var e = zo, n = Co = zo = 0; n < e;) {
      var t = xo[n];
      xo[n++] = null;
      var r = xo[n];
      xo[n++] = null;
      var l = xo[n];
      xo[n++] = null;
      var a = xo[n];
      if (xo[n++] = null, null !== r && null !== l) {
        var o = r.pending;
        null === o ? l.next = l : (l.next = o.next, o.next = l), r.pending = l;
      }
      0 !== a && M(t, l, a);
    }
  }
  function I(e, n, t, r) {
    xo[zo++] = e, xo[zo++] = n, xo[zo++] = t, xo[zo++] = r, Co |= r, e.lanes |= r, null !== (e = e.alternate) && (e.lanes |= r);
  }
  function D(e, n, t, r) {
    return I(e, n, t, r), H(e);
  }
  function F(e, n) {
    return I(e, null, null, n), H(e);
  }
  function M(e, n, t) {
    e.lanes |= t;
    var r = e.alternate;
    null !== r && (r.lanes |= t);
    for (var l = !1, a = e.return; null !== a;) a.childLanes |= t, null !== (r = a.alternate) && (r.childLanes |= t), 22 === a.tag && (null === (e = a.stateNode) || 1 & e._visibility || (l = !0)), e = a, a = a.return;
    l && null !== n && 3 === e.tag && (a = e.stateNode, l = 31 - Aa(t), null === (e = (a = a.hiddenUpdates)[l]) ? a[l] = [n] : e.push(n), n.lane = 536870912 | t);
  }
  function H(e) {
    if (50 < mi) throw mi = 0, hi = null, Error(r(185));
    for (var n = e.return; null !== n;) n = (e = n).return;
    return 3 === e.tag ? e.stateNode : null;
  }
  function j(e) {
    e !== Eo && null === e.next && (null === Eo ? Po = Eo = e : Eo = Eo.next = e), Ro = !0, _o || (_o = !0, qa(Xa, O));
  }
  function W(e, n) {
    if (!To && Ro) {
      To = !0;
      do {
        for (var t = !1, r = Po; null !== r;) {
          if (0 !== e) {
            var l = r.pendingLanes;
            if (0 === l) var a = 0;else {
              var o = r.suspendedLanes,
                u = r.pingedLanes;
              a = (1 << 31 - Aa(42 | e) + 1) - 1, a = 201326677 & (a &= l & ~(o & ~u)) ? 201326677 & a | 1 : a ? 2 | a : 0;
            }
            0 !== a && (t = !0, B(r, a));
          } else a = Bu, 0 != (3 & (a = h(r, r === Au ? a : 0))) && (t = !0, B(r, a));
          r = r.next;
        }
      } while (t);
      To = !1;
    }
  }
  function O() {
    Ro = _o = !1;
    var e = 0;
    0 !== No && (Xl() && (e = No), No = 0);
    for (var n = Ka(), t = null, r = Po; null !== r;) {
      var l = r.next,
        a = A(r, n);
      0 === a ? (r.next = null, null === t ? Po = l : t.next = l, null === l && (Eo = t)) : (t = r, (0 !== e || 0 != (3 & a)) && (Ro = !0)), r = l;
    }
    W(e);
  }
  function A(e, n) {
    for (var t = e.suspendedLanes, r = e.pingedLanes, l = e.expirationTimes, a = -62914561 & e.pendingLanes; 0 < a;) {
      var o = 31 - Aa(a),
        u = 1 << o,
        i = l[o];
      -1 === i ? 0 != (u & t) && 0 == (u & r) || (l[o] = g(u, n)) : i <= n && (e.expiredLanes |= u), a &= ~u;
    }
    if (t = Bu, t = h(e, e === (n = Au) ? t : 0), r = e.callbackNode, 0 === t || e === n && 2 === Vu || null !== e.cancelPendingCommit) return null !== r && null !== r && Ya(r), e.callbackNode = null, e.callbackPriority = 0;
    if (0 != (3 & t)) return null !== r && null !== r && Ya(r), e.callbackPriority = 2, e.callbackNode = null, 2;
    if ((n = t & -t) === e.callbackPriority) return n;
    switch (null !== r && Ya(r), x(t)) {
      case 2:
        t = Xa;
        break;
      case 8:
        t = Za;
        break;
      case 32:
      default:
        t = eo;
        break;
      case 268435456:
        t = no;
    }
    return r = Q.bind(null, e), t = qa(t, r), e.callbackPriority = n, e.callbackNode = t, n;
  }
  function Q(e, n) {
    var t = e.callbackNode;
    if (Wr() && e.callbackNode !== t) return null;
    var r = Bu;
    return 0 === (r = h(e, e === Au ? r : 0)) ? null : (br(e, r, n), A(e, Ka()), e.callbackNode === t ? Q.bind(null, e) : null);
  }
  function B(e, n) {
    if (Wr()) return null;
    br(e, n, !0);
  }
  function V() {
    return 0 === No && (No = y()), No;
  }
  function $() {
    if (0 == --Uo && null !== Lo) {
      null !== Do && (Do.status = "fulfilled");
      var e = Lo;
      Lo = null, Io = 0, Do = null;
      for (var n = 0; n < e.length; n++) (0, e[n])();
    }
  }
  function q(e) {
    e.updateQueue = {
      baseState: e.memoizedState,
      firstBaseUpdate: null,
      lastBaseUpdate: null,
      shared: {
        pending: null,
        lanes: 0,
        hiddenCallbacks: null
      },
      callbacks: null
    };
  }
  function Y(e, n) {
    e = e.updateQueue, n.updateQueue === e && (n.updateQueue = {
      baseState: e.baseState,
      firstBaseUpdate: e.firstBaseUpdate,
      lastBaseUpdate: e.lastBaseUpdate,
      shared: e.shared,
      callbacks: null
    });
  }
  function J(e) {
    return {
      lane: e,
      tag: 0,
      payload: null,
      callback: null,
      next: null
    };
  }
  function G(e, n, t) {
    var r = e.updateQueue;
    if (null === r) return null;
    if (r = r.shared, 0 != (2 & Ou)) {
      var l = r.pending;
      return null === l ? n.next = n : (n.next = l.next, l.next = n), r.pending = n, n = H(e), M(e, null, t), n;
    }
    return I(e, r, n, t), H(e);
  }
  function K(e, n, t) {
    if (null !== (n = n.updateQueue) && (n = n.shared, 0 != (4194176 & t))) {
      var r = n.lanes;
      t |= r &= e.pendingLanes, n.lanes = t, w(e, t);
    }
  }
  function X(e, n) {
    var t = e.updateQueue,
      r = e.alternate;
    if (null !== r && t === (r = r.updateQueue)) {
      var l = null,
        a = null;
      if (null !== (t = t.firstBaseUpdate)) {
        do {
          var o = {
            lane: t.lane,
            tag: t.tag,
            payload: t.payload,
            callback: null,
            next: null
          };
          null === a ? l = a = o : a = a.next = o, t = t.next;
        } while (null !== t);
        null === a ? l = a = n : a = a.next = n;
      } else l = a = n;
      return t = {
        baseState: r.baseState,
        firstBaseUpdate: l,
        lastBaseUpdate: a,
        shared: r.shared,
        callbacks: r.callbacks
      }, void (e.updateQueue = t);
    }
    null === (e = t.lastBaseUpdate) ? t.firstBaseUpdate = n : e.next = n, t.lastBaseUpdate = n;
  }
  function Z() {
    if (Mo && null !== Do) throw Do;
  }
  function ee(e, n, t, r) {
    Mo = !1;
    var l = e.updateQueue;
    Fo = !1;
    var a = l.firstBaseUpdate,
      o = l.lastBaseUpdate,
      u = l.shared.pending;
    if (null !== u) {
      l.shared.pending = null;
      var i = u,
        s = i.next;
      i.next = null, null === o ? a = s : o.next = s, o = i;
      var c = e.alternate;
      null !== c && (u = (c = c.updateQueue).lastBaseUpdate) !== o && (null === u ? c.firstBaseUpdate = s : u.next = s, c.lastBaseUpdate = i);
    }
    if (null !== a) {
      var f = l.baseState;
      for (o = 0, c = s = i = null, u = a;;) {
        var d = -536870913 & u.lane,
          p = d !== u.lane;
        if (p ? (Bu & d) === d : (r & d) === d) {
          0 !== d && d === Io && (Mo = !0), null !== c && (c = c.next = {
            lane: 0,
            tag: u.tag,
            payload: u.payload,
            callback: null,
            next: null
          });
          e: {
            var m = e,
              h = u;
            d = n;
            var g = t;
            switch (h.tag) {
              case 1:
                if ("function" == typeof (m = h.payload)) {
                  f = m.call(g, f, d);
                  break e;
                }
                f = m;
                break e;
              case 3:
                m.flags = -65537 & m.flags | 128;
              case 0:
                if (null == (d = "function" == typeof (m = h.payload) ? m.call(g, f, d) : m)) break e;
                f = cl({}, f, d);
                break e;
              case 2:
                Fo = !0;
            }
          }
          null !== (d = u.callback) && (e.flags |= 64, p && (e.flags |= 8192), null === (p = l.callbacks) ? l.callbacks = [d] : p.push(d));
        } else p = {
          lane: d,
          tag: u.tag,
          payload: u.payload,
          callback: u.callback,
          next: null
        }, null === c ? (s = c = p, i = f) : c = c.next = p, o |= d;
        if (null === (u = u.next)) {
          if (null === (u = l.shared.pending)) break;
          u = (p = u).next, p.next = null, l.lastBaseUpdate = p, l.shared.pending = null;
        }
      }
      null === c && (i = f), l.baseState = i, l.firstBaseUpdate = s, l.lastBaseUpdate = c, null === a && (l.shared.lanes = 0), Ku |= o, e.lanes = o, e.memoizedState = f;
    }
  }
  function ne(e, n) {
    if ("function" != typeof e) throw Error(r(191, e));
    e.call(n);
  }
  function te(e, n) {
    var t = e.callbacks;
    if (null !== t) for (e.callbacks = null, e = 0; e < t.length; e++) ne(t[e], n);
  }
  function re(e, n) {
    if (ao(e, n)) return !0;
    if ("object" != typeof e || null === e || "object" != typeof n || null === n) return !1;
    var t = Object.keys(e),
      r = Object.keys(n);
    if (t.length !== r.length) return !1;
    for (r = 0; r < t.length; r++) {
      var l = t[r];
      if (!Ho.call(n, l) || !ao(e[l], n[l])) return !1;
    }
    return !0;
  }
  function le(e) {
    return "fulfilled" === (e = e.status) || "rejected" === e;
  }
  function ae() {}
  function oe(e, n, t) {
    switch (void 0 === (t = e[t]) ? e.push(n) : t !== n && (n.then(ae, ae), n = t), n.status) {
      case "fulfilled":
        return n.value;
      case "rejected":
        if ((e = n.reason) === jo) throw Error(r(483));
        throw e;
      default:
        if ("string" == typeof n.status) n.then(ae, ae);else {
          if (null !== (e = Au) && 100 < e.shellSuspendCounter) throw Error(r(482));
          (e = n).status = "pending", e.then(function (e) {
            if ("pending" === n.status) {
              var t = n;
              t.status = "fulfilled", t.value = e;
            }
          }, function (e) {
            if ("pending" === n.status) {
              var t = n;
              t.status = "rejected", t.reason = e;
            }
          });
        }
        switch (n.status) {
          case "fulfilled":
            return n.value;
          case "rejected":
            if ((e = n.reason) === jo) throw Error(r(483));
            throw e;
        }
        throw Ao = n, jo;
    }
  }
  function ue() {
    if (null === Ao) throw Error(r(459));
    var e = Ao;
    return Ao = null, e;
  }
  function ie(e) {
    var n = Bo;
    return Bo += 1, null === Qo && (Qo = []), oe(Qo, e, n);
  }
  function se(e, n, t, r) {
    e = r.props.ref, t.ref = void 0 !== e ? e : null;
  }
  function ce(e, n) {
    if (n.$$typeof === fl) throw Error(r(525));
    throw e = Object.prototype.toString.call(n), Error(r(31, "[object Object]" === e ? "object with keys {" + Object.keys(n).join(", ") + "}" : e));
  }
  function fe(e) {
    return (0, e._init)(e._payload);
  }
  function de(e) {
    function n(n, t) {
      if (e) {
        var r = n.deletions;
        null === r ? (n.deletions = [t], n.flags |= 16) : r.push(t);
      }
    }
    function a(t, r) {
      if (!e) return null;
      for (; null !== r;) n(t, r), r = r.sibling;
      return null;
    }
    function o(e) {
      for (var n = new Map(); null !== e;) null !== e.key ? n.set(e.key, e) : n.set(e.index, e), e = e.sibling;
      return n;
    }
    function u(e, n) {
      return (e = Gr(e, n)).index = 0, e.sibling = null, e;
    }
    function i(n, t, r) {
      return n.index = r, e ? null !== (r = n.alternate) ? (r = r.index) < t ? (n.flags |= 33554434, t) : r : (n.flags |= 33554434, t) : (n.flags |= 1048576, t);
    }
    function s(n) {
      return e && null === n.alternate && (n.flags |= 33554434), n;
    }
    function c(e, n, t, r) {
      return null === n || 6 !== n.tag ? ((n = nl(t, e.mode, r)).return = e, n) : ((n = u(n, t)).return = e, n);
    }
    function f(e, n, t, r) {
      var l = t.type;
      return l === ml ? p(e, n, t.props.children, r, t.key) : null !== n && (n.elementType === l || "object" == typeof l && null !== l && l.$$typeof === zl && fe(l) === n.type) ? (se(e, 0, r = u(n, t.props), t), r.return = e, r) : (se(e, 0, r = Xr(t.type, t.key, t.props, null, e.mode, r), t), r.return = e, r);
    }
    function d(e, n, t, r) {
      return null === n || 4 !== n.tag || n.stateNode.containerInfo !== t.containerInfo || n.stateNode.implementation !== t.implementation ? ((n = tl(t, e.mode, r)).return = e, n) : ((n = u(n, t.children || [])).return = e, n);
    }
    function p(e, n, t, r, l) {
      return null === n || 7 !== n.tag ? ((n = Zr(t, e.mode, r, l)).return = e, n) : ((n = u(n, t)).return = e, n);
    }
    function m(e, n, t) {
      if ("string" == typeof n && "" !== n || "number" == typeof n || "bigint" == typeof n) return (n = nl("" + n, e.mode, t)).return = e, n;
      if ("object" == typeof n && null !== n) {
        switch (n.$$typeof) {
          case dl:
            return se(e, 0, t = Xr(n.type, n.key, n.props, null, e.mode, t), n), t.return = e, t;
          case pl:
            return (n = tl(n, e.mode, t)).return = e, n;
          case zl:
            return m(e, n = (0, n._init)(n._payload), t);
        }
        if (Nl(n) || l(n)) return (n = Zr(n, e.mode, t, null)).return = e, n;
        if ("function" == typeof n.then) return m(e, ie(n), t);
        if (n.$$typeof === vl) return m(e, vt(e, n), t);
        ce(e, n);
      }
      return null;
    }
    function h(e, n, t, r) {
      var a = null !== n ? n.key : null;
      if ("string" == typeof t && "" !== t || "number" == typeof t || "bigint" == typeof t) return null !== a ? null : c(e, n, "" + t, r);
      if ("object" == typeof t && null !== t) {
        switch (t.$$typeof) {
          case dl:
            return t.key === a ? f(e, n, t, r) : null;
          case pl:
            return t.key === a ? d(e, n, t, r) : null;
          case zl:
            return h(e, n, t = (a = t._init)(t._payload), r);
        }
        if (Nl(t) || l(t)) return null !== a ? null : p(e, n, t, r, null);
        if ("function" == typeof t.then) return h(e, n, ie(t), r);
        if (t.$$typeof === vl) return h(e, n, vt(e, t), r);
        ce(e, t);
      }
      return null;
    }
    function g(e, n, t, r, a) {
      if ("string" == typeof r && "" !== r || "number" == typeof r || "bigint" == typeof r) return c(n, e = e.get(t) || null, "" + r, a);
      if ("object" == typeof r && null !== r) {
        switch (r.$$typeof) {
          case dl:
            return f(n, e = e.get(null === r.key ? t : r.key) || null, r, a);
          case pl:
            return d(n, e = e.get(null === r.key ? t : r.key) || null, r, a);
          case zl:
            return g(e, n, t, r = (0, r._init)(r._payload), a);
        }
        if (Nl(r) || l(r)) return p(n, e = e.get(t) || null, r, a, null);
        if ("function" == typeof r.then) return g(e, n, t, ie(r), a);
        if (r.$$typeof === vl) return g(e, n, t, vt(n, r), a);
        ce(n, r);
      }
      return null;
    }
    function y(t, c, f, d) {
      if ("object" == typeof f && null !== f && f.type === ml && null === f.key && (f = f.props.children), "object" == typeof f && null !== f) {
        switch (f.$$typeof) {
          case dl:
            e: {
              for (var p = f.key, b = c; null !== b;) {
                if (b.key === p) {
                  if ((p = f.type) === ml) {
                    if (7 === b.tag) {
                      a(t, b.sibling), (c = u(b, f.props.children)).return = t, t = c;
                      break e;
                    }
                  } else if (b.elementType === p || "object" == typeof p && null !== p && p.$$typeof === zl && fe(p) === b.type) {
                    a(t, b.sibling), se(t, 0, c = u(b, f.props), f), c.return = t, t = c;
                    break e;
                  }
                  a(t, b);
                  break;
                }
                n(t, b), b = b.sibling;
              }
              f.type === ml ? ((c = Zr(f.props.children, t.mode, d, f.key)).return = t, t = c) : (se(t, 0, d = Xr(f.type, f.key, f.props, null, t.mode, d), f), d.return = t, t = d);
            }
            return s(t);
          case pl:
            e: {
              for (b = f.key; null !== c;) {
                if (c.key === b) {
                  if (4 === c.tag && c.stateNode.containerInfo === f.containerInfo && c.stateNode.implementation === f.implementation) {
                    a(t, c.sibling), (c = u(c, f.children || [])).return = t, t = c;
                    break e;
                  }
                  a(t, c);
                  break;
                }
                n(t, c), c = c.sibling;
              }
              (c = tl(f, t.mode, d)).return = t, t = c;
            }
            return s(t);
          case zl:
            return y(t, c, f = (b = f._init)(f._payload), d);
        }
        if (Nl(f)) return function (t, r, l, u) {
          for (var s = null, c = null, f = r, d = r = 0, p = null; null !== f && d < l.length; d++) {
            f.index > d ? (p = f, f = null) : p = f.sibling;
            var y = h(t, f, l[d], u);
            if (null === y) {
              null === f && (f = p);
              break;
            }
            e && f && null === y.alternate && n(t, f), r = i(y, r, d), null === c ? s = y : c.sibling = y, c = y, f = p;
          }
          if (d === l.length) return a(t, f), s;
          if (null === f) {
            for (; d < l.length; d++) null !== (f = m(t, l[d], u)) && (r = i(f, r, d), null === c ? s = f : c.sibling = f, c = f);
            return s;
          }
          for (f = o(f); d < l.length; d++) null !== (p = g(f, t, d, l[d], u)) && (e && null !== p.alternate && f.delete(null === p.key ? d : p.key), r = i(p, r, d), null === c ? s = p : c.sibling = p, c = p);
          return e && f.forEach(function (e) {
            return n(t, e);
          }), s;
        }(t, c, f, d);
        if (l(f)) {
          if ("function" != typeof (b = l(f))) throw Error(r(150));
          return function (t, l, u, s) {
            if (null == u) throw Error(r(151));
            for (var c = null, f = null, d = l, p = l = 0, y = null, b = u.next(); null !== d && !b.done; p++, b = u.next()) {
              d.index > p ? (y = d, d = null) : y = d.sibling;
              var v = h(t, d, b.value, s);
              if (null === v) {
                null === d && (d = y);
                break;
              }
              e && d && null === v.alternate && n(t, d), l = i(v, l, p), null === f ? c = v : f.sibling = v, f = v, d = y;
            }
            if (b.done) return a(t, d), c;
            if (null === d) {
              for (; !b.done; p++, b = u.next()) null !== (b = m(t, b.value, s)) && (l = i(b, l, p), null === f ? c = b : f.sibling = b, f = b);
              return c;
            }
            for (d = o(d); !b.done; p++, b = u.next()) null !== (b = g(d, t, p, b.value, s)) && (e && null !== b.alternate && d.delete(null === b.key ? p : b.key), l = i(b, l, p), null === f ? c = b : f.sibling = b, f = b);
            return e && d.forEach(function (e) {
              return n(t, e);
            }), c;
          }(t, c, f = b.call(f), d);
        }
        if ("function" == typeof f.then) return y(t, c, ie(f), d);
        if (f.$$typeof === vl) return y(t, c, vt(t, f), d);
        ce(t, f);
      }
      return "string" == typeof f && "" !== f || "number" == typeof f || "bigint" == typeof f ? (f = "" + f, null !== c && 6 === c.tag ? (a(t, c.sibling), (c = u(c, f)).return = t, t = c) : (a(t, c), (c = nl(f, t.mode, d)).return = t, t = c), s(t)) : a(t, c);
    }
    return function (e, n, r, l) {
      try {
        Bo = 0;
        var a = y(e, n, r, l);
        return Qo = null, a;
      } catch (n) {
        if (n === jo) throw n;
        var o = t(29, n, null, e.mode);
        return o.lanes = l, o.return = e, o;
      }
    };
  }
  function pe(e, n) {
    p(Yo, e = Ju), p(qo, n), Ju = e | n.baseLanes;
  }
  function me() {
    p(Yo, Ju), p(qo, qo.current);
  }
  function he() {
    Ju = Yo.current, d(qo), d(Yo);
  }
  function ge(e) {
    var n = e.alternate;
    p(Ko, 1 & Ko.current), p(Jo, e), null === Go && (null === n || null !== qo.current || null !== n.memoizedState) && (Go = e);
  }
  function ye(e) {
    if (22 === e.tag) {
      if (p(Ko, Ko.current), p(Jo, e), null === Go) {
        var n = e.alternate;
        null !== n && null !== n.memoizedState && (Go = e);
      }
    } else be();
  }
  function be() {
    p(Ko, Ko.current), p(Jo, Jo.current);
  }
  function ve(e) {
    d(Jo), Go === e && (Go = null), d(Ko);
  }
  function Se(e) {
    for (var n = e; null !== n;) {
      if (13 === n.tag) {
        var t = n.memoizedState;
        if (null !== t && (null === (t = t.dehydrated) || za(t) || Ca(t))) return n;
      } else if (19 === n.tag && void 0 !== n.memoizedProps.revealOrder) {
        if (0 != (128 & n.flags)) return n;
      } else if (null !== n.child) {
        n.child.return = n, n = n.child;
        continue;
      }
      if (n === e) break;
      for (; null === n.sibling;) {
        if (null === n.return || n.return === e) return null;
        n = n.return;
      }
      n.sibling.return = n.return, n = n.sibling;
    }
    return null;
  }
  function ke() {
    throw Error(r(321));
  }
  function we(e, n) {
    if (null === n) return !1;
    for (var t = 0; t < n.length && t < e.length; t++) if (!ao(e[t], n[t])) return !1;
    return !0;
  }
  function xe(e, n, t, r, l, a) {
    return Xo = a, Zo = n, n.memoizedState = null, n.updateQueue = null, n.lanes = 0, Rl.H = null === e || null === e.memoizedState ? fu : du, lu = !1, a = t(r, l), lu = !1, ru && (a = Ce(n, t, r, l)), ze(e), a;
  }
  function ze(e) {
    Rl.H = cu;
    var n = null !== eu && null !== eu.next;
    if (Xo = 0, nu = eu = Zo = null, tu = !1, ou = 0, uu = null, n) throw Error(r(300));
    null === e || gu || null !== (e = e.dependencies) && gt(e) && (gu = !0);
  }
  function Ce(e, n, t, l) {
    Zo = e;
    var a = 0;
    do {
      if (ru && (uu = null), ou = 0, ru = !1, 25 <= a) throw Error(r(301));
      if (a += 1, nu = eu = null, null != e.updateQueue) {
        var o = e.updateQueue;
        o.lastEffect = null, o.events = null, o.stores = null, null != o.memoCache && (o.memoCache.index = 0);
      }
      Rl.H = pu, o = n(t, l);
    } while (ru);
    return o;
  }
  function Pe() {
    var e = Rl.H,
      n = e.useState()[0];
    return n = "function" == typeof n.then ? Le(n) : n, e = e.useState()[0], (null !== eu ? eu.memoizedState : null) !== e && (Zo.flags |= 1024), n;
  }
  function Ee() {
    var e = 0 !== au;
    return au = 0, e;
  }
  function _e(e, n, t) {
    n.updateQueue = e.updateQueue, n.flags &= -2053, e.lanes &= ~t;
  }
  function Re(e) {
    if (tu) {
      for (e = e.memoizedState; null !== e;) {
        var n = e.queue;
        null !== n && (n.pending = null), e = e.next;
      }
      tu = !1;
    }
    Xo = 0, nu = eu = Zo = null, ru = !1, ou = au = 0, uu = null;
  }
  function Te() {
    var e = {
      memoizedState: null,
      baseState: null,
      baseQueue: null,
      queue: null,
      next: null
    };
    return null === nu ? Zo.memoizedState = nu = e : nu = nu.next = e, nu;
  }
  function Ne() {
    if (null === eu) {
      var e = Zo.alternate;
      e = null !== e ? e.memoizedState : null;
    } else e = eu.next;
    var n = null === nu ? Zo.memoizedState : nu.next;
    if (null !== n) nu = n, eu = e;else {
      if (null === e) {
        if (null === Zo.alternate) throw Error(r(467));
        throw Error(r(310));
      }
      e = {
        memoizedState: (eu = e).memoizedState,
        baseState: eu.baseState,
        baseQueue: eu.baseQueue,
        queue: eu.queue,
        next: null
      }, null === nu ? Zo.memoizedState = nu = e : nu = nu.next = e;
    }
    return nu;
  }
  function Le(e) {
    var n = ou;
    return ou += 1, null === uu && (uu = []), e = oe(uu, e, n), n = Zo, null === (null === nu ? n.memoizedState : nu.next) && (n = n.alternate, Rl.H = null === n || null === n.memoizedState ? fu : du), e;
  }
  function Ue(e) {
    if (null !== e && "object" == typeof e) {
      if ("function" == typeof e.then) return Le(e);
      if (e.$$typeof === vl) return bt(e);
    }
    throw Error(r(438, String(e)));
  }
  function Ie(e) {
    var n = null,
      t = Zo.updateQueue;
    if (null !== t && (n = t.memoCache), null == n) {
      var r = Zo.alternate;
      null !== r && null !== (r = r.updateQueue) && null != (r = r.memoCache) && (n = {
        data: r.data.map(function (e) {
          return e.slice();
        }),
        index: 0
      });
    }
    if (null == n && (n = {
      data: [],
      index: 0
    }), null === t && (t = su(), Zo.updateQueue = t), t.memoCache = n, void 0 === (t = n.data[n.index])) for (t = n.data[n.index] = Array(e), r = 0; r < e; r++) t[r] = Pl;
    return n.index++, t;
  }
  function De(e, n) {
    return "function" == typeof n ? n(e) : n;
  }
  function Fe(e) {
    return Me(Ne(), eu, e);
  }
  function Me(e, n, t) {
    var l = e.queue;
    if (null === l) throw Error(r(311));
    l.lastRenderedReducer = t;
    var a = e.baseQueue,
      o = l.pending;
    if (null !== o) {
      if (null !== a) {
        var u = a.next;
        a.next = o.next, o.next = u;
      }
      n.baseQueue = a = o, l.pending = null;
    }
    if (o = e.baseState, null === a) e.memoizedState = o;else {
      var i = u = null,
        s = null,
        c = n = a.next,
        f = !1;
      do {
        var d = -536870913 & c.lane;
        if (d !== c.lane ? (Bu & d) === d : (Xo & d) === d) {
          var p = c.revertLane;
          if (0 === p) null !== s && (s = s.next = {
            lane: 0,
            revertLane: 0,
            action: c.action,
            hasEagerState: c.hasEagerState,
            eagerState: c.eagerState,
            next: null
          }), d === Io && (f = !0);else {
            if ((Xo & p) === p) {
              c = c.next, p === Io && (f = !0);
              continue;
            }
            d = {
              lane: 0,
              revertLane: c.revertLane,
              action: c.action,
              hasEagerState: c.hasEagerState,
              eagerState: c.eagerState,
              next: null
            }, null === s ? (i = s = d, u = o) : s = s.next = d, Zo.lanes |= p, Ku |= p;
          }
          d = c.action, lu && t(o, d), o = c.hasEagerState ? c.eagerState : t(o, d);
        } else p = {
          lane: d,
          revertLane: c.revertLane,
          action: c.action,
          hasEagerState: c.hasEagerState,
          eagerState: c.eagerState,
          next: null
        }, null === s ? (i = s = p, u = o) : s = s.next = p, Zo.lanes |= d, Ku |= d;
        c = c.next;
      } while (null !== c && c !== n);
      if (null === s ? u = o : s.next = i, !ao(o, e.memoizedState) && (gu = !0, f && null !== (t = Do))) throw t;
      e.memoizedState = o, e.baseState = u, e.baseQueue = s, l.lastRenderedState = o;
    }
    return null === a && (l.lanes = 0), [e.memoizedState, l.dispatch];
  }
  function He(e) {
    var n = Ne(),
      t = n.queue;
    if (null === t) throw Error(r(311));
    t.lastRenderedReducer = e;
    var l = t.dispatch,
      a = t.pending,
      o = n.memoizedState;
    if (null !== a) {
      t.pending = null;
      var u = a = a.next;
      do {
        o = e(o, u.action), u = u.next;
      } while (u !== a);
      ao(o, n.memoizedState) || (gu = !0), n.memoizedState = o, null === n.baseQueue && (n.baseState = o), t.lastRenderedState = o;
    }
    return [o, l];
  }
  function je(e, n, t) {
    var l = Zo,
      a = Ne();
    t = n();
    var o = !ao((eu || a).memoizedState, t);
    if (o && (a.memoizedState = t, gu = !0), a = a.queue, fn(Ae.bind(null, l, a, e), [e]), a.getSnapshot !== n || o || null !== nu && 1 & nu.memoizedState.tag) {
      if (l.flags |= 2048, an(9, Oe.bind(null, l, a, t, n), {
        destroy: void 0
      }, null), null === Au) throw Error(r(349));
      0 != (60 & Xo) || We(l, n, t);
    }
    return t;
  }
  function We(e, n, t) {
    e.flags |= 16384, e = {
      getSnapshot: n,
      value: t
    }, null === (n = Zo.updateQueue) ? (n = su(), Zo.updateQueue = n, n.stores = [e]) : null === (t = n.stores) ? n.stores = [e] : t.push(e);
  }
  function Oe(e, n, t, r) {
    n.value = t, n.getSnapshot = r, Qe(n) && Be(e);
  }
  function Ae(e, n, t) {
    return t(function () {
      Qe(n) && Be(e);
    });
  }
  function Qe(e) {
    var n = e.getSnapshot;
    e = e.value;
    try {
      var t = n();
      return !ao(e, t);
    } catch (e) {
      return !0;
    }
  }
  function Be(e) {
    var n = F(e, 2);
    null !== n && yr(n, 0, 2);
  }
  function Ve(e) {
    var n = Te();
    if ("function" == typeof e) {
      var t = e;
      if (e = t(), lu) {
        z(!0);
        try {
          t();
        } finally {
          z(!1);
        }
      }
    }
    return n.memoizedState = n.baseState = e, n.queue = {
      pending: null,
      lanes: 0,
      dispatch: null,
      lastRenderedReducer: De,
      lastRenderedState: e
    }, n;
  }
  function $e(e, n, t, r) {
    return e.baseState = t, Me(e, eu, "function" == typeof r ? r : De);
  }
  function qe(e, n, t, l, a) {
    if (Tn(e)) throw Error(r(485));
    if (null !== (e = n.action)) {
      var o = {
        payload: a,
        action: e,
        next: null,
        isTransition: !0,
        status: "pending",
        value: null,
        reason: null,
        listeners: [],
        then: function (e) {
          o.listeners.push(e);
        }
      };
      null !== Rl.T ? t(!0) : o.isTransition = !1, l(o), null === (t = n.pending) ? (o.next = n.pending = o, Ye(n, o)) : (o.next = t.next, n.pending = t.next = o);
    }
  }
  function Ye(e, n) {
    var t = n.action,
      r = n.payload,
      l = e.state;
    if (n.isTransition) {
      var a = Rl.T,
        o = {};
      Rl.T = o;
      try {
        var u = t(l, r),
          i = Rl.S;
        null !== i && i(o, u), Je(e, n, u);
      } catch (t) {
        Ke(e, n, t);
      } finally {
        Rl.T = a;
      }
    } else try {
      Je(e, n, a = t(l, r));
    } catch (t) {
      Ke(e, n, t);
    }
  }
  function Je(e, n, t) {
    null !== t && "object" == typeof t && "function" == typeof t.then ? t.then(function (t) {
      Ge(e, n, t);
    }, function (t) {
      return Ke(e, n, t);
    }) : Ge(e, n, t);
  }
  function Ge(e, n, t) {
    n.status = "fulfilled", n.value = t, Xe(n), e.state = t, null !== (n = e.pending) && ((t = n.next) === n ? e.pending = null : (t = t.next, n.next = t, Ye(e, t)));
  }
  function Ke(e, n, t) {
    var r = e.pending;
    if (e.pending = null, null !== r) {
      r = r.next;
      do {
        n.status = "rejected", n.reason = t, Xe(n), n = n.next;
      } while (n !== r);
    }
    e.action = null;
  }
  function Xe(e) {
    e = e.listeners;
    for (var n = 0; n < e.length; n++) (0, e[n])();
  }
  function Ze(e, n) {
    return n;
  }
  function en(e, n) {
    var t, r, l;
    (t = Te()).memoizedState = t.baseState = n, r = {
      pending: null,
      lanes: 0,
      dispatch: null,
      lastRenderedReducer: Ze,
      lastRenderedState: n
    }, t.queue = r, t = En.bind(null, Zo, r), r.dispatch = t, r = Ve(!1);
    var a = Rn.bind(null, Zo, !1, r.queue);
    return l = {
      state: n,
      dispatch: null,
      action: e,
      pending: null
    }, (r = Te()).queue = l, t = qe.bind(null, Zo, l, a, t), l.dispatch = t, r.memoizedState = e, [n, t, !1];
  }
  function nn(e) {
    return tn(Ne(), eu, e);
  }
  function tn(e, n, t) {
    n = Me(e, n, Ze)[0], e = Fe(De)[0], n = "object" == typeof n && null !== n && "function" == typeof n.then ? Le(n) : n;
    var r = Ne(),
      l = r.queue,
      a = l.dispatch;
    return t !== r.memoizedState && (Zo.flags |= 2048, an(9, rn.bind(null, l, t), {
      destroy: void 0
    }, null)), [n, a, e];
  }
  function rn(e, n) {
    e.action = n;
  }
  function ln(e) {
    var n = Ne(),
      t = eu;
    if (null !== t) return tn(n, t, e);
    Ne(), n = n.memoizedState;
    var r = (t = Ne()).queue.dispatch;
    return t.memoizedState = e, [n, r, !1];
  }
  function an(e, n, t, r) {
    return e = {
      tag: e,
      create: n,
      inst: t,
      deps: r,
      next: null
    }, null === (n = Zo.updateQueue) && (n = su(), Zo.updateQueue = n), null === (t = n.lastEffect) ? n.lastEffect = e.next = e : (r = t.next, t.next = e, e.next = r, n.lastEffect = e), e;
  }
  function on() {
    return Ne().memoizedState;
  }
  function un(e, n, t, r) {
    var l = Te();
    Zo.flags |= e, l.memoizedState = an(1 | n, t, {
      destroy: void 0
    }, void 0 === r ? null : r);
  }
  function sn(e, n, t, r) {
    var l = Ne();
    r = void 0 === r ? null : r;
    var a = l.memoizedState.inst;
    null !== eu && null !== r && we(r, eu.memoizedState.deps) ? l.memoizedState = an(n, t, a, r) : (Zo.flags |= e, l.memoizedState = an(1 | n, t, a, r));
  }
  function cn(e, n) {
    un(8390656, 8, e, n);
  }
  function fn(e, n) {
    sn(2048, 8, e, n);
  }
  function dn(e, n) {
    return sn(4, 2, e, n);
  }
  function pn(e, n) {
    return sn(4, 4, e, n);
  }
  function mn(e, n) {
    if ("function" == typeof n) {
      e = e();
      var t = n(e);
      return function () {
        "function" == typeof t ? t() : n(null);
      };
    }
    if (null != n) return e = e(), n.current = e, function () {
      n.current = null;
    };
  }
  function hn(e, n, t) {
    t = null != t ? t.concat([e]) : null, sn(4, 4, mn.bind(null, n, e), t);
  }
  function gn() {}
  function yn(e, n) {
    var t = Ne();
    n = void 0 === n ? null : n;
    var r = t.memoizedState;
    return null !== n && we(n, r[1]) ? r[0] : (t.memoizedState = [e, n], e);
  }
  function bn(e, n) {
    var t = Ne();
    n = void 0 === n ? null : n;
    var r = t.memoizedState;
    if (null !== n && we(n, r[1])) return r[0];
    if (r = e(), lu) {
      z(!0);
      try {
        e();
      } finally {
        z(!1);
      }
    }
    return t.memoizedState = [r, n], r;
  }
  function vn(e, n, t) {
    return void 0 === t || 0 != (1073741824 & Xo) ? e.memoizedState = n : (e.memoizedState = t, e = gr(), Zo.lanes |= e, Ku |= e, t);
  }
  function Sn(e, n, t, r) {
    return ao(t, n) ? t : null !== qo.current ? (e = vn(e, t, r), ao(e, n) || (gu = !0), e) : 0 == (42 & Xo) ? (gu = !0, e.memoizedState = t) : (e = gr(), Zo.lanes |= e, Ku |= e, n);
  }
  function kn(e, n, t, r, l) {
    var a = Gl();
    Jl(0 !== a && 8 > a ? a : 8);
    var o,
      u,
      i,
      s = Rl.T,
      c = {};
    Rl.T = c, Rn(e, !1, n, t);
    try {
      var f = l(),
        d = Rl.S;
      null !== d && d(c, f), null !== f && "object" == typeof f && "function" == typeof f.then ? _n(e, n, (o = r, u = [], i = {
        status: "pending",
        value: null,
        reason: null,
        then: function (e) {
          u.push(e);
        }
      }, f.then(function () {
        i.status = "fulfilled", i.value = o;
        for (var e = 0; e < u.length; e++) (0, u[e])(o);
      }, function (e) {
        for (i.status = "rejected", i.reason = e, e = 0; e < u.length; e++) (0, u[e])(void 0);
      }), i), hr()) : _n(e, n, r, hr());
    } catch (t) {
      _n(e, n, {
        then: function () {},
        status: "rejected",
        reason: t
      }, hr());
    } finally {
      Jl(a), Rl.T = s;
    }
  }
  function wn() {
    return bt(oa);
  }
  function xn() {
    return Ne().memoizedState;
  }
  function zn() {
    return Ne().memoizedState;
  }
  function Cn(e) {
    for (var n = e.return; null !== n;) {
      switch (n.tag) {
        case 24:
        case 3:
          var t = hr(),
            r = G(n, e = J(t), t);
          return null !== r && (yr(r, 0, t), K(r, n, t)), n = {
            cache: kt()
          }, void (e.payload = n);
      }
      n = n.return;
    }
  }
  function Pn(e, n, t) {
    var r = hr();
    t = {
      lane: r,
      revertLane: 0,
      action: t,
      hasEagerState: !1,
      eagerState: null,
      next: null
    }, Tn(e) ? Nn(n, t) : null !== (t = D(e, n, t, r)) && (yr(t, 0, r), Ln(t, n, r));
  }
  function En(e, n, t) {
    _n(e, n, t, hr());
  }
  function _n(e, n, t, r) {
    var l = {
      lane: r,
      revertLane: 0,
      action: t,
      hasEagerState: !1,
      eagerState: null,
      next: null
    };
    if (Tn(e)) Nn(n, l);else {
      var a = e.alternate;
      if (0 === e.lanes && (null === a || 0 === a.lanes) && null !== (a = n.lastRenderedReducer)) try {
        var o = n.lastRenderedState,
          u = a(o, t);
        if (l.hasEagerState = !0, l.eagerState = u, ao(u, o)) return I(e, n, l, 0), null === Au && U(), !1;
      } catch (e) {}
      if (null !== (t = D(e, n, l, r))) return yr(t, 0, r), Ln(t, n, r), !0;
    }
    return !1;
  }
  function Rn(e, n, t, l) {
    if (l = {
      lane: 2,
      revertLane: V(),
      action: l,
      hasEagerState: !1,
      eagerState: null,
      next: null
    }, Tn(e)) {
      if (n) throw Error(r(479));
    } else null !== (n = D(e, t, l, 2)) && yr(n, 0, 2);
  }
  function Tn(e) {
    var n = e.alternate;
    return e === Zo || null !== n && n === Zo;
  }
  function Nn(e, n) {
    ru = tu = !0;
    var t = e.pending;
    null === t ? n.next = n : (n.next = t.next, t.next = n), e.pending = n;
  }
  function Ln(e, n, t) {
    if (0 != (4194176 & t)) {
      var r = n.lanes;
      t |= r &= e.pendingLanes, n.lanes = t, w(e, t);
    }
  }
  function Un(e, n, t, r) {
    t = null == (t = t(r, n = e.memoizedState)) ? n : cl({}, n, t), e.memoizedState = t, 0 === e.lanes && (e.updateQueue.baseState = t);
  }
  function In(e, n, t, r, l, a, o) {
    return "function" == typeof (e = e.stateNode).shouldComponentUpdate ? e.shouldComponentUpdate(r, a, o) : !(n.prototype && n.prototype.isPureReactComponent && re(t, r) && re(l, a));
  }
  function Dn(e, n, t, r) {
    e = n.state, "function" == typeof n.componentWillReceiveProps && n.componentWillReceiveProps(t, r), "function" == typeof n.UNSAFE_componentWillReceiveProps && n.UNSAFE_componentWillReceiveProps(t, r), n.state !== e && mu.enqueueReplaceState(n, n.state, null);
  }
  function Fn(e, n) {
    var t = n;
    if ("ref" in n) for (var r in t = {}, n) "ref" !== r && (t[r] = n[r]);
    if (e = e.defaultProps) for (var l in t === n && (t = cl({}, t)), e) void 0 === t[l] && (t[l] = e[l]);
    return t;
  }
  function Mn(e, n) {
    try {
      (0, e.onUncaughtError)(n.value, {
        componentStack: n.stack
      });
    } catch (e) {
      setTimeout(function () {
        throw e;
      });
    }
  }
  function Hn(e, n, t) {
    try {
      (0, e.onCaughtError)(t.value, {
        componentStack: t.stack,
        errorBoundary: 1 === n.tag ? n.stateNode : null
      });
    } catch (e) {
      setTimeout(function () {
        throw e;
      });
    }
  }
  function jn(e, n, t) {
    return (t = J(t)).tag = 3, t.payload = {
      element: null
    }, t.callback = function () {
      Mn(e, n);
    }, t;
  }
  function Wn(e) {
    return (e = J(e)).tag = 3, e;
  }
  function On(e, n, t, r) {
    var l = t.type.getDerivedStateFromError;
    if ("function" == typeof l) {
      var a = r.value;
      e.payload = function () {
        return l(a);
      }, e.callback = function () {
        Hn(n, t, r);
      };
    }
    var o = t.stateNode;
    null !== o && "function" == typeof o.componentDidCatch && (e.callback = function () {
      Hn(n, t, r), "function" != typeof l && (null === ii ? ii = new Set([this]) : ii.add(this));
      var e = r.stack;
      this.componentDidCatch(r.value, {
        componentStack: null !== e ? e : ""
      });
    });
  }
  function An(e, n, t, r) {
    n.child = null === e ? $o(n, null, t, r) : Vo(n, e.child, t, r);
  }
  function Qn(e, n, t, r, l) {
    t = t.render;
    var a = n.ref;
    if ("ref" in r) {
      var o = {};
      for (var u in r) "ref" !== u && (o[u] = r[u]);
    } else o = r;
    return yt(n), r = xe(e, n, t, o, a, l), u = Ee(), null === e || gu ? (n.flags |= 1, An(e, n, r, l), n.child) : (_e(e, n, l), ut(e, n, l));
  }
  function Bn(e, n, t, r, l) {
    if (null === e) {
      var a = t.type;
      return "function" != typeof a || Jr(a) || void 0 !== a.defaultProps || null !== t.compare ? ((e = Xr(t.type, null, r, n, n.mode, l)).ref = n.ref, e.return = n, n.child = e) : (n.tag = 15, n.type = a, Vn(e, n, a, r, l));
    }
    if (a = e.child, !it(e, l)) {
      var o = a.memoizedProps;
      if ((t = null !== (t = t.compare) ? t : re)(o, r) && e.ref === n.ref) return ut(e, n, l);
    }
    return n.flags |= 1, (e = Gr(a, r)).ref = n.ref, e.return = n, n.child = e;
  }
  function Vn(e, n, t, r, l) {
    if (null !== e) {
      var a = e.memoizedProps;
      if (re(a, r) && e.ref === n.ref) {
        if (gu = !1, n.pendingProps = r = a, !it(e, l)) return n.lanes = e.lanes, ut(e, n, l);
        0 != (131072 & e.flags) && (gu = !0);
      }
    }
    return Jn(e, n, t, r, l);
  }
  function $n(e, n, t) {
    var r = n.pendingProps,
      l = r.children,
      a = 0 != (2 & n.stateNode._pendingVisibility),
      o = null !== e ? e.memoizedState : null;
    if (Yn(e, n), "hidden" === r.mode || a) {
      if (0 != (128 & n.flags)) {
        if (r = null !== o ? o.baseLanes | t : t, null !== e) {
          for (l = n.child = e.child, a = 0; null !== l;) a = a | l.lanes | l.childLanes, l = l.sibling;
          n.childLanes = a & ~r;
        } else n.childLanes = 0, n.child = null;
        return qn(e, n, r, t);
      }
      if (0 == (536870912 & t)) return n.lanes = n.childLanes = 536870912, qn(e, n, null !== o ? o.baseLanes | t : t, t);
      n.memoizedState = {
        baseLanes: 0,
        cachePool: null
      }, null !== e && zt(0, null !== o ? o.cachePool : null), null !== o ? pe(n, o) : me(), ye(n);
    } else null !== o ? (zt(0, o.cachePool), pe(n, o), be(), n.memoizedState = null) : (null !== e && zt(0, null), me(), be());
    return An(e, n, l, t), n.child;
  }
  function qn(e, n, t, r) {
    var l = xt();
    return l = null === l ? null : {
      parent: Cu._currentValue2,
      pool: l
    }, n.memoizedState = {
      baseLanes: t,
      cachePool: l
    }, null !== e && zt(0, null), me(), ye(n), null !== e && ht(e, n, r, !0), null;
  }
  function Yn(e, n) {
    var t = n.ref;
    if (null === t) null !== e && null !== e.ref && (n.flags |= 2097664);else {
      if ("function" != typeof t && "object" != typeof t) throw Error(r(284));
      null !== e && e.ref === t || (n.flags |= 2097664);
    }
  }
  function Jn(e, n, t, r, l) {
    return yt(n), t = xe(e, n, t, r, void 0, l), r = Ee(), null === e || gu ? (n.flags |= 1, An(e, n, t, l), n.child) : (_e(e, n, l), ut(e, n, l));
  }
  function Gn(e, n, t, r, l, a) {
    return yt(n), n.updateQueue = null, t = Ce(n, r, t, l), ze(e), r = Ee(), null === e || gu ? (n.flags |= 1, An(e, n, t, a), n.child) : (_e(e, n, a), ut(e, n, a));
  }
  function Kn(e, n, t, r, l) {
    if (yt(n), null === n.stateNode) {
      var a = Oa,
        o = t.contextType;
      "object" == typeof o && null !== o && (a = bt(o)), a = new t(r, a), n.memoizedState = null !== a.state && void 0 !== a.state ? a.state : null, a.updater = mu, n.stateNode = a, a._reactInternals = n, (a = n.stateNode).props = r, a.state = n.memoizedState, a.refs = {}, q(n), o = t.contextType, a.context = "object" == typeof o && null !== o ? bt(o) : Oa, a.state = n.memoizedState, "function" == typeof (o = t.getDerivedStateFromProps) && (Un(n, t, o, r), a.state = n.memoizedState), "function" == typeof t.getDerivedStateFromProps || "function" == typeof a.getSnapshotBeforeUpdate || "function" != typeof a.UNSAFE_componentWillMount && "function" != typeof a.componentWillMount || (o = a.state, "function" == typeof a.componentWillMount && a.componentWillMount(), "function" == typeof a.UNSAFE_componentWillMount && a.UNSAFE_componentWillMount(), o !== a.state && mu.enqueueReplaceState(a, a.state, null), ee(n, r, a, l), Z(), a.state = n.memoizedState), "function" == typeof a.componentDidMount && (n.flags |= 4194308), r = !0;
    } else if (null === e) {
      a = n.stateNode;
      var u = n.memoizedProps,
        i = Fn(t, u);
      a.props = i;
      var s = a.context,
        c = t.contextType;
      o = Oa, "object" == typeof c && null !== c && (o = bt(c));
      var f = t.getDerivedStateFromProps;
      c = "function" == typeof f || "function" == typeof a.getSnapshotBeforeUpdate, u = n.pendingProps !== u, c || "function" != typeof a.UNSAFE_componentWillReceiveProps && "function" != typeof a.componentWillReceiveProps || (u || s !== o) && Dn(n, a, r, o), Fo = !1;
      var d = n.memoizedState;
      a.state = d, ee(n, r, a, l), Z(), s = n.memoizedState, u || d !== s || Fo ? ("function" == typeof f && (Un(n, t, f, r), s = n.memoizedState), (i = Fo || In(n, t, i, r, d, s, o)) ? (c || "function" != typeof a.UNSAFE_componentWillMount && "function" != typeof a.componentWillMount || ("function" == typeof a.componentWillMount && a.componentWillMount(), "function" == typeof a.UNSAFE_componentWillMount && a.UNSAFE_componentWillMount()), "function" == typeof a.componentDidMount && (n.flags |= 4194308)) : ("function" == typeof a.componentDidMount && (n.flags |= 4194308), n.memoizedProps = r, n.memoizedState = s), a.props = r, a.state = s, a.context = o, r = i) : ("function" == typeof a.componentDidMount && (n.flags |= 4194308), r = !1);
    } else {
      a = n.stateNode, Y(e, n), c = Fn(t, o = n.memoizedProps), a.props = c, f = n.pendingProps, d = a.context, s = t.contextType, i = Oa, "object" == typeof s && null !== s && (i = bt(s)), (s = "function" == typeof (u = t.getDerivedStateFromProps) || "function" == typeof a.getSnapshotBeforeUpdate) || "function" != typeof a.UNSAFE_componentWillReceiveProps && "function" != typeof a.componentWillReceiveProps || (o !== f || d !== i) && Dn(n, a, r, i), Fo = !1, d = n.memoizedState, a.state = d, ee(n, r, a, l), Z();
      var p = n.memoizedState;
      o !== f || d !== p || Fo || null !== e && null !== e.dependencies && gt(e.dependencies) ? ("function" == typeof u && (Un(n, t, u, r), p = n.memoizedState), (c = Fo || In(n, t, c, r, d, p, i) || null !== e && null !== e.dependencies && gt(e.dependencies)) ? (s || "function" != typeof a.UNSAFE_componentWillUpdate && "function" != typeof a.componentWillUpdate || ("function" == typeof a.componentWillUpdate && a.componentWillUpdate(r, p, i), "function" == typeof a.UNSAFE_componentWillUpdate && a.UNSAFE_componentWillUpdate(r, p, i)), "function" == typeof a.componentDidUpdate && (n.flags |= 4), "function" == typeof a.getSnapshotBeforeUpdate && (n.flags |= 1024)) : ("function" != typeof a.componentDidUpdate || o === e.memoizedProps && d === e.memoizedState || (n.flags |= 4), "function" != typeof a.getSnapshotBeforeUpdate || o === e.memoizedProps && d === e.memoizedState || (n.flags |= 1024), n.memoizedProps = r, n.memoizedState = p), a.props = r, a.state = p, a.context = i, r = c) : ("function" != typeof a.componentDidUpdate || o === e.memoizedProps && d === e.memoizedState || (n.flags |= 4), "function" != typeof a.getSnapshotBeforeUpdate || o === e.memoizedProps && d === e.memoizedState || (n.flags |= 1024), r = !1);
    }
    return a = r, Yn(e, n), r = 0 != (128 & n.flags), a || r ? (a = n.stateNode, t = r && "function" != typeof t.getDerivedStateFromError ? null : a.render(), n.flags |= 1, null !== e && r ? (n.child = Vo(n, e.child, null, l), n.child = Vo(n, null, t, l)) : An(e, n, t, l), n.memoizedState = a.state, e = n.child) : e = ut(e, n, l), e;
  }
  function Xn(e) {
    return {
      baseLanes: e,
      cachePool: Ct()
    };
  }
  function Zn(e, n, t) {
    return e = null !== e ? e.childLanes & ~t : 0, n && (e |= ei), e;
  }
  function et(e, n, t) {
    var l,
      a,
      o,
      u = n.pendingProps,
      i = !1,
      s = 0 != (128 & n.flags);
    if ((l = s) || (l = (null === e || null !== e.memoizedState) && 0 != (2 & Ko.current)), l && (i = !0, n.flags &= -129), l = 0 != (32 & n.flags), n.flags &= -33, null === e) return a = u.children, u = u.fallback, i ? (be(), a = tt({
      mode: "hidden",
      children: a
    }, i = n.mode), u = Zr(u, i, t, null), a.return = n, u.return = n, a.sibling = u, n.child = a, (i = n.child).memoizedState = Xn(t), i.childLanes = Zn(e, l, t), n.memoizedState = yu, u) : (ge(n), nt(n, a));
    if (null !== (o = e.memoizedState) && null !== (a = o.dehydrated)) {
      if (s) 256 & n.flags ? (ge(n), n.flags &= -257, n = rt(e, n, t)) : null !== n.memoizedState ? (be(), n.child = e.child, n.flags |= 128, n = null) : (be(), i = u.fallback, a = n.mode, u = tt({
        mode: "visible",
        children: u.children
      }, a), (i = Zr(i, a, t, null)).flags |= 2, u.return = n, i.return = n, u.sibling = i, n.child = u, Vo(n, e.child, null, t), (u = n.child).memoizedState = Xn(t), u.childLanes = Zn(e, l, t), n.memoizedState = yu, n = i);else if (ge(n), Ca(a)) l = Pa(a).digest, (u = Error(r(419))).stack = "", u.digest = l, L({
        value: u,
        source: null,
        stack: null
      }), n = rt(e, n, t);else if (gu || ht(e, n, t, !1), l = 0 != (t & e.childLanes), gu || l) {
        if (null !== (l = Au)) {
          if (0 != (42 & (u = t & -t))) u = 1;else switch (u) {
            case 2:
              u = 1;
              break;
            case 8:
              u = 4;
              break;
            case 32:
              u = 16;
              break;
            case 128:
            case 256:
            case 512:
            case 1024:
            case 2048:
            case 4096:
            case 8192:
            case 16384:
            case 32768:
            case 65536:
            case 131072:
            case 262144:
            case 524288:
            case 1048576:
            case 2097152:
            case 4194304:
            case 8388608:
            case 16777216:
            case 33554432:
              u = 64;
              break;
            case 268435456:
              u = 134217728;
              break;
            default:
              u = 0;
          }
          if (0 !== (u = 0 != (u & (l.suspendedLanes | t)) ? 0 : u) && u !== o.retryLane) throw o.retryLane = u, F(e, u), yr(l, 0, u), hu;
        }
        za(a) || Rr(), n = rt(e, n, t);
      } else za(a) ? (n.flags |= 128, n.child = e.child, n = $r.bind(null, e), Ea(a, n), n = null) : (e = o.treeContext, (n = nt(n, u.children)).flags |= 4096);
      return n;
    }
    return i ? (be(), i = u.fallback, a = n.mode, s = (o = e.child).sibling, (u = Gr(o, {
      mode: "hidden",
      children: u.children
    })).subtreeFlags = 31457280 & o.subtreeFlags, null !== s ? i = Gr(s, i) : (i = Zr(i, a, t, null)).flags |= 2, i.return = n, u.return = n, u.sibling = i, n.child = u, u = i, i = n.child, null === (a = e.child.memoizedState) ? a = Xn(t) : (null !== (o = a.cachePool) ? (s = Cu._currentValue2, o = o.parent !== s ? {
      parent: s,
      pool: s
    } : o) : o = Ct(), a = {
      baseLanes: a.baseLanes | t,
      cachePool: o
    }), i.memoizedState = a, i.childLanes = Zn(e, l, t), n.memoizedState = yu, u) : (ge(n), e = (t = e.child).sibling, (t = Gr(t, {
      mode: "visible",
      children: u.children
    })).return = n, t.sibling = null, null !== e && (null === (l = n.deletions) ? (n.deletions = [e], n.flags |= 16) : l.push(e)), n.child = t, n.memoizedState = null, t);
  }
  function nt(e, n) {
    return (n = tt({
      mode: "visible",
      children: n
    }, e.mode)).return = e, e.child = n;
  }
  function tt(e, n) {
    return el(e, n, 0, null);
  }
  function rt(e, n, t) {
    return Vo(n, e.child, null, t), (e = nt(n, n.pendingProps.children)).flags |= 2, n.memoizedState = null, e;
  }
  function lt(e, n, t) {
    e.lanes |= n;
    var r = e.alternate;
    null !== r && (r.lanes |= n), pt(e.return, n, t);
  }
  function at(e, n, t, r, l) {
    var a = e.memoizedState;
    null === a ? e.memoizedState = {
      isBackwards: n,
      rendering: null,
      renderingStartTime: 0,
      last: r,
      tail: t,
      tailMode: l
    } : (a.isBackwards = n, a.rendering = null, a.renderingStartTime = 0, a.last = r, a.tail = t, a.tailMode = l);
  }
  function ot(e, n, t) {
    var r = n.pendingProps,
      l = r.revealOrder,
      a = r.tail;
    if (An(e, n, r.children, t), 0 != (2 & (r = Ko.current))) r = 1 & r | 2, n.flags |= 128;else {
      if (null !== e && 0 != (128 & e.flags)) e: for (e = n.child; null !== e;) {
        if (13 === e.tag) null !== e.memoizedState && lt(e, t, n);else if (19 === e.tag) lt(e, t, n);else if (null !== e.child) {
          e.child.return = e, e = e.child;
          continue;
        }
        if (e === n) break e;
        for (; null === e.sibling;) {
          if (null === e.return || e.return === n) break e;
          e = e.return;
        }
        e.sibling.return = e.return, e = e.sibling;
      }
      r &= 1;
    }
    switch (p(Ko, r), l) {
      case "forwards":
        for (t = n.child, l = null; null !== t;) null !== (e = t.alternate) && null === Se(e) && (l = t), t = t.sibling;
        null === (t = l) ? (l = n.child, n.child = null) : (l = t.sibling, t.sibling = null), at(n, !1, l, t, a);
        break;
      case "backwards":
        for (t = null, l = n.child, n.child = null; null !== l;) {
          if (null !== (e = l.alternate) && null === Se(e)) {
            n.child = l;
            break;
          }
          e = l.sibling, l.sibling = t, t = l, l = e;
        }
        at(n, !0, t, null, a);
        break;
      case "together":
        at(n, !1, null, null, void 0);
        break;
      default:
        n.memoizedState = null;
    }
    return n.child;
  }
  function ut(e, n, t) {
    if (null !== e && (n.dependencies = e.dependencies), Ku |= n.lanes, 0 == (t & n.childLanes)) {
      if (null === e) return null;
      if (ht(e, n, t, !1), 0 == (t & n.childLanes)) return null;
    }
    if (null !== e && n.child !== e.child) throw Error(r(153));
    if (null !== n.child) {
      for (t = Gr(e = n.child, e.pendingProps), n.child = t, t.return = n; null !== e.sibling;) e = e.sibling, (t = t.sibling = Gr(e, e.pendingProps)).return = n;
      t.sibling = null;
    }
    return n.child;
  }
  function it(e, n) {
    return 0 != (e.lanes & n) || !(null === (e = e.dependencies) || !gt(e));
  }
  function st(e, n, t) {
    if (null !== e) {
      if (e.memoizedProps !== n.pendingProps) gu = !0;else {
        if (!it(e, t) && 0 == (128 & n.flags)) return gu = !1, function (e, n, t) {
          switch (n.tag) {
            case 3:
              E(n, n.stateNode.containerInfo), ft(0, Cu, e.memoizedState.cache);
              break;
            case 27:
            case 5:
              R(n);
              break;
            case 4:
              E(n, n.stateNode.containerInfo);
              break;
            case 10:
              ft(0, n.type, n.memoizedProps.value);
              break;
            case 13:
              var r = n.memoizedState;
              if (null !== r) return null !== r.dehydrated ? (ge(n), n.flags |= 128, null) : 0 != (t & n.child.childLanes) ? et(e, n, t) : (ge(n), null !== (e = ut(e, n, t)) ? e.sibling : null);
              ge(n);
              break;
            case 19:
              var l = 0 != (128 & e.flags);
              if ((r = 0 != (t & n.childLanes)) || (ht(e, n, t, !1), r = 0 != (t & n.childLanes)), l) {
                if (r) return ot(e, n, t);
                n.flags |= 128;
              }
              if (null !== (l = n.memoizedState) && (l.rendering = null, l.tail = null, l.lastEffect = null), p(Ko, Ko.current), r) break;
              return null;
            case 22:
            case 23:
              return n.lanes = 0, $n(e, n, t);
            case 24:
              ft(0, Cu, e.memoizedState.cache);
          }
          return ut(e, n, t);
        }(e, n, t);
        gu = 0 != (131072 & e.flags);
      }
    } else gu = !1;
    switch (n.lanes = 0, n.tag) {
      case 16:
        e: {
          e = n.pendingProps;
          var l = n.elementType,
            o = l._init;
          if (l = o(l._payload), n.type = l, "function" != typeof l) {
            if (null != l) {
              if ((o = l.$$typeof) === Sl) {
                n.tag = 11, n = Qn(null, n, l, e, t);
                break e;
              }
              if (o === xl) {
                n.tag = 14, n = Bn(null, n, l, e, t);
                break e;
              }
            }
            throw n = a(l) || l, Error(r(306, n, ""));
          }
          Jr(l) ? (e = Fn(l, e), n.tag = 1, n = Kn(null, n, l, e, t)) : (n.tag = 0, n = Jn(null, n, l, e, t));
        }
        return n;
      case 0:
        return Jn(e, n, n.type, n.pendingProps, t);
      case 1:
        return Kn(e, n, l = n.type, o = Fn(l, n.pendingProps), t);
      case 3:
        if (E(n, n.stateNode.containerInfo), null === e) throw Error(r(387));
        var u = n.pendingProps;
        l = (o = n.memoizedState).element, Y(e, n), ee(n, u, null, t);
        var i = n.memoizedState;
        return u = i.cache, ft(0, Cu, u), u !== o.cache && mt(n, [Cu], t, !0), Z(), (u = i.element) !== l ? (An(e, n, u, t), n = n.child) : n = ut(e, n, t), n;
      case 26:
      case 27:
      case 5:
        return null === e && vo && (Ua(n.type, n.pendingProps, mo.current), (o = l = bo) && (null !== (l = Ra(l, n.type, n.pendingProps, ko)) ? (n.stateNode = l, bo = _a(l), ko = !1, o = !0) : o = !1), o || N(n)), R(n), o = n.type, u = n.pendingProps, i = null !== e ? e.memoizedProps : null, l = u.children, Wl(o, u) ? l = null : null !== i && Wl(o, i) && (n.flags |= 32), null !== n.memoizedState && (o = xe(e, n, Pe, null, null, t), oa._currentValue2 = o), Yn(e, n), An(e, n, l, t), n.child;
      case 6:
        return null === e && vo && (Ia(n.pendingProps, mo.current), (e = t = bo) && (null !== (t = Ta(t, n.pendingProps, ko)) ? (n.stateNode = t, bo = null, e = !0) : e = !1), e || N(n)), null;
      case 13:
        return et(e, n, t);
      case 4:
        return E(n, n.stateNode.containerInfo), l = n.pendingProps, null === e ? n.child = Vo(n, null, l, t) : An(e, n, l, t), n.child;
      case 11:
        return Qn(e, n, n.type, n.pendingProps, t);
      case 7:
        return An(e, n, n.pendingProps, t), n.child;
      case 8:
      case 12:
        return An(e, n, n.pendingProps.children, t), n.child;
      case 10:
        return l = n.pendingProps, ft(0, n.type, l.value), An(e, n, l.children, t), n.child;
      case 9:
        return o = n.type._context, l = n.pendingProps.children, yt(n), l = l(o = bt(o)), n.flags |= 1, An(e, n, l, t), n.child;
      case 14:
        return Bn(e, n, n.type, n.pendingProps, t);
      case 15:
        return Vn(e, n, n.type, n.pendingProps, t);
      case 19:
        return ot(e, n, t);
      case 22:
        return $n(e, n, t);
      case 24:
        return yt(n), l = bt(Cu), null === e ? (null === (o = xt()) && (o = Au, u = kt(), o.pooledCache = u, u.refCount++, null !== u && (o.pooledCacheLanes |= t), o = u), n.memoizedState = {
          parent: l,
          cache: o
        }, q(n), ft(0, Cu, o)) : (0 != (e.lanes & t) && (Y(e, n), ee(n, null, null, t), Z()), o = e.memoizedState, u = n.memoizedState, o.parent !== l ? (o = {
          parent: l,
          cache: l
        }, n.memoizedState = o, 0 === n.lanes && (n.memoizedState = n.updateQueue.baseState = o), ft(0, Cu, l)) : (l = u.cache, ft(0, Cu, l), l !== o.cache && mt(n, [Cu], t, !0))), An(e, n, n.pendingProps.children, t), n.child;
      case 29:
        throw n.pendingProps;
    }
    throw Error(r(156, n.tag));
  }
  function ct() {
    ku = Su = vu = null;
  }
  function ft(e, n, t) {
    p(bu, n._currentValue2), n._currentValue2 = t;
  }
  function dt(e) {
    var n = bu.current;
    e._currentValue2 = n, d(bu);
  }
  function pt(e, n, t) {
    for (; null !== e;) {
      var r = e.alternate;
      if ((e.childLanes & n) !== n ? (e.childLanes |= n, null !== r && (r.childLanes |= n)) : null !== r && (r.childLanes & n) !== n && (r.childLanes |= n), e === t) break;
      e = e.return;
    }
  }
  function mt(e, n, t, l) {
    var a = e.child;
    for (null !== a && (a.return = e); null !== a;) {
      var o = a.dependencies;
      if (null !== o) {
        var u = a.child;
        o = o.firstContext;
        e: for (; null !== o;) {
          var i = o;
          o = a;
          for (var s = 0; s < n.length; s++) if (i.context === n[s]) {
            o.lanes |= t, null !== (i = o.alternate) && (i.lanes |= t), pt(o.return, t, e), l || (u = null);
            break e;
          }
          o = i.next;
        }
      } else if (18 === a.tag) {
        if (null === (u = a.return)) throw Error(r(341));
        u.lanes |= t, null !== (o = u.alternate) && (o.lanes |= t), pt(u, t, e), u = null;
      } else u = a.child;
      if (null !== u) u.return = a;else for (u = a; null !== u;) {
        if (u === e) {
          u = null;
          break;
        }
        if (null !== (a = u.sibling)) {
          a.return = u.return, u = a;
          break;
        }
        u = u.return;
      }
      a = u;
    }
  }
  function ht(e, n, t, l) {
    e = null;
    for (var a = n, o = !1; null !== a;) {
      if (!o) if (0 != (524288 & a.flags)) o = !0;else if (0 != (262144 & a.flags)) break;
      if (10 === a.tag) {
        var u = a.alternate;
        if (null === u) throw Error(r(387));
        if (null !== (u = u.memoizedProps)) {
          var i = a.type;
          ao(a.pendingProps.value, u.value) || (null !== e ? e.push(i) : e = [i]);
        }
      } else if (a === yo.current) {
        if (null === (u = a.alternate)) throw Error(r(387));
        u.memoizedState.memoizedState !== a.memoizedState.memoizedState && (null !== e ? e.push(oa) : e = [oa]);
      }
      a = a.return;
    }
    null !== e && mt(n, e, t, l), n.flags |= 262144;
  }
  function gt(e) {
    for (e = e.firstContext; null !== e;) {
      var n = e.context;
      if (!ao(n._currentValue2, e.memoizedValue)) return !0;
      e = e.next;
    }
    return !1;
  }
  function yt(e) {
    vu = e, ku = Su = null, null !== (e = e.dependencies) && (e.firstContext = null);
  }
  function bt(e) {
    return St(vu, e);
  }
  function vt(e, n) {
    return null === vu && yt(e), St(e, n);
  }
  function St(e, n) {
    var t = n._currentValue2;
    if (ku !== n) if (n = {
      context: n,
      memoizedValue: t,
      next: null
    }, null === Su) {
      if (null === e) throw Error(r(308));
      Su = n, e.dependencies = {
        lanes: 0,
        firstContext: n
      }, e.flags |= 524288;
    } else Su = Su.next = n;
    return t;
  }
  function kt() {
    return {
      controller: new wu(),
      data: new Map(),
      refCount: 0
    };
  }
  function wt(e) {
    e.refCount--, 0 === e.refCount && xu(zu, function () {
      e.controller.abort();
    });
  }
  function xt() {
    var e = Eu.current;
    return null !== e ? e : Au.pooledCache;
  }
  function zt(e, n) {
    p(Eu, null === n ? Eu.current : n.pool);
  }
  function Ct() {
    var e = xt();
    return null === e ? null : {
      parent: Cu._currentValue2,
      pool: e
    };
  }
  function Pt(e) {
    e.flags |= 4;
  }
  function Et(e, n) {
    null !== n && (e.flags |= 4), 16384 & e.flags && (n = 22 !== e.tag ? b() : 536870912, e.lanes |= n);
  }
  function _t(e, n) {
    switch (e.tailMode) {
      case "hidden":
        n = e.tail;
        for (var t = null; null !== n;) null !== n.alternate && (t = n), n = n.sibling;
        null === t ? e.tail = null : t.sibling = null;
        break;
      case "collapsed":
        t = e.tail;
        for (var r = null; null !== t;) null !== t.alternate && (r = t), t = t.sibling;
        null === r ? n || null === e.tail ? e.tail = null : e.tail.sibling = null : r.sibling = null;
    }
  }
  function Rt(e) {
    var n = null !== e.alternate && e.alternate.child === e.child,
      t = 0,
      r = 0;
    if (n) for (var l = e.child; null !== l;) t |= l.lanes | l.childLanes, r |= 31457280 & l.subtreeFlags, r |= 31457280 & l.flags, l.return = e, l = l.sibling;else for (l = e.child; null !== l;) t |= l.lanes | l.childLanes, r |= l.subtreeFlags, r |= l.flags, l.return = e, l = l.sibling;
    return e.subtreeFlags |= r, e.childLanes = t, n;
  }
  function Tt(e, n, t) {
    var l = n.pendingProps;
    switch (P(n), n.tag) {
      case 16:
      case 15:
      case 0:
      case 11:
      case 7:
      case 8:
      case 12:
      case 9:
      case 14:
      case 1:
        return Rt(n), null;
      case 3:
        return t = n.stateNode, l = null, null !== e && (l = e.memoizedState.cache), n.memoizedState.cache !== l && (n.flags |= 2048), dt(Cu), _(), t.pendingContext && (t.context = t.pendingContext, t.pendingContext = null), null !== e && null !== e.child || null === e || e.memoizedState.isDehydrated && 0 == (256 & n.flags) || (n.flags |= 1024, null !== So && (vr(So), So = null)), Rt(n), null;
      case 26:
        var a;
      case 27:
      case 5:
        if (T(n), t = n.type, null !== e && null != n.stateNode) !function (e, n, t, r) {
          e.memoizedProps !== r && Pt(n);
        }(e, n, 0, l);else {
          if (!l) {
            if (null === n.stateNode) throw Error(r(166));
            return Rt(n), null;
          }
          e = mo.current, function (e, n, t, r) {
            for (t = n.child; null !== t;) {
              if (5 === t.tag || 6 === t.tag) Hl(e, t.stateNode);else if (4 !== t.tag && !Ha && null !== t.child) {
                t.child.return = t, t = t.child;
                continue;
              }
              if (t === n) break;
              for (; null === t.sibling;) {
                if (null === t.return || t.return === n) return;
                t = t.return;
              }
              t.sibling.return = t.return, t = t.sibling;
            }
          }(a = Ml(t, l, go.current, e, n), n, !1), n.stateNode = a, jl(a, t, l, e) && Pt(n);
        }
        return Rt(n), function (e, n, t) {
          if (ea(n, t)) {
            if (e.flags |= 16777216, !na(n, t)) {
              if (!Pr()) throw Ao = Oo, Wo;
              e.flags |= 8192;
            }
          } else e.flags &= -16777217;
        }(n, n.type, n.pendingProps), null;
      case 6:
        if (e && null != n.stateNode) (t = e.memoizedProps) !== l && Pt(n);else {
          if ("string" != typeof l && null === n.stateNode) throw Error(r(166));
          e = go.current, t = mo.current, n.stateNode = Ol(l, e, t, n);
        }
        return Rt(n), null;
      case 13:
        if (l = n.memoizedState, null === e || null !== e.memoizedState && null !== e.memoizedState.dehydrated) {
          if (a = !1, null !== l && null !== l.dehydrated) {
            if (null === e) {
              if (!a) throw Error(r(318));
              throw Error(r(344));
            }
            0 == (128 & n.flags) && (n.memoizedState = null), n.flags |= 4, Rt(n), a = !1;
          } else null !== So && (vr(So), So = null), a = !0;
          if (!a) return 256 & n.flags ? (ve(n), n) : (ve(n), null);
        }
        if (ve(n), 0 != (128 & n.flags)) return n.lanes = t, n;
        if (t = null !== l, e = null !== e && null !== e.memoizedState, t) {
          a = null, null !== (l = n.child).alternate && null !== l.alternate.memoizedState && null !== l.alternate.memoizedState.cachePool && (a = l.alternate.memoizedState.cachePool.pool);
          var o = null;
          null !== l.memoizedState && null !== l.memoizedState.cachePool && (o = l.memoizedState.cachePool.pool), o !== a && (l.flags |= 2048);
        }
        return t !== e && t && (n.child.flags |= 8192), Et(n, n.updateQueue), Rt(n), null;
      case 4:
        return _(), null === e && Yl(n.stateNode.containerInfo), Rt(n), null;
      case 10:
        return dt(n.type), Rt(n), null;
      case 19:
        if (d(Ko), null === (a = n.memoizedState)) return Rt(n), null;
        if (l = 0 != (128 & n.flags), null === (o = a.rendering)) {
          if (l) _t(a, !1);else {
            if (0 !== Gu || null !== e && 0 != (128 & e.flags)) for (e = n.child; null !== e;) {
              if (null !== (o = Se(e))) {
                for (n.flags |= 128, _t(a, !1), e = o.updateQueue, n.updateQueue = e, Et(n, e), n.subtreeFlags = 0, e = t, t = n.child; null !== t;) Kr(t, e), t = t.sibling;
                return p(Ko, 1 & Ko.current | 2), n.child;
              }
              e = e.sibling;
            }
            null !== a.tail && Ka() > oi && (n.flags |= 128, l = !0, _t(a, !1), n.lanes = 4194304);
          }
        } else {
          if (!l) if (null !== (e = Se(o))) {
            if (n.flags |= 128, l = !0, e = e.updateQueue, n.updateQueue = e, Et(n, e), _t(a, !0), null === a.tail && "hidden" === a.tailMode && !o.alternate && !vo) return Rt(n), null;
          } else 2 * Ka() - a.renderingStartTime > oi && 536870912 !== t && (n.flags |= 128, l = !0, _t(a, !1), n.lanes = 4194304);
          a.isBackwards ? (o.sibling = n.child, n.child = o) : (null !== (e = a.last) ? e.sibling = o : n.child = o, a.last = o);
        }
        return null !== a.tail ? (n = a.tail, a.rendering = n, a.tail = n.sibling, a.renderingStartTime = Ka(), n.sibling = null, e = Ko.current, p(Ko, l ? 1 & e | 2 : 1 & e), n) : (Rt(n), null);
      case 22:
      case 23:
        return ve(n), he(), l = null !== n.memoizedState, null !== e ? null !== e.memoizedState !== l && (n.flags |= 8192) : l && (n.flags |= 8192), l ? 0 != (536870912 & t) && 0 == (128 & n.flags) && (Rt(n), 6 & n.subtreeFlags && (n.flags |= 8192)) : Rt(n), null !== (t = n.updateQueue) && Et(n, t.retryQueue), t = null, null !== e && null !== e.memoizedState && null !== e.memoizedState.cachePool && (t = e.memoizedState.cachePool.pool), l = null, null !== n.memoizedState && null !== n.memoizedState.cachePool && (l = n.memoizedState.cachePool.pool), l !== t && (n.flags |= 2048), null !== e && d(Eu), null;
      case 24:
        return t = null, null !== e && (t = e.memoizedState.cache), n.memoizedState.cache !== t && (n.flags |= 2048), dt(Cu), Rt(n), null;
      case 25:
        return null;
    }
    throw Error(r(156, n.tag));
  }
  function Nt(e, n) {
    switch (P(n), n.tag) {
      case 1:
        return 65536 & (e = n.flags) ? (n.flags = -65537 & e | 128, n) : null;
      case 3:
        return dt(Cu), _(), 0 != (65536 & (e = n.flags)) && 0 == (128 & e) ? (n.flags = -65537 & e | 128, n) : null;
      case 26:
      case 27:
      case 5:
        return T(n), null;
      case 13:
        if (ve(n), null !== (e = n.memoizedState) && null !== e.dehydrated && null === n.alternate) throw Error(r(340));
        return 65536 & (e = n.flags) ? (n.flags = -65537 & e | 128, n) : null;
      case 19:
        return d(Ko), null;
      case 4:
        return _(), null;
      case 10:
        return dt(n.type), null;
      case 22:
      case 23:
        return ve(n), he(), null !== e && d(Eu), 65536 & (e = n.flags) ? (n.flags = -65537 & e | 128, n) : null;
      case 24:
        return dt(Cu), null;
      default:
        return null;
    }
  }
  function Lt(e, n) {
    switch (P(n), n.tag) {
      case 3:
        dt(Cu), _();
        break;
      case 26:
      case 27:
      case 5:
        T(n);
        break;
      case 4:
        _();
        break;
      case 13:
        ve(n);
        break;
      case 19:
        d(Ko);
        break;
      case 10:
        dt(n.type);
        break;
      case 22:
      case 23:
        ve(n), he(), null !== e && d(Eu);
        break;
      case 24:
        dt(Cu);
    }
  }
  function Ut(e, n) {
    try {
      var t = n.updateQueue,
        r = null !== t ? t.lastEffect : null;
      if (null !== r) {
        var l = r.next;
        t = l;
        do {
          if ((t.tag & e) === e) {
            r = void 0;
            var a = t.create,
              o = t.inst;
            r = a(), o.destroy = r;
          }
          t = t.next;
        } while (t !== l);
      }
    } catch (e) {
      Ar(n, n.return, e);
    }
  }
  function It(e, n, t) {
    try {
      var r = n.updateQueue,
        l = null !== r ? r.lastEffect : null;
      if (null !== l) {
        var a = l.next;
        r = a;
        do {
          if ((r.tag & e) === e) {
            var o = r.inst,
              u = o.destroy;
            if (void 0 !== u) {
              o.destroy = void 0, l = n;
              var i = t;
              try {
                u();
              } catch (e) {
                Ar(l, i, e);
              }
            }
          }
          r = r.next;
        } while (r !== a);
      }
    } catch (e) {
      Ar(n, n.return, e);
    }
  }
  function Dt(e) {
    var n = e.updateQueue;
    if (null !== n) {
      var t = e.stateNode;
      try {
        te(n, t);
      } catch (n) {
        Ar(e, e.return, n);
      }
    }
  }
  function Ft(e, n, t) {
    t.props = Fn(e.type, e.memoizedProps), t.state = e.memoizedState;
    try {
      t.componentWillUnmount();
    } catch (t) {
      Ar(e, n, t);
    }
  }
  function Mt(e, n) {
    try {
      var t = e.ref;
      if (null !== t) {
        var r = e.stateNode;
        switch (e.tag) {
          case 26:
          case 27:
          case 5:
            var l = Ll(r);
            break;
          default:
            l = r;
        }
        "function" == typeof t ? e.refCleanup = t(l) : t.current = l;
      }
    } catch (t) {
      Ar(e, n, t);
    }
  }
  function Ht(e, n) {
    var t = e.ref,
      r = e.refCleanup;
    if (null !== t) if ("function" == typeof r) try {
      r();
    } catch (t) {
      Ar(e, n, t);
    } finally {
      e.refCleanup = null, null != (e = e.alternate) && (e.refCleanup = null);
    } else if ("function" == typeof t) try {
      t(null);
    } catch (t) {
      Ar(e, n, t);
    } else t.current = null;
  }
  function jt(e) {
    var n = e.type,
      t = e.memoizedProps,
      r = e.stateNode;
    try {
      fa(r, n, t, e);
    } catch (n) {
      Ar(e, e.return, n);
    }
  }
  function Wt(e) {
    return 5 === e.tag || 3 === e.tag || 4 === e.tag;
  }
  function Ot(e) {
    e: for (;;) {
      for (; null === e.sibling;) {
        if (null === e.return || Wt(e.return)) return null;
        e = e.return;
      }
      for (e.sibling.return = e.return, e = e.sibling; 5 !== e.tag && 6 !== e.tag && 18 !== e.tag;) {
        if (2 & e.flags) continue e;
        if (null === e.child || 4 === e.tag) continue e;
        e.child.return = e, e = e.child;
      }
      if (!(2 & e.flags)) return e.stateNode;
    }
  }
  function At(e, n, t) {
    var r = e.tag;
    if (5 === r || 6 === r) e = e.stateNode, n ? ma(t, e, n) : sa(t, e);else if (4 !== r && !Ha && null !== (e = e.child)) for (At(e, n, t), e = e.sibling; null !== e;) At(e, n, t), e = e.sibling;
  }
  function Qt(e, n, t) {
    var r = e.tag;
    if (5 === r || 6 === r) e = e.stateNode, n ? pa(t, e, n) : ia(t, e);else if (4 !== r && !Ha && null !== (e = e.child)) for (Qt(e, n, t), e = e.sibling; null !== e;) Qt(e, n, t), e = e.sibling;
  }
  function Bt(e, n, t) {
    var r = t.flags;
    switch (t.tag) {
      case 0:
      case 11:
      case 15:
        Zt(e, t), 4 & r && Ut(5, t);
        break;
      case 1:
        if (Zt(e, t), 4 & r) if (e = t.stateNode, null === n) try {
          e.componentDidMount();
        } catch (e) {
          Ar(t, t.return, e);
        } else {
          var l = Fn(t.type, n.memoizedProps);
          n = n.memoizedState;
          try {
            e.componentDidUpdate(l, n, e.__reactInternalSnapshotBeforeUpdate);
          } catch (e) {
            Ar(t, t.return, e);
          }
        }
        64 & r && Dt(t), 512 & r && Mt(t, t.return);
        break;
      case 3:
        if (Zt(e, t), 64 & r && null !== (r = t.updateQueue)) {
          if (e = null, null !== t.child) switch (t.child.tag) {
            case 27:
            case 5:
              e = Ll(t.child.stateNode);
              break;
            case 1:
              e = t.child.stateNode;
          }
          try {
            te(r, e);
          } catch (e) {
            Ar(t, t.return, e);
          }
        }
        break;
      case 26:
      case 27:
      case 5:
        Zt(e, t), null === n && 4 & r && jt(t), 512 & r && Mt(t, t.return);
        break;
      case 12:
      case 13:
      default:
        Zt(e, t);
        break;
      case 22:
        if (!(l = null !== t.memoizedState || _u)) {
          n = null !== n && null !== n.memoizedState || Ru;
          var a = _u,
            o = Ru;
          _u = l, (Ru = n) && !o ? nr(e, t, 0 != (8772 & t.subtreeFlags)) : Zt(e, t), _u = a, Ru = o;
        }
        512 & r && ("manual" === t.memoizedProps.mode ? Mt(t, t.return) : Ht(t, t.return));
    }
  }
  function Vt(e) {
    var n = e.alternate;
    null !== n && (e.alternate = null, Vt(n)), e.child = null, e.deletions = null, e.sibling = null, 5 === e.tag && null !== (n = e.stateNode) && Zl(n), e.stateNode = null, e.return = null, e.dependencies = null, e.memoizedProps = null, e.memoizedState = null, e.pendingProps = null, e.stateNode = null, e.updateQueue = null;
  }
  function $t(e, n, t) {
    for (t = t.child; null !== t;) qt(e, n, t), t = t.sibling;
  }
  function qt(e, n, t) {
    switch (t.tag) {
      case 26:
      case 27:
        var r, l;
      case 5:
        Ru || Ht(t, n);
      case 6:
        if (r = Iu, l = Du, Iu = null, $t(e, n, t), Du = l, null !== (Iu = r)) if (Du) try {
          ga(Iu, t.stateNode);
        } catch (e) {
          Ar(t, n, e);
        } else try {
          ha(Iu, t.stateNode);
        } catch (e) {
          Ar(t, n, e);
        }
        break;
      case 18:
        null !== Iu && (Du ? La(Iu, t.stateNode) : Na(Iu, t.stateNode));
        break;
      case 4:
        r = Iu, l = Du, Iu = t.stateNode.containerInfo, Du = !0, $t(e, n, t), Iu = r, Du = l;
        break;
      case 0:
      case 11:
      case 14:
      case 15:
        Ru || It(2, t, n), Ru || It(4, t, n), $t(e, n, t);
        break;
      case 1:
        Ru || (Ht(t, n), "function" == typeof (r = t.stateNode).componentWillUnmount && Ft(t, n, r)), $t(e, n, t);
        break;
      case 21:
        $t(e, n, t);
        break;
      case 22:
        Ht(t, n), Ru = (r = Ru) || null !== t.memoizedState, $t(e, n, t), Ru = r;
        break;
      default:
        $t(e, n, t);
    }
  }
  function Yt(e, n) {
    var t = function (e) {
      switch (e.tag) {
        case 13:
        case 19:
          var n = e.stateNode;
          return null === n && (n = e.stateNode = new Nu()), n;
        case 22:
          return null === (n = (e = e.stateNode)._retryCache) && (n = e._retryCache = new Nu()), n;
        default:
          throw Error(r(435, e.tag));
      }
    }(e);
    n.forEach(function (n) {
      var r = qr.bind(null, e, n);
      t.has(n) || (t.add(n), n.then(r, r));
    });
  }
  function Jt(e, n) {
    var t = n.deletions;
    if (null !== t) for (var l = 0; l < t.length; l++) {
      var a = t[l],
        o = e,
        u = n,
        i = u;
      e: for (; null !== i;) {
        switch (i.tag) {
          case 27:
          case 5:
            Iu = i.stateNode, Du = !1;
            break e;
          case 3:
          case 4:
            Iu = i.stateNode.containerInfo, Du = !0;
            break e;
        }
        i = i.return;
      }
      if (null === Iu) throw Error(r(160));
      qt(o, u, a), Iu = null, Du = !1, null !== (o = a.alternate) && (o.return = null), a.return = null;
    }
    if (13878 & n.subtreeFlags) for (n = n.child; null !== n;) Gt(n, e), n = n.sibling;
  }
  function Gt(e, n) {
    var t = e.alternate,
      l = e.flags;
    switch (e.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
        Jt(n, e), Kt(e), 4 & l && (It(3, e, e.return), Ut(3, e), It(5, e, e.return));
        break;
      case 1:
        Jt(n, e), Kt(e), 512 & l && null !== t && Ht(t, t.return), 64 & l && _u && null !== (e = e.updateQueue) && null !== (l = e.callbacks) && (t = e.shared.hiddenCallbacks, e.shared.hiddenCallbacks = null === t ? l : t.concat(l));
        break;
      case 26:
        var a;
      case 27:
        var o;
      case 5:
        if (Jt(n, e), Kt(e), 512 & l && null !== t && Ht(t, t.return), 32 & e.flags) {
          n = e.stateNode;
          try {
            ya(n);
          } catch (n) {
            Ar(e, e.return, n);
          }
        }
        4 & l && null != e.stateNode && function (e, n, t) {
          try {
            da(e.stateNode, e.type, t, n, e);
          } catch (n) {
            Ar(e, e.return, n);
          }
        }(e, n = e.memoizedProps, null !== t ? t.memoizedProps : n), 1024 & l && (Tu = !0);
        break;
      case 6:
        if (Jt(n, e), Kt(e), 4 & l && Vl) {
          if (null === e.stateNode) throw Error(r(162));
          l = e.memoizedProps, t = null !== t ? t.memoizedProps : l, n = e.stateNode;
          try {
            ca(n, t, l);
          } catch (n) {
            Ar(e, e.return, n);
          }
        }
        break;
      case 3:
        Jt(n, e), Kt(e), Tu && (Tu = !1, Xt(e));
        break;
      case 4:
        Jt(n, e), Kt(e), 4 & l && $l && function (e, n, t) {
          e = e.containerInfo;
          try {
            xa(e, t);
          } catch (e) {
            Ar(n, n.return, e);
          }
        }(e.stateNode, e, e.stateNode.pendingChildren);
        break;
      case 12:
        Jt(n, e), Kt(e);
        break;
      case 13:
        Jt(n, e), Kt(e), 8192 & e.child.flags && null !== e.memoizedState != (null !== t && null !== t.memoizedState) && (ai = Ka()), 4 & l && null !== (l = e.updateQueue) && (e.updateQueue = null, Yt(e, l));
        break;
      case 22:
        512 & l && null !== t && Ht(t, t.return), a = null !== e.memoizedState;
        var u = null !== t && null !== t.memoizedState,
          i = _u,
          s = Ru;
        if (_u = i || a, Ru = s || u, Jt(n, e), Ru = s, _u = i, Kt(e), (n = e.stateNode)._current = e, n._visibility &= -3, n._visibility |= 2 & n._pendingVisibility, 8192 & l && (n._visibility = a ? -2 & n._visibility : 1 | n._visibility, a && (n = _u || Ru, null === t || u || n || er(e)), null === e.memoizedProps || "manual" !== e.memoizedProps.mode)) e: if (t = null, Vl) for (n = e;;) {
          if (5 === n.tag || Da || Ha) {
            if (null === t) {
              u = t = n;
              try {
                o = u.stateNode, a ? ba(o) : Sa(u.stateNode, u.memoizedProps);
              } catch (e) {
                Ar(u, u.return, e);
              }
            }
          } else if (6 === n.tag) {
            if (null === t) {
              u = n;
              try {
                var c = u.stateNode;
                a ? va(c) : ka(c, u.memoizedProps);
              } catch (e) {
                Ar(u, u.return, e);
              }
            }
          } else if ((22 !== n.tag && 23 !== n.tag || null === n.memoizedState || n === e) && null !== n.child) {
            n.child.return = n, n = n.child;
            continue;
          }
          if (n === e) break e;
          for (; null === n.sibling;) {
            if (null === n.return || n.return === e) break e;
            t === n && (t = null), n = n.return;
          }
          t === n && (t = null), n.sibling.return = n.return, n = n.sibling;
        }
        4 & l && null !== (l = e.updateQueue) && null !== (t = l.retryQueue) && (l.retryQueue = null, Yt(e, t));
        break;
      case 19:
        Jt(n, e), Kt(e), 4 & l && null !== (l = e.updateQueue) && (e.updateQueue = null, Yt(e, l));
        break;
      case 21:
        break;
      default:
        Jt(n, e), Kt(e);
    }
  }
  function Kt(e) {
    var n = e.flags;
    if (2 & n) {
      try {
        if (Vl && (!Ha || 27 !== e.tag)) {
          e: {
            for (var t = e.return; null !== t;) {
              if (Wt(t)) {
                var l = t;
                break e;
              }
              t = t.return;
            }
            throw Error(r(160));
          }
          switch (l.tag) {
            case 27:
            case 5:
              var a = l.stateNode;
              32 & l.flags && (ya(a), l.flags &= -33), Qt(e, Ot(e), a);
              break;
            case 3:
            case 4:
              var o = l.stateNode.containerInfo;
              At(e, Ot(e), o);
              break;
            default:
              throw Error(r(161));
          }
        }
      } catch (n) {
        Ar(e, e.return, n);
      }
      e.flags &= -3;
    }
    4096 & n && (e.flags &= -4097);
  }
  function Xt(e) {
    if (1024 & e.subtreeFlags) for (e = e.child; null !== e;) {
      var n = e;
      Xt(n), 5 === n.tag && 1024 & n.flags && ua(n.stateNode), e = e.sibling;
    }
  }
  function Zt(e, n) {
    if (8772 & n.subtreeFlags) for (n = n.child; null !== n;) Bt(e, n.alternate, n), n = n.sibling;
  }
  function er(e) {
    for (e = e.child; null !== e;) {
      var n = e;
      switch (n.tag) {
        case 0:
        case 11:
        case 14:
        case 15:
          It(4, n, n.return), er(n);
          break;
        case 1:
          Ht(n, n.return);
          var t = n.stateNode;
          "function" == typeof t.componentWillUnmount && Ft(n, n.return, t), er(n);
          break;
        case 26:
        case 27:
        case 5:
          Ht(n, n.return), er(n);
          break;
        case 22:
          Ht(n, n.return), null === n.memoizedState && er(n);
          break;
        default:
          er(n);
      }
      e = e.sibling;
    }
  }
  function nr(e, n, t) {
    for (t = t && 0 != (8772 & n.subtreeFlags), n = n.child; null !== n;) {
      var r = n.alternate,
        l = e,
        a = n,
        o = a.flags;
      switch (a.tag) {
        case 0:
        case 11:
        case 15:
          nr(l, a, t), Ut(4, a);
          break;
        case 1:
          if (nr(l, a, t), "function" == typeof (l = (r = a).stateNode).componentDidMount) try {
            l.componentDidMount();
          } catch (e) {
            Ar(r, r.return, e);
          }
          if (null !== (l = (r = a).updateQueue)) {
            var u = r.stateNode;
            try {
              var i = l.shared.hiddenCallbacks;
              if (null !== i) for (l.shared.hiddenCallbacks = null, l = 0; l < i.length; l++) ne(i[l], u);
            } catch (e) {
              Ar(r, r.return, e);
            }
          }
          t && 64 & o && Dt(a), Mt(a, a.return);
          break;
        case 26:
        case 27:
        case 5:
          nr(l, a, t), t && null === r && 4 & o && jt(a), Mt(a, a.return);
          break;
        case 12:
        case 13:
        default:
          nr(l, a, t);
          break;
        case 22:
          null === a.memoizedState && nr(l, a, t), Mt(a, a.return);
      }
      n = n.sibling;
    }
  }
  function tr(e, n) {
    var t = null;
    null !== e && null !== e.memoizedState && null !== e.memoizedState.cachePool && (t = e.memoizedState.cachePool.pool), e = null, null !== n.memoizedState && null !== n.memoizedState.cachePool && (e = n.memoizedState.cachePool.pool), e !== t && (null != e && e.refCount++, null != t && wt(t));
  }
  function rr(e, n) {
    e = null, null !== n.alternate && (e = n.alternate.memoizedState.cache), (n = n.memoizedState.cache) !== e && (n.refCount++, null != e && wt(e));
  }
  function lr(e, n, t, r) {
    if (10256 & n.subtreeFlags) for (n = n.child; null !== n;) ar(e, n, t, r), n = n.sibling;
  }
  function ar(e, n, t, r) {
    var l = n.flags;
    switch (n.tag) {
      case 0:
      case 11:
      case 15:
        lr(e, n, t, r), 2048 & l && Ut(9, n);
        break;
      case 3:
        lr(e, n, t, r), 2048 & l && (e = null, null !== n.alternate && (e = n.alternate.memoizedState.cache), (n = n.memoizedState.cache) !== e && (n.refCount++, null != e && wt(e)));
        break;
      case 12:
        if (2048 & l) {
          lr(e, n, t, r), e = n.stateNode;
          try {
            var a = n.memoizedProps,
              o = a.id,
              u = a.onPostCommit;
            "function" == typeof u && u(o, null === n.alternate ? "mount" : "update", e.passiveEffectDuration, -0);
          } catch (e) {
            Ar(n, n.return, e);
          }
        } else lr(e, n, t, r);
        break;
      case 23:
        break;
      case 22:
        a = n.stateNode, null !== n.memoizedState ? 4 & a._visibility ? lr(e, n, t, r) : ur(e, n) : 4 & a._visibility ? lr(e, n, t, r) : (a._visibility |= 4, or(e, n, t, r, 0 != (10256 & n.subtreeFlags))), 2048 & l && tr(n.alternate, n);
        break;
      case 24:
        lr(e, n, t, r), 2048 & l && rr(n.alternate, n);
        break;
      default:
        lr(e, n, t, r);
    }
  }
  function or(e, n, t, r, l) {
    for (l = l && 0 != (10256 & n.subtreeFlags), n = n.child; null !== n;) {
      var a = e,
        o = n,
        u = t,
        i = r,
        s = o.flags;
      switch (o.tag) {
        case 0:
        case 11:
        case 15:
          or(a, o, u, i, l), Ut(8, o);
          break;
        case 23:
          break;
        case 22:
          var c = o.stateNode;
          null !== o.memoizedState ? 4 & c._visibility ? or(a, o, u, i, l) : ur(a, o) : (c._visibility |= 4, or(a, o, u, i, l)), l && 2048 & s && tr(o.alternate, o);
          break;
        case 24:
          or(a, o, u, i, l), l && 2048 & s && rr(o.alternate, o);
          break;
        default:
          or(a, o, u, i, l);
      }
      n = n.sibling;
    }
  }
  function ur(e, n) {
    if (10256 & n.subtreeFlags) for (n = n.child; null !== n;) {
      var t = e,
        r = n,
        l = r.flags;
      switch (r.tag) {
        case 22:
          ur(t, r), 2048 & l && tr(r.alternate, r);
          break;
        case 24:
          ur(t, r), 2048 & l && rr(r.alternate, r);
          break;
        default:
          ur(t, r);
      }
      n = n.sibling;
    }
  }
  function ir(e) {
    if (e.subtreeFlags & Mu) for (e = e.child; null !== e;) sr(e), e = e.sibling;
  }
  function sr(e) {
    switch (e.tag) {
      case 26:
        ir(e), e.flags & Mu && (null !== e.memoizedState ? Ma(Fu, e.memoizedState, e.memoizedProps) : ra(e.type, e.memoizedProps));
        break;
      case 5:
        ir(e), e.flags & Mu && ra(e.type, e.memoizedProps);
        break;
      case 3:
      case 4:
        var n;
        ir(e);
        break;
      case 22:
        null === e.memoizedState && (null !== (n = e.alternate) && null !== n.memoizedState ? (n = Mu, Mu = 16777216, ir(e), Mu = n) : ir(e));
        break;
      default:
        ir(e);
    }
  }
  function cr(e) {
    var n = e.alternate;
    if (null !== n && null !== (e = n.child)) {
      n.child = null;
      do {
        n = e.sibling, e.sibling = null, e = n;
      } while (null !== e);
    }
  }
  function fr(e) {
    var n = e.deletions;
    if (0 != (16 & e.flags)) {
      if (null !== n) for (var t = 0; t < n.length; t++) {
        var r = n[t];
        Lu = r, mr(r, e);
      }
      cr(e);
    }
    if (10256 & e.subtreeFlags) for (e = e.child; null !== e;) dr(e), e = e.sibling;
  }
  function dr(e) {
    switch (e.tag) {
      case 0:
      case 11:
      case 15:
        fr(e), 2048 & e.flags && It(9, e, e.return);
        break;
      case 3:
      case 12:
      default:
        fr(e);
        break;
      case 22:
        var n = e.stateNode;
        null !== e.memoizedState && 4 & n._visibility && (null === e.return || 13 !== e.return.tag) ? (n._visibility &= -5, pr(e)) : fr(e);
    }
  }
  function pr(e) {
    var n = e.deletions;
    if (0 != (16 & e.flags)) {
      if (null !== n) for (var t = 0; t < n.length; t++) {
        var r = n[t];
        Lu = r, mr(r, e);
      }
      cr(e);
    }
    for (e = e.child; null !== e;) {
      switch ((n = e).tag) {
        case 0:
        case 11:
        case 15:
          It(8, n, n.return), pr(n);
          break;
        case 22:
          4 & (t = n.stateNode)._visibility && (t._visibility &= -5, pr(n));
          break;
        default:
          pr(n);
      }
      e = e.sibling;
    }
  }
  function mr(e, n) {
    for (; null !== Lu;) {
      var t = Lu;
      switch (t.tag) {
        case 0:
        case 11:
        case 15:
          It(8, t, n);
          break;
        case 23:
        case 22:
          if (null !== t.memoizedState && null !== t.memoizedState.cachePool) {
            var r = t.memoizedState.cachePool.pool;
            null != r && r.refCount++;
          }
          break;
        case 24:
          wt(t.memoizedState.cache);
      }
      if (null !== (r = t.child)) r.return = t, Lu = r;else e: for (t = e; null !== Lu;) {
        var l = (r = Lu).sibling,
          a = r.return;
        if (Vt(r), r === t) {
          Lu = null;
          break e;
        }
        if (null !== l) {
          l.return = a, Lu = l;
          break e;
        }
        Lu = a;
      }
    }
  }
  function hr() {
    return 0 != (2 & Ou) && 0 !== Bu ? Bu & -Bu : null !== Rl.T ? 0 !== Io ? Io : V() : Kl();
  }
  function gr() {
    0 === ei && (ei = 0 == (536870912 & Bu) || vo ? y() : 536870912);
    var e = Jo.current;
    return null !== e && (e.flags |= 32), ei;
  }
  function yr(e, n, t) {
    (e === Au && 2 === Vu || null !== e.cancelPendingCommit) && (zr(e, 0), wr(e, Bu, ei)), S(e, t), 0 != (2 & Ou) && e === Au || (e === Au && (0 == (2 & Ou) && (Xu |= t), 4 === Gu && wr(e, Bu, ei)), j(e));
  }
  function br(e, n, t) {
    if (0 != (6 & Ou)) throw Error(r(327));
    var l = (t = !t && 0 == (60 & n) && 0 == (n & e.expiredLanes)) ? function (e, n) {
      var t = Ou;
      Ou |= 2;
      var l = Er(),
        a = _r();
      Au === e && Bu === n || (ui = null, oi = Ka() + 500, zr(e, n));
      e: for (;;) try {
        if (0 !== Vu && null !== Qu) {
          n = Qu;
          var o = $u;
          n: switch (Vu) {
            case 1:
            case 6:
              Vu = 0, $u = null, Dr(e, n, o);
              break;
            case 2:
              if (le(o)) {
                Vu = 0, $u = null, Ir(n);
                break;
              }
              n = function () {
                2 === Vu && Au === e && (Vu = 7), j(e);
              }, o.then(n, n);
              break e;
            case 3:
              Vu = 7;
              break e;
            case 4:
              Vu = 5;
              break e;
            case 7:
              le(o) ? (Vu = 0, $u = null, Ir(n)) : (Vu = 0, $u = null, Dr(e, n, o));
              break;
            case 5:
              var u = null;
              switch (Qu.tag) {
                case 26:
                  u = Qu.memoizedState;
                case 5:
                case 27:
                  var i = Qu,
                    s = i.type,
                    c = i.pendingProps;
                  if (u ? Fa(u) : na(s, c)) {
                    Vu = 0, $u = null;
                    var f = i.sibling;
                    if (null !== f) Qu = f;else {
                      var d = i.return;
                      null !== d ? (Qu = d, Fr(d)) : Qu = null;
                    }
                    break n;
                  }
              }
              Vu = 0, $u = null, Dr(e, n, o);
              break;
            case 8:
              xr(), Gu = 6;
              break e;
            default:
              throw Error(r(462));
          }
        }
        Lr();
        break;
      } catch (n) {
        Cr(e, n);
      }
      return ct(), Rl.H = l, Rl.A = a, Ou = t, null !== Qu ? 0 : (Au = null, Bu = 0, U(), Gu);
    }(e, n) : Tr(e, n);
    if (0 !== l) for (var a = t;;) {
      if (6 === l) wr(e, n, 0);else {
        if (t = e.current.alternate, a && !kr(t)) {
          l = Tr(e, n), a = !1;
          continue;
        }
        if (2 === l) {
          if (a = n, e.errorRecoveryDisabledLanes & a) var o = 0;else o = 0 != (o = -536870913 & e.pendingLanes) ? o : 536870912 & o ? 536870912 : 0;
          if (0 !== o) {
            n = o;
            e: {
              var u = e;
              l = ti;
              var i = ql;
              if (i && (zr(u, o).flags |= 256), 2 !== (o = Tr(u, o))) {
                if (Yu && !i) {
                  u.errorRecoveryDisabledLanes |= a, Xu |= a, l = 4;
                  break e;
                }
                a = ri, ri = l, null !== a && vr(a);
              }
              l = o;
            }
            if (a = !1, 2 !== l) continue;
          }
        }
        if (1 === l) {
          zr(e, 0), wr(e, n, 0);
          break;
        }
        e: {
          switch (a = e, l) {
            case 0:
            case 1:
              throw Error(r(345));
            case 4:
              if ((4194176 & n) === n) {
                wr(a, n, ei);
                break e;
              }
              break;
            case 2:
              ri = null;
              break;
            case 3:
            case 5:
              break;
            default:
              throw Error(r(329));
          }
          if (a.finishedWork = t, a.finishedLanes = n, (62914560 & n) === n && 10 < (l = ai + 300 - Ka())) {
            if (wr(a, n, ei), 0 !== h(a, 0)) break e;
            a.timeoutHandle = Al(Sr.bind(null, a, t, ri, ui, li, n, ei, Xu, ni, qu, 2, -0, 0), l);
          } else Sr(a, t, ri, ui, li, n, ei, Xu, ni, qu, 0, -0, 0);
        }
      }
      break;
    }
    j(e);
  }
  function vr(e) {
    null === ri ? ri = e : ri.push.apply(ri, e);
  }
  function Sr(e, n, t, r, l, a, o, u, i, s, c, f, d) {
    if ((8192 & (s = n.subtreeFlags) || 16785408 == (16785408 & s)) && (ta(), sr(n), null !== (n = la()))) return e.cancelPendingCommit = n(Hr.bind(null, e, t, r, l, o, u, i, 1, f, d)), void wr(e, a, o);
    Hr(e, t, r, l, o);
  }
  function kr(e) {
    for (var n = e;;) {
      var t = n.tag;
      if ((0 === t || 11 === t || 15 === t) && 16384 & n.flags && null !== (t = n.updateQueue) && null !== (t = t.stores)) for (var r = 0; r < t.length; r++) {
        var l = t[r],
          a = l.getSnapshot;
        l = l.value;
        try {
          if (!ao(a(), l)) return !1;
        } catch (e) {
          return !1;
        }
      }
      if (t = n.child, 16384 & n.subtreeFlags && null !== t) t.return = n, n = t;else {
        if (n === e) break;
        for (; null === n.sibling;) {
          if (null === n.return || n.return === e) return !0;
          n = n.return;
        }
        n.sibling.return = n.return, n = n.sibling;
      }
    }
    return !0;
  }
  function wr(e, n, t) {
    n &= ~Zu, n &= ~Xu, e.suspendedLanes |= n, e.pingedLanes &= ~n;
    for (var r = e.expirationTimes, l = n; 0 < l;) {
      var a = 31 - Aa(l),
        o = 1 << a;
      r[a] = -1, l &= ~o;
    }
    0 !== t && k(e, t, n);
  }
  function xr() {
    if (null !== Qu) {
      if (0 === Vu) var e = Qu.return;else e = Qu, ct(), Re(e), Qo = null, Bo = 0, e = Qu;
      for (; null !== e;) Lt(e.alternate, e), e = e.return;
      Qu = null;
    }
  }
  function zr(e, n) {
    e.finishedWork = null, e.finishedLanes = 0;
    var t = e.timeoutHandle;
    t !== Bl && (e.timeoutHandle = Bl, Ql(t)), null !== (t = e.cancelPendingCommit) && (e.cancelPendingCommit = null, t()), xr(), Au = e, Qu = t = Gr(e.current, null), Bu = n, Vu = 0, $u = null, Yu = qu = !1, ni = ei = Zu = Xu = Ku = Gu = 0, ri = ti = null, li = !1, 0 != (8 & n) && (n |= 32 & n);
    var r = e.entangledLanes;
    if (0 !== r) for (e = e.entanglements, r &= n; 0 < r;) {
      var l = 31 - Aa(r),
        a = 1 << l;
      n |= e[l], r &= ~a;
    }
    return Ju = n, U(), t;
  }
  function Cr(e, n) {
    Zo = null, Rl.H = cu, n === jo ? (n = ue(), Vu = Pr() && 0 == (134217727 & Ku) && 0 == (134217727 & Xu) ? 2 : 3) : n === Wo ? (n = ue(), Vu = 4) : Vu = n === hu ? 8 : null !== n && "object" == typeof n && "function" == typeof n.then ? 6 : 1, $u = n, null === Qu && (Gu = 1, Mn(e, C(n, e.current)));
  }
  function Pr() {
    var e = Jo.current;
    return null === e || ((4194176 & Bu) === Bu ? null === Go : ((62914560 & Bu) === Bu || 0 != (536870912 & Bu)) && e === Go);
  }
  function Er() {
    var e = Rl.H;
    return Rl.H = cu, null === e ? cu : e;
  }
  function _r() {
    var e = Rl.A;
    return Rl.A = Hu, e;
  }
  function Rr() {
    Gu = 4, 0 == (134217727 & Ku) && 0 == (134217727 & Xu) || null === Au || wr(Au, Bu, ei);
  }
  function Tr(e, n) {
    var t = Ou;
    Ou |= 2;
    var l = Er(),
      a = _r();
    Au === e && Bu === n || (ui = null, zr(e, n)), n = !1;
    e: for (;;) try {
      if (0 !== Vu && null !== Qu) {
        var o = Qu,
          u = $u;
        switch (Vu) {
          case 8:
            xr(), Gu = 6;
            break e;
          case 3:
          case 2:
            n || null !== Jo.current || (n = !0);
          default:
            Vu = 0, $u = null, Dr(e, o, u);
        }
      }
      Nr();
      break;
    } catch (n) {
      Cr(e, n);
    }
    if (n && e.shellSuspendCounter++, ct(), Ou = t, Rl.H = l, Rl.A = a, null !== Qu) throw Error(r(261));
    return Au = null, Bu = 0, U(), Gu;
  }
  function Nr() {
    for (; null !== Qu;) Ur(Qu);
  }
  function Lr() {
    for (; null !== Qu && !Ja();) Ur(Qu);
  }
  function Ur(e) {
    var n = st(e.alternate, e, Ju);
    e.memoizedProps = e.pendingProps, null === n ? Fr(e) : Qu = n;
  }
  function Ir(e) {
    var n = e,
      t = n.alternate;
    switch (n.tag) {
      case 15:
      case 0:
        n = Gn(t, n, n.pendingProps, n.type, void 0, Bu);
        break;
      case 11:
        n = Gn(t, n, n.pendingProps, n.type.render, n.ref, Bu);
        break;
      case 5:
        Re(n);
      default:
        Lt(t, n), n = st(t, n = Qu = Kr(n, Ju), Ju);
    }
    e.memoizedProps = e.pendingProps, null === n ? Fr(e) : Qu = n;
  }
  function Dr(e, n, t) {
    ct(), Re(n), Qo = null, Bo = 0;
    var l = n.return;
    try {
      if (function (e, n, t, l, a) {
        if (t.flags |= 32768, null !== l && "object" == typeof l && "function" == typeof l.then) {
          if (null !== (n = t.alternate) && ht(n, t, a, !0), null !== (t = Jo.current)) {
            switch (t.tag) {
              case 13:
                return null === Go ? Rr() : null === t.alternate && 0 === Gu && (Gu = 3), t.flags &= -257, t.flags |= 65536, t.lanes = a, l === Oo ? t.flags |= 16384 : (null === (n = t.updateQueue) ? t.updateQueue = new Set([l]) : n.add(l), Qr(e, l, a)), !1;
              case 22:
                return t.flags |= 65536, l === Oo ? t.flags |= 16384 : (null === (n = t.updateQueue) ? (n = {
                  transitions: null,
                  markerInstances: null,
                  retryQueue: new Set([l])
                }, t.updateQueue = n) : null === (t = n.retryQueue) ? n.retryQueue = new Set([l]) : t.add(l), Qr(e, l, a)), !1;
            }
            throw Error(r(435, t.tag));
          }
          return Qr(e, l, a), Rr(), !1;
        }
        var o = Error(r(520), {
          cause: l
        });
        if (o = C(o, t), null === ti ? ti = [o] : ti.push(o), 4 !== Gu && (Gu = 2), null === n) return !0;
        l = C(l, t), t = n;
        do {
          switch (t.tag) {
            case 3:
              return t.flags |= 65536, e = a & -a, t.lanes |= e, X(t, e = jn(t.stateNode, l, e)), !1;
            case 1:
              if (n = t.type, o = t.stateNode, 0 == (128 & t.flags) && ("function" == typeof n.getDerivedStateFromError || null !== o && "function" == typeof o.componentDidCatch && (null === ii || !ii.has(o)))) return t.flags |= 65536, a &= -a, t.lanes |= a, On(a = Wn(a), e, t, l), X(t, a), !1;
          }
          t = t.return;
        } while (null !== t);
        return !1;
      }(e, l, n, t, Bu)) return Gu = 1, Mn(e, C(t, e.current)), void (Qu = null);
    } catch (n) {
      if (null !== l) throw Qu = l, n;
      return Gu = 1, Mn(e, C(t, e.current)), void (Qu = null);
    }
    32768 & n.flags ? Mr(n, !0) : Fr(n);
  }
  function Fr(e) {
    var n = e;
    do {
      if (0 != (32768 & n.flags)) return void Mr(n, qu);
      e = n.return;
      var t = Tt(n.alternate, n, Ju);
      if (null !== t) return void (Qu = t);
      if (null !== (n = n.sibling)) return void (Qu = n);
      Qu = n = e;
    } while (null !== n);
    0 === Gu && (Gu = 5);
  }
  function Mr(e, n) {
    do {
      var t = Nt(e.alternate, e);
      if (null !== t) return t.flags &= 32767, void (Qu = t);
      if (null !== (t = e.return) && (t.flags |= 32768, t.subtreeFlags = 0, t.deletions = null), !n && null !== (e = e.sibling)) return void (Qu = e);
      Qu = e = t;
    } while (null !== e);
    Gu = 6, Qu = null;
  }
  function Hr(e, n, t, l, a, o, u, i, s, c) {
    var f = Rl.T,
      d = Gl();
    try {
      Jl(2), Rl.T = null, function (e, n, t, l, a, o) {
        do {
          Wr();
        } while (null !== ci);
        if (0 != (6 & Ou)) throw Error(r(327));
        var u = e.finishedWork;
        if (l = e.finishedLanes, null === u) return null;
        if (e.finishedWork = null, e.finishedLanes = 0, u === e.current) throw Error(r(177));
        e.callbackNode = null, e.callbackPriority = 0, e.cancelPendingCommit = null;
        var i = u.lanes | u.childLanes;
        if (function (e, n, t, r) {
          var l = e.pendingLanes;
          e.pendingLanes = t, e.suspendedLanes = 0, e.pingedLanes = 0, e.warmLanes = 0, e.expiredLanes &= t, e.entangledLanes &= t, e.errorRecoveryDisabledLanes &= t, e.shellSuspendCounter = 0, n = e.entanglements;
          var a = e.expirationTimes,
            o = e.hiddenUpdates;
          for (t = l & ~t; 0 < t;) {
            var u = 31 - Aa(t);
            l = 1 << u, n[u] = 0, a[u] = -1;
            var i = o[u];
            if (null !== i) for (o[u] = null, u = 0; u < i.length; u++) {
              var s = i[u];
              null !== s && (s.lane &= -536870913);
            }
            t &= ~l;
          }
          0 !== r && k(e, r, 0);
        }(e, l, i |= Co, o), e === Au && (Qu = Au = null, Bu = 0), 0 == (10256 & u.subtreeFlags) && 0 == (10256 & u.flags) || si || (si = !0, di = i, pi = t, qa(eo, function () {
          return Wr(), null;
        })), t = 0 != (15990 & u.flags), 0 != (15990 & u.subtreeFlags) || t) {
          t = Rl.T, Rl.T = null, o = Gl(), Jl(2);
          var s = Ou;
          Ou |= 4, function (e, n) {
            for (Dl(e.containerInfo), Lu = n; null !== Lu;) if (n = (e = Lu).child, 0 != (1028 & e.subtreeFlags) && null !== n) n.return = e, Lu = n;else for (; null !== Lu;) {
              var t = (e = Lu).alternate;
              switch (n = e.flags, e.tag) {
                case 0:
                case 11:
                case 15:
                case 5:
                case 26:
                case 27:
                case 6:
                case 4:
                case 17:
                  break;
                case 1:
                  if (0 != (1024 & n) && null !== t) {
                    n = void 0;
                    var l = e,
                      a = t.memoizedProps;
                    t = t.memoizedState;
                    var o = l.stateNode;
                    try {
                      var u = Fn(l.type, a, (l.elementType, l.type));
                      n = o.getSnapshotBeforeUpdate(u, t), o.__reactInternalSnapshotBeforeUpdate = n;
                    } catch (e) {
                      Ar(l, l.return, e);
                    }
                  }
                  break;
                case 3:
                  0 != (1024 & n) && Vl && wa(e.stateNode.containerInfo);
                  break;
                default:
                  if (0 != (1024 & n)) throw Error(r(163));
              }
              if (null !== (n = e.sibling)) {
                n.return = e.return, Lu = n;
                break;
              }
              Lu = e.return;
            }
            u = Uu, Uu = !1;
          }(e, u), Gt(u, e), Fl(e.containerInfo), e.current = u, Bt(e, u.alternate, u), Ga(), Ou = s, Jl(o), Rl.T = t;
        } else e.current = u;
        if (si ? (si = !1, ci = e, fi = l) : jr(e, i), 0 === (i = e.pendingLanes) && (ii = null), u.stateNode, j(e), null !== n) for (a = e.onRecoverableError, u = 0; u < n.length; u++) a((i = n[u]).value, {
          componentStack: i.stack
        });
        0 != (3 & fi) && Wr(), i = e.pendingLanes, 0 != (4194218 & l) && 0 != (42 & i) ? e === hi ? mi++ : (mi = 0, hi = e) : mi = 0, W(0);
      }(e, n, t, l, d, a);
    } finally {
      Rl.T = f, Jl(d);
    }
  }
  function jr(e, n) {
    0 == (e.pooledCacheLanes &= n) && null != (n = e.pooledCache) && (e.pooledCache = null, wt(n));
  }
  function Wr() {
    if (null !== ci) {
      var e = ci,
        n = di;
      di = 0;
      var t = x(fi),
        l = 32 > t ? 32 : t;
      t = Rl.T;
      var a = Gl();
      try {
        if (Jl(l), Rl.T = null, null === ci) var o = !1;else {
          l = pi, pi = null;
          var u = ci,
            i = fi;
          if (ci = null, fi = 0, 0 != (6 & Ou)) throw Error(r(331));
          var s = Ou;
          Ou |= 4, dr(u.current), ar(u, u.current, i, l), Ou = s, W(0), lo && lo.onPostCommitFiberRoot, o = !0;
        }
        return o;
      } finally {
        Jl(a), Rl.T = t, jr(e, n);
      }
    }
    return !1;
  }
  function Or(e, n, t) {
    n = C(t, n), null !== (e = G(e, n = jn(e.stateNode, n, 2), 2)) && (S(e, 2), j(e));
  }
  function Ar(e, n, t) {
    if (3 === e.tag) Or(e, e, t);else for (; null !== n;) {
      if (3 === n.tag) {
        Or(n, e, t);
        break;
      }
      if (1 === n.tag) {
        var r = n.stateNode;
        if ("function" == typeof n.type.getDerivedStateFromError || "function" == typeof r.componentDidCatch && (null === ii || !ii.has(r))) {
          e = C(t, e), null !== (r = G(n, t = Wn(2), 2)) && (On(t, r, n, e), S(r, 2), j(r));
          break;
        }
      }
      n = n.return;
    }
  }
  function Qr(e, n, t) {
    var r = e.pingCache;
    if (null === r) {
      r = e.pingCache = new Wu();
      var l = new Set();
      r.set(n, l);
    } else void 0 === (l = r.get(n)) && (l = new Set(), r.set(n, l));
    l.has(t) || (Yu = !0, l.add(t), e = Br.bind(null, e, n, t), n.then(e, e));
  }
  function Br(e, n, t) {
    var r = e.pingCache;
    null !== r && r.delete(n), e.pingedLanes |= e.suspendedLanes & t, e.warmLanes &= ~t, Au === e && (Bu & t) === t && (4 === Gu || 3 === Gu && (62914560 & Bu) === Bu && 300 > Ka() - ai ? 0 == (2 & Ou) && zr(e, 0) : Zu |= t, ni === Bu && (ni = 0)), j(e);
  }
  function Vr(e, n) {
    0 === n && (n = b()), null !== (e = F(e, n)) && (S(e, n), j(e));
  }
  function $r(e) {
    var n = e.memoizedState,
      t = 0;
    null !== n && (t = n.retryLane), Vr(e, t);
  }
  function qr(e, n) {
    var t = 0;
    switch (e.tag) {
      case 13:
        var l = e.stateNode,
          a = e.memoizedState;
        null !== a && (t = a.retryLane);
        break;
      case 19:
        l = e.stateNode;
        break;
      case 22:
        l = e.stateNode._retryCache;
        break;
      default:
        throw Error(r(314));
    }
    null !== l && l.delete(n), Vr(e, t);
  }
  function Yr(e, n, t, r) {
    this.tag = e, this.key = t, this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null, this.index = 0, this.refCleanup = this.ref = null, this.pendingProps = n, this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null, this.mode = r, this.subtreeFlags = this.flags = 0, this.deletions = null, this.childLanes = this.lanes = 0, this.alternate = null;
  }
  function Jr(e) {
    return !(!(e = e.prototype) || !e.isReactComponent);
  }
  function Gr(e, n) {
    var r = e.alternate;
    return null === r ? ((r = t(e.tag, n, e.key, e.mode)).elementType = e.elementType, r.type = e.type, r.stateNode = e.stateNode, r.alternate = e, e.alternate = r) : (r.pendingProps = n, r.type = e.type, r.flags = 0, r.subtreeFlags = 0, r.deletions = null), r.flags = 31457280 & e.flags, r.childLanes = e.childLanes, r.lanes = e.lanes, r.child = e.child, r.memoizedProps = e.memoizedProps, r.memoizedState = e.memoizedState, r.updateQueue = e.updateQueue, n = e.dependencies, r.dependencies = null === n ? null : {
      lanes: n.lanes,
      firstContext: n.firstContext
    }, r.sibling = e.sibling, r.index = e.index, r.ref = e.ref, r.refCleanup = e.refCleanup, r;
  }
  function Kr(e, n) {
    e.flags &= 31457282;
    var t = e.alternate;
    return null === t ? (e.childLanes = 0, e.lanes = n, e.child = null, e.subtreeFlags = 0, e.memoizedProps = null, e.memoizedState = null, e.updateQueue = null, e.dependencies = null, e.stateNode = null) : (e.childLanes = t.childLanes, e.lanes = t.lanes, e.child = t.child, e.subtreeFlags = 0, e.deletions = null, e.memoizedProps = t.memoizedProps, e.memoizedState = t.memoizedState, e.updateQueue = t.updateQueue, e.type = t.type, n = t.dependencies, e.dependencies = null === n ? null : {
      lanes: n.lanes,
      firstContext: n.firstContext
    }), e;
  }
  function Xr(e, n, l, a, o, u) {
    var i = 0;
    if (a = e, "function" == typeof e) Jr(e) && (i = 1);else if ("string" == typeof e) i = 5;else e: switch (e) {
      case ml:
        return Zr(l.children, o, u, n);
      case hl:
        i = 8, o |= 24;
        break;
      case gl:
        return (e = t(12, l, n, 2 | o)).elementType = gl, e.lanes = u, e;
      case kl:
        return (e = t(13, l, n, o)).elementType = kl, e.lanes = u, e;
      case wl:
        return (e = t(19, l, n, o)).elementType = wl, e.lanes = u, e;
      case Cl:
        return el(l, o, u, n);
      default:
        if ("object" == typeof e && null !== e) switch (e.$$typeof) {
          case yl:
          case vl:
            i = 10;
            break e;
          case bl:
            i = 9;
            break e;
          case Sl:
            i = 11;
            break e;
          case xl:
            i = 14;
            break e;
          case zl:
            i = 16, a = null;
            break e;
        }
        i = 29, l = Error(r(130, null === e ? "null" : typeof e, "")), a = null;
    }
    return (n = t(i, l, n, o)).elementType = e, n.type = a, n.lanes = u, n;
  }
  function Zr(e, n, r, l) {
    return (e = t(7, e, l, n)).lanes = r, e;
  }
  function el(e, n, l, a) {
    (e = t(22, e, a, n)).elementType = Cl, e.lanes = l;
    var o = {
      _visibility: 1,
      _pendingVisibility: 1,
      _pendingMarkers: null,
      _retryCache: null,
      _transitions: null,
      _current: null,
      detach: function () {
        var e = o._current;
        if (null === e) throw Error(r(456));
        if (0 == (2 & o._pendingVisibility)) {
          var n = F(e, 2);
          null !== n && (o._pendingVisibility |= 2, yr(n, 0, 2));
        }
      },
      attach: function () {
        var e = o._current;
        if (null === e) throw Error(r(456));
        if (0 != (2 & o._pendingVisibility)) {
          var n = F(e, 2);
          null !== n && (o._pendingVisibility &= -3, yr(n, 0, 2));
        }
      }
    };
    return e.stateNode = o, e;
  }
  function nl(e, n, r) {
    return (e = t(6, e, null, n)).lanes = r, e;
  }
  function tl(e, n, r) {
    return (n = t(4, null !== e.children ? e.children : [], e.key, n)).lanes = r, n.stateNode = {
      containerInfo: e.containerInfo,
      pendingChildren: null,
      implementation: e.implementation
    }, n;
  }
  function rl(e, n, t, r, l, a, o, u) {
    this.tag = 1, this.containerInfo = e, this.finishedWork = this.pingCache = this.current = this.pendingChildren = null, this.timeoutHandle = Bl, this.callbackNode = this.next = this.pendingContext = this.context = this.cancelPendingCommit = null, this.callbackPriority = 0, this.expirationTimes = v(-1), this.entangledLanes = this.shellSuspendCounter = this.errorRecoveryDisabledLanes = this.finishedLanes = this.expiredLanes = this.warmLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0, this.entanglements = v(0), this.hiddenUpdates = v(null), this.identifierPrefix = r, this.onUncaughtError = l, this.onCaughtError = a, this.onRecoverableError = o, this.pooledCache = null, this.pooledCacheLanes = 0, this.formState = u, this.incompleteTransitions = new Map();
  }
  function ll(e, n, t, r, l, a) {
    l = function (e) {
      return e ? e = Oa : Oa;
    }(l), null === r.context ? r.context = l : r.pendingContext = l, (r = J(n)).payload = {
      element: t
    }, null !== (a = void 0 === a ? null : a) && (r.callback = a), null !== (t = G(e, r, n)) && (yr(t, 0, n), K(t, e, n));
  }
  var al,
    ol,
    ul = {},
    il = react,
    sl = u,
    cl = Object.assign,
    fl = Symbol.for("react.element"),
    dl = Symbol.for("react.transitional.element"),
    pl = Symbol.for("react.portal"),
    ml = Symbol.for("react.fragment"),
    hl = Symbol.for("react.strict_mode"),
    gl = Symbol.for("react.profiler"),
    yl = Symbol.for("react.provider"),
    bl = Symbol.for("react.consumer"),
    vl = Symbol.for("react.context"),
    Sl = Symbol.for("react.forward_ref"),
    kl = Symbol.for("react.suspense"),
    wl = Symbol.for("react.suspense_list"),
    xl = Symbol.for("react.memo"),
    zl = Symbol.for("react.lazy"),
    Cl = Symbol.for("react.offscreen"),
    Pl = Symbol.for("react.memo_cache_sentinel"),
    El = Symbol.iterator,
    _l = Symbol.for("react.client.reference"),
    Rl = il.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,
    Tl = !1,
    Nl = Array.isArray,
    Ll = n.getPublicInstance,
    Ul = n.getRootHostContext,
    Il = n.getChildHostContext,
    Dl = n.prepareForCommit,
    Fl = n.resetAfterCommit,
    Ml = n.createInstance,
    Hl = n.appendInitialChild,
    jl = n.finalizeInitialChildren,
    Wl = n.shouldSetTextContent,
    Ol = n.createTextInstance,
    Al = null,
    Ql = null,
    Bl = n.noTimeout,
    Vl = !0,
    $l = null,
    ql = null,
    Yl = null,
    Jl = n.setCurrentUpdatePriority,
    Gl = n.getCurrentUpdatePriority,
    Kl = n.resolveUpdatePriority,
    Xl = n.shouldAttemptEagerTransition,
    Zl = null;
  n.requestPostPaintCallback;
  var ea = n.maySuspendCommit,
    na = null,
    ta = null,
    ra = null,
    la = null,
    aa = null,
    oa = null,
    ua = null,
    ia = n.appendChild,
    sa = n.appendChildToContainer,
    ca = n.commitTextUpdate,
    fa = null,
    da = n.commitUpdate,
    pa = n.insertBefore,
    ma = null,
    ha = n.removeChild,
    ga = n.removeChildFromContainer,
    ya = n.resetTextContent,
    ba = null,
    va = null,
    Sa = null,
    ka = null,
    wa = n.clearContainer,
    xa = null,
    za = null,
    Ca = null,
    Pa = null,
    Ea = null,
    _a = null,
    Ra = null,
    Ta = null,
    Na = null,
    La = null,
    Ua = null,
    Ia = null,
    Da = null,
    Fa = null,
    Ma = null,
    Ha = null,
    ja = [],
    Wa = -1,
    Oa = {},
    Aa = Math.clz32 ? Math.clz32 : function (e) {
      return 0 == (e >>>= 0) ? 32 : 31 - (Qa(e) / Ba | 0) | 0;
    },
    Qa = Math.log,
    Ba = Math.LN2,
    Va = 128,
    $a = 4194304,
    qa = sl.unstable_scheduleCallback,
    Ya = sl.unstable_cancelCallback,
    Ja = sl.unstable_shouldYield,
    Ga = sl.unstable_requestPaint,
    Ka = sl.unstable_now,
    Xa = sl.unstable_ImmediatePriority,
    Za = sl.unstable_UserBlockingPriority,
    eo = sl.unstable_NormalPriority,
    no = sl.unstable_IdlePriority,
    to = sl.log,
    ro = sl.unstable_setDisableYieldValue,
    lo = null,
    ao = "function" == typeof Object.is ? Object.is : function (e, n) {
      return e === n && (0 !== e || 1 / e == 1 / n) || e != e && n != n;
    },
    oo = new WeakMap(),
    uo = [],
    io = 0,
    so = null,
    co = [],
    fo = 0,
    po = null,
    mo = f(null),
    ho = f(null),
    go = f(null),
    yo = f(null),
    bo = null,
    vo = !1,
    So = null,
    ko = !1,
    wo = Error(r(519)),
    xo = [],
    zo = 0,
    Co = 0,
    Po = null,
    Eo = null,
    _o = !1,
    Ro = !1,
    To = !1,
    No = 0,
    Lo = null,
    Uo = 0,
    Io = 0,
    Do = null,
    Fo = !1,
    Mo = !1,
    Ho = Object.prototype.hasOwnProperty,
    jo = Error(r(460)),
    Wo = Error(r(474)),
    Oo = {
      then: function () {}
    },
    Ao = null,
    Qo = null,
    Bo = 0,
    Vo = de(!0),
    $o = de(!1),
    qo = f(null),
    Yo = f(0),
    Jo = f(null),
    Go = null,
    Ko = f(0),
    Xo = 0,
    Zo = null,
    eu = null,
    nu = null,
    tu = !1,
    ru = !1,
    lu = !1,
    au = 0,
    ou = 0,
    uu = null,
    iu = 0,
    su = function () {
      return {
        lastEffect: null,
        events: null,
        stores: null,
        memoCache: null
      };
    },
    cu = {
      readContext: bt,
      use: Ue,
      useCallback: ke,
      useContext: ke,
      useEffect: ke,
      useImperativeHandle: ke,
      useLayoutEffect: ke,
      useInsertionEffect: ke,
      useMemo: ke,
      useReducer: ke,
      useRef: ke,
      useState: ke,
      useDebugValue: ke,
      useDeferredValue: ke,
      useTransition: ke,
      useSyncExternalStore: ke,
      useId: ke
    };
  cu.useCacheRefresh = ke, cu.useMemoCache = ke, cu.useHostTransitionStatus = ke, cu.useFormState = ke, cu.useActionState = ke, cu.useOptimistic = ke;
  var fu = {
    readContext: bt,
    use: Ue,
    useCallback: function (e, n) {
      return Te().memoizedState = [e, void 0 === n ? null : n], e;
    },
    useContext: bt,
    useEffect: cn,
    useImperativeHandle: function (e, n, t) {
      t = null != t ? t.concat([e]) : null, un(4194308, 4, mn.bind(null, n, e), t);
    },
    useLayoutEffect: function (e, n) {
      return un(4194308, 4, e, n);
    },
    useInsertionEffect: function (e, n) {
      un(4, 2, e, n);
    },
    useMemo: function (e, n) {
      var t = Te();
      n = void 0 === n ? null : n;
      var r = e();
      if (lu) {
        z(!0);
        try {
          e();
        } finally {
          z(!1);
        }
      }
      return t.memoizedState = [r, n], r;
    },
    useReducer: function (e, n, t) {
      var r = Te();
      if (void 0 !== t) {
        var l = t(n);
        if (lu) {
          z(!0);
          try {
            t(n);
          } finally {
            z(!1);
          }
        }
      } else l = n;
      return r.memoizedState = r.baseState = l, e = {
        pending: null,
        lanes: 0,
        dispatch: null,
        lastRenderedReducer: e,
        lastRenderedState: l
      }, r.queue = e, e = e.dispatch = Pn.bind(null, Zo, e), [r.memoizedState, e];
    },
    useRef: function (e) {
      return e = {
        current: e
      }, Te().memoizedState = e;
    },
    useState: function (e) {
      var n = (e = Ve(e)).queue,
        t = En.bind(null, Zo, n);
      return n.dispatch = t, [e.memoizedState, t];
    },
    useDebugValue: gn,
    useDeferredValue: function (e, n) {
      return vn(Te(), e, n);
    },
    useTransition: function () {
      var e = Ve(!1);
      return e = kn.bind(null, Zo, e.queue, !0, !1), Te().memoizedState = e, [!1, e];
    },
    useSyncExternalStore: function (e, n, t) {
      var l = Zo,
        a = Te();
      if (t = n(), null === Au) throw Error(r(349));
      0 != (60 & Bu) || We(l, n, t), a.memoizedState = t;
      var o = {
        value: t,
        getSnapshot: n
      };
      return a.queue = o, cn(Ae.bind(null, l, o, e), [e]), l.flags |= 2048, an(9, Oe.bind(null, l, o, t, n), {
        destroy: void 0
      }, null), t;
    },
    useId: function () {
      var e = Te(),
        n = Au.identifierPrefix;
      return n = ":" + n + "r" + (iu++).toString(32) + ":", e.memoizedState = n;
    },
    useCacheRefresh: function () {
      return Te().memoizedState = Cn.bind(null, Zo);
    }
  };
  fu.useMemoCache = Ie, fu.useHostTransitionStatus = wn, fu.useFormState = en, fu.useActionState = en, fu.useOptimistic = function (e) {
    var n = Te();
    n.memoizedState = n.baseState = e;
    var t = {
      pending: null,
      lanes: 0,
      dispatch: null,
      lastRenderedReducer: null,
      lastRenderedState: null
    };
    return n.queue = t, n = Rn.bind(null, Zo, !0, t), t.dispatch = n, [e, n];
  };
  var du = {
    readContext: bt,
    use: Ue,
    useCallback: yn,
    useContext: bt,
    useEffect: fn,
    useImperativeHandle: hn,
    useInsertionEffect: dn,
    useLayoutEffect: pn,
    useMemo: bn,
    useReducer: Fe,
    useRef: on,
    useState: function () {
      return Fe(De);
    },
    useDebugValue: gn,
    useDeferredValue: function (e, n) {
      return Sn(Ne(), eu.memoizedState, e, n);
    },
    useTransition: function () {
      var e = Fe(De)[0],
        n = Ne().memoizedState;
      return ["boolean" == typeof e ? e : Le(e), n];
    },
    useSyncExternalStore: je,
    useId: xn
  };
  du.useCacheRefresh = zn, du.useMemoCache = Ie, du.useHostTransitionStatus = wn, du.useFormState = nn, du.useActionState = nn, du.useOptimistic = function (e, n) {
    return $e(Ne(), 0, e, n);
  };
  var pu = {
    readContext: bt,
    use: Ue,
    useCallback: yn,
    useContext: bt,
    useEffect: fn,
    useImperativeHandle: hn,
    useInsertionEffect: dn,
    useLayoutEffect: pn,
    useMemo: bn,
    useReducer: He,
    useRef: on,
    useState: function () {
      return He(De);
    },
    useDebugValue: gn,
    useDeferredValue: function (e, n) {
      var t = Ne();
      return null === eu ? vn(t, e, n) : Sn(t, eu.memoizedState, e, n);
    },
    useTransition: function () {
      var e = He(De)[0],
        n = Ne().memoizedState;
      return ["boolean" == typeof e ? e : Le(e), n];
    },
    useSyncExternalStore: je,
    useId: xn
  };
  pu.useCacheRefresh = zn, pu.useMemoCache = Ie, pu.useHostTransitionStatus = wn, pu.useFormState = ln, pu.useActionState = ln, pu.useOptimistic = function (e, n) {
    var t = Ne();
    return null !== eu ? $e(t, 0, e, n) : (t.baseState = e, [e, t.queue.dispatch]);
  };
  var mu = {
    isMounted: function (e) {
      return !!(e = e._reactInternals) && function (e) {
        var n = e,
          t = e;
        if (e.alternate) for (; n.return;) n = n.return;else {
          e = n;
          do {
            0 != (4098 & (n = e).flags) && (t = n.return), e = n.return;
          } while (e);
        }
        return 3 === n.tag ? t : null;
      }(e) === e;
    },
    enqueueSetState: function (e, n, t) {
      e = e._reactInternals;
      var r = hr(),
        l = J(r);
      l.payload = n, null != t && (l.callback = t), null !== (n = G(e, l, r)) && (yr(n, 0, r), K(n, e, r));
    },
    enqueueReplaceState: function (e, n, t) {
      e = e._reactInternals;
      var r = hr(),
        l = J(r);
      l.tag = 1, l.payload = n, null != t && (l.callback = t), null !== (n = G(e, l, r)) && (yr(n, 0, r), K(n, e, r));
    },
    enqueueForceUpdate: function (e, n) {
      e = e._reactInternals;
      var t = hr(),
        r = J(t);
      r.tag = 2, null != n && (r.callback = n), null !== (n = G(e, r, t)) && (yr(n, 0, t), K(n, e, t));
    }
  };
  "function" == typeof reportError && reportError;
  var hu = Error(r(461)),
    gu = !1,
    yu = {
      dehydrated: null,
      treeContext: null,
      retryLane: 0
    },
    bu = f(null),
    vu = null,
    Su = null,
    ku = null,
    wu = "undefined" != typeof AbortController ? AbortController : function () {
      var e = [],
        n = this.signal = {
          aborted: !1,
          addEventListener: function (n, t) {
            e.push(t);
          }
        };
      this.abort = function () {
        n.aborted = !0, e.forEach(function (e) {
          return e();
        });
      };
    },
    xu = sl.unstable_scheduleCallback,
    zu = sl.unstable_NormalPriority,
    Cu = {
      $$typeof: vl,
      Consumer: null,
      Provider: null,
      _currentValue: null,
      _currentValue2: null,
      _threadCount: 0
    },
    Pu = Rl.S;
  Rl.S = function (e, n) {
    "object" == typeof n && null !== n && "function" == typeof n.then && function (e, n) {
      if (null === Lo) {
        var t = Lo = [];
        Uo = 0, Io = V(), Do = {
          status: "pending",
          value: void 0,
          then: function (e) {
            t.push(e);
          }
        };
      }
      Uo++, n.then($, $);
    }(0, n), null !== Pu && Pu(e, n);
  };
  var Eu = f(null),
    _u = !1,
    Ru = !1,
    Tu = !1,
    Nu = "function" == typeof WeakSet ? WeakSet : Set,
    Lu = null,
    Uu = !1,
    Iu = null,
    Du = !1,
    Fu = null,
    Mu = 8192,
    Hu = {
      getCacheForType: function (e) {
        var n = bt(Cu),
          t = n.data.get(e);
        return void 0 === t && (t = e(), n.data.set(e, t)), t;
      }
    };
  if ("function" == typeof Symbol && Symbol.for) {
    var ju = Symbol.for;
    ju("selector.component"), ju("selector.has_pseudo_class"), ju("selector.role"), ju("selector.test_id"), ju("selector.text");
  }
  var Wu = "function" == typeof WeakMap ? WeakMap : Map,
    Ou = 0,
    Au = null,
    Qu = null,
    Bu = 0,
    Vu = 0,
    $u = null,
    qu = !1,
    Yu = !1,
    Ju = 0,
    Gu = 0,
    Ku = 0,
    Xu = 0,
    Zu = 0,
    ei = 0,
    ni = 0,
    ti = null,
    ri = null,
    li = !1,
    ai = 0,
    oi = 1 / 0,
    ui = null,
    ii = null,
    si = !1,
    ci = null,
    fi = 0,
    di = 0,
    pi = null,
    mi = 0,
    hi = null;
  return ul.createContainer = function (e, n, r, l, a, o, u, i, s, c) {
    return function (e, n, r, l, a, o, u, i, s, c, f, d) {
      return e = new rl(e, n, r, u, i, s, c, null), n = 1, !0 === o && (n |= 24), o = t(3, null, null, n), e.current = o, o.stateNode = e, (n = kt()).refCount++, e.pooledCache = n, n.refCount++, o.memoizedState = {
        element: l,
        isDehydrated: r,
        cache: n
      }, q(o), e;
    }(e, n, !1, null, 0, l, o, u, i, s);
  }, ul.flushSyncWork = function () {
    return 0 != (6 & Ou) || (W(0), !1);
  }, ul.updateContainer = function (e, n, t, r) {
    var l = n.current,
      a = hr();
    return ll(l, a, e, n, t, r), a;
  }, ul.updateContainerSync = function (e, n, t, r) {
    return 0 === n.tag && Wr(), ll(n.current, 2, e, n, t, r), 2;
  }, ul;
}, s.exports.default = s.exports, Object.defineProperty(s.exports, "__esModule", {
  value: !0
})), o.exports) : 0;
var f,
  d = t(a.exports),
  p = {
    exports: {}
  },
  m = {};
var h,
  g = {};
/**
 * @license React
 * react-reconciler-constants.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
 true ? p.exports = (f || (f = 1, m.ConcurrentRoot = 1, m.ContinuousEventPriority = 8, m.DefaultEventPriority = 32, m.DiscreteEventPriority = 2, m.IdleEventPriority = 268435456, m.LegacyRoot = 0, m.NoEventPriority = 0), m) : 0;
var y = p.exports;
const b = (e, n) => {
    const t = Object.keys(e),
      r = Object.keys(n);
    if (t.length !== r.length) return !1;
    for (let r = 0; r < t.length; r += 1) {
      const l = t[r];
      if ("render" === l && !e[l] != !n[l]) return !1;
      if ("children" !== l && e[l] !== n[l]) {
        if ("object" == typeof e[l] && "object" == typeof n[l] && b(e[l], n[l])) continue;
        return !1;
      }
      if ("children" === l && ("string" == typeof e[l] || "string" == typeof n[l])) return e[l] === n[l];
    }
    return !0;
  },
  reconciler_31_v = {},
  S = console.error,
  k = ({
    appendChild: e,
    appendChildToContainer: n,
    commitTextUpdate: t,
    commitUpdate: r,
    createInstance: l,
    createTextInstance: a,
    insertBefore: o,
    removeChild: u,
    removeChildFromContainer: i,
    resetAfterCommit: s
  }) => {
    const c = d({
      appendChild: e,
      appendChildToContainer: n,
      appendInitialChild: e,
      createInstance: l,
      createTextInstance: a,
      insertBefore: o,
      commitUpdate: (e, n, t, l) => {
        b(t, l) || r(e, null, n, t, l);
      },
      commitTextUpdate: t,
      removeChild: u,
      removeChildFromContainer: i,
      resetAfterCommit: s,
      noTimeout: -1,
      shouldSetTextContent: () => !1,
      finalizeInitialChildren: () => !1,
      getPublicInstance: e => e,
      getRootHostContext: () => reconciler_31_v,
      getChildHostContext: () => reconciler_31_v,
      prepareForCommit() {},
      clearContainer() {},
      resetTextContent() {},
      getCurrentUpdatePriority: () => y.DefaultEventPriority,
      maySuspendCommit: () => !1,
      requestPostPaintCallback: () => {},
      resolveUpdatePriority: () => y.DefaultEventPriority,
      setCurrentUpdatePriority: () => {},
      shouldAttemptEagerTransition: () => !1
    });
    return {
      createContainer: e => c.createContainer(e, y.ConcurrentRoot, null, !1, null, "", S, S, S, null),
      updateContainer: (e, n, t, r) => {
        c.updateContainerSync(e, n, t, r), c.flushSyncWork();
      }
    };
  };

// EXTERNAL MODULE: ./node_modules/object-assign/index.js
var object_assign = __webpack_require__(9383);
;// ./node_modules/@react-pdf/reconciler/lib/reconciler-23.js



function reconciler_23_r(e) {
  return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, "default") ? e.default : e;
}
function reconciler_23_l(e) {
  if (e.__esModule) return e;
  var t = e.default;
  if ("function" == typeof t) {
    var n = function e() {
      return this instanceof e ? Reflect.construct(t, arguments, this.constructor) : t.apply(this, arguments);
    };
    n.prototype = t.prototype;
  } else n = {};
  return Object.defineProperty(n, "__esModule", {
    value: !0
  }), Object.keys(e).forEach(function (t) {
    var r = Object.getOwnPropertyDescriptor(e, t);
    Object.defineProperty(n, t, r.get ? r : {
      enumerable: !0,
      get: function () {
        return e[t];
      }
    });
  }), n;
}
var reconciler_23_i,
  reconciler_23_a = {
    exports: {}
  },
  reconciler_23_u = reconciler_23_l(scheduler_namespaceObject);
(
/** @license React v0.23.0
 * react-reconciler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
reconciler_23_i = reconciler_23_a).exports = function n(r) {
  var l = object_assign,
    a = react,
    o = reconciler_23_u;
  function f(e) {
    for (var t = "https://reactjs.org/docs/error-decoder.html?invariant=" + e, n = 1; n < arguments.length; n++) t += "&args[]=" + encodeURIComponent(arguments[n]);
    return "Minified React error #" + e + "; visit " + t + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
  }
  var c = a.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
  c.hasOwnProperty("ReactCurrentDispatcher") || (c.ReactCurrentDispatcher = {
    current: null
  }), c.hasOwnProperty("ReactCurrentBatchConfig") || (c.ReactCurrentBatchConfig = {
    suspense: null
  });
  var s = "function" == typeof Symbol && Symbol.for,
    d = s ? Symbol.for("react.element") : 60103,
    p = s ? Symbol.for("react.portal") : 60106,
    m = s ? Symbol.for("react.fragment") : 60107,
    h = s ? Symbol.for("react.strict_mode") : 60108,
    g = s ? Symbol.for("react.profiler") : 60114,
    b = s ? Symbol.for("react.provider") : 60109,
    y = s ? Symbol.for("react.context") : 60110,
    v = s ? Symbol.for("react.concurrent_mode") : 60111,
    T = s ? Symbol.for("react.forward_ref") : 60112,
    x = s ? Symbol.for("react.suspense") : 60113,
    E = s ? Symbol.for("react.suspense_list") : 60120,
    k = s ? Symbol.for("react.memo") : 60115,
    S = s ? Symbol.for("react.lazy") : 60116,
    C = "function" == typeof Symbol && Symbol.iterator;
  function w(e) {
    return null === e || "object" != typeof e ? null : "function" == typeof (e = C && e[C] || e["@@iterator"]) ? e : null;
  }
  function z(e) {
    if (null == e) return null;
    if ("function" == typeof e) return e.displayName || e.name || null;
    if ("string" == typeof e) return e;
    switch (e) {
      case m:
        return "Fragment";
      case p:
        return "Portal";
      case g:
        return "Profiler";
      case h:
        return "StrictMode";
      case x:
        return "Suspense";
      case E:
        return "SuspenseList";
    }
    if ("object" == typeof e) switch (e.$$typeof) {
      case y:
        return "Context.Consumer";
      case b:
        return "Context.Provider";
      case T:
        var t = e.render;
        return t = t.displayName || t.name || "", e.displayName || ("" !== t ? "ForwardRef(" + t + ")" : "ForwardRef");
      case k:
        return z(e.type);
      case S:
        if (e = 1 === e._status ? e._result : null) return z(e);
    }
    return null;
  }
  function P(e) {
    var t = e,
      n = e;
    if (e.alternate) for (; t.return;) t = t.return;else {
      e = t;
      do {
        0 != (1026 & (t = e).effectTag) && (n = t.return), e = t.return;
      } while (e);
    }
    return 3 === t.tag ? n : null;
  }
  function _(e) {
    if (P(e) !== e) throw Error(f(188));
  }
  function N(e) {
    var t = e.alternate;
    if (!t) {
      if (null === (t = P(e))) throw Error(f(188));
      return t !== e ? null : e;
    }
    for (var n = e, r = t;;) {
      var l = n.return;
      if (null === l) break;
      var i = l.alternate;
      if (null === i) {
        if (null !== (r = l.return)) {
          n = r;
          continue;
        }
        break;
      }
      if (l.child === i.child) {
        for (i = l.child; i;) {
          if (i === n) return _(l), e;
          if (i === r) return _(l), t;
          i = i.sibling;
        }
        throw Error(f(188));
      }
      if (n.return !== r.return) n = l, r = i;else {
        for (var a = !1, u = l.child; u;) {
          if (u === n) {
            a = !0, n = l, r = i;
            break;
          }
          if (u === r) {
            a = !0, r = l, n = i;
            break;
          }
          u = u.sibling;
        }
        if (!a) {
          for (u = i.child; u;) {
            if (u === n) {
              a = !0, n = i, r = l;
              break;
            }
            if (u === r) {
              a = !0, r = i, n = l;
              break;
            }
            u = u.sibling;
          }
          if (!a) throw Error(f(189));
        }
      }
      if (n.alternate !== r) throw Error(f(190));
    }
    if (3 !== n.tag) throw Error(f(188));
    return n.stateNode.current === n ? e : t;
  }
  function U(e) {
    if (!(e = N(e))) return null;
    for (var t = e;;) {
      if (5 === t.tag || 6 === t.tag) return t;
      if (t.child) t.child.return = t, t = t.child;else {
        if (t === e) break;
        for (; !t.sibling;) {
          if (!t.return || t.return === e) return null;
          t = t.return;
        }
        t.sibling.return = t.return, t = t.sibling;
      }
    }
    return null;
  }
  var R = r.getPublicInstance,
    I = r.getRootHostContext,
    M = r.getChildHostContext,
    F = r.prepareForCommit,
    Q = r.resetAfterCommit,
    D = r.createInstance,
    W = r.appendInitialChild,
    j = r.finalizeInitialChildren,
    O = r.prepareUpdate,
    B = r.shouldSetTextContent,
    H = r.createTextInstance,
    A = null,
    L = null,
    $ = r.noTimeout,
    q = !0,
    V = null,
    K = r.appendChild,
    G = r.appendChildToContainer,
    Y = r.commitTextUpdate,
    J = null,
    X = r.commitUpdate,
    Z = r.insertBefore,
    ee = null,
    te = r.removeChild,
    ne = r.removeChildFromContainer,
    re = r.resetTextContent,
    le = null,
    ie = null,
    ae = null,
    ue = null,
    oe = null,
    fe = null,
    ce = /^(.*)[\\\/]/;
  function se(e) {
    var t = "";
    do {
      e: switch (e.tag) {
        case 3:
        case 4:
        case 6:
        case 7:
        case 10:
        case 9:
          var n = "";
          break e;
        default:
          var r = e._debugOwner,
            l = e._debugSource,
            i = z(e.type);
          n = null, r && (n = z(r.type)), r = i, i = "", l ? i = " (at " + l.fileName.replace(ce, "") + ":" + l.lineNumber + ")" : n && (i = " (created by " + n + ")"), n = "\n    in " + (r || "Unknown") + i;
      }
      t += n, e = e.return;
    } while (e);
    return t;
  }
  var de = [],
    pe = -1;
  function me(e) {
    0 > pe || (e.current = de[pe], de[pe] = null, pe--);
  }
  function he(e, t) {
    pe++, de[pe] = e.current, e.current = t;
  }
  var ge = {},
    be = {
      current: ge
    },
    ye = {
      current: !1
    },
    ve = ge;
  function Te(e, t) {
    var n = e.type.contextTypes;
    if (!n) return ge;
    var r = e.stateNode;
    if (r && r.__reactInternalMemoizedUnmaskedChildContext === t) return r.__reactInternalMemoizedMaskedChildContext;
    var l,
      i = {};
    for (l in n) i[l] = t[l];
    return r && ((e = e.stateNode).__reactInternalMemoizedUnmaskedChildContext = t, e.__reactInternalMemoizedMaskedChildContext = i), i;
  }
  function xe(e) {
    return null != (e = e.childContextTypes);
  }
  function Ee(e) {
    me(ye), me(be);
  }
  function ke(e) {
    me(ye), me(be);
  }
  function Se(e, t, n) {
    if (be.current !== ge) throw Error(f(168));
    he(be, t), he(ye, n);
  }
  function Ce(e, t, n) {
    var r = e.stateNode;
    if (e = t.childContextTypes, "function" != typeof r.getChildContext) return n;
    for (var i in r = r.getChildContext()) if (!(i in e)) throw Error(f(108, z(t) || "Unknown", i));
    return l({}, n, {}, r);
  }
  function we(e) {
    var t = e.stateNode;
    return t = t && t.__reactInternalMemoizedMergedChildContext || ge, ve = be.current, he(be, t), he(ye, ye.current), !0;
  }
  function ze(e, t, n) {
    var r = e.stateNode;
    if (!r) throw Error(f(169));
    n ? (t = Ce(e, t, ve), r.__reactInternalMemoizedMergedChildContext = t, me(ye), me(be), he(be, t)) : me(ye), he(ye, n);
  }
  var Pe = o.unstable_runWithPriority,
    _e = o.unstable_scheduleCallback,
    Ne = o.unstable_cancelCallback,
    Ue = o.unstable_shouldYield,
    Re = o.unstable_requestPaint,
    Ie = o.unstable_now,
    Me = o.unstable_getCurrentPriorityLevel,
    Fe = o.unstable_ImmediatePriority,
    Qe = o.unstable_UserBlockingPriority,
    De = o.unstable_NormalPriority,
    We = o.unstable_LowPriority,
    je = o.unstable_IdlePriority,
    Oe = {},
    Be = void 0 !== Re ? Re : function () {},
    He = null,
    Ae = null,
    Le = !1,
    $e = Ie(),
    qe = 1e4 > $e ? Ie : function () {
      return Ie() - $e;
    };
  function Ve() {
    switch (Me()) {
      case Fe:
        return 99;
      case Qe:
        return 98;
      case De:
        return 97;
      case We:
        return 96;
      case je:
        return 95;
      default:
        throw Error(f(332));
    }
  }
  function Ke(e) {
    switch (e) {
      case 99:
        return Fe;
      case 98:
        return Qe;
      case 97:
        return De;
      case 96:
        return We;
      case 95:
        return je;
      default:
        throw Error(f(332));
    }
  }
  function Ge(e, t) {
    return e = Ke(e), Pe(e, t);
  }
  function Ye(e, t, n) {
    return e = Ke(e), _e(e, t, n);
  }
  function Je(e) {
    return null === He ? (He = [e], Ae = _e(Fe, Ze)) : He.push(e), Oe;
  }
  function Xe() {
    if (null !== Ae) {
      var e = Ae;
      Ae = null, Ne(e);
    }
    Ze();
  }
  function Ze() {
    if (!Le && null !== He) {
      Le = !0;
      var e = 0;
      try {
        var t = He;
        Ge(99, function () {
          for (; e < t.length; e++) {
            var n = t[e];
            do {
              n = n(!0);
            } while (null !== n);
          }
        }), He = null;
      } catch (t) {
        throw null !== He && (He = He.slice(e + 1)), _e(Fe, Xe), t;
      } finally {
        Le = !1;
      }
    }
  }
  var et = 3;
  function tt(e, t, n) {
    return 1073741821 - (1 + ((1073741821 - e + t / 10) / (n /= 10) | 0)) * n;
  }
  var nt = "function" == typeof Object.is ? Object.is : function (e, t) {
      return e === t && (0 !== e || 1 / e == 1 / t) || e != e && t != t;
    },
    rt = Object.prototype.hasOwnProperty;
  function lt(e, t) {
    if (nt(e, t)) return !0;
    if ("object" != typeof e || null === e || "object" != typeof t || null === t) return !1;
    var n = Object.keys(e),
      r = Object.keys(t);
    if (n.length !== r.length) return !1;
    for (r = 0; r < n.length; r++) if (!rt.call(t, n[r]) || !nt(e[n[r]], t[n[r]])) return !1;
    return !0;
  }
  function it(e, t) {
    if (e && e.defaultProps) for (var n in t = l({}, t), e = e.defaultProps) void 0 === t[n] && (t[n] = e[n]);
    return t;
  }
  var at = {
      current: null
    },
    ut = null,
    ot = null,
    ft = null;
  function ct() {
    ft = ot = ut = null;
  }
  function st(e, t) {
    var n = e.type._context;
    he(at, n._currentValue2), n._currentValue2 = t;
  }
  function dt(e) {
    var t = at.current;
    me(at), (e = e.type._context)._currentValue2 = t;
  }
  function pt(e, t) {
    for (; null !== e;) {
      var n = e.alternate;
      if (e.childExpirationTime < t) e.childExpirationTime = t, null !== n && n.childExpirationTime < t && (n.childExpirationTime = t);else {
        if (!(null !== n && n.childExpirationTime < t)) break;
        n.childExpirationTime = t;
      }
      e = e.return;
    }
  }
  function mt(e, t) {
    ut = e, ft = ot = null, null !== (e = e.dependencies) && null !== e.firstContext && (e.expirationTime >= t && (On = !0), e.firstContext = null);
  }
  function ht(e, t) {
    if (ft !== e && !1 !== t && 0 !== t) if ("number" == typeof t && 1073741823 !== t || (ft = e, t = 1073741823), t = {
      context: e,
      observedBits: t,
      next: null
    }, null === ot) {
      if (null === ut) throw Error(f(308));
      ot = t, ut.dependencies = {
        expirationTime: 0,
        firstContext: t,
        responders: null
      };
    } else ot = ot.next = t;
    return e._currentValue2;
  }
  var gt = !1;
  function bt(e) {
    return {
      baseState: e,
      firstUpdate: null,
      lastUpdate: null,
      firstCapturedUpdate: null,
      lastCapturedUpdate: null,
      firstEffect: null,
      lastEffect: null,
      firstCapturedEffect: null,
      lastCapturedEffect: null
    };
  }
  function yt(e) {
    return {
      baseState: e.baseState,
      firstUpdate: e.firstUpdate,
      lastUpdate: e.lastUpdate,
      firstCapturedUpdate: null,
      lastCapturedUpdate: null,
      firstEffect: null,
      lastEffect: null,
      firstCapturedEffect: null,
      lastCapturedEffect: null
    };
  }
  function vt(e, t) {
    return {
      expirationTime: e,
      suspenseConfig: t,
      tag: 0,
      payload: null,
      callback: null,
      next: null,
      nextEffect: null
    };
  }
  function Tt(e, t) {
    null === e.lastUpdate ? e.firstUpdate = e.lastUpdate = t : (e.lastUpdate.next = t, e.lastUpdate = t);
  }
  function xt(e, t) {
    var n = e.alternate;
    if (null === n) {
      var r = e.updateQueue,
        l = null;
      null === r && (r = e.updateQueue = bt(e.memoizedState));
    } else r = e.updateQueue, l = n.updateQueue, null === r ? null === l ? (r = e.updateQueue = bt(e.memoizedState), l = n.updateQueue = bt(n.memoizedState)) : r = e.updateQueue = yt(l) : null === l && (l = n.updateQueue = yt(r));
    null === l || r === l ? Tt(r, t) : null === r.lastUpdate || null === l.lastUpdate ? (Tt(r, t), Tt(l, t)) : (Tt(r, t), l.lastUpdate = t);
  }
  function Et(e, t) {
    var n = e.updateQueue;
    null === (n = null === n ? e.updateQueue = bt(e.memoizedState) : kt(e, n)).lastCapturedUpdate ? n.firstCapturedUpdate = n.lastCapturedUpdate = t : (n.lastCapturedUpdate.next = t, n.lastCapturedUpdate = t);
  }
  function kt(e, t) {
    var n = e.alternate;
    return null !== n && t === n.updateQueue && (t = e.updateQueue = yt(t)), t;
  }
  function St(e, t, n, r, i, a) {
    switch (n.tag) {
      case 1:
        return "function" == typeof (e = n.payload) ? e.call(a, r, i) : e;
      case 3:
        e.effectTag = -4097 & e.effectTag | 64;
      case 0:
        if (null == (i = "function" == typeof (e = n.payload) ? e.call(a, r, i) : e)) break;
        return l({}, r, i);
      case 2:
        gt = !0;
    }
    return r;
  }
  function Ct(e, t, n, r, l) {
    gt = !1;
    for (var i = (t = kt(e, t)).baseState, a = null, u = 0, o = t.firstUpdate, f = i; null !== o;) {
      var c = o.expirationTime;
      c < l ? (null === a && (a = o, i = f), u < c && (u = c)) : (El(c, o.suspenseConfig), f = St(e, 0, o, f, n, r), null !== o.callback && (e.effectTag |= 32, o.nextEffect = null, null === t.lastEffect ? t.firstEffect = t.lastEffect = o : (t.lastEffect.nextEffect = o, t.lastEffect = o))), o = o.next;
    }
    for (c = null, o = t.firstCapturedUpdate; null !== o;) {
      var s = o.expirationTime;
      s < l ? (null === c && (c = o, null === a && (i = f)), u < s && (u = s)) : (f = St(e, 0, o, f, n, r), null !== o.callback && (e.effectTag |= 32, o.nextEffect = null, null === t.lastCapturedEffect ? t.firstCapturedEffect = t.lastCapturedEffect = o : (t.lastCapturedEffect.nextEffect = o, t.lastCapturedEffect = o))), o = o.next;
    }
    null === a && (t.lastUpdate = null), null === c ? t.lastCapturedUpdate = null : e.effectTag |= 32, null === a && null === c && (i = f), t.baseState = i, t.firstUpdate = a, t.firstCapturedUpdate = c, kl(u), e.expirationTime = u, e.memoizedState = f;
  }
  function wt(e, t, n) {
    null !== t.firstCapturedUpdate && (null !== t.lastUpdate && (t.lastUpdate.next = t.firstCapturedUpdate, t.lastUpdate = t.lastCapturedUpdate), t.firstCapturedUpdate = t.lastCapturedUpdate = null), zt(t.firstEffect, n), t.firstEffect = t.lastEffect = null, zt(t.firstCapturedEffect, n), t.firstCapturedEffect = t.lastCapturedEffect = null;
  }
  function zt(e, t) {
    for (; null !== e;) {
      var n = e.callback;
      if (null !== n) {
        e.callback = null;
        var r = t;
        if ("function" != typeof n) throw Error(f(191, n));
        n.call(r);
      }
      e = e.nextEffect;
    }
  }
  var Pt = c.ReactCurrentBatchConfig,
    _t = new a.Component().refs;
  function Nt(e, t, n, r) {
    n = null == (n = n(r, t = e.memoizedState)) ? t : l({}, t, n), e.memoizedState = n, null !== (r = e.updateQueue) && 0 === e.expirationTime && (r.baseState = n);
  }
  var Ut = {
    isMounted: function (e) {
      return !!(e = e._reactInternalFiber) && P(e) === e;
    },
    enqueueSetState: function (e, t, n) {
      e = e._reactInternalFiber;
      var r = cl(),
        l = Pt.suspense;
      (l = vt(r = sl(r, e, l), l)).payload = t, null != n && (l.callback = n), xt(e, l), dl(e, r);
    },
    enqueueReplaceState: function (e, t, n) {
      e = e._reactInternalFiber;
      var r = cl(),
        l = Pt.suspense;
      (l = vt(r = sl(r, e, l), l)).tag = 1, l.payload = t, null != n && (l.callback = n), xt(e, l), dl(e, r);
    },
    enqueueForceUpdate: function (e, t) {
      e = e._reactInternalFiber;
      var n = cl(),
        r = Pt.suspense;
      (r = vt(n = sl(n, e, r), r)).tag = 2, null != t && (r.callback = t), xt(e, r), dl(e, n);
    }
  };
  function Rt(e, t, n, r, l, i, a) {
    return "function" == typeof (e = e.stateNode).shouldComponentUpdate ? e.shouldComponentUpdate(r, i, a) : !(t.prototype && t.prototype.isPureReactComponent && lt(n, r) && lt(l, i));
  }
  function It(e, t, n) {
    var r = !1,
      l = ge,
      i = t.contextType;
    return "object" == typeof i && null !== i ? i = ht(i) : (l = xe(t) ? ve : be.current, i = (r = null != (r = t.contextTypes)) ? Te(e, l) : ge), t = new t(n, i), e.memoizedState = null !== t.state && void 0 !== t.state ? t.state : null, t.updater = Ut, e.stateNode = t, t._reactInternalFiber = e, r && ((e = e.stateNode).__reactInternalMemoizedUnmaskedChildContext = l, e.__reactInternalMemoizedMaskedChildContext = i), t;
  }
  function Mt(e, t, n, r) {
    e = t.state, "function" == typeof t.componentWillReceiveProps && t.componentWillReceiveProps(n, r), "function" == typeof t.UNSAFE_componentWillReceiveProps && t.UNSAFE_componentWillReceiveProps(n, r), t.state !== e && Ut.enqueueReplaceState(t, t.state, null);
  }
  function Ft(e, t, n, r) {
    var l = e.stateNode;
    l.props = n, l.state = e.memoizedState, l.refs = _t;
    var i = t.contextType;
    "object" == typeof i && null !== i ? l.context = ht(i) : (i = xe(t) ? ve : be.current, l.context = Te(e, i)), null !== (i = e.updateQueue) && (Ct(e, i, n, l, r), l.state = e.memoizedState), "function" == typeof (i = t.getDerivedStateFromProps) && (Nt(e, t, i, n), l.state = e.memoizedState), "function" == typeof t.getDerivedStateFromProps || "function" == typeof l.getSnapshotBeforeUpdate || "function" != typeof l.UNSAFE_componentWillMount && "function" != typeof l.componentWillMount || (t = l.state, "function" == typeof l.componentWillMount && l.componentWillMount(), "function" == typeof l.UNSAFE_componentWillMount && l.UNSAFE_componentWillMount(), t !== l.state && Ut.enqueueReplaceState(l, l.state, null), null !== (i = e.updateQueue) && (Ct(e, i, n, l, r), l.state = e.memoizedState)), "function" == typeof l.componentDidMount && (e.effectTag |= 4);
  }
  var Qt = Array.isArray;
  function Dt(e, t, n) {
    if (null !== (e = n.ref) && "function" != typeof e && "object" != typeof e) {
      if (n._owner) {
        if (n = n._owner) {
          if (1 !== n.tag) throw Error(f(309));
          var r = n.stateNode;
        }
        if (!r) throw Error(f(147, e));
        var l = "" + e;
        return null !== t && null !== t.ref && "function" == typeof t.ref && t.ref._stringRef === l ? t.ref : (t = function (e) {
          var t = r.refs;
          t === _t && (t = r.refs = {}), null === e ? delete t[l] : t[l] = e;
        }, t._stringRef = l, t);
      }
      if ("string" != typeof e) throw Error(f(284));
      if (!n._owner) throw Error(f(290, e));
    }
    return e;
  }
  function Wt(e, t) {
    if ("textarea" !== e.type) throw Error(f(31, "[object Object]" === Object.prototype.toString.call(t) ? "object with keys {" + Object.keys(t).join(", ") + "}" : t, ""));
  }
  function jt(e) {
    function t(t, n) {
      if (e) {
        var r = t.lastEffect;
        null !== r ? (r.nextEffect = n, t.lastEffect = n) : t.firstEffect = t.lastEffect = n, n.nextEffect = null, n.effectTag = 8;
      }
    }
    function n(n, r) {
      if (!e) return null;
      for (; null !== r;) t(n, r), r = r.sibling;
      return null;
    }
    function r(e, t) {
      for (e = new Map(); null !== t;) null !== t.key ? e.set(t.key, t) : e.set(t.index, t), t = t.sibling;
      return e;
    }
    function l(e, t, n) {
      return (e = Al(e, t)).index = 0, e.sibling = null, e;
    }
    function i(t, n, r) {
      return t.index = r, e ? null !== (r = t.alternate) ? (r = r.index) < n ? (t.effectTag = 2, n) : r : (t.effectTag = 2, n) : n;
    }
    function a(t) {
      return e && null === t.alternate && (t.effectTag = 2), t;
    }
    function u(e, t, n, r) {
      return null === t || 6 !== t.tag ? ((t = ql(n, e.mode, r)).return = e, t) : ((t = l(t, n)).return = e, t);
    }
    function o(e, t, n, r) {
      return null !== t && t.elementType === n.type ? ((r = l(t, n.props)).ref = Dt(e, t, n), r.return = e, r) : ((r = Ll(n.type, n.key, n.props, null, e.mode, r)).ref = Dt(e, t, n), r.return = e, r);
    }
    function c(e, t, n, r) {
      return null === t || 4 !== t.tag || t.stateNode.containerInfo !== n.containerInfo || t.stateNode.implementation !== n.implementation ? ((t = Vl(n, e.mode, r)).return = e, t) : ((t = l(t, n.children || [])).return = e, t);
    }
    function s(e, t, n, r, i) {
      return null === t || 7 !== t.tag ? ((t = $l(n, e.mode, r, i)).return = e, t) : ((t = l(t, n)).return = e, t);
    }
    function h(e, t, n) {
      if ("string" == typeof t || "number" == typeof t) return (t = ql("" + t, e.mode, n)).return = e, t;
      if ("object" == typeof t && null !== t) {
        switch (t.$$typeof) {
          case d:
            return (n = Ll(t.type, t.key, t.props, null, e.mode, n)).ref = Dt(e, null, t), n.return = e, n;
          case p:
            return (t = Vl(t, e.mode, n)).return = e, t;
        }
        if (Qt(t) || w(t)) return (t = $l(t, e.mode, n, null)).return = e, t;
        Wt(e, t);
      }
      return null;
    }
    function g(e, t, n, r) {
      var l = null !== t ? t.key : null;
      if ("string" == typeof n || "number" == typeof n) return null !== l ? null : u(e, t, "" + n, r);
      if ("object" == typeof n && null !== n) {
        switch (n.$$typeof) {
          case d:
            return n.key === l ? n.type === m ? s(e, t, n.props.children, r, l) : o(e, t, n, r) : null;
          case p:
            return n.key === l ? c(e, t, n, r) : null;
        }
        if (Qt(n) || w(n)) return null !== l ? null : s(e, t, n, r, null);
        Wt(e, n);
      }
      return null;
    }
    function b(e, t, n, r, l) {
      if ("string" == typeof r || "number" == typeof r) return u(t, e = e.get(n) || null, "" + r, l);
      if ("object" == typeof r && null !== r) {
        switch (r.$$typeof) {
          case d:
            return e = e.get(null === r.key ? n : r.key) || null, r.type === m ? s(t, e, r.props.children, l, r.key) : o(t, e, r, l);
          case p:
            return c(t, e = e.get(null === r.key ? n : r.key) || null, r, l);
        }
        if (Qt(r) || w(r)) return s(t, e = e.get(n) || null, r, l, null);
        Wt(t, r);
      }
      return null;
    }
    function y(l, a, u, o) {
      for (var f = null, c = null, s = a, d = a = 0, p = null; null !== s && d < u.length; d++) {
        s.index > d ? (p = s, s = null) : p = s.sibling;
        var m = g(l, s, u[d], o);
        if (null === m) {
          null === s && (s = p);
          break;
        }
        e && s && null === m.alternate && t(l, s), a = i(m, a, d), null === c ? f = m : c.sibling = m, c = m, s = p;
      }
      if (d === u.length) return n(l, s), f;
      if (null === s) {
        for (; d < u.length; d++) null !== (s = h(l, u[d], o)) && (a = i(s, a, d), null === c ? f = s : c.sibling = s, c = s);
        return f;
      }
      for (s = r(l, s); d < u.length; d++) null !== (p = b(s, l, d, u[d], o)) && (e && null !== p.alternate && s.delete(null === p.key ? d : p.key), a = i(p, a, d), null === c ? f = p : c.sibling = p, c = p);
      return e && s.forEach(function (e) {
        return t(l, e);
      }), f;
    }
    function v(l, a, u, o) {
      var c = w(u);
      if ("function" != typeof c) throw Error(f(150));
      if (null == (u = c.call(u))) throw Error(f(151));
      for (var s = c = null, d = a, p = a = 0, m = null, y = u.next(); null !== d && !y.done; p++, y = u.next()) {
        d.index > p ? (m = d, d = null) : m = d.sibling;
        var v = g(l, d, y.value, o);
        if (null === v) {
          null === d && (d = m);
          break;
        }
        e && d && null === v.alternate && t(l, d), a = i(v, a, p), null === s ? c = v : s.sibling = v, s = v, d = m;
      }
      if (y.done) return n(l, d), c;
      if (null === d) {
        for (; !y.done; p++, y = u.next()) null !== (y = h(l, y.value, o)) && (a = i(y, a, p), null === s ? c = y : s.sibling = y, s = y);
        return c;
      }
      for (d = r(l, d); !y.done; p++, y = u.next()) null !== (y = b(d, l, p, y.value, o)) && (e && null !== y.alternate && d.delete(null === y.key ? p : y.key), a = i(y, a, p), null === s ? c = y : s.sibling = y, s = y);
      return e && d.forEach(function (e) {
        return t(l, e);
      }), c;
    }
    return function (e, r, i, u) {
      var o = "object" == typeof i && null !== i && i.type === m && null === i.key;
      o && (i = i.props.children);
      var c = "object" == typeof i && null !== i;
      if (c) switch (i.$$typeof) {
        case d:
          e: {
            for (c = i.key, o = r; null !== o;) {
              if (o.key === c) {
                if (7 === o.tag ? i.type === m : o.elementType === i.type) {
                  n(e, o.sibling), (r = l(o, i.type === m ? i.props.children : i.props)).ref = Dt(e, o, i), r.return = e, e = r;
                  break e;
                }
                n(e, o);
                break;
              }
              t(e, o), o = o.sibling;
            }
            i.type === m ? ((r = $l(i.props.children, e.mode, u, i.key)).return = e, e = r) : ((u = Ll(i.type, i.key, i.props, null, e.mode, u)).ref = Dt(e, r, i), u.return = e, e = u);
          }
          return a(e);
        case p:
          e: {
            for (o = i.key; null !== r;) {
              if (r.key === o) {
                if (4 === r.tag && r.stateNode.containerInfo === i.containerInfo && r.stateNode.implementation === i.implementation) {
                  n(e, r.sibling), (r = l(r, i.children || [])).return = e, e = r;
                  break e;
                }
                n(e, r);
                break;
              }
              t(e, r), r = r.sibling;
            }
            (r = Vl(i, e.mode, u)).return = e, e = r;
          }
          return a(e);
      }
      if ("string" == typeof i || "number" == typeof i) return i = "" + i, null !== r && 6 === r.tag ? (n(e, r.sibling), (r = l(r, i)).return = e, e = r) : (n(e, r), (r = ql(i, e.mode, u)).return = e, e = r), a(e);
      if (Qt(i)) return y(e, r, i, u);
      if (w(i)) return v(e, r, i, u);
      if (c && Wt(e, i), void 0 === i && !o) switch (e.tag) {
        case 1:
        case 0:
          throw e = e.type, Error(f(152, e.displayName || e.name || "Component"));
      }
      return n(e, r);
    };
  }
  var Ot = jt(!0),
    Bt = jt(!1),
    Ht = {},
    At = {
      current: Ht
    },
    Lt = {
      current: Ht
    },
    $t = {
      current: Ht
    };
  function qt(e) {
    if (e === Ht) throw Error(f(174));
    return e;
  }
  function Vt(e, t) {
    he($t, t), he(Lt, e), he(At, Ht), t = I(t), me(At), he(At, t);
  }
  function Kt(e) {
    me(At), me(Lt), me($t);
  }
  function Gt(e) {
    var t = qt($t.current),
      n = qt(At.current);
    n !== (t = M(n, e.type, t)) && (he(Lt, e), he(At, t));
  }
  function Yt(e) {
    Lt.current === e && (me(At), me(Lt));
  }
  var Jt = {
    current: 0
  };
  function Xt(e) {
    for (var t = e; null !== t;) {
      if (13 === t.tag) {
        var n = t.memoizedState;
        if (null !== n && (null === (n = n.dehydrated) || oe(n) || fe(n))) return t;
      } else if (19 === t.tag && void 0 !== t.memoizedProps.revealOrder) {
        if (0 != (64 & t.effectTag)) return t;
      } else if (null !== t.child) {
        t.child.return = t, t = t.child;
        continue;
      }
      if (t === e) break;
      for (; null === t.sibling;) {
        if (null === t.return || t.return === e) return null;
        t = t.return;
      }
      t.sibling.return = t.return, t = t.sibling;
    }
    return null;
  }
  function Zt(e, t) {
    return {
      responder: e,
      props: t
    };
  }
  var en = c.ReactCurrentDispatcher,
    tn = c.ReactCurrentBatchConfig,
    nn = 0,
    rn = null,
    ln = null,
    an = null,
    un = null,
    on = null,
    fn = null,
    cn = 0,
    sn = null,
    dn = 0,
    pn = !1,
    mn = null,
    hn = 0;
  function gn() {
    throw Error(f(321));
  }
  function bn(e, t) {
    if (null === t) return !1;
    for (var n = 0; n < t.length && n < e.length; n++) if (!nt(e[n], t[n])) return !1;
    return !0;
  }
  function yn(e, t, n, r, l, i) {
    if (nn = i, rn = t, an = null !== e ? e.memoizedState : null, en.current = null === an ? Dn : Wn, t = n(r, l), pn) {
      do {
        pn = !1, hn += 1, an = null !== e ? e.memoizedState : null, fn = un, sn = on = ln = null, en.current = Wn, t = n(r, l);
      } while (pn);
      mn = null, hn = 0;
    }
    if (en.current = Qn, (e = rn).memoizedState = un, e.expirationTime = cn, e.updateQueue = sn, e.effectTag |= dn, e = null !== ln && null !== ln.next, nn = 0, fn = on = un = an = ln = rn = null, cn = 0, sn = null, dn = 0, e) throw Error(f(300));
    return t;
  }
  function vn() {
    en.current = Qn, nn = 0, fn = on = un = an = ln = rn = null, cn = 0, sn = null, dn = 0, pn = !1, mn = null, hn = 0;
  }
  function Tn() {
    var e = {
      memoizedState: null,
      baseState: null,
      queue: null,
      baseUpdate: null,
      next: null
    };
    return null === on ? un = on = e : on = on.next = e, on;
  }
  function xn() {
    if (null !== fn) fn = (on = fn).next, an = null !== (ln = an) ? ln.next : null;else {
      if (null === an) throw Error(f(310));
      var e = {
        memoizedState: (ln = an).memoizedState,
        baseState: ln.baseState,
        queue: ln.queue,
        baseUpdate: ln.baseUpdate,
        next: null
      };
      on = null === on ? un = e : on.next = e, an = ln.next;
    }
    return on;
  }
  function En(e, t) {
    return "function" == typeof t ? t(e) : t;
  }
  function kn(e) {
    var t = xn(),
      n = t.queue;
    if (null === n) throw Error(f(311));
    if (n.lastRenderedReducer = e, 0 < hn) {
      var r = n.dispatch;
      if (null !== mn) {
        var l = mn.get(n);
        if (void 0 !== l) {
          mn.delete(n);
          var i = t.memoizedState;
          do {
            i = e(i, l.action), l = l.next;
          } while (null !== l);
          return nt(i, t.memoizedState) || (On = !0), t.memoizedState = i, t.baseUpdate === n.last && (t.baseState = i), n.lastRenderedState = i, [i, r];
        }
      }
      return [t.memoizedState, r];
    }
    r = n.last;
    var a = t.baseUpdate;
    if (i = t.baseState, null !== a ? (null !== r && (r.next = null), r = a.next) : r = null !== r ? r.next : null, null !== r) {
      var u = l = null,
        o = r,
        c = !1;
      do {
        var s = o.expirationTime;
        s < nn ? (c || (c = !0, u = a, l = i), s > cn && kl(cn = s)) : (El(s, o.suspenseConfig), i = o.eagerReducer === e ? o.eagerState : e(i, o.action)), a = o, o = o.next;
      } while (null !== o && o !== r);
      c || (u = a, l = i), nt(i, t.memoizedState) || (On = !0), t.memoizedState = i, t.baseUpdate = u, t.baseState = l, n.lastRenderedState = i;
    }
    return [t.memoizedState, n.dispatch];
  }
  function Sn(e) {
    var t = Tn();
    return "function" == typeof e && (e = e()), t.memoizedState = t.baseState = e, e = (e = t.queue = {
      last: null,
      dispatch: null,
      lastRenderedReducer: En,
      lastRenderedState: e
    }).dispatch = Fn.bind(null, rn, e), [t.memoizedState, e];
  }
  function Cn(e) {
    return kn(En);
  }
  function wn(e, t, n, r) {
    return e = {
      tag: e,
      create: t,
      destroy: n,
      deps: r,
      next: null
    }, null === sn ? (sn = {
      lastEffect: null
    }).lastEffect = e.next = e : null === (t = sn.lastEffect) ? sn.lastEffect = e.next = e : (n = t.next, t.next = e, e.next = n, sn.lastEffect = e), e;
  }
  function zn(e, t, n, r) {
    var l = Tn();
    dn |= e, l.memoizedState = wn(t, n, void 0, void 0 === r ? null : r);
  }
  function Pn(e, t, n, r) {
    var l = xn();
    r = void 0 === r ? null : r;
    var i = void 0;
    if (null !== ln) {
      var a = ln.memoizedState;
      if (i = a.destroy, null !== r && bn(r, a.deps)) return void wn(0, n, i, r);
    }
    dn |= e, l.memoizedState = wn(t, n, i, r);
  }
  function _n(e, t) {
    return zn(516, 192, e, t);
  }
  function Nn(e, t) {
    return Pn(516, 192, e, t);
  }
  function Un(e, t) {
    return "function" == typeof t ? (e = e(), t(e), function () {
      t(null);
    }) : null != t ? (e = e(), t.current = e, function () {
      t.current = null;
    }) : void 0;
  }
  function Rn() {}
  function In(e, t) {
    return Tn().memoizedState = [e, void 0 === t ? null : t], e;
  }
  function Mn(e, t) {
    var n = xn();
    t = void 0 === t ? null : t;
    var r = n.memoizedState;
    return null !== r && null !== t && bn(t, r[1]) ? r[0] : (n.memoizedState = [e, t], e);
  }
  function Fn(e, t, n) {
    if (!(25 > hn)) throw Error(f(301));
    var r = e.alternate;
    if (e === rn || null !== r && r === rn) {
      if (pn = !0, e = {
        expirationTime: nn,
        suspenseConfig: null,
        action: n,
        eagerReducer: null,
        eagerState: null,
        next: null
      }, null === mn && (mn = new Map()), void 0 === (n = mn.get(t))) mn.set(t, e);else {
        for (t = n; null !== t.next;) t = t.next;
        t.next = e;
      }
    } else {
      var l = cl(),
        i = Pt.suspense;
      i = {
        expirationTime: l = sl(l, e, i),
        suspenseConfig: i,
        action: n,
        eagerReducer: null,
        eagerState: null,
        next: null
      };
      var a = t.last;
      if (null === a) i.next = i;else {
        var u = a.next;
        null !== u && (i.next = u), a.next = i;
      }
      if (t.last = i, 0 === e.expirationTime && (null === r || 0 === r.expirationTime) && null !== (r = t.lastRenderedReducer)) try {
        var o = t.lastRenderedState,
          c = r(o, n);
        if (i.eagerReducer = r, i.eagerState = c, nt(c, o)) return;
      } catch (e) {}
      dl(e, l);
    }
  }
  var Qn = {
      readContext: ht,
      useCallback: gn,
      useContext: gn,
      useEffect: gn,
      useImperativeHandle: gn,
      useLayoutEffect: gn,
      useMemo: gn,
      useReducer: gn,
      useRef: gn,
      useState: gn,
      useDebugValue: gn,
      useResponder: gn,
      useDeferredValue: gn,
      useTransition: gn
    },
    Dn = {
      readContext: ht,
      useCallback: In,
      useContext: ht,
      useEffect: _n,
      useImperativeHandle: function (e, t, n) {
        return n = null != n ? n.concat([e]) : null, zn(4, 36, Un.bind(null, t, e), n);
      },
      useLayoutEffect: function (e, t) {
        return zn(4, 36, e, t);
      },
      useMemo: function (e, t) {
        var n = Tn();
        return t = void 0 === t ? null : t, e = e(), n.memoizedState = [e, t], e;
      },
      useReducer: function (e, t, n) {
        var r = Tn();
        return t = void 0 !== n ? n(t) : t, r.memoizedState = r.baseState = t, e = (e = r.queue = {
          last: null,
          dispatch: null,
          lastRenderedReducer: e,
          lastRenderedState: t
        }).dispatch = Fn.bind(null, rn, e), [r.memoizedState, e];
      },
      useRef: function (e) {
        return e = {
          current: e
        }, Tn().memoizedState = e;
      },
      useState: Sn,
      useDebugValue: Rn,
      useResponder: Zt,
      useDeferredValue: function (e, t) {
        var n = Sn(e),
          r = n[0],
          l = n[1];
        return _n(function () {
          o.unstable_next(function () {
            var n = tn.suspense;
            tn.suspense = void 0 === t ? null : t;
            try {
              l(e);
            } finally {
              tn.suspense = n;
            }
          });
        }, [e, t]), r;
      },
      useTransition: function (e) {
        var t = Sn(!1),
          n = t[0],
          r = t[1];
        return [In(function (t) {
          r(!0), o.unstable_next(function () {
            var n = tn.suspense;
            tn.suspense = void 0 === e ? null : e;
            try {
              r(!1), t();
            } finally {
              tn.suspense = n;
            }
          });
        }, [e, n]), n];
      }
    },
    Wn = {
      readContext: ht,
      useCallback: Mn,
      useContext: ht,
      useEffect: Nn,
      useImperativeHandle: function (e, t, n) {
        return n = null != n ? n.concat([e]) : null, Pn(4, 36, Un.bind(null, t, e), n);
      },
      useLayoutEffect: function (e, t) {
        return Pn(4, 36, e, t);
      },
      useMemo: function (e, t) {
        var n = xn();
        t = void 0 === t ? null : t;
        var r = n.memoizedState;
        return null !== r && null !== t && bn(t, r[1]) ? r[0] : (e = e(), n.memoizedState = [e, t], e);
      },
      useReducer: kn,
      useRef: function () {
        return xn().memoizedState;
      },
      useState: Cn,
      useDebugValue: Rn,
      useResponder: Zt,
      useDeferredValue: function (e, t) {
        var n = Cn(),
          r = n[0],
          l = n[1];
        return Nn(function () {
          o.unstable_next(function () {
            var n = tn.suspense;
            tn.suspense = void 0 === t ? null : t;
            try {
              l(e);
            } finally {
              tn.suspense = n;
            }
          });
        }, [e, t]), r;
      },
      useTransition: function (e) {
        var t = Cn(),
          n = t[0],
          r = t[1];
        return [Mn(function (t) {
          r(!0), o.unstable_next(function () {
            var n = tn.suspense;
            tn.suspense = void 0 === e ? null : e;
            try {
              r(!1), t();
            } finally {
              tn.suspense = n;
            }
          });
        }, [e, n]), n];
      }
    },
    jn = c.ReactCurrentOwner,
    On = !1;
  function Bn(e, t, n, r) {
    t.child = null === e ? Bt(t, null, n, r) : Ot(t, e.child, n, r);
  }
  function Hn(e, t, n, r, l) {
    n = n.render;
    var i = t.ref;
    return mt(t, l), r = yn(e, t, n, r, i, l), null === e || On ? (t.effectTag |= 1, Bn(e, t, r, l), t.child) : (t.updateQueue = e.updateQueue, t.effectTag &= -517, e.expirationTime <= l && (e.expirationTime = 0), ir(e, t, l));
  }
  function An(e, t, n, r, l, i) {
    if (null === e) {
      var a = n.type;
      return "function" != typeof a || Hl(a) || void 0 !== a.defaultProps || null !== n.compare || void 0 !== n.defaultProps ? ((e = Ll(n.type, null, r, null, t.mode, i)).ref = t.ref, e.return = t, t.child = e) : (t.tag = 15, t.type = a, Ln(e, t, a, r, l, i));
    }
    return a = e.child, l < i && (l = a.memoizedProps, (n = null !== (n = n.compare) ? n : lt)(l, r) && e.ref === t.ref) ? ir(e, t, i) : (t.effectTag |= 1, (e = Al(a, r)).ref = t.ref, e.return = t, t.child = e);
  }
  function Ln(e, t, n, r, l, i) {
    return null !== e && lt(e.memoizedProps, r) && e.ref === t.ref && (On = !1, l < i) ? ir(e, t, i) : qn(e, t, n, r, i);
  }
  function $n(e, t) {
    var n = t.ref;
    (null === e && null !== n || null !== e && e.ref !== n) && (t.effectTag |= 128);
  }
  function qn(e, t, n, r, l) {
    var i = xe(n) ? ve : be.current;
    return i = Te(t, i), mt(t, l), n = yn(e, t, n, r, i, l), null === e || On ? (t.effectTag |= 1, Bn(e, t, n, l), t.child) : (t.updateQueue = e.updateQueue, t.effectTag &= -517, e.expirationTime <= l && (e.expirationTime = 0), ir(e, t, l));
  }
  function Vn(e, t, n, r, l) {
    if (xe(n)) {
      var i = !0;
      we(t);
    } else i = !1;
    if (mt(t, l), null === t.stateNode) null !== e && (e.alternate = null, t.alternate = null, t.effectTag |= 2), It(t, n, r), Ft(t, n, r, l), r = !0;else if (null === e) {
      var a = t.stateNode,
        u = t.memoizedProps;
      a.props = u;
      var o = a.context,
        f = n.contextType;
      f = "object" == typeof f && null !== f ? ht(f) : Te(t, f = xe(n) ? ve : be.current);
      var c = n.getDerivedStateFromProps,
        s = "function" == typeof c || "function" == typeof a.getSnapshotBeforeUpdate;
      s || "function" != typeof a.UNSAFE_componentWillReceiveProps && "function" != typeof a.componentWillReceiveProps || (u !== r || o !== f) && Mt(t, a, r, f), gt = !1;
      var d = t.memoizedState;
      o = a.state = d;
      var p = t.updateQueue;
      null !== p && (Ct(t, p, r, a, l), o = t.memoizedState), u !== r || d !== o || ye.current || gt ? ("function" == typeof c && (Nt(t, n, c, r), o = t.memoizedState), (u = gt || Rt(t, n, u, r, d, o, f)) ? (s || "function" != typeof a.UNSAFE_componentWillMount && "function" != typeof a.componentWillMount || ("function" == typeof a.componentWillMount && a.componentWillMount(), "function" == typeof a.UNSAFE_componentWillMount && a.UNSAFE_componentWillMount()), "function" == typeof a.componentDidMount && (t.effectTag |= 4)) : ("function" == typeof a.componentDidMount && (t.effectTag |= 4), t.memoizedProps = r, t.memoizedState = o), a.props = r, a.state = o, a.context = f, r = u) : ("function" == typeof a.componentDidMount && (t.effectTag |= 4), r = !1);
    } else a = t.stateNode, u = t.memoizedProps, a.props = t.type === t.elementType ? u : it(t.type, u), o = a.context, f = "object" == typeof (f = n.contextType) && null !== f ? ht(f) : Te(t, f = xe(n) ? ve : be.current), (s = "function" == typeof (c = n.getDerivedStateFromProps) || "function" == typeof a.getSnapshotBeforeUpdate) || "function" != typeof a.UNSAFE_componentWillReceiveProps && "function" != typeof a.componentWillReceiveProps || (u !== r || o !== f) && Mt(t, a, r, f), gt = !1, o = t.memoizedState, d = a.state = o, null !== (p = t.updateQueue) && (Ct(t, p, r, a, l), d = t.memoizedState), u !== r || o !== d || ye.current || gt ? ("function" == typeof c && (Nt(t, n, c, r), d = t.memoizedState), (c = gt || Rt(t, n, u, r, o, d, f)) ? (s || "function" != typeof a.UNSAFE_componentWillUpdate && "function" != typeof a.componentWillUpdate || ("function" == typeof a.componentWillUpdate && a.componentWillUpdate(r, d, f), "function" == typeof a.UNSAFE_componentWillUpdate && a.UNSAFE_componentWillUpdate(r, d, f)), "function" == typeof a.componentDidUpdate && (t.effectTag |= 4), "function" == typeof a.getSnapshotBeforeUpdate && (t.effectTag |= 256)) : ("function" != typeof a.componentDidUpdate || u === e.memoizedProps && o === e.memoizedState || (t.effectTag |= 4), "function" != typeof a.getSnapshotBeforeUpdate || u === e.memoizedProps && o === e.memoizedState || (t.effectTag |= 256), t.memoizedProps = r, t.memoizedState = d), a.props = r, a.state = d, a.context = f, r = c) : ("function" != typeof a.componentDidUpdate || u === e.memoizedProps && o === e.memoizedState || (t.effectTag |= 4), "function" != typeof a.getSnapshotBeforeUpdate || u === e.memoizedProps && o === e.memoizedState || (t.effectTag |= 256), r = !1);
    return Kn(e, t, n, r, i, l);
  }
  function Kn(e, t, n, r, l, i) {
    $n(e, t);
    var a = 0 != (64 & t.effectTag);
    if (!r && !a) return l && ze(t, n, !1), ir(e, t, i);
    r = t.stateNode, jn.current = t;
    var u = a && "function" != typeof n.getDerivedStateFromError ? null : r.render();
    return t.effectTag |= 1, null !== e && a ? (t.child = Ot(t, e.child, null, i), t.child = Ot(t, null, u, i)) : Bn(e, t, u, i), t.memoizedState = r.state, l && ze(t, n, !0), t.child;
  }
  function Gn(e) {
    var t = e.stateNode;
    t.pendingContext ? Se(0, t.pendingContext, t.pendingContext !== t.context) : t.context && Se(0, t.context, !1), Vt(e, t.containerInfo);
  }
  var Yn,
    Jn,
    Xn,
    Zn,
    er = {
      dehydrated: null,
      retryTime: 0
    };
  function tr(e, t, n) {
    var r,
      l = t.mode,
      i = t.pendingProps,
      a = Jt.current,
      u = !1;
    if ((r = 0 != (64 & t.effectTag)) || (r = 0 != (2 & a) && (null === e || null !== e.memoizedState)), r ? (u = !0, t.effectTag &= -65) : null !== e && null === e.memoizedState || void 0 === i.fallback || !0 === i.unstable_avoidThisFallback || (a |= 1), he(Jt, 1 & a), null === e) {
      if (i.fallback, u) {
        if (u = i.fallback, (i = $l(null, l, 0, null)).return = t, 0 == (2 & t.mode)) for (e = null !== t.memoizedState ? t.child.child : t.child, i.child = e; null !== e;) e.return = i, e = e.sibling;
        return (n = $l(u, l, n, null)).return = t, i.sibling = n, t.memoizedState = er, t.child = i, n;
      }
      return l = i.children, t.memoizedState = null, t.child = Bt(t, null, l, n);
    }
    if (null !== e.memoizedState) {
      if (l = (e = e.child).sibling, u) {
        if (i = i.fallback, (n = Al(e, e.pendingProps)).return = t, 0 == (2 & t.mode) && (u = null !== t.memoizedState ? t.child.child : t.child) !== e.child) for (n.child = u; null !== u;) u.return = n, u = u.sibling;
        return (l = Al(l, i, l.expirationTime)).return = t, n.sibling = l, n.childExpirationTime = 0, t.memoizedState = er, t.child = n, l;
      }
      return n = Ot(t, e.child, i.children, n), t.memoizedState = null, t.child = n;
    }
    if (e = e.child, u) {
      if (u = i.fallback, (i = $l(null, l, 0, null)).return = t, i.child = e, null !== e && (e.return = i), 0 == (2 & t.mode)) for (e = null !== t.memoizedState ? t.child.child : t.child, i.child = e; null !== e;) e.return = i, e = e.sibling;
      return (n = $l(u, l, n, null)).return = t, i.sibling = n, n.effectTag |= 2, i.childExpirationTime = 0, t.memoizedState = er, t.child = i, n;
    }
    return t.memoizedState = null, t.child = Ot(t, e, i.children, n);
  }
  function nr(e, t) {
    e.expirationTime < t && (e.expirationTime = t);
    var n = e.alternate;
    null !== n && n.expirationTime < t && (n.expirationTime = t), pt(e.return, t);
  }
  function rr(e, t, n, r, l, i) {
    var a = e.memoizedState;
    null === a ? e.memoizedState = {
      isBackwards: t,
      rendering: null,
      last: r,
      tail: n,
      tailExpiration: 0,
      tailMode: l,
      lastEffect: i
    } : (a.isBackwards = t, a.rendering = null, a.last = r, a.tail = n, a.tailExpiration = 0, a.tailMode = l, a.lastEffect = i);
  }
  function lr(e, t, n) {
    var r = t.pendingProps,
      l = r.revealOrder,
      i = r.tail;
    if (Bn(e, t, r.children, n), 0 != (2 & (r = Jt.current))) r = 1 & r | 2, t.effectTag |= 64;else {
      if (null !== e && 0 != (64 & e.effectTag)) e: for (e = t.child; null !== e;) {
        if (13 === e.tag) null !== e.memoizedState && nr(e, n);else if (19 === e.tag) nr(e, n);else if (null !== e.child) {
          e.child.return = e, e = e.child;
          continue;
        }
        if (e === t) break e;
        for (; null === e.sibling;) {
          if (null === e.return || e.return === t) break e;
          e = e.return;
        }
        e.sibling.return = e.return, e = e.sibling;
      }
      r &= 1;
    }
    if (he(Jt, r), 0 == (2 & t.mode)) t.memoizedState = null;else switch (l) {
      case "forwards":
        for (n = t.child, l = null; null !== n;) null !== (e = n.alternate) && null === Xt(e) && (l = n), n = n.sibling;
        null === (n = l) ? (l = t.child, t.child = null) : (l = n.sibling, n.sibling = null), rr(t, !1, l, n, i, t.lastEffect);
        break;
      case "backwards":
        for (n = null, l = t.child, t.child = null; null !== l;) {
          if (null !== (e = l.alternate) && null === Xt(e)) {
            t.child = l;
            break;
          }
          e = l.sibling, l.sibling = n, n = l, l = e;
        }
        rr(t, !0, n, null, i, t.lastEffect);
        break;
      case "together":
        rr(t, !1, null, null, void 0, t.lastEffect);
        break;
      default:
        t.memoizedState = null;
    }
    return t.child;
  }
  function ir(e, t, n) {
    null !== e && (t.dependencies = e.dependencies);
    var r = t.expirationTime;
    if (0 !== r && kl(r), t.childExpirationTime < n) return null;
    if (null !== e && t.child !== e.child) throw Error(f(153));
    if (null !== t.child) {
      for (n = Al(e = t.child, e.pendingProps, e.expirationTime), t.child = n, n.return = t; null !== e.sibling;) e = e.sibling, (n = n.sibling = Al(e, e.pendingProps, e.expirationTime)).return = t;
      n.sibling = null;
    }
    return t.child;
  }
  function ar(e) {
    e.effectTag |= 4;
  }
  function ur(e, t) {
    switch (e.tailMode) {
      case "hidden":
        t = e.tail;
        for (var n = null; null !== t;) null !== t.alternate && (n = t), t = t.sibling;
        null === n ? e.tail = null : n.sibling = null;
        break;
      case "collapsed":
        n = e.tail;
        for (var r = null; null !== n;) null !== n.alternate && (r = n), n = n.sibling;
        null === r ? t || null === e.tail ? e.tail = null : e.tail.sibling = null : r.sibling = null;
    }
  }
  function or(e) {
    switch (e.tag) {
      case 1:
        xe(e.type) && Ee();
        var t = e.effectTag;
        return 4096 & t ? (e.effectTag = -4097 & t | 64, e) : null;
      case 3:
        if (Kt(), ke(), 0 != (64 & (t = e.effectTag))) throw Error(f(285));
        return e.effectTag = -4097 & t | 64, e;
      case 5:
        return Yt(e), null;
      case 13:
        return me(Jt), 4096 & (t = e.effectTag) ? (e.effectTag = -4097 & t | 64, e) : null;
      case 19:
        return me(Jt), null;
      case 4:
        return Kt(), null;
      case 10:
        return dt(e), null;
      default:
        return null;
    }
  }
  function fr(e, t) {
    return {
      value: e,
      source: t,
      stack: se(t)
    };
  }
  Yn = function (e, t) {
    for (var n = t.child; null !== n;) {
      if (5 === n.tag || 6 === n.tag) W(e, n.stateNode);else if (4 !== n.tag && null !== n.child) {
        n.child.return = n, n = n.child;
        continue;
      }
      if (n === t) break;
      for (; null === n.sibling;) {
        if (null === n.return || n.return === t) return;
        n = n.return;
      }
      n.sibling.return = n.return, n = n.sibling;
    }
  }, Jn = function () {}, Xn = function (e, t, n, r, l) {
    if ((e = e.memoizedProps) !== r) {
      var i = t.stateNode,
        a = qt(At.current);
      n = O(i, n, e, r, l, a), (t.updateQueue = n) && ar(t);
    }
  }, Zn = function (e, t, n, r) {
    n !== r && ar(t);
  };
  var cr = "function" == typeof WeakSet ? WeakSet : Set;
  function sr(e, t) {
    var n = t.source,
      r = t.stack;
    null === r && null !== n && (r = se(n)), null !== n && z(n.type), t = t.value, null !== e && 1 === e.tag && z(e.type);
    try {
      console.error(t);
    } catch (e) {
      setTimeout(function () {
        throw e;
      });
    }
  }
  function dr(e) {
    var t = e.ref;
    if (null !== t) if ("function" == typeof t) try {
      t(null);
    } catch (t) {
      Fl(e, t);
    } else t.current = null;
  }
  function pr(e, t) {
    switch (t.tag) {
      case 0:
      case 11:
      case 15:
        mr(2, 0, t);
        break;
      case 1:
        if (256 & t.effectTag && null !== e) {
          var n = e.memoizedProps,
            r = e.memoizedState;
          t = (e = t.stateNode).getSnapshotBeforeUpdate(t.elementType === t.type ? n : it(t.type, n), r), e.__reactInternalSnapshotBeforeUpdate = t;
        }
        break;
      case 3:
      case 5:
      case 6:
      case 4:
      case 17:
        break;
      default:
        throw Error(f(163));
    }
  }
  function mr(e, t, n) {
    if (null !== (n = null !== (n = n.updateQueue) ? n.lastEffect : null)) {
      var r = n = n.next;
      do {
        if (0 != (r.tag & e)) {
          var l = r.destroy;
          r.destroy = void 0, void 0 !== l && l();
        }
        0 != (r.tag & t) && (l = r.create, r.destroy = l()), r = r.next;
      } while (r !== n);
    }
  }
  function hr(e, t, n) {
    switch ("function" == typeof jl && jl(t), t.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
        if (null !== (e = t.updateQueue) && null !== (e = e.lastEffect)) {
          var r = e.next;
          Ge(97 < n ? 97 : n, function () {
            var e = r;
            do {
              var n = e.destroy;
              if (void 0 !== n) {
                var l = t;
                try {
                  n();
                } catch (e) {
                  Fl(l, e);
                }
              }
              e = e.next;
            } while (e !== r);
          });
        }
        break;
      case 1:
        dr(t), "function" == typeof (n = t.stateNode).componentWillUnmount && function (e, t) {
          try {
            t.props = e.memoizedProps, t.state = e.memoizedState, t.componentWillUnmount();
          } catch (t) {
            Fl(e, t);
          }
        }(t, n);
        break;
      case 5:
        dr(t);
        break;
      case 4:
        Tr(e, t, n);
    }
  }
  function gr(e, t, n) {
    for (var r = t;;) if (hr(e, r, n), null === r.child || 4 === r.tag) {
      if (r === t) break;
      for (; null === r.sibling;) {
        if (null === r.return || r.return === t) return;
        r = r.return;
      }
      r.sibling.return = r.return, r = r.sibling;
    } else r.child.return = r, r = r.child;
  }
  function br(e) {
    var t = e.alternate;
    e.return = null, e.child = null, e.memoizedState = null, e.updateQueue = null, e.dependencies = null, e.alternate = null, e.firstEffect = null, e.lastEffect = null, e.pendingProps = null, e.memoizedProps = null, null !== t && br(t);
  }
  function yr(e) {
    return 5 === e.tag || 3 === e.tag || 4 === e.tag;
  }
  function vr(e) {
    e: {
      for (var t = e.return; null !== t;) {
        if (yr(t)) {
          var n = t;
          break e;
        }
        t = t.return;
      }
      throw Error(f(160));
    }
    switch (t = n.stateNode, n.tag) {
      case 5:
        var r = !1;
        break;
      case 3:
      case 4:
        t = t.containerInfo, r = !0;
        break;
      default:
        throw Error(f(161));
    }
    16 & n.effectTag && (re(t), n.effectTag &= -17);
    e: t: for (n = e;;) {
      for (; null === n.sibling;) {
        if (null === n.return || yr(n.return)) {
          n = null;
          break e;
        }
        n = n.return;
      }
      for (n.sibling.return = n.return, n = n.sibling; 5 !== n.tag && 6 !== n.tag && 18 !== n.tag;) {
        if (2 & n.effectTag) continue t;
        if (null === n.child || 4 === n.tag) continue t;
        n.child.return = n, n = n.child;
      }
      if (!(2 & n.effectTag)) {
        n = n.stateNode;
        break e;
      }
    }
    for (var l = e;;) {
      var i = 5 === l.tag || 6 === l.tag;
      if (i) i = i ? l.stateNode : l.stateNode.instance, n ? r ? ee(t, i, n) : Z(t, i, n) : r ? G(t, i) : K(t, i);else if (4 !== l.tag && null !== l.child) {
        l.child.return = l, l = l.child;
        continue;
      }
      if (l === e) break;
      for (; null === l.sibling;) {
        if (null === l.return || l.return === e) return;
        l = l.return;
      }
      l.sibling.return = l.return, l = l.sibling;
    }
  }
  function Tr(e, t, n) {
    for (var r, l, i = t, a = !1;;) {
      if (!a) {
        a = i.return;
        e: for (;;) {
          if (null === a) throw Error(f(160));
          switch (r = a.stateNode, a.tag) {
            case 5:
              l = !1;
              break e;
            case 3:
            case 4:
              r = r.containerInfo, l = !0;
              break e;
          }
          a = a.return;
        }
        a = !0;
      }
      if (5 === i.tag || 6 === i.tag) gr(e, i, n), l ? ne(r, i.stateNode) : te(r, i.stateNode);else if (4 === i.tag) {
        if (null !== i.child) {
          r = i.stateNode.containerInfo, l = !0, i.child.return = i, i = i.child;
          continue;
        }
      } else if (hr(e, i, n), null !== i.child) {
        i.child.return = i, i = i.child;
        continue;
      }
      if (i === t) break;
      for (; null === i.sibling;) {
        if (null === i.return || i.return === t) return;
        4 === (i = i.return).tag && (a = !1);
      }
      i.sibling.return = i.return, i = i.sibling;
    }
  }
  function xr(e, t) {
    switch (t.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
        mr(4, 8, t);
        break;
      case 1:
      case 3:
      case 12:
      case 17:
      case 20:
      case 21:
        break;
      case 5:
        var n = t.stateNode;
        if (null != n) {
          var r = t.memoizedProps;
          e = null !== e ? e.memoizedProps : r;
          var l = t.type,
            i = t.updateQueue;
          t.updateQueue = null, null !== i && X(n, i, l, e, r, t);
        }
        break;
      case 6:
        if (null === t.stateNode) throw Error(f(162));
        n = t.memoizedProps, Y(t.stateNode, null !== e ? e.memoizedProps : n, n);
        break;
      case 13:
        !function (e) {
          var t = e;
          if (null === e.memoizedState) var n = !1;else n = !0, t = e.child, Jr = qe();
          if (null !== t) e: if (e = t, q) for (t = e;;) {
            if (5 === t.tag) {
              var r = t.stateNode;
              n ? le(r) : ae(t.stateNode, t.memoizedProps);
            } else if (6 === t.tag) r = t.stateNode, n ? ie(r) : ue(r, t.memoizedProps);else {
              if (13 === t.tag && null !== t.memoizedState && null === t.memoizedState.dehydrated) {
                (r = t.child.sibling).return = t, t = r;
                continue;
              }
              if (null !== t.child) {
                t.child.return = t, t = t.child;
                continue;
              }
            }
            if (t === e) break e;
            for (; null === t.sibling;) {
              if (null === t.return || t.return === e) break e;
              t = t.return;
            }
            t.sibling.return = t.return, t = t.sibling;
          }
        }(t), Er(t);
        break;
      case 19:
        Er(t);
        break;
      default:
        throw Error(f(163));
    }
  }
  function Er(e) {
    var t = e.updateQueue;
    if (null !== t) {
      e.updateQueue = null;
      var n = e.stateNode;
      null === n && (n = e.stateNode = new cr()), t.forEach(function (t) {
        var r = Dl.bind(null, e, t);
        n.has(t) || (n.add(t), t.then(r, r));
      });
    }
  }
  var kr = "function" == typeof WeakMap ? WeakMap : Map;
  function Sr(e, t, n) {
    (n = vt(n, null)).tag = 3, n.payload = {
      element: null
    };
    var r = t.value;
    return n.callback = function () {
      el || (el = !0, tl = r), sr(e, t);
    }, n;
  }
  function Cr(e, t, n) {
    (n = vt(n, null)).tag = 3;
    var r = e.type.getDerivedStateFromError;
    if ("function" == typeof r) {
      var l = t.value;
      n.payload = function () {
        return sr(e, t), r(l);
      };
    }
    var i = e.stateNode;
    return null !== i && "function" == typeof i.componentDidCatch && (n.callback = function () {
      "function" != typeof r && (null === nl ? nl = new Set([this]) : nl.add(this), sr(e, t));
      var n = t.stack;
      this.componentDidCatch(t.value, {
        componentStack: null !== n ? n : ""
      });
    }), n;
  }
  var wr,
    zr = Math.ceil,
    Pr = c.ReactCurrentDispatcher,
    _r = c.ReactCurrentOwner,
    Nr = 0,
    Ur = 8,
    Rr = 16,
    Ir = 32,
    Mr = 0,
    Fr = 1,
    Qr = 2,
    Dr = 3,
    Wr = 4,
    jr = 5,
    Or = Nr,
    Br = null,
    Hr = null,
    Ar = 0,
    Lr = Mr,
    $r = null,
    qr = 1073741823,
    Vr = 1073741823,
    Kr = null,
    Gr = 0,
    Yr = !1,
    Jr = 0,
    Xr = 500,
    Zr = null,
    el = !1,
    tl = null,
    nl = null,
    rl = !1,
    ll = null,
    il = 90,
    al = null,
    ul = 0,
    ol = null,
    fl = 0;
  function cl() {
    return (Or & (Rr | Ir)) !== Nr ? 1073741821 - (qe() / 10 | 0) : 0 !== fl ? fl : fl = 1073741821 - (qe() / 10 | 0);
  }
  function sl(e, t, n) {
    if (0 == (2 & (t = t.mode))) return 1073741823;
    var r = Ve();
    if (0 == (4 & t)) return 99 === r ? 1073741823 : 1073741822;
    if ((Or & Rr) !== Nr) return Ar;
    if (null !== n) e = tt(e, 0 | n.timeoutMs || 5e3, 250);else switch (r) {
      case 99:
        e = 1073741823;
        break;
      case 98:
        e = tt(e, 150, 100);
        break;
      case 97:
      case 96:
        e = tt(e, 5e3, 250);
        break;
      case 95:
        e = 2;
        break;
      default:
        throw Error(f(326));
    }
    return null !== Br && e === Ar && --e, e;
  }
  function dl(e, t) {
    if (50 < ul) throw ul = 0, ol = null, Error(f(185));
    if (null !== (e = pl(e, t))) {
      var n = Ve();
      1073741823 === t ? (Or & Ur) !== Nr && (Or & (Rr | Ir)) === Nr ? bl(e) : (hl(e), Or === Nr && Xe()) : hl(e), (4 & Or) === Nr || 98 !== n && 99 !== n || (null === al ? al = new Map([[e, t]]) : (void 0 === (n = al.get(e)) || n > t) && al.set(e, t));
    }
  }
  function pl(e, t) {
    e.expirationTime < t && (e.expirationTime = t);
    var n = e.alternate;
    null !== n && n.expirationTime < t && (n.expirationTime = t);
    var r = e.return,
      l = null;
    if (null === r && 3 === e.tag) l = e.stateNode;else for (; null !== r;) {
      if (n = r.alternate, r.childExpirationTime < t && (r.childExpirationTime = t), null !== n && n.childExpirationTime < t && (n.childExpirationTime = t), null === r.return && 3 === r.tag) {
        l = r.stateNode;
        break;
      }
      r = r.return;
    }
    return null !== l && (Br === l && (kl(t), Lr === Wr && Yl(l, Ar)), Jl(l, t)), l;
  }
  function ml(e) {
    var t = e.lastExpiredTime;
    return 0 !== t ? t : Gl(e, t = e.firstPendingTime) ? (t = e.lastPingedTime) > (e = e.nextKnownPendingLevel) ? t : e : t;
  }
  function hl(e) {
    if (0 !== e.lastExpiredTime) e.callbackExpirationTime = 1073741823, e.callbackPriority = 99, e.callbackNode = Je(bl.bind(null, e));else {
      var t = ml(e),
        n = e.callbackNode;
      if (0 === t) null !== n && (e.callbackNode = null, e.callbackExpirationTime = 0, e.callbackPriority = 90);else {
        var r = cl();
        if (r = 1073741823 === t ? 99 : 1 === t || 2 === t ? 95 : 0 >= (r = 10 * (1073741821 - t) - 10 * (1073741821 - r)) ? 99 : 250 >= r ? 98 : 5250 >= r ? 97 : 95, null !== n) {
          var l = e.callbackPriority;
          if (e.callbackExpirationTime === t && l >= r) return;
          n !== Oe && Ne(n);
        }
        e.callbackExpirationTime = t, e.callbackPriority = r, t = 1073741823 === t ? Je(bl.bind(null, e)) : Ye(r, gl.bind(null, e), {
          timeout: 10 * (1073741821 - t) - qe()
        }), e.callbackNode = t;
      }
    }
  }
  function gl(e, t) {
    if (fl = 0, t) return Xl(e, t = cl()), hl(e), null;
    var n = ml(e);
    if (0 !== n) {
      if (t = e.callbackNode, (Or & (Rr | Ir)) !== Nr) throw Error(f(327));
      if (Rl(), e === Br && n === Ar || vl(e, n), null !== Hr) {
        var r = Or;
        Or |= Rr;
        for (var l = xl();;) try {
          Cl();
          break;
        } catch (t) {
          Tl(e, t);
        }
        if (ct(), Or = r, Pr.current = l, Lr === Fr) throw t = $r, vl(e, n), Yl(e, n), hl(e), t;
        if (null === Hr) switch (l = e.finishedWork = e.current.alternate, e.finishedExpirationTime = n, r = Lr, Br = null, r) {
          case Mr:
          case Fr:
            throw Error(f(345));
          case Qr:
            Xl(e, 2 < n ? 2 : n);
            break;
          case Dr:
            if (Yl(e, n), n === (r = e.lastSuspendedTime) && (e.nextKnownPendingLevel = Pl(l)), 1073741823 === qr && 10 < (l = Jr + Xr - qe())) {
              if (Yr) {
                var i = e.lastPingedTime;
                if (0 === i || i >= n) {
                  e.lastPingedTime = n, vl(e, n);
                  break;
                }
              }
              if (0 !== (i = ml(e)) && i !== n) break;
              if (0 !== r && r !== n) {
                e.lastPingedTime = r;
                break;
              }
              e.timeoutHandle = A(_l.bind(null, e), l);
              break;
            }
            _l(e);
            break;
          case Wr:
            if (Yl(e, n), n === (r = e.lastSuspendedTime) && (e.nextKnownPendingLevel = Pl(l)), Yr && (0 === (l = e.lastPingedTime) || l >= n)) {
              e.lastPingedTime = n, vl(e, n);
              break;
            }
            if (0 !== (l = ml(e)) && l !== n) break;
            if (0 !== r && r !== n) {
              e.lastPingedTime = r;
              break;
            }
            if (1073741823 !== Vr ? r = 10 * (1073741821 - Vr) - qe() : 1073741823 === qr ? r = 0 : (r = 10 * (1073741821 - qr) - 5e3, 0 > (r = (l = qe()) - r) && (r = 0), (n = 10 * (1073741821 - n) - l) < (r = (120 > r ? 120 : 480 > r ? 480 : 1080 > r ? 1080 : 1920 > r ? 1920 : 3e3 > r ? 3e3 : 4320 > r ? 4320 : 1960 * zr(r / 1960)) - r) && (r = n)), 10 < r) {
              e.timeoutHandle = A(_l.bind(null, e), r);
              break;
            }
            _l(e);
            break;
          case jr:
            if (1073741823 !== qr && null !== Kr) {
              i = qr;
              var a = Kr;
              if (0 >= (r = 0 | a.busyMinDurationMs) ? r = 0 : (l = 0 | a.busyDelayMs, r = (i = qe() - (10 * (1073741821 - i) - (0 | a.timeoutMs || 5e3))) <= l ? 0 : l + r - i), 10 < r) {
                Yl(e, n), e.timeoutHandle = A(_l.bind(null, e), r);
                break;
              }
            }
            _l(e);
            break;
          default:
            throw Error(f(329));
        }
        if (hl(e), e.callbackNode === t) return gl.bind(null, e);
      }
    }
    return null;
  }
  function bl(e) {
    var t = e.lastExpiredTime;
    if (t = 0 !== t ? t : 1073741823, e.finishedExpirationTime === t) _l(e);else {
      if ((Or & (Rr | Ir)) !== Nr) throw Error(f(327));
      if (Rl(), e === Br && t === Ar || vl(e, t), null !== Hr) {
        var n = Or;
        Or |= Rr;
        for (var r = xl();;) try {
          Sl();
          break;
        } catch (t) {
          Tl(e, t);
        }
        if (ct(), Or = n, Pr.current = r, Lr === Fr) throw n = $r, vl(e, t), Yl(e, t), hl(e), n;
        if (null !== Hr) throw Error(f(261));
        e.finishedWork = e.current.alternate, e.finishedExpirationTime = t, Br = null, _l(e), hl(e);
      }
    }
    return null;
  }
  function yl(e, t) {
    if ((Or & (Rr | Ir)) !== Nr) throw Error(f(187));
    var n = Or;
    Or |= 1;
    try {
      return Ge(99, e.bind(null, t));
    } finally {
      Or = n, Xe();
    }
  }
  function vl(e, t) {
    e.finishedWork = null, e.finishedExpirationTime = 0;
    var n = e.timeoutHandle;
    if (n !== $ && (e.timeoutHandle = $, L(n)), null !== Hr) for (n = Hr.return; null !== n;) {
      var r = n;
      switch (r.tag) {
        case 1:
          var l = r.type.childContextTypes;
          null != l && Ee();
          break;
        case 3:
          Kt(), ke();
          break;
        case 5:
          Yt(r);
          break;
        case 4:
          Kt();
          break;
        case 13:
        case 19:
          me(Jt);
          break;
        case 10:
          dt(r);
      }
      n = n.return;
    }
    Br = e, Hr = Al(e.current, null), Ar = t, Lr = Mr, $r = null, Vr = qr = 1073741823, Kr = null, Gr = 0, Yr = !1;
  }
  function Tl(e, t) {
    for (;;) {
      try {
        if (ct(), vn(), null === Hr || null === Hr.return) return Lr = Fr, $r = t, null;
        e: {
          var n = e,
            r = Hr.return,
            l = Hr,
            i = t;
          if (t = Ar, l.effectTag |= 2048, l.firstEffect = l.lastEffect = null, null !== i && "object" == typeof i && "function" == typeof i.then) {
            var a = i,
              u = 0 != (1 & Jt.current),
              o = r;
            do {
              var f;
              if (f = 13 === o.tag) {
                var c = o.memoizedState;
                if (null !== c) f = null !== c.dehydrated;else {
                  var s = o.memoizedProps;
                  f = void 0 !== s.fallback && (!0 !== s.unstable_avoidThisFallback || !u);
                }
              }
              if (f) {
                var d = o.updateQueue;
                if (null === d) {
                  var p = new Set();
                  p.add(a), o.updateQueue = p;
                } else d.add(a);
                if (0 == (2 & o.mode)) {
                  if (o.effectTag |= 64, l.effectTag &= -2981, 1 === l.tag) if (null === l.alternate) l.tag = 17;else {
                    var m = vt(1073741823, null);
                    m.tag = 2, xt(l, m);
                  }
                  l.expirationTime = 1073741823;
                  break e;
                }
                i = void 0, l = t;
                var h = n.pingCache;
                if (null === h ? (h = n.pingCache = new kr(), i = new Set(), h.set(a, i)) : void 0 === (i = h.get(a)) && (i = new Set(), h.set(a, i)), !i.has(l)) {
                  i.add(l);
                  var g = Ql.bind(null, n, a, l);
                  a.then(g, g);
                }
                o.effectTag |= 4096, o.expirationTime = t;
                break e;
              }
              o = o.return;
            } while (null !== o);
            i = Error((z(l.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display." + se(l));
          }
          Lr !== jr && (Lr = Qr), i = fr(i, l), o = r;
          do {
            switch (o.tag) {
              case 3:
                a = i, o.effectTag |= 4096, o.expirationTime = t, Et(o, Sr(o, a, t));
                break e;
              case 1:
                a = i;
                var b = o.type,
                  y = o.stateNode;
                if (0 == (64 & o.effectTag) && ("function" == typeof b.getDerivedStateFromError || null !== y && "function" == typeof y.componentDidCatch && (null === nl || !nl.has(y)))) {
                  o.effectTag |= 4096, o.expirationTime = t, Et(o, Cr(o, a, t));
                  break e;
                }
            }
            o = o.return;
          } while (null !== o);
        }
        Hr = zl(Hr);
      } catch (e) {
        t = e;
        continue;
      }
      break;
    }
  }
  function xl() {
    var e = Pr.current;
    return Pr.current = Qn, null === e ? Qn : e;
  }
  function El(e, t) {
    e < qr && 2 < e && (qr = e), null !== t && e < Vr && 2 < e && (Vr = e, Kr = t);
  }
  function kl(e) {
    e > Gr && (Gr = e);
  }
  function Sl() {
    for (; null !== Hr;) Hr = wl(Hr);
  }
  function Cl() {
    for (; null !== Hr && !Ue();) Hr = wl(Hr);
  }
  function wl(e) {
    var t = wr(e.alternate, e, Ar);
    return e.memoizedProps = e.pendingProps, null === t && (t = zl(e)), _r.current = null, t;
  }
  function zl(e) {
    Hr = e;
    do {
      var t = Hr.alternate;
      if (e = Hr.return, 0 == (2048 & Hr.effectTag)) {
        e: {
          var n = t,
            r = Ar,
            l = (t = Hr).pendingProps;
          switch (t.tag) {
            case 2:
            case 16:
            case 15:
            case 0:
            case 11:
            case 7:
            case 8:
            case 12:
            case 9:
            case 14:
            case 20:
            case 21:
              break;
            case 1:
            case 17:
              xe(t.type) && Ee();
              break;
            case 3:
              Kt(), ke(), (l = t.stateNode).pendingContext && (l.context = l.pendingContext, l.pendingContext = null), null === n || n.child, Jn(t);
              break;
            case 5:
              Yt(t);
              var i = qt($t.current);
              if (r = t.type, null !== n && null != t.stateNode) Xn(n, t, r, l, i), n.ref !== t.ref && (t.effectTag |= 128);else if (l) {
                n = qt(At.current);
                var a = D(r, l, i, n, t);
                Yn(a, t, !1, !1), t.stateNode = a, j(a, r, l, i, n) && ar(t), null !== t.ref && (t.effectTag |= 128);
              } else if (null === t.stateNode) throw Error(f(166));
              break;
            case 6:
              if (n && null != t.stateNode) Zn(n, t, n.memoizedProps, l);else {
                if ("string" != typeof l && null === t.stateNode) throw Error(f(166));
                n = qt($t.current), i = qt(At.current), t.stateNode = H(l, n, i, t);
              }
              break;
            case 13:
              if (me(Jt), l = t.memoizedState, 0 != (64 & t.effectTag)) {
                t.expirationTime = r;
                break e;
              }
              l = null !== l, i = !1, null === n ? t.memoizedProps.fallback : (i = null !== (r = n.memoizedState), l || null === r || null !== (r = n.child.sibling) && (null !== (a = t.firstEffect) ? (t.firstEffect = r, r.nextEffect = a) : (t.firstEffect = t.lastEffect = r, r.nextEffect = null), r.effectTag = 8)), l && !i && 0 != (2 & t.mode) && (null === n && !0 !== t.memoizedProps.unstable_avoidThisFallback || 0 != (1 & Jt.current) ? Lr === Mr && (Lr = Dr) : (Lr !== Mr && Lr !== Dr || (Lr = Wr), 0 !== Gr && null !== Br && (Yl(Br, Ar), Jl(Br, Gr)))), (l || i) && (t.effectTag |= 4);
              break;
            case 4:
              Kt(), Jn(t);
              break;
            case 10:
              dt(t);
              break;
            case 19:
              if (me(Jt), null === (l = t.memoizedState)) break;
              if (i = 0 != (64 & t.effectTag), null === (a = l.rendering)) {
                if (i) ur(l, !1);else if (Lr !== Mr || null !== n && 0 != (64 & n.effectTag)) for (n = t.child; null !== n;) {
                  if (null !== (a = Xt(n))) {
                    for (t.effectTag |= 64, ur(l, !1), null !== (n = a.updateQueue) && (t.updateQueue = n, t.effectTag |= 4), null === l.lastEffect && (t.firstEffect = null), t.lastEffect = l.lastEffect, n = r, l = t.child; null !== l;) r = n, (i = l).effectTag &= 2, i.nextEffect = null, i.firstEffect = null, i.lastEffect = null, null === (a = i.alternate) ? (i.childExpirationTime = 0, i.expirationTime = r, i.child = null, i.memoizedProps = null, i.memoizedState = null, i.updateQueue = null, i.dependencies = null) : (i.childExpirationTime = a.childExpirationTime, i.expirationTime = a.expirationTime, i.child = a.child, i.memoizedProps = a.memoizedProps, i.memoizedState = a.memoizedState, i.updateQueue = a.updateQueue, r = a.dependencies, i.dependencies = null === r ? null : {
                      expirationTime: r.expirationTime,
                      firstContext: r.firstContext,
                      responders: r.responders
                    }), l = l.sibling;
                    he(Jt, 1 & Jt.current | 2), t = t.child;
                    break e;
                  }
                  n = n.sibling;
                }
              } else {
                if (!i) if (null !== (n = Xt(a))) {
                  if (t.effectTag |= 64, i = !0, null !== (n = n.updateQueue) && (t.updateQueue = n, t.effectTag |= 4), ur(l, !0), null === l.tail && "hidden" === l.tailMode) {
                    null !== (t = t.lastEffect = l.lastEffect) && (t.nextEffect = null);
                    break;
                  }
                } else qe() > l.tailExpiration && 1 < r && (t.effectTag |= 64, i = !0, ur(l, !1), t.expirationTime = t.childExpirationTime = r - 1);
                l.isBackwards ? (a.sibling = t.child, t.child = a) : (null !== (n = l.last) ? n.sibling = a : t.child = a, l.last = a);
              }
              if (null !== l.tail) {
                0 === l.tailExpiration && (l.tailExpiration = qe() + 500), n = l.tail, l.rendering = n, l.tail = n.sibling, l.lastEffect = t.lastEffect, n.sibling = null, l = Jt.current, he(Jt, l = i ? 1 & l | 2 : 1 & l), t = n;
                break e;
              }
              break;
            default:
              throw Error(f(156, t.tag));
          }
          t = null;
        }
        if (n = Hr, 1 === Ar || 1 !== n.childExpirationTime) {
          for (l = 0, i = n.child; null !== i;) (r = i.expirationTime) > l && (l = r), (a = i.childExpirationTime) > l && (l = a), i = i.sibling;
          n.childExpirationTime = l;
        }
        if (null !== t) return t;
        null !== e && 0 == (2048 & e.effectTag) && (null === e.firstEffect && (e.firstEffect = Hr.firstEffect), null !== Hr.lastEffect && (null !== e.lastEffect && (e.lastEffect.nextEffect = Hr.firstEffect), e.lastEffect = Hr.lastEffect), 1 < Hr.effectTag && (null !== e.lastEffect ? e.lastEffect.nextEffect = Hr : e.firstEffect = Hr, e.lastEffect = Hr));
      } else {
        if (null !== (t = or(Hr))) return t.effectTag &= 2047, t;
        null !== e && (e.firstEffect = e.lastEffect = null, e.effectTag |= 2048);
      }
      if (null !== (t = Hr.sibling)) return t;
      Hr = e;
    } while (null !== Hr);
    return Lr === Mr && (Lr = jr), null;
  }
  function Pl(e) {
    var t = e.expirationTime;
    return t > (e = e.childExpirationTime) ? t : e;
  }
  function _l(e) {
    var t = Ve();
    return Ge(99, Nl.bind(null, e, t)), null;
  }
  function Nl(e, t) {
    if (Rl(), (Or & (Rr | Ir)) !== Nr) throw Error(f(327));
    var n = e.finishedWork,
      r = e.finishedExpirationTime;
    if (null === n) return null;
    if (e.finishedWork = null, e.finishedExpirationTime = 0, n === e.current) throw Error(f(177));
    e.callbackNode = null, e.callbackExpirationTime = 0, e.callbackPriority = 90, e.nextKnownPendingLevel = 0;
    var l = Pl(n);
    if (e.firstPendingTime = l, r <= e.lastSuspendedTime ? e.firstSuspendedTime = e.lastSuspendedTime = e.nextKnownPendingLevel = 0 : r <= e.firstSuspendedTime && (e.firstSuspendedTime = r - 1), r <= e.lastPingedTime && (e.lastPingedTime = 0), r <= e.lastExpiredTime && (e.lastExpiredTime = 0), e === Br && (Hr = Br = null, Ar = 0), 1 < n.effectTag ? null !== n.lastEffect ? (n.lastEffect.nextEffect = n, l = n.firstEffect) : l = n : l = n.firstEffect, null !== l) {
      var i = Or;
      Or |= Ir, _r.current = null, F(e.containerInfo), Zr = l;
      do {
        try {
          Ul();
        } catch (e) {
          if (null === Zr) throw Error(f(330));
          Fl(Zr, e), Zr = Zr.nextEffect;
        }
      } while (null !== Zr);
      Zr = l;
      do {
        try {
          for (var a = e, u = t; null !== Zr;) {
            var o = Zr.effectTag;
            if (16 & o && q && re(Zr.stateNode), 128 & o) {
              var c = Zr.alternate;
              if (null !== c) {
                var s = c.ref;
                null !== s && ("function" == typeof s ? s(null) : s.current = null);
              }
            }
            switch (1038 & o) {
              case 2:
                vr(Zr), Zr.effectTag &= -3;
                break;
              case 6:
                vr(Zr), Zr.effectTag &= -3, xr(Zr.alternate, Zr);
                break;
              case 1024:
                Zr.effectTag &= -1025;
                break;
              case 1028:
                Zr.effectTag &= -1025, xr(Zr.alternate, Zr);
                break;
              case 4:
                xr(Zr.alternate, Zr);
                break;
              case 8:
                var d = a,
                  p = Zr,
                  m = u;
                q ? Tr(d, p, m) : gr(d, p, m), br(p);
            }
            Zr = Zr.nextEffect;
          }
        } catch (e) {
          if (null === Zr) throw Error(f(330));
          Fl(Zr, e), Zr = Zr.nextEffect;
        }
      } while (null !== Zr);
      Q(e.containerInfo), e.current = n, Zr = l;
      do {
        try {
          for (o = r; null !== Zr;) {
            var h = Zr.effectTag;
            if (36 & h) {
              var g = Zr.alternate;
              switch (s = o, (c = Zr).tag) {
                case 0:
                case 11:
                case 15:
                  mr(16, 32, c);
                  break;
                case 1:
                  var b = c.stateNode;
                  if (4 & c.effectTag) if (null === g) b.componentDidMount();else {
                    var y = c.elementType === c.type ? g.memoizedProps : it(c.type, g.memoizedProps);
                    b.componentDidUpdate(y, g.memoizedState, b.__reactInternalSnapshotBeforeUpdate);
                  }
                  var v = c.updateQueue;
                  null !== v && wt(0, v, b);
                  break;
                case 3:
                  var T = c.updateQueue;
                  if (null !== T) {
                    if (a = null, null !== c.child) switch (c.child.tag) {
                      case 5:
                        a = R(c.child.stateNode);
                        break;
                      case 1:
                        a = c.child.stateNode;
                    }
                    wt(0, T, a);
                  }
                  break;
                case 5:
                  var x = c.stateNode;
                  null === g && 4 & c.effectTag && J(x, c.type, c.memoizedProps, c);
                  break;
                case 6:
                case 4:
                case 12:
                case 19:
                case 17:
                case 20:
                case 21:
                  break;
                case 13:
                  V && c.memoizedState;
                  break;
                default:
                  throw Error(f(163));
              }
            }
            if (128 & h) {
              c = void 0;
              var E = Zr.ref;
              if (null !== E) {
                var k = Zr.stateNode;
                c = 5 === Zr.tag ? R(k) : k, "function" == typeof E ? E(c) : E.current = c;
              }
            }
            Zr = Zr.nextEffect;
          }
        } catch (e) {
          if (null === Zr) throw Error(f(330));
          Fl(Zr, e), Zr = Zr.nextEffect;
        }
      } while (null !== Zr);
      Zr = null, Be(), Or = i;
    } else e.current = n;
    if (rl) rl = !1, ll = e, il = t;else for (Zr = l; null !== Zr;) t = Zr.nextEffect, Zr.nextEffect = null, Zr = t;
    if (0 === (t = e.firstPendingTime) && (nl = null), 1073741823 === t ? e === ol ? ul++ : (ul = 0, ol = e) : ul = 0, "function" == typeof Wl && Wl(n.stateNode, r), hl(e), el) throw el = !1, e = tl, tl = null, e;
    return (Or & Ur) !== Nr || Xe(), null;
  }
  function Ul() {
    for (; null !== Zr;) {
      var e = Zr.effectTag;
      0 != (256 & e) && pr(Zr.alternate, Zr), 0 == (512 & e) || rl || (rl = !0, Ye(97, function () {
        return Rl(), null;
      })), Zr = Zr.nextEffect;
    }
  }
  function Rl() {
    if (90 !== il) {
      var e = 97 < il ? 97 : il;
      return il = 90, Ge(e, Il);
    }
  }
  function Il() {
    if (null === ll) return !1;
    var e = ll;
    if (ll = null, (Or & (Rr | Ir)) !== Nr) throw Error(f(331));
    var t = Or;
    for (Or |= Ir, e = e.current.firstEffect; null !== e;) {
      try {
        var n = e;
        if (0 != (512 & n.effectTag)) switch (n.tag) {
          case 0:
          case 11:
          case 15:
            mr(128, 0, n), mr(0, 64, n);
        }
      } catch (t) {
        if (null === e) throw Error(f(330));
        Fl(e, t);
      }
      n = e.nextEffect, e.nextEffect = null, e = n;
    }
    return Or = t, Xe(), !0;
  }
  function Ml(e, t, n) {
    xt(e, t = Sr(e, t = fr(n, t), 1073741823)), null !== (e = pl(e, 1073741823)) && hl(e);
  }
  function Fl(e, t) {
    if (3 === e.tag) Ml(e, e, t);else for (var n = e.return; null !== n;) {
      if (3 === n.tag) {
        Ml(n, e, t);
        break;
      }
      if (1 === n.tag) {
        var r = n.stateNode;
        if ("function" == typeof n.type.getDerivedStateFromError || "function" == typeof r.componentDidCatch && (null === nl || !nl.has(r))) {
          xt(n, e = Cr(n, e = fr(t, e), 1073741823)), null !== (n = pl(n, 1073741823)) && hl(n);
          break;
        }
      }
      n = n.return;
    }
  }
  function Ql(e, t, n) {
    var r = e.pingCache;
    null !== r && r.delete(t), Br === e && Ar === n ? Lr === Wr || Lr === Dr && 1073741823 === qr && qe() - Jr < Xr ? vl(e, Ar) : Yr = !0 : Gl(e, n) && (0 !== (t = e.lastPingedTime) && t < n || (e.lastPingedTime = n, e.finishedExpirationTime === n && (e.finishedExpirationTime = 0, e.finishedWork = null), hl(e)));
  }
  function Dl(e, t) {
    var n = e.stateNode;
    null !== n && n.delete(t), 0 == (t = 0) && (t = sl(t = cl(), e, null)), null !== (e = pl(e, t)) && hl(e);
  }
  wr = function (e, t, n) {
    var r = t.expirationTime;
    if (null !== e) {
      var l = t.pendingProps;
      if (e.memoizedProps !== l || ye.current) On = !0;else {
        if (r < n) {
          switch (On = !1, t.tag) {
            case 3:
              Gn(t);
              break;
            case 5:
              if (Gt(t), 4 & t.mode && 1 !== n && null(t.type, l)) return t.expirationTime = t.childExpirationTime = 1, null;
              break;
            case 1:
              xe(t.type) && we(t);
              break;
            case 4:
              Vt(t, t.stateNode.containerInfo);
              break;
            case 10:
              st(t, t.memoizedProps.value);
              break;
            case 13:
              if (null !== t.memoizedState) return 0 !== (r = t.child.childExpirationTime) && r >= n ? tr(e, t, n) : (he(Jt, 1 & Jt.current), null !== (t = ir(e, t, n)) ? t.sibling : null);
              he(Jt, 1 & Jt.current);
              break;
            case 19:
              if (r = t.childExpirationTime >= n, 0 != (64 & e.effectTag)) {
                if (r) return lr(e, t, n);
                t.effectTag |= 64;
              }
              if (null !== (l = t.memoizedState) && (l.rendering = null, l.tail = null), he(Jt, Jt.current), !r) return null;
          }
          return ir(e, t, n);
        }
        On = !1;
      }
    } else On = !1;
    switch (t.expirationTime = 0, t.tag) {
      case 2:
        if (r = t.type, null !== e && (e.alternate = null, t.alternate = null, t.effectTag |= 2), e = t.pendingProps, l = Te(t, be.current), mt(t, n), l = yn(null, t, r, e, l, n), t.effectTag |= 1, "object" == typeof l && null !== l && "function" == typeof l.render && void 0 === l.$$typeof) {
          if (t.tag = 1, vn(), xe(r)) {
            var i = !0;
            we(t);
          } else i = !1;
          t.memoizedState = null !== l.state && void 0 !== l.state ? l.state : null;
          var a = r.getDerivedStateFromProps;
          "function" == typeof a && Nt(t, r, a, e), l.updater = Ut, t.stateNode = l, l._reactInternalFiber = t, Ft(t, r, e, n), t = Kn(null, t, r, !0, i, n);
        } else t.tag = 0, Bn(null, t, l, n), t = t.child;
        return t;
      case 16:
        if (l = t.elementType, null !== e && (e.alternate = null, t.alternate = null, t.effectTag |= 2), e = t.pendingProps, function (e) {
          if (-1 === e._status) {
            e._status = 0;
            var t = e._ctor;
            t = t(), e._result = t, t.then(function (t) {
              0 === e._status && (t = t.default, e._status = 1, e._result = t);
            }, function (t) {
              0 === e._status && (e._status = 2, e._result = t);
            });
          }
        }(l), 1 !== l._status) throw l._result;
        switch (l = l._result, t.type = l, i = t.tag = function (e) {
          if ("function" == typeof e) return Hl(e) ? 1 : 0;
          if (null != e) {
            if ((e = e.$$typeof) === T) return 11;
            if (e === k) return 14;
          }
          return 2;
        }(l), e = it(l, e), i) {
          case 0:
            t = qn(null, t, l, e, n);
            break;
          case 1:
            t = Vn(null, t, l, e, n);
            break;
          case 11:
            t = Hn(null, t, l, e, n);
            break;
          case 14:
            t = An(null, t, l, it(l.type, e), r, n);
            break;
          default:
            throw Error(f(306, l, ""));
        }
        return t;
      case 0:
        return r = t.type, l = t.pendingProps, qn(e, t, r, l = t.elementType === r ? l : it(r, l), n);
      case 1:
        return r = t.type, l = t.pendingProps, Vn(e, t, r, l = t.elementType === r ? l : it(r, l), n);
      case 3:
        if (Gn(t), null === (r = t.updateQueue)) throw Error(f(282));
        if (l = null !== (l = t.memoizedState) ? l.element : null, Ct(t, r, t.pendingProps, null, n), (r = t.memoizedState.element) === l) t = ir(e, t, n);else {
          if ((l = t.stateNode.hydrate) && (l = !1), l) for (n = Bt(t, null, r, n), t.child = n; n;) n.effectTag = -3 & n.effectTag | 1024, n = n.sibling;else Bn(e, t, r, n);
          t = t.child;
        }
        return t;
      case 5:
        return Gt(t), r = t.type, l = t.pendingProps, i = null !== e ? e.memoizedProps : null, a = l.children, B(r, l) ? a = null : null !== i && B(r, i) && (t.effectTag |= 16), $n(e, t), 4 & t.mode && 1 !== n && null(r, l) ? (t.expirationTime = t.childExpirationTime = 1, t = null) : (Bn(e, t, a, n), t = t.child), t;
      case 6:
        return null;
      case 13:
        return tr(e, t, n);
      case 4:
        return Vt(t, t.stateNode.containerInfo), r = t.pendingProps, null === e ? t.child = Ot(t, null, r, n) : Bn(e, t, r, n), t.child;
      case 11:
        return r = t.type, l = t.pendingProps, Hn(e, t, r, l = t.elementType === r ? l : it(r, l), n);
      case 7:
        return Bn(e, t, t.pendingProps, n), t.child;
      case 8:
      case 12:
        return Bn(e, t, t.pendingProps.children, n), t.child;
      case 10:
        e: {
          if (r = t.type._context, l = t.pendingProps, a = t.memoizedProps, st(t, i = l.value), null !== a) {
            var u = a.value;
            if (0 == (i = nt(u, i) ? 0 : 0 | ("function" == typeof r._calculateChangedBits ? r._calculateChangedBits(u, i) : 1073741823))) {
              if (a.children === l.children && !ye.current) {
                t = ir(e, t, n);
                break e;
              }
            } else for (null !== (u = t.child) && (u.return = t); null !== u;) {
              var o = u.dependencies;
              if (null !== o) {
                a = u.child;
                for (var c = o.firstContext; null !== c;) {
                  if (c.context === r && 0 != (c.observedBits & i)) {
                    1 === u.tag && ((c = vt(n, null)).tag = 2, xt(u, c)), u.expirationTime < n && (u.expirationTime = n), null !== (c = u.alternate) && c.expirationTime < n && (c.expirationTime = n), pt(u.return, n), o.expirationTime < n && (o.expirationTime = n);
                    break;
                  }
                  c = c.next;
                }
              } else a = 10 === u.tag && u.type === t.type ? null : u.child;
              if (null !== a) a.return = u;else for (a = u; null !== a;) {
                if (a === t) {
                  a = null;
                  break;
                }
                if (null !== (u = a.sibling)) {
                  u.return = a.return, a = u;
                  break;
                }
                a = a.return;
              }
              u = a;
            }
          }
          Bn(e, t, l.children, n), t = t.child;
        }
        return t;
      case 9:
        return l = t.type, r = (i = t.pendingProps).children, mt(t, n), r = r(l = ht(l, i.unstable_observedBits)), t.effectTag |= 1, Bn(e, t, r, n), t.child;
      case 14:
        return i = it(l = t.type, t.pendingProps), An(e, t, l, i = it(l.type, i), r, n);
      case 15:
        return Ln(e, t, t.type, t.pendingProps, r, n);
      case 17:
        return r = t.type, l = t.pendingProps, l = t.elementType === r ? l : it(r, l), null !== e && (e.alternate = null, t.alternate = null, t.effectTag |= 2), t.tag = 1, xe(r) ? (e = !0, we(t)) : e = !1, mt(t, n), It(t, r, l), Ft(t, r, l, n), Kn(null, t, r, !0, e, n);
      case 19:
        return lr(e, t, n);
    }
    throw Error(f(156, t.tag));
  };
  var Wl = null,
    jl = null;
  function Ol(e, t, n, r) {
    this.tag = e, this.key = n, this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null, this.index = 0, this.ref = null, this.pendingProps = t, this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null, this.mode = r, this.effectTag = 0, this.lastEffect = this.firstEffect = this.nextEffect = null, this.childExpirationTime = this.expirationTime = 0, this.alternate = null;
  }
  function Bl(e, t, n, r) {
    return new Ol(e, t, n, r);
  }
  function Hl(e) {
    return !(!(e = e.prototype) || !e.isReactComponent);
  }
  function Al(e, t) {
    var n = e.alternate;
    return null === n ? ((n = Bl(e.tag, t, e.key, e.mode)).elementType = e.elementType, n.type = e.type, n.stateNode = e.stateNode, n.alternate = e, e.alternate = n) : (n.pendingProps = t, n.effectTag = 0, n.nextEffect = null, n.firstEffect = null, n.lastEffect = null), n.childExpirationTime = e.childExpirationTime, n.expirationTime = e.expirationTime, n.child = e.child, n.memoizedProps = e.memoizedProps, n.memoizedState = e.memoizedState, n.updateQueue = e.updateQueue, t = e.dependencies, n.dependencies = null === t ? null : {
      expirationTime: t.expirationTime,
      firstContext: t.firstContext,
      responders: t.responders
    }, n.sibling = e.sibling, n.index = e.index, n.ref = e.ref, n;
  }
  function Ll(e, t, n, r, l, i) {
    var a = 2;
    if (r = e, "function" == typeof e) Hl(e) && (a = 1);else if ("string" == typeof e) a = 5;else e: switch (e) {
      case m:
        return $l(n.children, l, i, t);
      case v:
        a = 8, l |= 7;
        break;
      case h:
        a = 8, l |= 1;
        break;
      case g:
        return (e = Bl(12, n, t, 8 | l)).elementType = g, e.type = g, e.expirationTime = i, e;
      case x:
        return (e = Bl(13, n, t, l)).type = x, e.elementType = x, e.expirationTime = i, e;
      case E:
        return (e = Bl(19, n, t, l)).elementType = E, e.expirationTime = i, e;
      default:
        if ("object" == typeof e && null !== e) switch (e.$$typeof) {
          case b:
            a = 10;
            break e;
          case y:
            a = 9;
            break e;
          case T:
            a = 11;
            break e;
          case k:
            a = 14;
            break e;
          case S:
            a = 16, r = null;
            break e;
        }
        throw Error(f(130, null == e ? e : typeof e, ""));
    }
    return (t = Bl(a, n, t, l)).elementType = e, t.type = r, t.expirationTime = i, t;
  }
  function $l(e, t, n, r) {
    return (e = Bl(7, e, r, t)).expirationTime = n, e;
  }
  function ql(e, t, n) {
    return (e = Bl(6, e, null, t)).expirationTime = n, e;
  }
  function Vl(e, t, n) {
    return (t = Bl(4, null !== e.children ? e.children : [], e.key, t)).expirationTime = n, t.stateNode = {
      containerInfo: e.containerInfo,
      pendingChildren: null,
      implementation: e.implementation
    }, t;
  }
  function Kl(e, t, n) {
    this.tag = t, this.current = null, this.containerInfo = e, this.pingCache = this.pendingChildren = null, this.finishedExpirationTime = 0, this.finishedWork = null, this.timeoutHandle = $, this.pendingContext = this.context = null, this.hydrate = n, this.callbackNode = null, this.callbackPriority = 90, this.lastExpiredTime = this.lastPingedTime = this.nextKnownPendingLevel = this.lastSuspendedTime = this.firstSuspendedTime = this.firstPendingTime = 0;
  }
  function Gl(e, t) {
    var n = e.firstSuspendedTime;
    return e = e.lastSuspendedTime, 0 !== n && n >= t && e <= t;
  }
  function Yl(e, t) {
    var n = e.firstSuspendedTime,
      r = e.lastSuspendedTime;
    n < t && (e.firstSuspendedTime = t), (r > t || 0 === n) && (e.lastSuspendedTime = t), t <= e.lastPingedTime && (e.lastPingedTime = 0), t <= e.lastExpiredTime && (e.lastExpiredTime = 0);
  }
  function Jl(e, t) {
    t > e.firstPendingTime && (e.firstPendingTime = t);
    var n = e.firstSuspendedTime;
    0 !== n && (t >= n ? e.firstSuspendedTime = e.lastSuspendedTime = e.nextKnownPendingLevel = 0 : t >= e.lastSuspendedTime && (e.lastSuspendedTime = t + 1), t > e.nextKnownPendingLevel && (e.nextKnownPendingLevel = t));
  }
  function Xl(e, t) {
    var n = e.lastExpiredTime;
    (0 === n || n > t) && (e.lastExpiredTime = t);
  }
  function Zl(e) {
    var t = e._reactInternalFiber;
    if (void 0 === t) {
      if ("function" == typeof e.render) throw Error(f(188));
      throw Error(f(268, Object.keys(e)));
    }
    return null === (e = U(t)) ? null : e.stateNode;
  }
  function ei(e, t) {
    null !== (e = e.memoizedState) && null !== e.dehydrated && e.retryTime < t && (e.retryTime = t);
  }
  function ti(e, t) {
    ei(e, t), (e = e.alternate) && ei(e, t);
  }
  var ni = {
    createContainer: function (e, t, n) {
      return e = new Kl(e, t, n), t = Bl(3, null, null, 2 === t ? 7 : 1 === t ? 3 : 0), e.current = t, t.stateNode = e;
    },
    updateContainer: function (e, t, n, r) {
      var l = t.current,
        i = cl(),
        a = Pt.suspense;
      i = sl(i, l, a);
      e: if (n) {
        t: {
          if (P(n = n._reactInternalFiber) !== n || 1 !== n.tag) throw Error(f(170));
          var u = n;
          do {
            switch (u.tag) {
              case 3:
                u = u.stateNode.context;
                break t;
              case 1:
                if (xe(u.type)) {
                  u = u.stateNode.__reactInternalMemoizedMergedChildContext;
                  break t;
                }
            }
            u = u.return;
          } while (null !== u);
          throw Error(f(171));
        }
        if (1 === n.tag) {
          var o = n.type;
          if (xe(o)) {
            n = Ce(n, o, u);
            break e;
          }
        }
        n = u;
      } else n = ge;
      return null === t.context ? t.context = n : t.pendingContext = n, (t = vt(i, a)).payload = {
        element: e
      }, null !== (r = void 0 === r ? null : r) && (t.callback = r), xt(l, t), dl(l, i), i;
    },
    batchedEventUpdates: function (e, t) {
      var n = Or;
      Or |= 2;
      try {
        return e(t);
      } finally {
        (Or = n) === Nr && Xe();
      }
    },
    batchedUpdates: function (e, t) {
      var n = Or;
      Or |= 1;
      try {
        return e(t);
      } finally {
        (Or = n) === Nr && Xe();
      }
    },
    unbatchedUpdates: function (e, t) {
      var n = Or;
      Or &= -2, Or |= Ur;
      try {
        return e(t);
      } finally {
        (Or = n) === Nr && Xe();
      }
    },
    deferredUpdates: function (e) {
      return Ge(97, e);
    },
    syncUpdates: function (e, t, n, r) {
      return Ge(99, e.bind(null, t, n, r));
    },
    discreteUpdates: function (e, t, n, r) {
      var l = Or;
      Or |= 4;
      try {
        return Ge(98, e.bind(null, t, n, r));
      } finally {
        (Or = l) === Nr && Xe();
      }
    },
    flushDiscreteUpdates: function () {
      (Or & (1 | Rr | Ir)) === Nr && (function () {
        if (null !== al) {
          var e = al;
          al = null, e.forEach(function (e, t) {
            Xl(t, e), hl(t);
          }), Xe();
        }
      }(), Rl());
    },
    flushControlled: function (e) {
      var t = Or;
      Or |= 1;
      try {
        Ge(99, e);
      } finally {
        (Or = t) === Nr && Xe();
      }
    },
    flushSync: yl,
    flushPassiveEffects: Rl,
    IsThisRendererActing: {
      current: !1
    },
    getPublicRootInstance: function (e) {
      return (e = e.current).child ? 5 === e.child.tag ? R(e.child.stateNode) : e.child.stateNode : null;
    },
    attemptSynchronousHydration: function (e) {
      switch (e.tag) {
        case 3:
          var t = e.stateNode;
          t.hydrate && function (e, t) {
            Xl(e, t), hl(e), (Or & (Rr | Ir)) === Nr && Xe();
          }(t, t.firstPendingTime);
          break;
        case 13:
          yl(function () {
            return dl(e, 1073741823);
          }), t = tt(cl(), 150, 100), ti(e, t);
      }
    },
    attemptUserBlockingHydration: function (e) {
      if (13 === e.tag) {
        var t = tt(cl(), 150, 100);
        dl(e, t), ti(e, t);
      }
    },
    attemptContinuousHydration: function (e) {
      if (13 === e.tag) {
        cl();
        var t = et++;
        dl(e, t), ti(e, t);
      }
    },
    attemptHydrationAtCurrentPriority: function (e) {
      if (13 === e.tag) {
        var t = cl();
        dl(e, t = sl(t, e, null)), ti(e, t);
      }
    },
    findHostInstance: Zl,
    findHostInstanceWithWarning: function (e) {
      return Zl(e);
    },
    findHostInstanceWithNoPortals: function (e) {
      return null === (e = function (e) {
        if (!(e = N(e))) return null;
        for (var t = e;;) {
          if (5 === t.tag || 6 === t.tag) return t;
          if (t.child && 4 !== t.tag) t.child.return = t, t = t.child;else {
            if (t === e) break;
            for (; !t.sibling;) {
              if (!t.return || t.return === e) return null;
              t = t.return;
            }
            t.sibling.return = t.return, t = t.sibling;
          }
        }
        return null;
      }(e)) ? null : 20 === e.tag ? e.stateNode.instance : e.stateNode;
    },
    shouldSuspend: function () {
      return !1;
    },
    injectIntoDevTools: function (e) {
      var t = e.findFiberByHostInstance;
      return function (e) {
        if ("undefined" == typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) return !1;
        var t = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (t.isDisabled || !t.supportsFiber) return !0;
        try {
          var n = t.inject(e);
          Wl = function (e) {
            try {
              t.onCommitFiberRoot(n, e, void 0, 64 == (64 & e.current.effectTag));
            } catch (e) {}
          }, jl = function (e) {
            try {
              t.onCommitFiberUnmount(n, e);
            } catch (e) {}
          };
        } catch (e) {}
        return !0;
      }(l({}, e, {
        overrideHookState: null,
        overrideProps: null,
        setSuspenseHandler: null,
        scheduleUpdate: null,
        currentDispatcherRef: c.ReactCurrentDispatcher,
        findHostInstanceByFiber: function (e) {
          return null === (e = U(e)) ? null : e.stateNode;
        },
        findFiberByHostInstance: function (e) {
          return t ? t(e) : null;
        },
        findHostInstancesForRefresh: null,
        scheduleRefresh: null,
        scheduleRoot: null,
        setRefreshHandler: null,
        getCurrentFiber: null
      }));
    }
  };
  reconciler_23_i.exports = ni.default || ni;
  var ri = reconciler_23_i.exports;
  return reconciler_23_i.exports = n, ri;
};
var reconciler_23_o = reconciler_23_r(reconciler_23_a.exports);
const reconciler_23_f = (e, t) => {
    const n = Object.keys(e),
      r = Object.keys(t);
    if (n.length !== r.length) return !1;
    for (let r = 0; r < n.length; r += 1) {
      const l = n[r];
      if ("render" === l && !e[l] != !t[l]) return !1;
      if ("children" !== l && e[l] !== t[l]) {
        if ("object" == typeof e[l] && "object" == typeof t[l] && reconciler_23_f(e[l], t[l])) continue;
        return !1;
      }
      if ("children" === l && ("string" == typeof e[l] || "string" == typeof t[l])) return e[l] === t[l];
    }
    return !0;
  },
  reconciler_23_c = {},
  reconciler_23_s = ({
    appendChild: e,
    appendChildToContainer: t,
    commitTextUpdate: n,
    commitUpdate: r,
    createInstance: l,
    createTextInstance: i,
    insertBefore: a,
    removeChild: u,
    removeChildFromContainer: s,
    resetAfterCommit: d
  }) => reconciler_23_o({
    appendChild: e,
    appendChildToContainer: t,
    appendInitialChild: e,
    createInstance: l,
    createTextInstance: i,
    insertBefore: a,
    commitUpdate: r,
    commitTextUpdate: n,
    removeChild: u,
    removeChildFromContainer: s,
    resetAfterCommit: d,
    shouldSetTextContent: () => !1,
    finalizeInitialChildren: () => !1,
    getPublicInstance: e => e,
    getRootHostContext: () => reconciler_23_c,
    getChildHostContext: () => reconciler_23_c,
    prepareForCommit() {},
    clearContainer() {},
    resetTextContent() {},
    prepareUpdate: (e, t, n, r) => !reconciler_23_f(n, r)
  });

;// ./node_modules/@react-pdf/reconciler/lib/index.js




/* eslint-disable import/extensions */
/* eslint-disable import/no-extraneous-dependencies */

const isReact19 = react.version.startsWith('19');
var index = isReact19 ? k : reconciler_23_s;

// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js
var jsx_runtime = __webpack_require__(7671);
;// ./node_modules/@react-pdf/renderer/lib/react-pdf.browser.js











/* eslint-disable import/no-extraneous-dependencies */
/* eslint-disable no-param-reassign */

const createInstance = (type, _ref) => {
  let {
    style,
    children,
    ...props
  } = _ref;
  return {
    type,
    box: {},
    style: style || {},
    props: props || {},
    children: []
  };
};
const createTextInstance = text => ({
  type: 'TEXT_INSTANCE',
  value: text
});
const appendChild = (parent, child) => {
  const isParentText = parent.type === 'TEXT' || parent.type === 'LINK' || parent.type === 'TSPAN' || parent.type === 'NOTE';
  const isChildTextInstance = child.type === 'TEXT_INSTANCE';
  const isOrphanTextInstance = isChildTextInstance && !isParentText;

  // Ignore orphan text instances.
  // Caused by cases such as <>{name && <Text>{name}</Text>}</>
  if (isOrphanTextInstance) {
    console.warn(`Invalid '${child.value}' string child outside <Text> component`);
    return;
  }
  parent.children.push(child);
};
const appendChildToContainer = (parentInstance, child) => {
  if (parentInstance.type === 'ROOT') {
    parentInstance.document = child;
  } else {
    appendChild(parentInstance, child);
  }
};
const insertBefore = (parentInstance, child, beforeChild) => {
  var _parentInstance$child;
  const index = (_parentInstance$child = parentInstance.children) === null || _parentInstance$child === void 0 ? void 0 : _parentInstance$child.indexOf(beforeChild);
  if (index === undefined) return;
  if (index !== -1 && child) parentInstance.children.splice(index, 0, child);
};
const removeChild = (parentInstance, child) => {
  var _parentInstance$child2;
  const index = (_parentInstance$child2 = parentInstance.children) === null || _parentInstance$child2 === void 0 ? void 0 : _parentInstance$child2.indexOf(child);
  if (index === undefined) return;
  if (index !== -1) parentInstance.children.splice(index, 1);
};
const removeChildFromContainer = (parentInstance, child) => {
  var _parentInstance$child3;
  const index = (_parentInstance$child3 = parentInstance.children) === null || _parentInstance$child3 === void 0 ? void 0 : _parentInstance$child3.indexOf(child);
  if (index === undefined) return;
  if (index !== -1) parentInstance.children.splice(index, 1);
};
const commitTextUpdate = (textInstance, oldText, newText) => {
  textInstance.value = newText;
};
const commitUpdate = (instance, updatePayload, type, oldProps, newProps) => {
  const {
    style,
    ...props
  } = newProps;
  instance.props = props;
  instance.style = style;
};
const createRenderer = _ref2 => {
  let {
    onChange = () => {}
  } = _ref2;
  return index({
    appendChild,
    appendChildToContainer,
    commitTextUpdate,
    commitUpdate,
    createInstance,
    createTextInstance,
    insertBefore,
    removeChild,
    removeChildFromContainer,
    resetAfterCommit: onChange
  });
};
var react_pdf_browser_name = "@react-pdf/renderer";
var version$1 = "4.1.5";
var license = "MIT";
var description = "Create PDF files on the browser and server";
var author = "Diego Muracciole <diegomuracciole@gmail.com>";
var homepage = "https://github.com/diegomura/react-pdf#readme";
var type = "module";
var main = "./lib/react-pdf.js";
var react_pdf_browser_browser = {
  "./lib/react-pdf.js": "./lib/react-pdf.browser.js"
};
var repository = {
  type: "git",
  url: "https://github.com/diegomura/react-pdf.git",
  directory: "packages/renderer"
};
var scripts = {
  build: "rimraf ./lib && rollup -c",
  watch: "rimraf ./lib && rollup -c -w",
  size: "size-limit",
  lint: "eslint src",
  test: "vitest && vitest --config vitest.browser.config.js"
};
var dependencies = {
  "@babel/runtime": "^7.20.13",
  "@react-pdf/font": "^3.0.1",
  "@react-pdf/layout": "^4.1.3",
  "@react-pdf/pdfkit": "^4.0.0",
  "@react-pdf/primitives": "^4.0.0",
  "@react-pdf/reconciler": "^1.1.3",
  "@react-pdf/render": "^4.0.2",
  "@react-pdf/types": "^2.7.0",
  events: "^3.3.0",
  "object-assign": "^4.1.1",
  "prop-types": "^15.6.2",
  queue: "^6.0.1"
};
var peerDependencies = {
  react: "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0"
};
var files = ["lib", "index.d.ts"];
var collective = {
  type: "opencollective",
  url: "https://opencollective.com/react-pdf",
  logo: "https://opencollective.com/opencollective/logo.txt"
};
var devDependencies = {
  "@size-limit/preset-big-lib": "^11.0.1",
  assert: "^2.0.0",
  "browserify-zlib": "^0.2.0",
  buffer: "^6.0.3",
  process: "^0.11.10",
  "size-limit": "^11.0.1",
  util: "^0.12.4"
};
var packageJson = {
  name: react_pdf_browser_name,
  version: version$1,
  license: license,
  description: description,
  author: author,
  homepage: homepage,
  type: type,
  main: main,
  browser: react_pdf_browser_browser,
  repository: repository,
  scripts: scripts,
  dependencies: dependencies,
  peerDependencies: peerDependencies,
  "lint-staged": {
    "*.js": ["yarn lint", "prettier --write"]
  },
  files: files,
  collective: collective,
  devDependencies: devDependencies
};

/* eslint-disable import/prefer-default-export */

const omitNils = object => Object.fromEntries(Object.entries(object).filter(_ref => {
  let [, value] = _ref;
  return value !== undefined;
}));
const {
  version: react_pdf_browser_version
} = packageJson;
const fontStore = new FontStore();

// We must keep a single renderer instance, otherwise React will complain
let renderer;

// The pdf instance acts as an event emitter for DOM usage.
// We only want to trigger an update when PDF content changes
const events = {};
const pdf = initialValue => {
  const onChange = () => {
    var _events$change;
    const listeners = ((_events$change = events.change) === null || _events$change === void 0 ? void 0 : _events$change.slice()) || [];
    for (let i = 0; i < listeners.length; i += 1) listeners[i]();
  };
  const container = {
    type: 'ROOT',
    document: null
  };
  renderer = renderer || createRenderer({
    onChange
  });
  const mountNode = renderer.createContainer(container);
  const updateContainer = (doc, callback) => {
    renderer.updateContainer(doc, mountNode, null, callback);
  };
  if (initialValue) updateContainer(initialValue);
  const render = async function (compress) {
    if (compress === void 0) {
      compress = true;
    }
    const props = container.document.props || {};
    const {
      pdfVersion,
      language,
      pageLayout,
      pageMode,
      title,
      author,
      subject,
      keyboards,
      creator = 'react-pdf',
      producer = 'react-pdf',
      creationDate = new Date(),
      modificationDate
    } = props;
    const ctx = new PDFDocument({
      compress,
      pdfVersion,
      lang: language,
      displayTitle: true,
      autoFirstPage: false,
      pageLayout,
      pageMode,
      info: omitNils({
        Title: title,
        Author: author,
        Subject: subject,
        Keywords: keyboards,
        Creator: creator,
        Producer: producer,
        CreationDate: creationDate,
        ModificationDate: modificationDate
      })
    });
    const layout = await lib_layout(container.document, fontStore);
    const fileStream = lib_render(ctx, layout);
    return {
      layout,
      fileStream
    };
  };
  const callOnRender = function (params) {
    if (params === void 0) {
      params = {};
    }
    if (container.document.props.onRender) {
      container.document.props.onRender(params);
    }
  };
  const toBlob = async () => {
    const chunks = [];
    const {
      layout: _INTERNAL__LAYOUT__DATA_,
      fileStream: instance
    } = await render();
    return new Promise((resolve, reject) => {
      instance.on('data', chunk => {
        chunks.push(chunk instanceof Uint8Array ? chunk : new Uint8Array(chunk));
      });
      instance.on('end', () => {
        try {
          const blob = new Blob(chunks, {
            type: 'application/pdf'
          });
          callOnRender({
            blob,
            _INTERNAL__LAYOUT__DATA_
          });
          resolve(blob);
        } catch (error) {
          reject(error);
        }
      });
    });
  };

  // TODO: rename this method to `toStream` in next major release, because it return stream not a buffer
  const toBuffer = async () => {
    const {
      layout: _INTERNAL__LAYOUT__DATA_,
      fileStream
    } = await render();
    callOnRender({
      _INTERNAL__LAYOUT__DATA_
    });
    return fileStream;
  };

  /*
   * TODO: remove this method in next major release. it is buggy
   * see
   * - https://github.com/diegomura/react-pdf/issues/2112
   * - https://github.com/diegomura/react-pdf/issues/2095
   */
  const toString = async () => {
    if (false) {}
    let result = '';
    const {
      fileStream: instance
    } = await render(false); // For some reason, when rendering to string if compress=true the document is blank

    return new Promise((resolve, reject) => {
      try {
        instance.on('data', buffer => {
          result += buffer;
        });
        instance.on('end', () => {
          callOnRender();
          resolve(result);
        });
      } catch (error) {
        reject(error);
      }
    });
  };
  const on = (event, listener) => {
    if (!events[event]) events[event] = [];
    events[event].push(listener);
  };
  const removeListener = (event, listener) => {
    if (!events[event]) return;
    const idx = events[event].indexOf(listener);
    if (idx > -1) events[event].splice(idx, 1);
  };
  return {
    on,
    container,
    toBlob,
    toBuffer,
    toString,
    removeListener,
    updateContainer
  };
};
const react_pdf_browser_Font = fontStore;
const StyleSheet = {
  create: s => s
};

/* eslint-disable no-console */

/**
 * PDF hook
 *
 * @param {Object} [options] hook options
 * @returns {[Object, Function]} pdf state and update function
 */
const usePDF = function (_temp) {
  let {
    document
  } = _temp === void 0 ? {} : _temp;
  const pdfInstance = (0,react.useRef)(null);
  const [state, setState] = (0,react.useState)({
    url: null,
    blob: null,
    error: null,
    loading: !!document
  });

  // Setup rendering queue
  (0,react.useEffect)(() => {
    const renderQueue = queue({
      autostart: true,
      concurrency: 1
    });
    const queueDocumentRender = () => {
      setState(prev => ({
        ...prev,
        loading: true
      }));
      renderQueue.splice(0, renderQueue.length, () => state.error ? Promise.resolve() : pdfInstance.current.toBlob());
    };
    const onRenderFailed = error => {
      console.error(error);
      setState(prev => ({
        ...prev,
        loading: false,
        error
      }));
    };
    const onRenderSuccessful = blob => {
      setState({
        blob,
        error: null,
        loading: false,
        url: URL.createObjectURL(blob)
      });
    };
    pdfInstance.current = pdf();
    pdfInstance.current.on('change', queueDocumentRender);
    if (document) {
      pdfInstance.current.updateContainer(document);
    }
    renderQueue.on('error', onRenderFailed);
    renderQueue.on('success', onRenderSuccessful);
    return () => {
      renderQueue.end();
      pdfInstance.current.removeListener('change', queueDocumentRender);
    };
  }, []);

  // Revoke old unused url instances
  (0,react.useEffect)(() => {
    return () => {
      if (state.url) {
        URL.revokeObjectURL(state.url);
      }
    };
  }, [state.url]);
  const update = (0,react.useCallback)(newDoc => {
    pdfInstance.current.updateContainer(newDoc);
  }, []);
  return [state, update];
};

/* eslint-disable no-console */
/* eslint-disable react/jsx-props-no-spreading */

const PDFViewer = _ref => {
  let {
    title,
    style,
    className,
    children,
    innerRef,
    showToolbar = true,
    ...props
  } = _ref;
  const [instance, updateInstance] = usePDF();
  (0,react.useEffect)(() => updateInstance(children), [children]);
  const src = instance.url ? `${instance.url}#toolbar=${showToolbar ? 1 : 0}` : null;
  return /*#__PURE__*/(0,jsx_runtime.jsx)("iframe", {
    src: src,
    title: title,
    ref: innerRef,
    style: style,
    className: className,
    ...props
  });
};

/* eslint-disable no-console */

const BlobProvider = _ref => {
  let {
    document: doc,
    children
  } = _ref;
  const [instance, updateInstance] = usePDF();
  (0,react.useEffect)(() => updateInstance(doc), [doc]);
  if (!doc) {
    console.warn('You should pass a valid document to BlobProvider');
    return null;
  }
  return children(instance);
};

/* eslint-disable no-console */

const PDFDownloadLink = _ref => {
  let {
    fileName = 'document.pdf',
    document: doc,
    children,
    onClick,
    href: _filteredOutHref,
    ...rest
  } = _ref;
  const [instance, updateInstance] = usePDF();
  (0,react.useEffect)(() => updateInstance(doc), [doc]);
  if (!doc) {
    console.warn('You should pass a valid document to PDFDownloadLink');
    return null;
  }
  const handleDownloadIE = () => {
    if (instance && window.navigator.msSaveBlob) {
      // IE
      window.navigator.msSaveBlob(instance.blob, fileName);
    }
  };
  const handleClick = event => {
    handleDownloadIE();
    if (typeof onClick === 'function') onClick(event, instance);
  };
  return /*#__PURE__*/(0,jsx_runtime.jsx)("a", {
    href: instance.url,
    download: fileName,
    onClick: handleClick,
    ...rest,
    children: typeof children === 'function' ? children(instance) : children
  });
};
const throwEnvironmentError = name => {
  throw new Error(`${name} is a Node specific API. You're either using this method in a browser, or your bundler is not loading react-pdf from the appropriate web build.`);
};
const renderToStream = () => {
  throwEnvironmentError('renderToStream');
};
const renderToBuffer = () => {
  throwEnvironmentError('renderToBuffer');
};
const renderToString = () => {
  throwEnvironmentError('renderToString');
};
const renderToFile = () => {
  throwEnvironmentError('renderToFile');
};
const render = () => {
  throwEnvironmentError('render');
};

// TODO: remove this default export in next major release because it breaks tree-shacking
var react_pdf_browser_index = {
  pdf,
  usePDF,
  Font: react_pdf_browser_Font,
  version: react_pdf_browser_version,
  StyleSheet,
  PDFViewer,
  BlobProvider,
  PDFDownloadLink,
  renderToStream,
  renderToString,
  renderToFile,
  render,
  ...src_namespaceObject
};


/***/ })

}]);